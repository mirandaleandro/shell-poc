webpackJsonp([0],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path="./typings/index.d.ts" />
	var crmModule = __webpack_require__(1);
	var router = __webpack_require__(716);
	var appSettings = __webpack_require__(759);
	var appConfig = __webpack_require__(10);
	var en_US = __webpack_require__(760);
	var isMockMode = function () {
	    var vars = window.location.search.substring(1).split('&');
	    for (var i = 0; i < vars.length; i++) {
	        var pair = vars[i].split('=');
	        if (decodeURIComponent(pair[0]) == 'mock') {
	            return (pair.length > 1) ? decodeURIComponent(pair[1]) : true;
	        }
	    }
	};
	angular.module(appConfig.name, [
	    crmModule.name,
	    'common',
	    'data',
	    'mock.data',
	    'web.messageBus',
	    'ui.router',
	    router.name,
	    'pascalprecht.translate',
	    'infinite-scroll',
	    'ngSanitize',
	    'ngCookies',
	    'ngAnimate',
	    'ngMaterial',
	    'ui.mask',
	    'ngMaterial',
	    'tmh.dynamicLocale',
	    'nsPopover',
	    'angularMoment',
	    'ui.validate',
	    'uiSwitch'
	])
	    .config(['$compileProvider', function ($compileProvider) {
	        $compileProvider.debugInfoEnabled(appSettings.debugInfoEnabled);
	    }])
	    .config((['$translateProvider', function ($translateProvider) {
	        // configure translations
	        $translateProvider.translations('en-US', __webpack_require__(760));
	        $translateProvider.translations('en-AU', __webpack_require__(761));
	        var navigator = window.navigator;
	        $translateProvider.determinePreferredLanguage(function () {
	            var language = navigator.languages ? navigator.languages[0] : (navigator.language || navigator.userLanguage);
	            return language;
	        });
	        $translateProvider.fallbackLanguage('en-US');
	        $translateProvider.useSanitizeValueStrategy(null);
	    }]))
	    .factory("$exceptionHandler", ['$injector', function ($injector) {
	        return function (exception, cause) {
	            if (!isMockMode()) {
	                try {
	                    var loggingApiService = $injector.get("LoggingApiService");
	                    var eventProperties;
	                    if (typeof exception === 'string') {
	                        eventProperties = {
	                            message: exception
	                        };
	                    }
	                    else {
	                        exception.message += ' (caused by "' + cause + '")';
	                        eventProperties = {
	                            message: exception.message,
	                            stackTrace: exception.stack
	                        };
	                    }
	                    loggingApiService.post(eventProperties);
	                    if (console && console.error) {
	                        console.error(eventProperties.message);
	                        console.error(eventProperties.stackTrace);
	                    }
	                }
	                catch (exception) {
	                }
	            }
	            else {
	                console.error(exception.message);
	                console.error(exception.stackTrace);
	            }
	        };
	    }])
	    .config(['tmhDynamicLocaleProvider', function (tmhDynamicLocaleProvider) {
	        tmhDynamicLocaleProvider.localeLocationPattern('node_modules/angular-i18n/angular-locale_{{locale}}.js');
	    }])
	    .config(['AppSettingsProvider', function (appSettingsProvider) {
	        appSettingsProvider.set('proxyUrl', appSettings.proxyUrl);
	        appSettingsProvider.set('clickToCallUrl', appSettings.clickToCallUrl);
	        appSettingsProvider.set('platformApiUrl', appSettings.platformApiUrl);
	        appSettingsProvider.set('crmUrl', appSettings.crmUrl);
	        appSettingsProvider.set('globalUrl', appSettings.globalUrl);
	        appSettingsProvider.set('globalApiUrl', appSettings.globalApiUrl);
	        appSettingsProvider.set('requiredPermissions', appConfig.requiredPermissions);
	        appSettingsProvider.set('requiredRefDefs', appConfig.requiredRefDefs);
	    }])
	    .config(['$sceDelegateProvider', function ($sceDelegateProvider) {
	        $sceDelegateProvider.resourceUrlWhitelist([
	            'self',
	            'https://*.dealersocket.com/**',
	            'http://*.dealersocket.com/**',
	            'https://*.dealersocket.engieering/**',
	            'http://*.dealersocket.engieering/**'
	        ]);
	    }])
	    .config(['uibDatepickerConfig', 'uibDatepickerPopupConfig', function (uibDatepickerConfig, uibDatepickerPopupConfig) {
	        // Global Configuration for the UI Bootstrap Datepicker. These are our base config, and can be overwritten from the directive.
	        uibDatepickerConfig.datepickerMode = 'day';
	        uibDatepickerConfig.maxMode = 'day';
	        uibDatepickerConfig.minMode = 'day';
	        uibDatepickerConfig.formatDay = 'd';
	        uibDatepickerConfig.formatDayHeader = 'EEE';
	        uibDatepickerConfig.formatDayTitle = 'MMM yyyy';
	        uibDatepickerConfig.showWeeks = false;
	        uibDatepickerPopupConfig.appendToBody = false;
	        uibDatepickerPopupConfig.closeOnDateSelection = true;
	        uibDatepickerPopupConfig.altInputFormats = ['M!/d!/yyyy', 'M!-d!-yyyy', 'M!.d!.yyyy'];
	        uibDatepickerPopupConfig.datepickerPopup = 'M/d/yyyy'; // TODO: this needs to be based on locale info
	        uibDatepickerPopupConfig.showButtonBar = false;
	        uibDatepickerPopupConfig.datepickerTemplateUrl = 'app/ui/datepicker/template.html';
	        uibDatepickerPopupConfig.placement = 'auto bottom-left';
	    }])
	    .config(['$provide', '$mdThemingProvider', function ($provide, $mdThemingProvider) {
	        //Theming in angular puts many inline 'md-theme-style' tags into head which leads to poor performance on IE
	        //This config block disables this behavior, themes are instead put into a premade stylesheet
	        //To generate the theme stylesheet, do following:
	        //Comment out following lines that disable theming
	        //Open the site, and copy this like into the console
	        //copy([].slice.call(document.styleSheets).map(e=>e.ownerNode).filter(e => e.attributes && e.attributes[0] && e.attributes[0].nodeName==='md-theme-style').map(e => e.textContent).join("\n"))
	        //theme stylesheet will be placed into your clipboard buffer
	        //More reading on this issue:
	        //https://github.com/angular/material/issues/8218
	        $provide.constant('$MD_THEME_CSS', '');
	        $mdThemingProvider.disableTheming();
	    }])
	    .run(['$rootScope', function ($rootScope) {
	        // we can stop using these
	        $rootScope.webCrm = '';
	        $rootScope.webCommon = 'node_modules/web.common';
	        // so web.common can send messages for any app
	        $rootScope.appId = appConfig.name;
	    }])
	    .run(['$rootScope', 'messageBus', function ($rootScope, messageBus) {
	        // TODO: implement shellUrl and remove wildcard
	        // messageBus.domains = [appSettings.shellUrl];
	        messageBus.domains = ['*'];
	        $rootScope.$on('$locationChangeSuccess', function () {
	            messageBus.send(top, {
	                from: 'crm',
	                to: 'shell',
	                task: 'appHashChanged',
	                data: window.location.hash
	            });
	        });
	        messageBus.send(top, {
	            from: 'crm',
	            to: 'shell',
	            task: 'appLoaded'
	        });
	    }]);
	__webpack_require__(762);
	//angular.element(document).ready(function () {
	//    angular.bootstrap(document, [appConfig.name]);
	//});


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var module_1 = __webpack_require__(8);
	var module_2 = __webpack_require__(11);
	var ContactModule = __webpack_require__(13);
	var CustomerModule = __webpack_require__(178);
	var ServicesModule = __webpack_require__(195);
	var UiModule = __webpack_require__(245);
	var Error = __webpack_require__(390);
	var SalesOpportunityModule = __webpack_require__(393);
	var LoyaltyModule = __webpack_require__(473);
	var ConnectionsModule = __webpack_require__(496);
	var VehicleOfInterest = __webpack_require__(505);
	var EmployeeDashboardModule = __webpack_require__(525);
	var ActivitiesModule = __webpack_require__(557);
	var WorkNoteModule = __webpack_require__(639);
	var csiModule = __webpack_require__(649);
	var chromeVehicleSelectorModule = __webpack_require__(667);
	var AuditLogsModule = __webpack_require__(674);
	var ConvertOpportunityTypeModule = __webpack_require__(678);
	var UtilModule = __webpack_require__(680);
	var serviceModule = __webpack_require__(682);
	var SurveysModule = __webpack_require__(690);
	var module_3 = __webpack_require__(692);
	var module_4 = __webpack_require__(695);
	module.exports = angular.module("crm.crm", [
	    ContactModule.name,
	    CustomerModule.name,
	    ServicesModule.name,
	    UiModule.name,
	    module_1.CrmModule.name,
	    Error.name,
	    SalesOpportunityModule.name,
	    LoyaltyModule.name,
	    ConnectionsModule.name,
	    VehicleOfInterest.name,
	    EmployeeDashboardModule.name,
	    ActivitiesModule.name,
	    WorkNoteModule.name,
	    csiModule.name,
	    chromeVehicleSelectorModule.name,
	    AuditLogsModule.name,
	    ConvertOpportunityTypeModule.name,
	    UtilModule.name,
	    module_2.ErrorPageModule.name,
	    serviceModule.name,
	    module_3.AdminModule.name,
	    module_4.MarketingToolsModule.name,
	    SurveysModule.name
	]);


/***/ },
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var crmComponent_1 = __webpack_require__(9);
	exports.CrmModule = angular.module('crm.component', [])
	    .component('crm', new crmComponent_1.CrmComponent());


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../typings/index.d.ts"/>
	var appConfigJson = __webpack_require__(10);
	var CrmComponent = (function () {
	    function CrmComponent() {
	        this.bindings = {
	            vehicleOfInterest: '=',
	            topChoice: '=?',
	            options: '='
	        };
	        this.controller = CrmController;
	        this.controllerAs = 'ctrl';
	        this.template = "<div ui-view class=\"app-content-body ws-flex-columns ws-flex-fill-even\" ng-class=\"{'ws-low-opacity': ctrl.loading, 'ws-visible': !ctrl.loading}\"></div>";
	    }
	    return CrmComponent;
	}());
	exports.CrmComponent = CrmComponent;
	var CrmController = (function () {
	    function CrmController($scope, $q, $timeout, $translate, DataApiSettings, messageBus, ServiceWrapper, $state, crmBrowserLocaleService, tmhDynamicLocale, eventManagerService, CrmConstants, AuthenticationService, AppSettings, permissionService, refDefService, UserFactory, ContactService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$q = $q;
	        this.$timeout = $timeout;
	        this.$translate = $translate;
	        this.DataApiSettings = DataApiSettings;
	        this.messageBus = messageBus;
	        this.ServiceWrapper = ServiceWrapper;
	        this.$state = $state;
	        this.crmBrowserLocaleService = crmBrowserLocaleService;
	        this.tmhDynamicLocale = tmhDynamicLocale;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.AuthenticationService = AuthenticationService;
	        this.AppSettings = AppSettings;
	        this.permissionService = permissionService;
	        this.refDefService = refDefService;
	        this.UserFactory = UserFactory;
	        this.ContactService = ContactService;
	        this.initialized = false;
	        this.loading = false;
	        this.onLastContactSuccess = function (data) {
	            if (!data || !data.id || data.id === "0") {
	                _this.$state.go('add.individual', {});
	            }
	            else {
	                _this.$state.go('view.contact', { 'contactId': data.id });
	            }
	            _this.loading = false;
	        };
	        messageBus.listen({
	            from: 'shell',
	            to: 'crm',
	            task: 'init'
	        }, function (msg, respond) { return _this.shellInit(msg, respond); });
	        messageBus.listen({
	            from: 'shell',
	            to: 'crm',
	            task: 'sessionUpdated'
	        }, function (msg) { return _this.sessionUpdated(msg.data); });
	        messageBus.listen({
	            from: 'shell',
	            to: 'crm',
	            task: 'selectedDealershipChanged'
	        }, function (msg) { return _this.onDealershipChange(msg.data.dealershipId, msg.data.releasePool); });
	        messageBus.listen({
	            from: 'shell',
	            to: 'crm',
	            task: 'canDeactivate'
	        }, function (msg, respond) { return respond(top, true); });
	        messageBus.listen({
	            from: '*',
	            to: 'crm',
	            task: 'viewContact'
	        }, function (msg) { return _this.$state.go('view.contact', { 'contactId': msg.data }); });
	        messageBus.listen({
	            from: '*',
	            to: 'crm',
	            task: 'viewSalesOpportunity'
	        }, function (msg) { return _this.$state.go('sales.view', {
	            'contactId': msg.data.contactId,
	            'salesOpportunityId': msg.data.salesOpportunityId
	        }); });
	        messageBus.listen({
	            from: '*',
	            to: 'crm',
	            task: 'newSalesOpportunity'
	        }, function (msg) { return _this.$state.go('sales.add', { 'contactId': msg.data.contactId }); });
	        messageBus.listen({
	            from: '*',
	            to: 'crm',
	            task: 'addIndividual'
	        }, function (msg) {
	            _this.$state.go('add.individual', { contact: msg.data });
	            _this.eventManagerService.publish(_this.CrmConstants.CONTACT.PREFILL_LOADED, msg.data);
	        });
	        messageBus.listen({
	            from: '*',
	            to: 'crm',
	            task: 'addOrganization'
	        }, function (msg) {
	            _this.$state.go('add.company', { contact: msg.data });
	            _this.eventManagerService.publish(_this.CrmConstants.CONTACT.PREFILL_LOADED, msg.data);
	        });
	    }
	    CrmController.prototype.shellInit = function (msg, respond) {
	        var _this = this;
	        this.getAppConfig()
	            .then(function (appConfig) {
	            _this.sessionUpdated(msg.data.authSession);
	            _this.dealershipChanged(msg.data.selectedSiteId, msg.data.releasePool);
	            return _this.$q.all([_this.$q.when(appConfig), _this.wipeServiceCaches()]);
	        })
	            .then(function (resolutions) {
	            var appConfig = resolutions[0];
	            var filteredNavItems = _this.filterNavItems(appConfig.desk.navItems);
	            return _this.$q.all([_this.$q.when(appConfig), _this.$q.when(filteredNavItems)]);
	        })
	            .then(function (resolutions) {
	            var appConfig = resolutions[0];
	            var filteredNavItems = resolutions[1];
	            appConfig.desk.navItems = filteredNavItems;
	            _this.$timeout(function () {
	                // load any necessary initialization data here!
	                _this.initialized = true;
	                respond(top, appConfig);
	                var forwardTasks = [{
	                        to: 'crm',
	                        task: 'addIndividual'
	                    }, {
	                        to: 'crm',
	                        task: 'addOrganization'
	                    }, {
	                        to: 'crm',
	                        task: 'viewSalesOpportunity'
	                    }];
	                _this.messageBus.send(top, {
	                    from: 'crm',
	                    to: 'shell',
	                    task: 'taskForward',
	                    data: forwardTasks
	                });
	            }, 100);
	            _this.setLocale();
	        });
	    };
	    CrmController.prototype.filterNavItems = function (navItems) {
	        var _this = this;
	        var filteredNavItemsPromises = _.map(navItems, function (navItem) {
	            if (navItem.id === "crm-admin-links") {
	                return _this.permissionService.getPermission("Admin")
	                    .then(function (permission) {
	                    navItem.remove = !permission.view;
	                    return navItem;
	                });
	            }
	            if (navItem.children && navItem.children.length && navItem.children.length > 0) {
	                return _this.filterNavItemChildren(navItem);
	            }
	            else {
	                return _this.$q.when(navItem);
	            }
	        });
	        return this.$q.all(filteredNavItemsPromises).then(function (filteredNavItems) {
	            return _.filter(filteredNavItems, function (navItem) {
	                return !navItem.remove;
	            });
	        });
	    };
	    CrmController.prototype.filterNavItemChildren = function (navItem) {
	        var _this = this;
	        var locale = this.crmBrowserLocaleService.getLocale().toLowerCase();
	        var markedChildrenPromises = _.map(navItem.children, function (child) {
	            if (child.id === 'text-queue-link' && locale !== "en-au" && locale !== "en-nz") {
	                child.remove = true;
	                return _this.$q.when(child);
	            }
	            else if (!child.permission) {
	                child.remove = false;
	                return _this.$q.when(child);
	            }
	            else {
	                return _this.permissionService.getPermission(child.permission)
	                    .then(function (childPermission) {
	                    child.remove = !childPermission.view;
	                    return _this.$q.when(child);
	                });
	            }
	        });
	        return this.$q.all(markedChildrenPromises).then(function (children) {
	            var filteredChildren = _.filter(children, function (child) {
	                return !child.remove;
	            });
	            navItem.children = filteredChildren;
	            return navItem;
	        });
	    };
	    CrmController.prototype.setLocale = function () {
	        this.tmhDynamicLocale.set(this.crmBrowserLocaleService.getLocale().toLowerCase());
	    };
	    CrmController.prototype.getAppConfig = function () {
	        var _this = this;
	        var appConfig;
	        try {
	            appConfig = appConfigJson.config;
	        }
	        catch (e) {
	        }
	        var promises = [];
	        if (!appConfig || !appConfig.desk || !angular.isArray(appConfig.desk.navItems)) {
	            console.warn('could not parse leftNavItems to send to shell!');
	            return this.$q.reject();
	        }
	        appConfig.desk.navItems.push({
	            "sortPriority": 10,
	            "label": "crm.leftNav.EMAIL_SETUP",
	            "id": "user-nav-email-setup",
	            "url": this.AppSettings.crmUrl + "/email/admin_email_template.aspx?callFrom=Admin",
	            "location": "user",
	            "target": "Email Setup"
	        });
	        appConfig.desk.navItems.push({
	            "sortPriority": 20,
	            "label": "crm.leftNav.PHONE_SET",
	            "id": "user-nav-phone-setup",
	            "url": this.AppSettings.crmUrl + "/SelectPhoneExtension.aspx",
	            "location": "user",
	            "target": "Phone Set"
	        });
	        appConfig.desk.navItems.push({
	            "sortPriority": 700,
	            "icon": "fa-link",
	            "label": "crm.leftNav.MY_LINKS",
	            "id": "left-nav-my-links",
	            "children": [
	                {
	                    "label": "crm.leftNav.CLASSIC",
	                    "target": "classic",
	                    "url": this.AppSettings.crmUrl + "/index.aspx"
	                }
	            ],
	            "location": "left"
	        });
	        angular.forEach(appConfig.desk.navItems, function (leftNavItem) {
	            if (leftNavItem && leftNavItem.label) {
	                promises.push(_this.$translate(leftNavItem.label).then(function (translatedText) {
	                    leftNavItem.label = translatedText;
	                }));
	            }
	            if (leftNavItem && angular.isArray(leftNavItem.children)) {
	                angular.forEach(leftNavItem.children, function (leftNavChildItem) {
	                    if (leftNavChildItem && leftNavChildItem.label) {
	                        promises.push(_this.$translate(leftNavChildItem.label).then(function (translatedText) {
	                            leftNavChildItem.label = translatedText;
	                        }));
	                    }
	                });
	            }
	        });
	        return this.$q.all(promises).then(function () {
	            return appConfig;
	        });
	    };
	    CrmController.prototype.sessionUpdated = function (session) {
	        if (session &&
	            session.identity &&
	            session.identity.user) {
	            session.identity.user = this.UserFactory.createFromDeserializedUser(session.identity.user);
	        }
	        this.AuthenticationService.authSession = session;
	    };
	    CrmController.prototype.dealershipChanged = function (siteId, releasePool) {
	        this.loading = true;
	        this.DataApiSettings.setSiteId(siteId);
	        this.DataApiSettings.setReleasePool(releasePool);
	        this.ContactService.getLastContact().then(this.onLastContactSuccess);
	        this.eventManagerService.publish(this.CrmConstants.DEALERSHIP_CHANGED);
	    };
	    CrmController.prototype.onDealershipChange = function (siteId, releasePool) {
	        var _this = this;
	        this.getAppConfig()
	            .then(function (appConfig) {
	            _this.dealershipChanged(siteId, releasePool);
	            return _this.$q.all([_this.$q.when(appConfig), _this.wipeServiceCaches()]);
	        })
	            .then(function (resolutions) {
	            var appConfig = resolutions[0];
	            return _this.$q.all([_this.$q.when(appConfig), _this.filterNavItems(appConfig.desk.navItems)]);
	        })
	            .then(function (resolutions) {
	            var originalAppConfig = resolutions[0];
	            var filteredNavItems = resolutions[1];
	            _(filteredNavItems)
	                .forEach(function (updatedNavItem) {
	                _this.messageBus.send(top, {
	                    from: 'crm',
	                    to: 'shell',
	                    task: 'updateNavItem',
	                    data: updatedNavItem
	                });
	            });
	            var removePermissions = _(originalAppConfig.desk.navItems)
	                .difference(filteredNavItems);
	            console.log(removePermissions);
	            _(originalAppConfig.desk.navItems)
	                .difference(filteredNavItems)
	                .forEach(function (removedNavItem) {
	                _this.messageBus.send(top, {
	                    from: 'crm',
	                    to: 'shell',
	                    task: 'removeNavItem',
	                    data: removedNavItem.id
	                });
	            });
	        });
	    };
	    CrmController.prototype.wipeServiceCaches = function () {
	        var _this = this;
	        var permissionResetPromise = this.permissionService.getPermissions(true);
	        var refDefResetPromise = this.refDefService.getAllRefDefs(true)
	            .then(function (refDefResult1) {
	            return _this.refDefService.getRefDef("sales.status").then(function (refDefResult) {
	                return refDefResult;
	            });
	        });
	        return this.$q.all([permissionResetPromise, refDefResetPromise]);
	    };
	    CrmController.$inject = [
	        '$scope',
	        '$q',
	        '$timeout',
	        '$translate',
	        'DataApiSettings',
	        'messageBus',
	        'ServiceWrapper',
	        '$state',
	        'crmBrowserLocaleService',
	        'tmhDynamicLocale',
	        'eventManagerService',
	        'CrmConstants',
	        'AuthenticationService',
	        'AppSettings',
	        'permissionService',
	        'RefDefService',
	        'UserFactory',
	        'ContactService'
	    ];
	    return CrmController;
	}());


/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = {
		"name": "crm",
		"config": {
			"desk": {
				"navItems": [
					{
						"sortPriority": 300,
						"icon": "fa-user",
						"label": "crm.leftNav.CUSTOMERS",
						"id": "left-nav-sales-opportunity",
						"url": "#/view/contact/",
						"location": "left"
					},
					{
						"sortPriority": 400,
						"icon": "fa-check-circle",
						"label": "crm.leftNav.OPPORTUNITIES_AND_TASKS",
						"id": "left-nav-tasks",
						"url": "#/employee",
						"location": "left"
					},
					{
						"sortPriority": 1500,
						"icon": "fa-cog",
						"label": "crm.leftNav.ADMIN",
						"id": "crm-admin-links",
						"url": "#/admin"
					},
					{
						"sortPriority": 999,
						"icon": "fa-pie-chart",
						"label": "crm.leftNav.MARKETING_TOOLS",
						"id": "crm-marketing-tools-links",
						"children": [
							{
								"label": "crm.leftNav.MARKETING_TOOLS_HELP",
								"url": "#/marketingTools/help",
								"id": "marketing-tools-help-link"
							},
							{
								"label": "crm.leftNav.PRINT_QUEUE",
								"url": "#/marketingTools/printQueue",
								"id": "print-queue-link",
								"permission": "PrintQueue"
							},
							{
								"label": "crm.leftNav.EMAIL_QUEUE",
								"url": "#/marketingTools/emailQueue",
								"id": "email-queue-link",
								"permission": "PrintQueue"
							},
							{
								"label": "crm.leftNav.TEXT_QUEUE",
								"url": "#/marketingTools/textQueue",
								"id": "text-queue-link",
								"permission": "PrintQueue"
							},
							{
								"label": "crm.leftNav.DOCUMENT_MANAGER",
								"url": "#/marketingTools/documentManager",
								"id": "document-manager-link",
								"permission": "DocumentManager"
							},
							{
								"label": "crm.leftNav.CAMPAIGN_MANAGER",
								"url": "#/marketingTools/campaignManager",
								"id": "campaign-manager-link",
								"permission": "CampaignManager"
							},
							{
								"label": "crm.leftNav.BUSINESS_RULE_MANAGER",
								"url": "#/marketingTools/businessRuleManager",
								"id": "business-rule-manager-link",
								"permission": "BusinessRule"
							},
							{
								"label": "crm.leftNav.EMAIL_TEMPLATES",
								"url": "#/marketingTools/emailTemplates",
								"id": "email-templates-link",
								"permission": "EmailTemplate"
							},
							{
								"label": "crm.leftNav.EMAIL_MY_CUSTOMER",
								"url": "#/marketingTools/emailMyCustomer",
								"id": "email-my-customer-link",
								"permission": "EmailMyCustomer"
							},
							{
								"label": "crm.leftNav.LIST_BUILDER",
								"url": "#/marketingTools/listBuilder",
								"id": "list-builder-link",
								"permission": "listBuilder"
							}
						]
					}
				]
			}
		},
		"requiredPermissions": [
			"Admin",
			"Amount",
			"BBAppraisal",
			"CustomerTrade-ACV",
			"CustomerTrade-Payoff",
			"DealTrades",
			"DriversLicense",
			"EventConversion",
			"EventSource",
			"EventTrackingCode",
			"EvtAssignPrimary",
			"EvtBDCAssign",
			"EvtContact",
			"EvtHistory",
			"EvtSalesStatus",
			"InsertRestriction:SalesSource",
			"Localization-NorthAmerica",
			"Localization-SouthwestPacific",
			"KBBAppraisal",
			"NADAAppraisal",
			"NewCreditApplication",
			"RecapDeal",
			"RecapGross",
			"SalesChecklist",
			"SalesSold",
			"SalesSoldChangeStatus",
			"RevenueRadar-AlertDetailsIcon",
			"TradeValuation",
			"VehicleIncentives",
			"Individual",
			"CDAllowDuplicate",
			"Company",
			"InsertRestriction:MultipleEvents",
			"InsertRestriction:NeverContactVia",
			"Sales",
			"Service",
			"Survey",
			"Touches",
			"QA",
			"Vehicle",
			"EvtActivity",
			"InsertRestriction:ActivityStatus",
			"InsertRestriction:ActivityType",
			"listBuilder",
			"EmailMyCustomer",
			"EmailTemplate",
			"BusinessRule",
			"CampaignManager",
			"DocumentManager",
			"PrintQueue"
		],
		"requiredRefDefs": [
			{
				"Key": "contact.type",
				"Value": 1
			},
			{
				"Key": "company.type",
				"Value": 1
			},
			{
				"Key": "company.source",
				"Value": 0
			},
			{
				"Key": "company.income",
				"Value": 0
			},
			{
				"Key": "company.noemp",
				"Value": 0
			},
			{
				"Key": "company.status",
				"Value": 0
			},
			{
				"Key": "industry.types",
				"Value": 0
			},
			{
				"Key": "individual.salutation",
				"Value": 0
			},
			{
				"Key": "individual.source",
				"Value": 1
			},
			{
				"Key": "individual.status",
				"Value": 0
			},
			{
				"Key": "individual.income",
				"Value": 0
			},
			{
				"Key": "individual.contactvia",
				"Value": 0
			},
			{
				"Key": "individual.nevervia",
				"Value": 0
			},
			{
				"Key": "individual.type",
				"Value": 1
			},
			{
				"Key": "inventory.status",
				"Value": 0
			},
			{
				"Key": "pref.languages",
				"Value": 0
			},
			{
				"Key": "sales.type",
				"Value": 0
			},
			{
				"Key": "sales.subtype",
				"Value": 0
			},
			{
				"Key": "sales.rank",
				"Value": 0
			},
			{
				"Key": "sales.source",
				"Value": 0
			},
			{
				"Key": "sales.status",
				"Value": 0
			},
			{
				"Key": "sales.forecast",
				"Value": 0
			},
			{
				"Key": "sales.code1",
				"Value": 1
			},
			{
				"Key": "sales.code2",
				"Value": 0
			},
			{
				"Key": "sales.code3",
				"Value": 0
			},
			{
				"Key": "sales.trackingCode",
				"Value": 0
			},
			{
				"Key": "qa.status",
				"Value": 0
			},
			{
				"Key": "qa.rank",
				"Value": 0
			},
			{
				"Key": "qa.source",
				"Value": 0
			},
			{
				"Key": "qa.type",
				"Value": 0
			},
			{
				"Key": "qa.subtype",
				"Value": 0
			},
			{
				"Key": "qa.forecast",
				"Value": 0
			},
			{
				"Key": "qa.code1",
				"Value": 1
			},
			{
				"Key": "qa.code2",
				"Value": 0
			},
			{
				"Key": "service.forecast",
				"Value": 0
			},
			{
				"Key": "service.rank",
				"Value": 0
			},
			{
				"Key": "service.source",
				"Value": 0
			},
			{
				"Key": "service.status",
				"Value": 0
			},
			{
				"Key": "activity.duetime",
				"Value": 0
			},
			{
				"Key": "activity.rank",
				"Value": 0
			},
			{
				"Key": "activity.status",
				"Value": 0
			},
			{
				"Key": "activity.tracking",
				"Value": 0
			},
			{
				"Key": "activity.transportation",
				"Value": 0
			},
			{
				"Key": "activity.type",
				"Value": 0
			},
			{
				"Key": "vehicle.drive",
				"Value": 0
			}
		]
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(2);
	var errorCard_component_1 = __webpack_require__(12);
	exports.ErrorPageModule = angular.module('ui.component.errorcard', [])
	    .component('errorCard', new errorCard_component_1.ErrorCardComponent());


/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";
	var ErrorCardComponentController = (function () {
	    function ErrorCardComponentController() {
	        this.init();
	    }
	    ErrorCardComponentController.prototype.init = function () {
	    };
	    ErrorCardComponentController.$inject = [];
	    return ErrorCardComponentController;
	}());
	var ErrorCardComponent = (function () {
	    function ErrorCardComponent() {
	        this.bindings = {};
	        this.controller = ErrorCardComponentController;
	        this.templateUrl = 'app/errorCard/errorCard.template.html';
	    }
	    return ErrorCardComponent;
	}());
	exports.ErrorCardComponent = ErrorCardComponent;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var crmContactForms = __webpack_require__(14);
	var crmContactViews = __webpack_require__(127);
	var summaryCardModule = __webpack_require__(155);
	var gmLookupModule = __webpack_require__(158);
	var phoneNumbersModule = __webpack_require__(161);
	var auditLogsModule = __webpack_require__(164);
	var module_1 = __webpack_require__(167);
	var driversLicenseModule = __webpack_require__(175);
	module.exports = angular.module("crm.contact", [
	    crmContactForms.name,
	    crmContactViews.name,
	    summaryCardModule.name,
	    gmLookupModule.name,
	    phoneNumbersModule.name,
	    auditLogsModule.name,
	    driversLicenseModule.name,
	    module_1.ContactMarketingModule.name
	]);


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var crmContactInfo = __webpack_require__(15);
	var crmIndividual = __webpack_require__(109);
	var crmOrganization = __webpack_require__(113);
	var crmOrganizationInfo = __webpack_require__(116);
	var crmIndividualOtherInfo = __webpack_require__(119);
	var crmOrganizationOtherInfo = __webpack_require__(122);
	var crmOrganizationPrimaryContactInfo = __webpack_require__(125);
	module.exports = angular.module("crm.contact.add", [
	    crmContactInfo.name,
	    crmIndividual.name,
	    crmOrganization.name,
	    crmOrganizationInfo.name,
	    crmIndividualOtherInfo.name,
	    crmOrganizationOtherInfo.name,
	    crmOrganizationPrimaryContactInfo.name
	]);


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var crmInputDate = __webpack_require__(16);
	var contactInfoDirective = __webpack_require__(107);
	module.exports = angular.module("crm.contact.add.contactInfo", [
	    crmInputDate.name,
	]).directive("crmContactInfo", contactInfoDirective);


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var dateInputDirective = __webpack_require__(17);
	module.exports = angular.module("crm.inputDate", [])
	    .directive("crmDateInput", dateInputDirective);


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var dateInputController = __webpack_require__(18);
	DateInputDirective.$inject = [];
	function DateInputDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            fullDate: '=',
	            minYear: '@?',
	            maxYear: '@?',
	            disabled: '=?'
	        },
	        templateUrl: 'app/ui/inputDate/dateInputTemplate.html',
	        controller: dateInputController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = DateInputDirective;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var moment = __webpack_require__(19);
	var DateInputController = (function () {
	    function DateInputController($scope, $translate, DateService, eventManagerService, Constants) {
	        var _this = this;
	        this.$translate = $translate;
	        this.DateService = DateService;
	        this.eventManagerService = eventManagerService;
	        this.Constants = Constants;
	        var months = moment.months();
	        this.months = [];
	        if (!this.minYear) {
	            this.minYear = 1900;
	        }
	        if (!this.maxYear) {
	            this.maxYear = new Date().getFullYear();
	        }
	        for (var i = 0; i < months.length; i++) {
	            this.months[i] = {
	                number: i + 1,
	                name: months[i]
	            };
	        }
	        var unregisterer = $scope.$watch("ctrl.fullDate", function (date) {
	            if (date) {
	                _this.fullDate = _this.getValidDate(date);
	                _this.dateChanged();
	                unregisterer();
	            }
	        });
	    }
	    DateInputController.prototype.dateChanged = function () {
	        if (this.day && this.month && this.year) {
	            var day = this.day.toString();
	            var month = this.month.number.toString();
	            if (day.length === 1)
	                day = '0' + day;
	            if (month.length === 1)
	                month = '0' + month;
	            var dateString = month + "/" + day + "/" + this.year;
	            this.fullDate = this.getValidDate(dateString);
	        }
	        else if (this.fullDate) {
	            this.day = this.fullDate.getDate();
	            this.month = this.months[this.fullDate.getMonth()];
	            this.year = this.fullDate.getFullYear();
	        }
	        else {
	            this.fullDate = undefined;
	        }
	    };
	    DateInputController.prototype.dayChanged = function () {
	        if (this.day) {
	            if (this.day <= 0) {
	                this.day = 1;
	            }
	            else if (this.day > this.getMaxMonthDay()) {
	                this.day = this.getMaxMonthDay();
	            }
	            this.dateChanged();
	        }
	        else {
	            this.fullDate = undefined;
	        }
	    };
	    DateInputController.prototype.monthChanged = function () {
	        if (this.month) {
	            this.dayChanged();
	            this.dateChanged();
	        }
	        else {
	            this.fullDate = undefined;
	        }
	    };
	    DateInputController.prototype.yearChanged = function () {
	        if (this.year) {
	            if (this.year < this.minYear) {
	                this.year = this.minYear;
	            }
	            else if (this.year > this.maxYear) {
	                this.year = this.maxYear;
	            }
	            this.monthChanged();
	            this.dateChanged();
	        }
	        else {
	            this.fullDate = undefined;
	        }
	    };
	    DateInputController.prototype.getMaxMonthDay = function () {
	        if (!this.month) {
	            return 31;
	        }
	        var usedYear;
	        if (!this.year) {
	            usedYear = new Date().getFullYear();
	        }
	        else {
	            usedYear = this.year;
	        }
	        return new Date(usedYear, this.month.number, 0).getDate();
	    };
	    DateInputController.prototype.getValidDate = function (dateString) {
	        if (moment(dateString).isValid()) {
	            var dateMoment = this.DateService.getDate(dateString);
	            if (!!dateMoment) {
	                return dateMoment;
	            }
	        }
	        return null;
	    };
	    DateInputController.prototype.isUSDateFormat = function () {
	        return this.$translate.use() === "en_US";
	    };
	    DateInputController.$inject = [
	        '$scope',
	        '$translate',
	        'DateService',
	        'eventManagerService',
	        'Constants'
	    ];
	    return DateInputController;
	}());
	module.exports = DateInputController;


/***/ },
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var contactInfoController = __webpack_require__(108);
	function contactInfoDirective() {
	    return {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            expanded: "=",
	            form: "=",
	            prefixRefDefs: "=",
	            isFullScreen: "=?"
	        },
	        templateUrl: "app/contact/add/contactInfo/contactInfoTemplateIndividual.html",
	        controller: contactInfoController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	}
	module.exports = contactInfoDirective;


/***/ },
/* 108 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var contactInfoController = (function () {
	    function contactInfoController(CrmConstants) {
	        this.CrmConstants = CrmConstants;
	        this.phoneType = this.CrmConstants.CONTACT.CONTACT_POINTS.DEFAULT_PHONE_TYPE;
	    }
	    contactInfoController.$inject = [
	        'CrmConstants'
	    ];
	    return contactInfoController;
	}());
	module.exports = contactInfoController;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var addIndividualDirective = __webpack_require__(110);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.contact.add.individual", [])
	    .directive("crmAddIndividual", addIndividualDirective);


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var addIndividualController = __webpack_require__(111);
	function addIndividualDirective() {
	    return {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            contactType: "@"
	        },
	        templateUrl: "app/contact/add/individual/addIndividualTemplate.html",
	        controller: addIndividualController,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = addIndividualDirective;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AddContactController = __webpack_require__(112);
	var addIndividualController = (function (_super) {
	    __extends(addIndividualController, _super);
	    function addIndividualController($scope, $state, eventManagerService, ServiceWrapper, ContactService, contactValidationAlertService, organizationValidationAlertService, $http, Constants, ModelConstants, TranslationCache, dirtyFormWarningService, RefDefService) {
	        var _this = this;
	        _super.call(this, $state, eventManagerService, ServiceWrapper, ContactService, Constants, ModelConstants);
	        this.$scope = $scope;
	        this.ServiceWrapper = ServiceWrapper;
	        this.ContactService = ContactService;
	        this.contactValidationAlertService = contactValidationAlertService;
	        this.organizationValidationAlertService = organizationValidationAlertService;
	        this.$http = $http;
	        this.TranslationCache = TranslationCache;
	        this.dirtyFormWarningService = dirtyFormWarningService;
	        this.RefDefService = RefDefService;
	        this.destroy = function () {
	            _this.eventManagerService.unSubscribe(_this.Constants.ALERT_EVENT_SAVE_BUTTON_PRESS, _this.saveButtonEventSubscription);
	        };
	        this.setFormSubmitted = function () {
	            if (_this.addContactForm) {
	                _this.addContactForm.$setSubmitted();
	            }
	        };
	        this.saveButtonEventSubscription = this.eventManagerService.subscribe(this.Constants.ALERT_EVENT_SAVE_BUTTON_PRESS, this.setFormSubmitted);
	        $scope.$on("$destroy", this.destroy);
	        this.getRefDefs();
	        contactValidationAlertService.reset();
	        var ctrl = this;
	        $scope.$watch('ctrl.contact.contactType', function (oldVal, newVal) {
	            if (oldVal != newVal) {
	                ctrl.getRefDefs();
	            }
	        });
	        this.dirtyFormWarningService.register(function () {
	            return _this.addContactForm.$dirty && !_this.addContactForm.$submitted;
	        });
	    }
	    addIndividualController.prototype.getRefDefs = function () {
	        var _this = this;
	        this.RefDefService.getRefDefs(['individual.salutation', 'individual.source', 'pref.languages', 'individual.type'])
	            .then(function (refDefs) {
	            _this.individualRefDefs = refDefs;
	        });
	    };
	    addIndividualController.prototype.getAddressTitle = function () {
	        return this.expanded ? this.TranslationCache.get("crm.address.headers.ADDRESS") : null;
	    };
	    addIndividualController.prototype.setIsContactValid = function (isValid) {
	        if (this.contact.isEmpty()) {
	            this.contactValidationAlertService.isIndividualValid = true;
	        }
	        else {
	            this.contactValidationAlertService.isIndividualValid = isValid;
	        }
	    };
	    addIndividualController.prototype.selectDuplicate = function (contact) {
	        this.dirtyFormWarningService.deregister();
	        _super.prototype.onContactSaveSuccess.call(this, contact);
	    };
	    addIndividualController.$inject = [
	        '$scope',
	        '$state',
	        'eventManagerService',
	        'ServiceWrapper',
	        'ContactService',
	        'contactValidationAlertService',
	        'organizationValidationAlertService',
	        '$http',
	        'Constants',
	        'ModelConstants',
	        'TranslationCache',
	        'dirtyFormWarningService',
	        'RefDefService'
	    ];
	    return addIndividualController;
	}(AddContactController));
	module.exports = addIndividualController;


/***/ },
/* 112 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var addContactController = (function () {
	    function addContactController($state, eventManagerService, ServiceWrapper, ContactService, Constants, ModelConstants) {
	        this.$state = $state;
	        this.eventManagerService = eventManagerService;
	        this.ServiceWrapper = ServiceWrapper;
	        this.ContactService = ContactService;
	        this.Constants = Constants;
	        this.ModelConstants = ModelConstants;
	        this.expanded = false;
	        if (this.contact) {
	            this.isValid = this.contact.isValid();
	        }
	    }
	    addContactController.prototype.updateAlert = function (form) {
	        this.setIsContactValid(this.formIsValid(form));
	    };
	    addContactController.prototype.setIsContactValid = function (isValid) {
	    };
	    addContactController.prototype.submit = function (form) {
	        this.isSubmitDisabled = true;
	        this.submitFormAndPublishButtonPress(form);
	        if (this.formIsValid(form)) {
	            this.saveAndPublishSaveEvent();
	        }
	        else {
	            this.isSubmitDisabled = false;
	        }
	        this.updateAlert(form);
	    };
	    addContactController.prototype.formIsValid = function (form) {
	        return (form.$valid && this.contact.isValid());
	    };
	    addContactController.prototype.submitFormAndPublishButtonPress = function (form) {
	        this.eventManagerService.publish(this.Constants.ALERT_EVENT_SAVE_BUTTON_PRESS);
	        angular.element(form).submit();
	    };
	    addContactController.prototype.saveAndPublishSaveEvent = function () {
	        this.eventManagerService.publish(this.Constants.ALERT_EVENT_SAVE_VALID);
	        this.saveContact();
	    };
	    addContactController.prototype.isOrganization = function (contact) {
	        return contact.getTypeName() == this.ModelConstants.Organization;
	    };
	    addContactController.prototype.saveContact = function () {
	        var self = this;
	        this.ServiceWrapper.save(this.ContactService, self.contact).then(this.onContactSaveSuccess);
	    };
	    addContactController.prototype.onContactSaveSuccess = function (contact) {
	        this.contact.id = contact.id;
	        if (!this.$state.params.contactId) {
	            this.$state.go('view.contact', { 'contactId': contact.id });
	        }
	    };
	    ;
	    addContactController.$inject = [
	        '$state',
	        'eventManagerService',
	        'ServiceWrapper',
	        'ContactService',
	        'Constants',
	        'ModelConstants',
	    ];
	    return addContactController;
	}());
	module.exports = addContactController;


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var addOrganizationDirective = __webpack_require__(114);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.contact.add.organization", [])
	    .directive("crmAddOrganization", addOrganizationDirective);


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var addOrganizationController = __webpack_require__(115);
	function addOrganizationDirective() {
	    return {
	        restrict: 'E',
	        scope: {
	            contact: "="
	        },
	        templateUrl: 'app/contact/add/organization/addOrganizationTemplate.html',
	        controller: addOrganizationController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	}
	module.exports = addOrganizationDirective;


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AddContactController = __webpack_require__(112);
	var addOrganizationController = (function (_super) {
	    __extends(addOrganizationController, _super);
	    function addOrganizationController($scope, $state, ContactService, eventManagerService, organizationValidationAlertService, Constants, ServiceWrapper, ModelConstants, dirtyFormWarningService, refDefService) {
	        var _this = this;
	        _super.call(this, $state, eventManagerService, ServiceWrapper, ContactService, Constants, ModelConstants);
	        this.$scope = $scope;
	        this.organizationValidationAlertService = organizationValidationAlertService;
	        this.dirtyFormWarningService = dirtyFormWarningService;
	        this.refDefService = refDefService;
	        this.destroy = function () {
	            _this.eventManagerService.unSubscribe(_this.Constants.ALERT_EVENT_SAVE_BUTTON_PRESS, _this.saveButtonEventSubscription);
	        };
	        this.setFormSubmitted = function () {
	            if (_this.addOrganizationForm) {
	                _this.addOrganizationForm.$setSubmitted();
	            }
	        };
	        this.saveButtonEventSubscription = this.eventManagerService.subscribe(Constants.ALERT_EVENT_SAVE_BUTTON_PRESS, this.setFormSubmitted);
	        $scope.$on("$destroy", this.destroy);
	        this.getRefDefs();
	        this.dirtyFormWarningService.register(function () {
	            return _this.addOrganizationForm.$dirty && !_this.addOrganizationForm.$submitted;
	        });
	    }
	    addOrganizationController.prototype.getRefDefs = function () {
	        var _this = this;
	        this.refDefService.getRefDefs(['company.type',
	            'company.source',
	            'company.income',
	            'company.noemp',
	            'company.status',
	            'industry.types',
	            'individual.salutation'])
	            .then(function (refDefs) {
	            _this.organizationRefDefs = refDefs;
	        });
	    };
	    addOrganizationController.prototype.setIsContactValid = function (isValid) {
	        if (this.contact.isEmpty()) {
	            this.organizationValidationAlertService.isCompanyValid = true;
	        }
	        else {
	            this.organizationValidationAlertService.isCompanyValid = isValid;
	        }
	    };
	    addOrganizationController.$inject = [
	        '$scope',
	        '$state',
	        'ContactService',
	        'eventManagerService',
	        'organizationValidationAlertService',
	        'Constants',
	        'ServiceWrapper',
	        'ModelConstants',
	        'dirtyFormWarningService',
	        'RefDefService'
	    ];
	    return addOrganizationController;
	}(AddContactController));
	module.exports = addOrganizationController;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var crmInputDate = __webpack_require__(16);
	var organizationInfoDirective = __webpack_require__(117);
	module.exports = angular.module("crm.contact.add.organizationInfo", [
	    crmInputDate.name,
	]).directive("crmOrganizationInfo", organizationInfoDirective);


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var organizationInfoController = __webpack_require__(118);
	function organizationInfoDirective() {
	    return {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            expanded: "=",
	            form: "="
	        },
	        templateUrl: "app/contact/add/organizationInfo/organizationInfoTemplate.html",
	        controller: organizationInfoController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	}
	module.exports = organizationInfoDirective;


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var contactInfoController = __webpack_require__(108);
	var organizationInfoController = (function (_super) {
	    __extends(organizationInfoController, _super);
	    function organizationInfoController() {
	        _super.apply(this, arguments);
	    }
	    return organizationInfoController;
	}(contactInfoController));
	module.exports = organizationInfoController;


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var individualOtherInfoDirective = __webpack_require__(120);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.contact.add.individualOtherInfo", [])
	    .directive("crmIndividualOtherInfo", individualOtherInfoDirective);


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var IndividualOtherInfoController = __webpack_require__(121);
	function individualOtherInfoDirective() {
	    var directive = {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            expanded: "=",
	            preferredLanguageRefDefs: "=",
	            contactTypes: "=",
	            contactSources: "="
	        },
	        controller: IndividualOtherInfoController,
	        controllerAs: "ctrl",
	        bindToController: true,
	        templateUrl: "app/contact/add/individualOtherInfo/individualOtherInfoTemplate.html",
	    };
	    return directive;
	}
	module.exports = individualOtherInfoDirective;


/***/ },
/* 121 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var IndividualOtherInfoController = (function () {
	    function IndividualOtherInfoController($scope, RefDefService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.RefDefService = RefDefService;
	        this.isLoading = false;
	        var deregister = $scope.$watch("ctrl.contactTypes", function (value) {
	            if (value) {
	                _this.contact.contactType = value[0];
	                _this.updateSubTypes();
	                deregister();
	            }
	        });
	    }
	    IndividualOtherInfoController.prototype.updateSubTypes = function () {
	        var _this = this;
	        this.isLoading = true;
	        this.RefDefService.getSubRefDef('individual.type', this.contact.contactType.value)
	            .then(function (data) {
	            _this.contactSubTypes = data;
	            _this.contact.contactSubType = _this.contactSubTypes[0];
	            _this.isLoading = false;
	        })
	            .catch(function (error) {
	            console.error(error);
	            _this.contactSubTypes = [];
	            _this.contact.contactSubType = {};
	            _this.isLoading = false;
	        });
	    };
	    IndividualOtherInfoController.$inject = [
	        "$scope",
	        "RefDefService"
	    ];
	    return IndividualOtherInfoController;
	}());
	module.exports = IndividualOtherInfoController;


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var organizationOtherInfoDirective = __webpack_require__(123);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.contact.add.organizationOtherInfo", [])
	    .directive("crmOrganizationOtherInfo", organizationOtherInfoDirective);


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var OrganizationOtherInfoController = __webpack_require__(124);
	function organizationOtherInfoDirective() {
	    var directive = {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            expanded: "=",
	            contactTypes: "=",
	            contactSources: "="
	        },
	        controller: OrganizationOtherInfoController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: "app/contact/add/organizationOtherInfo/organizationOtherInfoTemplate.html",
	    };
	    return directive;
	}
	module.exports = organizationOtherInfoDirective;


/***/ },
/* 124 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var OrganizationOtherInfoController = (function () {
	    function OrganizationOtherInfoController($scope, refDefService) {
	        this.$scope = $scope;
	        this.refDefService = refDefService;
	        this.updateSubTypes = function () {
	            this.isLoading = true;
	            var self = this;
	            this.refDefService.getSubRefDef('company.type', this.contact.contactType.value)
	                .then(function (subRefDef) {
	                self.contactSubTypes = subRefDef;
	                self.contact.contactSubType = self.contactSubTypes[0];
	                self.isLoading = false;
	            });
	        };
	        this.isLoading = true;
	        var self = this;
	        var deregister = $scope.$watch('ctrl.contactTypes[0].value', function (newVal) {
	            if (newVal) {
	                self.contact.contactType = self.contactTypes[0];
	                self.updateSubTypes();
	                deregister();
	            }
	        });
	    }
	    OrganizationOtherInfoController.$inject = ['$scope',
	        'RefDefService'
	    ];
	    return OrganizationOtherInfoController;
	}());
	module.exports = OrganizationOtherInfoController;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var organizationPrimaryContactInfoDirective = __webpack_require__(126);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.contact.add.organizationPrimaryContactInfo", [])
	    .directive("crmOrganizationPrimaryContactInfo", organizationPrimaryContactInfoDirective);


/***/ },
/* 126 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	organizationPrimaryContactInfoDirective.$inject = [];
	function organizationPrimaryContactInfoDirective() {
	    var directive = {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            expanded: "=",
	        },
	        templateUrl: "app/contact/add/organizationPrimaryContactInfo/organizationPrimaryContactInfoTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes) {
	        $scope.isLoading = true;
	    }
	    return directive;
	}
	module.exports = organizationPrimaryContactInfoDirective;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var crmContactCards = __webpack_require__(128);
	module.exports = angular.module("crm.contact.views", [
	    crmContactCards.name
	]);


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var crmContactCard = __webpack_require__(129);
	var crmContactVehicleCard = __webpack_require__(132);
	var crmDuplicateIndividualCard = __webpack_require__(136);
	var crmDuplicateOrganizationCard = __webpack_require__(139);
	var crmIndividualCard = __webpack_require__(142);
	var crmOrganizationCard = __webpack_require__(148);
	var crmGetContactCard = __webpack_require__(152);
	module.exports = angular.module("crm.contact.views.cards", [
	    crmContactCard.name,
	    crmContactVehicleCard.name,
	    crmDuplicateIndividualCard.name,
	    crmDuplicateOrganizationCard.name,
	    crmIndividualCard.name,
	    crmOrganizationCard.name,
	    crmGetContactCard.name
	]);


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../../../typings/index.d.ts"/>
	var contactCardDirective = __webpack_require__(130);
	var contactVehicleCard = __webpack_require__(132);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.contact.views.card.contact", [contactVehicleCard.name])
	    .directive("crmContactCard", contactCardDirective);


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../../../typings/index.d.ts"/>
	var contactCardController = __webpack_require__(131);
	function contactCardDirective() {
	    var directive = {
	        scope: {
	            contact: "=",
	            contactType: "@"
	        },
	        templateUrl: 'app/contact/views/card/contact/contactCardTemplate.html',
	        controller: contactCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = contactCardDirective;


/***/ },
/* 131 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var ContactCardController = (function () {
	    function ContactCardController($scope, $state, eventManagerService, CrmConstants) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$state = $state;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        var connectionsCountChangeEvent = this.eventManagerService.subscribe(this.CrmConstants.CONNECTIONS.COUNT_UPDATED, function (count) {
	            _this.connectionsCount = count;
	        });
	        this.$scope.$on('$destroy', function () {
	            _this.eventManagerService.unSubscribe(_this.CrmConstants.CONNECTIONS.COUNT_UPDATED, connectionsCountChangeEvent);
	        });
	        var ctrl = this;
	        var unregister = $scope.$watch('ctrl.contact', function (contact) {
	            if (contact) {
	                ctrl.isOrganization = ctrl.contact.isOrganization();
	                unregister();
	            }
	        });
	    }
	    ContactCardController.prototype.shouldShowFullProfile = function () {
	        return !this.$state.is('view.contact');
	    };
	    ;
	    ContactCardController.$inject = [
	        '$scope',
	        '$state',
	        'eventManagerService',
	        'CrmConstants'
	    ];
	    return ContactCardController;
	}());
	module.exports = ContactCardController;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../../typings/index.d.ts"/>
	"use strict";
	var contactVehicleCardDirective = __webpack_require__(133);
	var ContactVehicleCardInlineEditConfig = __webpack_require__(135);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.contact.views.card.vehicle", [])
	    .directive('crmContactVehicleCard', contactVehicleCardDirective)
	    .service('ContactVehicleCardInlineEditConfig', ContactVehicleCardInlineEditConfig);


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../../../../typings/index.d.ts"/>
	var contactVehicleCardController = __webpack_require__(134);
	function contactVehicleCardDirective() {
	    return {
	        restrict: 'E',
	        scope: {
	            vehicle: '=',
	            contactId: '=',
	            actionItems: '='
	        },
	        controller: contactVehicleCardController,
	        controllerAs: 'ctrl',
	        templateUrl: 'app/contact/views/card/contact/vehicle/contactVehicleCardTemplate.html',
	        bindToController: true
	    };
	}
	module.exports = contactVehicleCardDirective;


/***/ },
/* 134 */
/***/ function(module, exports) {

	"use strict";
	var ContactVehicleCardController = (function () {
	    function ContactVehicleCardController($scope, eventManagerService, contactVehicleApiService, CrmConstants, InlineEditFacadeFactory, ContactVehicleCardInlineEditConfig, refDefService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.eventManagerService = eventManagerService;
	        this.contactVehicleApiService = contactVehicleApiService;
	        this.CrmConstants = CrmConstants;
	        this.InlineEditFacadeFactory = InlineEditFacadeFactory;
	        this.ContactVehicleCardInlineEditConfig = ContactVehicleCardInlineEditConfig;
	        this.refDefService = refDefService;
	        this.init = function () {
	            var _this = this;
	            this.refDefService.getRefDefs([
	                'vehicle.drive'
	            ])
	                .then(function (refDefs) {
	                _this.drivetrainRefDefs = refDefs;
	                _this.ContactVehicleCardInlineEditConfig.init(_this.vehicle, refDefs);
	            })
	                .then(function () {
	                _this.setFacades();
	            });
	        };
	        this.setFacades = function () {
	            // TODO: Temp solution for disable inline edit when cross site
	            this.vinFacade = this.ContactVehicleCardInlineEditConfig.getVinFacade(this.inlineEditVinOnSave(), this.disableEditCrossSite);
	            this.odometerFacade = this.ContactVehicleCardInlineEditConfig.getOdometerFacade(this.inlineEditOdometerOnSave(), this.disableEditCrossSite);
	            this.bodyStyleFacade = this.ContactVehicleCardInlineEditConfig.getBodyStyleFacade(this.inlineEditBodyStyleOnSave(), this.disableEditCrossSite);
	            this.interiorColorFacade = this.ContactVehicleCardInlineEditConfig.getInteriorColorFacade(this.inlineEditInteriorColorOnSave(), this.disableEditCrossSite);
	            this.plateFacade = this.ContactVehicleCardInlineEditConfig.getLicensePlateFacade(this.inlineEditLicensePlateOnSave(), this.disableEditCrossSite);
	            this.factoryWarrantyFacade = this.ContactVehicleCardInlineEditConfig.getFactoryWarrantyFacade(this.inlineEditFactoryWarrantyOnSave(), this.disableEditCrossSite);
	            this.unitNumberFacade = this.ContactVehicleCardInlineEditConfig.getUnitNumberFacade(this.inlineEditUnitNumberOnSave(), this.disableEditCrossSite);
	            this.extendedServiceFacade = this.ContactVehicleCardInlineEditConfig.getExtendedServiceFacade(this.inlineEditExtendedServiceOnSave(), this.disableEditCrossSite);
	            this.exteriorColorFacade = this.ContactVehicleCardInlineEditConfig.getExteriorColorFacade(this.inlineEditExteriorColorOnSave(), this.disableEditCrossSite);
	            this.seriesFacade = this.ContactVehicleCardInlineEditConfig.getSeriesFacade(this.inlineEditSeriesOnSave(), this.disableEditCrossSite);
	            this.driveTrainFacade = this.ContactVehicleCardInlineEditConfig.getDrivetrainFacade(this.inlineEditDrivetrainOnSave(), this.disableEditCrossSite);
	            this.engineFacade = this.ContactVehicleCardInlineEditConfig.getEngineFacade(this.inlineEditEngineOnSave(), this.disableEditCrossSite);
	        };
	        var connectionsCountChangeEvent = this.eventManagerService.subscribe(this.CrmConstants.CONNECTIONS.COUNT_UPDATED, function (count) {
	            _this.connectionsCount = count;
	        });
	        this.$scope.$on('$destroy', function () {
	            _this.eventManagerService.unSubscribe(_this.CrmConstants.CONNECTIONS.COUNT_UPDATED, connectionsCountChangeEvent);
	        });
	        var self = this;
	        this.disableEditCrossSite = false;
	        self.init();
	    }
	    ContactVehicleCardController.prototype.inlineEditVinOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = self.vehicle.vin;
	            self.vehicle.vin = facade.model.vin;
	            return self.contactVehicleApiService.post(_this.contactId, _this.vehicle).then(function () {
	                _this.vinSaved = true;
	            }, function () {
	                self.vehicle.vin = original;
	            });
	        };
	    };
	    ContactVehicleCardController.prototype.inlineEditOdometerOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = self.vehicle.odometer;
	            self.vehicle.odometer = facade.model.odometer;
	            return self.contactVehicleApiService.post(_this.contactId, _this.vehicle).then(function () {
	                _this.odometerSaved = true;
	            }, function () {
	                self.vehicle.odometer = original;
	                _this.odometerSaved = false;
	            });
	        };
	    };
	    ContactVehicleCardController.prototype.inlineEditLicensePlateOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = self.vehicle.plate;
	            self.vehicle.plate = facade.model.plate;
	            return self.contactVehicleApiService.post(_this.contactId, _this.vehicle).then(function () {
	                _this.plateSaved = true;
	            }, function () {
	                self.vehicle.plate = original;
	                _this.plateSaved = false;
	            });
	        };
	    };
	    ContactVehicleCardController.prototype.inlineEditInteriorColorOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = self.vehicle.interiorColor;
	            self.vehicle.interiorColor = facade.model.interiorColor;
	            return self.contactVehicleApiService.post(_this.contactId, _this.vehicle).then(function () {
	                _this.interiorColorSaved = true;
	            }, function () {
	                self.vehicle.interiorColor = original;
	                _this.interiorColorSaved = false;
	            });
	        };
	    };
	    ContactVehicleCardController.prototype.inlineEditBodyStyleOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = self.vehicle.bodyStyle;
	            self.vehicle.bodyStyle = facade.model.bodyStyle;
	            return self.contactVehicleApiService.post(_this.contactId, _this.vehicle).then(function () {
	                _this.bodyStyleSaved = true;
	            }, function () {
	                self.vehicle.bodyStyle = original;
	                _this.bodyStyleSaved = false;
	            });
	        };
	    };
	    ContactVehicleCardController.prototype.inlineEditFactoryWarrantyOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = {
	                "months": self.vehicle.factoryWarranty.months,
	                "miles": self.vehicle.factoryWarranty.miles
	            };
	            self.vehicle.factoryWarranty.miles = facade.model.factoryWarrantyMiles;
	            self.vehicle.factoryWarranty.months = facade.model.factoryWarrantyMonths;
	            return self.contactVehicleApiService.post(_this.contactId, _this.vehicle).then(function () {
	                _this.factoryWarrantySaved = true;
	            }, function () {
	                self.vehicle.factoryWarranty = original;
	                _this.factoryWarrantySaved = false;
	            });
	        };
	    };
	    ContactVehicleCardController.prototype.inlineEditUnitNumberOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = self.vehicle.unitNumber;
	            self.vehicle.unitNumber = facade.model.unitNumber;
	            return self.contactVehicleApiService.post(_this.contactId, _this.vehicle).then(function () {
	                _this.unitNumberSaved = true;
	            }, function () {
	                self.vehicle.unitNumber = original;
	                _this.unitNumberSaved = false;
	            });
	        };
	    };
	    ContactVehicleCardController.prototype.inlineEditExtendedServiceOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = {
	                "months": self.vehicle.extendedService.months,
	                "miles": self.vehicle.extendedService.miles
	            };
	            self.vehicle.extendedService.months = facade.model.extendedServiceMonths;
	            self.vehicle.extendedService.miles = facade.model.extendedServiceMiles;
	            return self.contactVehicleApiService.post(_this.contactId, _this.vehicle).then(function () {
	                _this.extendedServiceSaved = true;
	            }, function () {
	                self.vehicle.extendedService = original;
	                _this.extendedServiceSaved = false;
	            });
	        };
	    };
	    ContactVehicleCardController.prototype.inlineEditExteriorColorOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = self.vehicle.exteriorColor;
	            self.vehicle.exteriorColor = facade.model.exteriorColor;
	            return self.contactVehicleApiService.post(_this.contactId, _this.vehicle).then(function () {
	                _this.exteriorColorSaved = true;
	            }, function () {
	                self.vehicle.exteriorColor = original;
	                _this.exteriorColorSaved = false;
	            });
	        };
	    };
	    ContactVehicleCardController.prototype.inlineEditSeriesOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = self.vehicle.series;
	            self.vehicle.series = facade.model.series;
	            return self.contactVehicleApiService.post(_this.contactId, _this.vehicle).then(function () {
	                _this.seriesSaved = true;
	            }, function () {
	                self.vehicle.series = original;
	                _this.seriesSaved = false;
	            });
	        };
	    };
	    ContactVehicleCardController.prototype.inlineEditDrivetrainOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = self.vehicle.drivetrainRefDef;
	            self.vehicle.drivetrainRefDef = facade.model.drivetrainRefDef;
	            return self.contactVehicleApiService.post(_this.contactId, _this.vehicle).then(function () {
	                _this.drivetrainSaved = true;
	            }, function () {
	                self.vehicle.drivetrainRefDef = original;
	                _this.drivetrainSaved = false;
	            });
	        };
	    };
	    ContactVehicleCardController.prototype.inlineEditEngineOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = self.vehicle.engineSize;
	            self.vehicle.engineSize = facade.model.engineSize;
	            return self.contactVehicleApiService.post(_this.contactId, _this.vehicle).then(function () {
	                _this.engineSaved = true;
	            }, function () {
	                self.vehicle.engineSize = original;
	                _this.engineSaved = false;
	            });
	        };
	    };
	    ContactVehicleCardController.$inject = [
	        '$scope',
	        'eventManagerService',
	        'ContactVehicleApiService',
	        'CrmConstants',
	        'InlineEditFacadeFactory',
	        'ContactVehicleCardInlineEditConfig',
	        'RefDefService'
	    ];
	    return ContactVehicleCardController;
	}());
	module.exports = ContactVehicleCardController;


/***/ },
/* 135 */
/***/ function(module, exports) {

	"use strict";
	var ContactVehicleCardInlineEditConfig = (function () {
	    function ContactVehicleCardInlineEditConfig(inlineEditFacadeFactory, translationCache) {
	        this.inlineEditFacadeFactory = inlineEditFacadeFactory;
	        this.translationCache = translationCache;
	    }
	    ContactVehicleCardInlineEditConfig.prototype.init = function (contactVehicle, refDefs) {
	        this.vehicle = contactVehicle;
	        this.refDefs = refDefs;
	    };
	    ContactVehicleCardInlineEditConfig.prototype.getVinFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditVinField = [
	            {
	                fieldName: "vin",
	                type: "text",
	                placeholder: this.translationCache.get("crm.vehicle.VIN"),
	                htmlAttributeName: "vinInlineInput"
	            }
	        ];
	        var vinFacadeModel = {
	            vin: this.vehicle.vin
	        };
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.vehicle.VIN"), vinFacadeModel, inlineEditVinField, onSave, disableEditCrossSite);
	    };
	    ContactVehicleCardInlineEditConfig.prototype.getOdometerFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditOdometerField = [
	            {
	                fieldName: "odometer",
	                type: "number",
	                placeholder: this.translationCache.get("crm.vehicle.Odometer"),
	                htmlAttributeName: "odometerInlineInput"
	            }
	        ];
	        var odometerFacadeModel = {
	            odometer: this.vehicle.odometer
	        };
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.vehicle.Odometer"), odometerFacadeModel, inlineEditOdometerField, onSave, disableEditCrossSite);
	    };
	    ContactVehicleCardInlineEditConfig.prototype.getLicensePlateFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditLicensePlateField = [
	            {
	                fieldName: "plate",
	                type: "text",
	                placeholder: this.translationCache.get("vehicle.labels.PLATE"),
	                htmlAttributeName: "plateInlineInput"
	            }
	        ];
	        var licensePlateFacadeModel = {
	            plate: this.vehicle.plate
	        };
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("vehicle.labels.PLATE"), licensePlateFacadeModel, inlineEditLicensePlateField, onSave, disableEditCrossSite);
	    };
	    ContactVehicleCardInlineEditConfig.prototype.getBodyStyleFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditBodyStyleField = [
	            {
	                fieldName: "bodyStyle",
	                type: "text",
	                placeholder: this.translationCache.get("vehicle.labels.BODY_STYLE"),
	                htmlAttributeName: "bodyStyleInlineInput"
	            }
	        ];
	        var bodyStyleFacadeModel = {
	            bodyStyle: this.vehicle.bodyStyle
	        };
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("vehicle.labels.BODY_STYLE"), bodyStyleFacadeModel, inlineEditBodyStyleField, onSave, disableEditCrossSite);
	    };
	    ContactVehicleCardInlineEditConfig.prototype.getInteriorColorFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditInteriorColorField = [
	            {
	                fieldName: "interiorColor",
	                type: "text",
	                placeholder: this.translationCache.get("vehicle.labels.INTERIOR_COLOR"),
	                htmlAttributeName: "interiorColorInlineInput"
	            }
	        ];
	        var interiorColorFacadeModel = {
	            interiorColor: this.vehicle.interiorColor
	        };
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("vehicle.labels.INTERIOR_COLOR"), interiorColorFacadeModel, inlineEditInteriorColorField, onSave, disableEditCrossSite);
	    };
	    ContactVehicleCardInlineEditConfig.prototype.getFactoryWarrantyFacade = function (onSave, disableEditCrossSite) {
	        var factoryWarrantyField = this.vehicle.factoryWarranty;
	        var factoryWarrantyFacadeModel = {
	            factoryWarrantyMiles: factoryWarrantyField ? this.vehicle.factoryWarranty.miles : undefined,
	            factoryWarrantyMonths: factoryWarrantyField ? this.vehicle.factoryWarranty.months : undefined
	        };
	        var fields = [
	            {
	                label: this.translationCache.get("crm.vehicle.card.WARRANTY_MONTHS"),
	                fieldName: "factoryWarrantyMonths",
	                type: "text",
	                htmlAttributeName: "factoryWarrantyMonthsInlineEdit"
	            },
	            {
	                label: this.translationCache.get("crm.vehicle.card.WARRANTY_MILES"),
	                fieldName: "factoryWarrantyMiles",
	                type: "text",
	                htmlAttributeName: "factoryWarrantyMilesInlineEdit"
	            }
	        ];
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("vehicle.labels.FACTORY_WARRANTY"), factoryWarrantyFacadeModel, fields, onSave, disableEditCrossSite);
	    };
	    ContactVehicleCardInlineEditConfig.prototype.getUnitNumberFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditUnitNumberField = [
	            {
	                fieldName: "unitNumber",
	                type: "text",
	                placeholder: this.translationCache.get("vehicle.labels.UNIT_NUMBER"),
	                htmlAttributeName: "unitNumberInlineInput"
	            }
	        ];
	        var unitNumberFacadeModel = {
	            unitNumber: this.vehicle.unitNumber
	        };
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("vehicle.labels.UNIT_NUMBER"), unitNumberFacadeModel, inlineEditUnitNumberField, onSave, disableEditCrossSite);
	    };
	    ContactVehicleCardInlineEditConfig.prototype.getExtendedServiceFacade = function (onSave, disableEditCrossSite) {
	        var extendedServiceField = this.vehicle.extendedService;
	        var extendedServiceFacadeModel = {
	            extendedServiceMiles: extendedServiceField ? extendedServiceField.miles : undefined,
	            extendedServiceMonths: extendedServiceField ? extendedServiceField.months : undefined
	        };
	        var fields = [
	            {
	                label: this.translationCache.get("crm.vehicle.card.SERVICE_MONTHS"),
	                fieldName: "extendedServiceMonths",
	                type: "text",
	                htmlAttributeName: "extendedServiceMonthsInlineEdit"
	            },
	            {
	                label: this.translationCache.get("crm.vehicle.card.SERVICE_MILES"),
	                fieldName: "extendedServiceMiles",
	                type: "text",
	                htmlAttributeName: "extendedServiceMilesInlineEdit"
	            }
	        ];
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("vehicle.labels.EXTENDED_SERVICE"), extendedServiceFacadeModel, fields, onSave, disableEditCrossSite);
	    };
	    ContactVehicleCardInlineEditConfig.prototype.getExteriorColorFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditExteriorColorField = [
	            {
	                fieldName: "exteriorColor",
	                type: "text",
	                placeholder: this.translationCache.get("vehicle.labels.EXTERIOR_COLOR"),
	                htmlAttributeName: "exteriorColorInlineInput"
	            }
	        ];
	        var exteriorColorFacadeModel = {
	            exteriorColor: this.vehicle.exteriorColor
	        };
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("vehicle.labels.EXTERIOR_COLOR"), exteriorColorFacadeModel, inlineEditExteriorColorField, onSave, disableEditCrossSite);
	    };
	    ContactVehicleCardInlineEditConfig.prototype.getSeriesFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditSeriesField = [
	            {
	                fieldName: "series",
	                type: "text",
	                placeholder: this.translationCache.get("vehicle.labels.SERIES"),
	                htmlAttributeName: "seriesInlineInput"
	            }
	        ];
	        var seriesFacadeModel = {
	            series: this.vehicle.series
	        };
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("vehicle.labels.SERIES"), seriesFacadeModel, inlineEditSeriesField, onSave, disableEditCrossSite);
	    };
	    ContactVehicleCardInlineEditConfig.prototype.getDrivetrainFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditDrivetrainField = [
	            {
	                fieldName: "drivetrainRefDef",
	                type: "select",
	                fieldValues: this.refDefs['vehicle.drive'],
	                htmlAttributeName: "drivetrainInlineInput"
	            }
	        ];
	        var drivetrainFacadeModel = {
	            "value": this.refDefs['vehicle.drive'][0].value,
	            "text": this.refDefs['vehicle.drive'][0].text
	        };
	        var vehicleRefDef = this.vehicle.drivetrainRefDef;
	        if (vehicleRefDef) {
	            //reset the default refdef if the vehicle refdef is not null
	            drivetrainFacadeModel = {
	                "value": this.vehicle.drivetrainRefDef.value,
	                "text": this.vehicle.drivetrainRefDef.text
	            };
	        }
	        ;
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("vehicle.labels.DRIVETRAIN"), drivetrainFacadeModel, inlineEditDrivetrainField, onSave, disableEditCrossSite);
	    };
	    ContactVehicleCardInlineEditConfig.prototype.getEngineFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditEngineField = [
	            {
	                fieldName: "engineSize",
	                type: "text",
	                placeholder: this.translationCache.get("vehicle.labels.ENGINE"),
	                htmlAttributeName: "engineInlineInput"
	            }
	        ];
	        var engineFacadeModel = {
	            engineSize: this.vehicle.engineSize
	        };
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("vehicle.labels.ENGINE"), engineFacadeModel, inlineEditEngineField, onSave, disableEditCrossSite);
	    };
	    ContactVehicleCardInlineEditConfig.$inject = [
	        "InlineEditFacadeFactory",
	        "TranslationCache"
	    ];
	    return ContactVehicleCardInlineEditConfig;
	}());
	module.exports = ContactVehicleCardInlineEditConfig;


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../../../typings/index.d.ts"/>
	var duplicateContactDirective_1 = __webpack_require__(137);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.duplicateIndividual", [])
	    .directive("crmDuplicateContact", duplicateContactDirective_1.duplicateContactDirective);


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var duplicateContactController = __webpack_require__(138);
	function duplicateContactDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: true,
	        templateUrl: 'app/contact/views/card/duplicateIndividual/duplicateContactTemplate.html',
	        controller: duplicateContactController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	exports.duplicateContactDirective = duplicateContactDirective;


/***/ },
/* 138 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var duplicateContactController = (function () {
	    function duplicateContactController($scope, crmContactDuplicates, eventManagerService, constants) {
	        this.$scope = $scope;
	        this.crmContactDuplicates = crmContactDuplicates;
	        this.eventManagerService = eventManagerService;
	        this.constants = constants;
	        this.expanded = false;
	        this.ignoreNextClickoff = false;
	        this.init();
	    }
	    duplicateContactController.prototype.init = function () {
	        this.eventOpenDuplicateExpanded = this.eventManagerService.subscribe(this.constants.ALERT_EVENT_OPEN_DUPLICATES_MENU, this.openDuplicateExpanded);
	        this.$scope.$on('$destroy', this.destroy);
	    };
	    duplicateContactController.prototype.destroy = function () {
	        this.eventManagerService.unSubscribe(this.constants.ALERT_EVENT_OPEN_DUPLICATES_MENU, this.eventOpenDuplicateExpanded);
	    };
	    ;
	    Object.defineProperty(duplicateContactController.prototype, "duplicateList", {
	        get: function () {
	            return this.crmContactDuplicates.duplicateList;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    duplicateContactController.prototype.openDuplicateExpanded = function () {
	        this.expanded = true;
	        this.ignoreNextClickoff = true;
	    };
	    ;
	    duplicateContactController.prototype.toggleDuplicateExpanded = function (event) {
	        this.expanded = !this.expanded;
	        event.stopPropagation();
	    };
	    ;
	    duplicateContactController.prototype.closeDuplicateExpanded = function () {
	        if (this.ignoreNextClickoff) {
	            this.ignoreNextClickoff = false;
	        }
	        else {
	            this.expanded = false;
	        }
	    };
	    ;
	    duplicateContactController.prototype.selectDuplicate = function (duplicate) {
	        this.crmContactDuplicates.selectDuplicate(duplicate);
	    };
	    duplicateContactController.$inject = ['$scope',
	        'crmContactDuplicates',
	        'eventManagerService',
	        'Constants'
	    ];
	    return duplicateContactController;
	}());
	module.exports = duplicateContactController;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var duplicateOrganizationDirective_1 = __webpack_require__(140);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.duplicateOrganization", [])
	    .directive("crmDuplicateOrganization", duplicateOrganizationDirective_1.duplicateOrganizationDirective);


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var duplicateOrganizationController = __webpack_require__(141);
	function duplicateOrganizationDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: true,
	        templateUrl: 'app/contact/views/card/duplicateOrganization/duplicateOrganizationTemplate.html',
	        controller: duplicateOrganizationController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	exports.duplicateOrganizationDirective = duplicateOrganizationDirective;


/***/ },
/* 141 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var duplicateOrganizationController = (function () {
	    function duplicateOrganizationController($scope, crmOrganizationDuplicates, eventManagerService, Constants) {
	        var _this = this;
	        this.$scope = $scope;
	        this.crmOrganizationDuplicates = crmOrganizationDuplicates;
	        this.eventManagerService = eventManagerService;
	        this.Constants = Constants;
	        this.expanded = false;
	        this.ignoreNextClickoff = false;
	        this.destroy = function () {
	            _this.eventManagerService.unSubscribe(_this.Constants.ALERT_EVENT_OPEN_DUPLICATES_MENU, _this.eventOpenDuplicateExpanded);
	        };
	        this.openDuplicateExpanded = function () {
	            _this.expanded = true;
	            _this.ignoreNextClickoff = true;
	        };
	        this.toggleDuplicateExpanded = function (event) {
	            _this.expanded = !_this.expanded;
	            event.stopPropagation();
	        };
	        this.closeDuplicateExpanded = function () {
	            if (_this.ignoreNextClickoff) {
	                _this.ignoreNextClickoff = false;
	            }
	            else {
	                _this.expanded = false;
	            }
	        };
	        this.init();
	    }
	    duplicateOrganizationController.prototype.init = function () {
	        this.eventOpenDuplicateExpanded = this.eventManagerService.subscribe(this.Constants.ALERT_EVENT_OPEN_DUPLICATES_MENU, this.openDuplicateExpanded);
	        this.$scope.$on('$destroy', this.destroy);
	    };
	    Object.defineProperty(duplicateOrganizationController.prototype, "duplicateList", {
	        get: function () {
	            return this.crmOrganizationDuplicates.duplicateList;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    duplicateOrganizationController.prototype.selectDuplicate = function (duplicate) {
	        this.crmOrganizationDuplicates.selectDuplicate(duplicate);
	    };
	    duplicateOrganizationController.$inject = ['$scope',
	        'crmOrganizationDuplicates',
	        'eventManagerService',
	        'Constants'
	    ];
	    return duplicateOrganizationController;
	}());
	module.exports = duplicateOrganizationController;


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var individualCardDirective = __webpack_require__(143);
	var angular = __webpack_require__(2);
	var IndividualCardInlineEditConfig = __webpack_require__(146);
	module.exports = angular.module("crm.individual", [])
	    .directive("crmIndividualCard", individualCardDirective)
	    .service('IndividualCardInlineEditConfig', IndividualCardInlineEditConfig);


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../../../typings/index.d.ts"/>
	var individualCardController = __webpack_require__(144);
	function individualCardDirective() {
	    return {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            contactType: "@",
	            showFullProfile: "=",
	            dealershipId: "="
	        },
	        templateUrl: "app/contact/views/card/individual/individualCardTemplate.html",
	        controller: individualCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	}
	module.exports = individualCardDirective;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var emailVerifyOptions_1 = __webpack_require__(145);
	var DNC_OPTIONS = [
	    "Don't Contact",
	    "DNC List - Don't Contact",
	    "DNC List - Current Customer",
	    "DNC List - Current Prospect"
	];
	var DO_NOT_CONTACT_OPTION = DNC_OPTIONS[0];
	var DNC_DO_NOT_CONTACT_OPTION = DNC_OPTIONS[1];
	var DNC_STYLE_OPTIONS = [
	    DNC_OPTIONS[2],
	    DNC_OPTIONS[3]
	];
	var individualCardController = (function () {
	    function individualCardController($scope, $q, $translate, ServiceWrapper, FranchiseRefDefApiService, ContactSsnService, inlineEditingService, IndividualCardInlineEditConfig, ContactService, TranslationCache, InlineEditFacadeFactory, DataApiSettings, ModalService, permissionService, EmailVerifyFrontendService, GmLookupService, refDefService, eventManagerService, CrmConstants, ContactApiService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$q = $q;
	        this.$translate = $translate;
	        this.ServiceWrapper = ServiceWrapper;
	        this.FranchiseRefDefApiService = FranchiseRefDefApiService;
	        this.ContactSsnService = ContactSsnService;
	        this.inlineEditingService = inlineEditingService;
	        this.IndividualCardInlineEditConfig = IndividualCardInlineEditConfig;
	        this.ContactService = ContactService;
	        this.TranslationCache = TranslationCache;
	        this.InlineEditFacadeFactory = InlineEditFacadeFactory;
	        this.DataApiSettings = DataApiSettings;
	        this.ModalService = ModalService;
	        this.permissionService = permissionService;
	        this.EmailVerifyFrontendService = EmailVerifyFrontendService;
	        this.GmLookupService = GmLookupService;
	        this.refDefService = refDefService;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.ContactApiService = ContactApiService;
	        this.isCollapsed = true;
	        this.canEditSource = false;
	        this.inlineEditPhoneOnSave = function (facade) {
	            var self = _this;
	            var original = angular.copy(self.contact.contactPoints);
	            self.contact.contactPoints.mobile.value = facade.model.mobile.value;
	            self.contact.contactPoints.other.value = facade.model.home.value;
	            self.contact.contactPoints.work.value = facade.model.work.value;
	            self.contact.contactPoints.mobile.preferred = false;
	            self.contact.contactPoints.other.preferred = false;
	            self.contact.contactPoints.work.preferred = false;
	            var isAnyPhonePreferred = false;
	            switch (facade.model.selectedPreferred) {
	                case 'home':
	                    self.contact.contactPoints.other.preferred = true;
	                    isAnyPhonePreferred = true;
	                    break;
	                case 'work':
	                    self.contact.contactPoints.work.preferred = true;
	                    isAnyPhonePreferred = true;
	                    break;
	                case 'mobile':
	                    self.contact.contactPoints.mobile.preferred = true;
	                    isAnyPhonePreferred = true;
	                    break;
	            }
	            if (isAnyPhonePreferred) {
	                self.contact.contactPoints.email.preferred = false;
	            }
	            return self.ContactApiService.updateIndividualViaApi(self.contact).then(function (updatedContact) {
	                self.contact = updatedContact;
	                self.IndividualCardInlineEditConfig.init(self.contact, self.individualRefDefs);
	                self.emailFacade = self.IndividualCardInlineEditConfig.getEmailFacade(self.contact.contactPoints, self.inlineEditEmailOnBeforeSave, self.inlineEditEmailOnSave(), self.emailFacade.guid);
	                self.inlineEditingService.updateModel(self.emailFacade.guid, self.emailFacade);
	            }, function () {
	                self.contact.contactPoints.mobile.value = original.mobile.value;
	                self.contact.contactPoints.other.value = original.other.value;
	                self.contact.contactPoints.work.value = original.work.value;
	            });
	        };
	        this.inlineEditEmailOnBeforeSave = function (facade) {
	            if (!_this.hasOtherContactPoints() && facade.model.value.length == 0) {
	                _this.eventManagerService.publish(_this.CrmConstants.CONTACT.CONTACT_POINTS.EMAIL_DELETE_ERROR, {
	                    alertType: 'error',
	                    message: _this.$translate.instant('crm.contact.EMAIL_DELETE_ERROR')
	                });
	                return _this.$q.resolve({ shouldSave: false });
	            }
	            if (facade.model.value && facade.model.value.length > 0) {
	                return _this.EmailVerifyFrontendService
	                    .verifyEmail(facade.model.value)
	                    .then(function (emailVerifyResult) {
	                    switch (emailVerifyResult) {
	                        case emailVerifyOptions_1.EmailVerifyOptions.FIX_EMAIL:
	                            //Do not continue to on save just close modal and leave inline edit open
	                            return {
	                                shouldSave: false,
	                            };
	                        case emailVerifyOptions_1.EmailVerifyOptions.REMOVE_EMAIL:
	                            //Remove the email and save
	                            facade.model.value = '';
	                            facade.model.preferred = false;
	                            return {
	                                shouldSave: true,
	                                ignoreForm: true
	                            };
	                        case emailVerifyOptions_1.EmailVerifyOptions.SAVE_ANYWAY:
	                            //Saves the email
	                            return {
	                                shouldSave: true
	                            };
	                        default:
	                            return {
	                                shouldSave: true
	                            };
	                    }
	                }, function () {
	                    return {
	                        shouldSave: false,
	                    };
	                });
	            }
	            else {
	                facade.model.value = '';
	                facade.model.preferred = false;
	                return _this.$q.resolve({ shouldSave: true, ignoreForm: true });
	            }
	        };
	        this.neverContactViaOnSave = function (facade) {
	            var self = _this;
	            var contactToUpdate = angular.copy(self.contact);
	            contactToUpdate.neverContactVia = facade.model.neverContactVia;
	            return self.ContactApiService.updateIndividualViaApi(contactToUpdate).then(function (updatedContact) {
	                self.contact = updatedContact;
	                self.IndividualCardInlineEditConfig.init(self.contact, self.individualRefDefs);
	                self.phonesFacade = _this.IndividualCardInlineEditConfig.getPhoneFacade(_this.TranslationCache.get('crm.contact.contact_points.PHONE_NUMBERS'), _this.contact.contactPoints, _this.inlineEditPhoneOnSave, _this.checkDncOptionsForIcon(), self.phonesFacade.guid);
	                self.inlineEditingService.updateModel(self.phonesFacade.guid, self.phonesFacade);
	            });
	        };
	        this.getInlineEditOnSave = function (model) {
	            var self = _this;
	            return function (facade) {
	                var original = angular.copy(model);
	                facade.fields.forEach(function (field) {
	                    model[field.fieldName] = facade.model[field.fieldName];
	                });
	                model["isComplete"] = facade.model.isComplete;
	                return self.ContactApiService.updateIndividualViaApi(self.contact).then(function (updatedContact) {
	                    return true;
	                }, function () {
	                    model = original;
	                });
	            };
	        };
	        this.displayPhone = function (phoneNumber) {
	            var doNotDisplayDncOption = _this.isDoNotDisplayDncOption();
	            return doNotDisplayDncOption ? doNotDisplayDncOption : phoneNumber;
	        };
	        this.isDoNotDisplayDncOption = function () {
	            if (!_this.isDncValid()) {
	                return;
	            }
	            if (_this.contact.contactPoints.dncOption == DO_NOT_CONTACT_OPTION) {
	                return "Do Not Call"; //TODO: Translate
	            }
	            else if (_this.contact.contactPoints.dncOption == DNC_DO_NOT_CONTACT_OPTION) {
	                return "DNC - Do Not Call"; //TODO: Translate
	            }
	            return '';
	        };
	        this.checkDncOptionsForStyle = function () {
	            if (!_this.isDncValid()) {
	                return;
	            }
	            var self = _this;
	            return _.find(DNC_STYLE_OPTIONS, function (option) {
	                return option === self.contact.contactPoints.dncOption;
	            });
	        };
	        this.checkDncOptionsForIcon = function () {
	            if (!_this.isDncValid()) {
	                return;
	            }
	            var self = _this;
	            return _.find(DNC_OPTIONS, function (option) {
	                return option === self.contact.contactPoints.dncOption;
	            });
	        };
	        this.showGMModal = function () {
	            _this.gmLookupScopeModel = {
	                contactId: _this.contact.id,
	                siteId: _this.DataApiSettings.getSiteId(),
	                gmInfo: _this.contact.gmInfo,
	                onClose: function () {
	                }
	            };
	            _this.GmLookupService.launchGmWindow(_this.gmLookupScopeModel);
	            //This is the code to get the gm info to show up in a modal. Currently this has CORS issues so we are opening in a new window instead.
	            //var modalManager = this.ModalService.openModalViaTemplateUrl("app/contact/views/card/individual/templates/gmContactModal.html", this, true);
	            //
	            //this.gmLookupScopeModel.onClose = () => {
	            //    modalManager.accept();
	            //}
	        };
	        this.setFacades = function () {
	            // TODO: Temp solution for disable inline edit when cross site
	            _this.phonesFacade = _this.IndividualCardInlineEditConfig.getPhoneFacade(_this.TranslationCache.get('crm.contact.contact_points.PHONE_NUMBERS'), _this.contact.contactPoints, _this.inlineEditPhoneOnSave, _this.checkDncOptionsForIcon(), !!_this.checkDncOptionsForIcon(), _this.disableEditCrossSite);
	            _this.emailFacade = _this.IndividualCardInlineEditConfig.getEmailFacade(_this.contact.contactPoints, _this.inlineEditEmailOnBeforeSave, _this.inlineEditEmailOnSave(), null, _this.disableEditCrossSite);
	            _this.addressFacade = _this.IndividualCardInlineEditConfig.getAddressFacade(_this.getInlineEditOnSave(_this.contact.address), _this.disableEditCrossSite);
	            _this.driversLicenseNumberFacade = _this.IndividualCardInlineEditConfig.getDriversLicenseNumberFacade(_this.inlineEditDriversLicenseNumberOnSave(), _this.disableEditCrossSite);
	            _this.genderFacade = _this.IndividualCardInlineEditConfig.getGenderFacade(_this.inlineEditGenderOnSave(), _this.disableEditCrossSite);
	            _this.incomeFacade = _this.IndividualCardInlineEditConfig.getIncomeFacade(_this.inlineEditIncomeOnSave(), _this.disableEditCrossSite);
	            _this.preferredLanguageFacade = _this.IndividualCardInlineEditConfig.getPreferredLanguageFacade(_this.inlineEditPreferredLanguageOnSave(), _this.disableEditCrossSite);
	            _this.employerFacade = _this.IndividualCardInlineEditConfig.getEmployerFacade(_this.inlineEditEmployerOnSave(), _this.disableEditCrossSite);
	            _this.sourceFacade = _this.IndividualCardInlineEditConfig.getSourceFacade(_this.inlineEditSourceOnSave(), _this.disableEditCrossSite);
	            _this.statusFacade = _this.IndividualCardInlineEditConfig.getStatusFacade(_this.inlineEditStatusOnSave(), _this.disableEditCrossSite);
	            _this.disableSoldStatus(_this.statusFacade);
	            _this.notesFacade = _this.IndividualCardInlineEditConfig.getNotesFacade(_this.getInlineEditOnSave(_this.contact), _this.disableEditCrossSite);
	            _this.nameFacade = _this.IndividualCardInlineEditConfig.getNameFacade(_this.getInlineEditOnSave(_this.contact), _this.disableEditCrossSite);
	            _this.neverContactViaFacade = _this.IndividualCardInlineEditConfig.getNeverContactViaFacade(_this.neverContactViaOnSave, _this.neverContactViaPermission, _this.disableEditCrossSite);
	            _this.badgeTypeSubTypeFacade = _this.IndividualCardInlineEditConfig.getTypeSubTypeFacade(_this.getInlineEditOnSave(_this.contact), _this.disableEditCrossSite);
	            _this.typeSubTypeFacade = _this.IndividualCardInlineEditConfig.getTypeSubTypeFacade(_this.getInlineEditOnSave(_this.contact), _this.disableEditCrossSite);
	        };
	        var self = this;
	        // TODO: Temp solution for disable inline edit when cross site
	        var unbindDealershipIdWatch = $scope.$watch('ctrl.dealershipId', function (dealershipId) {
	            if (dealershipId) {
	                _this.dealershipId = dealershipId;
	                _this.disableEditCrossSite = dealershipId != _this.DataApiSettings.getSiteId();
	                unbindDealershipIdWatch();
	            }
	        });
	        var unbindContactWatch = $scope.$watch('ctrl.contact', function (contact) {
	            if (contact) {
	                var getIndividualRefDefPromise = _this.refDefService.getRefDefs([
	                    'individual.type',
	                    'individual.subtype',
	                    'individual.income',
	                    'individual.nevervia',
	                    'individual.salutation',
	                    'pref.languages',
	                    'individual.source',
	                    'individual.status']);
	                var getSubTypePromise = _this.refDefService.getSubRefDef('individual.type', contact.contactType.value);
	                var getPermissionsPromise = _this.getPermissions();
	                self.$q.all([getIndividualRefDefPromise, getPermissionsPromise, getSubTypePromise])
	                    .then(function (resolutions) {
	                    self.individualRefDefs = resolutions[0];
	                    self.individualRefDefs['individual.subtype'] = resolutions[2];
	                    self.IndividualCardInlineEditConfig.init(self.contact, self.individualRefDefs);
	                    self.setFacades();
	                });
	                unbindContactWatch();
	            }
	        });
	    }
	    individualCardController.prototype.getPermissions = function () {
	        var _this = this;
	        var revenueRadarPermissionPromise = this.permissionService.getPermission('RevenueRadar-AlertDetailsIcon')
	            .then(function (permission) {
	            _this.revRadarPermission = permission;
	        });
	        var neverContactViaPermissionPromise = this.permissionService.getPermission('InsertRestriction:NeverContactVia')
	            .then(function (permission) {
	            _this.neverContactViaPermission = permission;
	        });
	        var salesSoldChangeStatusPermissionPromise = this.permissionService.getPermission('SalesSoldChangeStatus')
	            .then(function (permission) {
	            _this.changeStatusFromSoldPermission = permission;
	        });
	        var salesSoldPermissionPromise = this.permissionService.getPermission('SalesSold')
	            .then(function (permission) {
	            _this.changeStatusToSoldPermission = permission;
	        });
	        var eventSourcePermissionPromise = this.permissionService.getPermission('EventSource')
	            .then(function (permission) {
	            if (permission.edit) {
	                _this.canEditSource = true;
	            }
	        });
	        var gmCustomerSearchPermissionPromise = this.permissionService.getPermission('GMCustomerSearch')
	            .then(function (permission) {
	            _this.gmCustomerSearchPermission = permission;
	        });
	        var driversLicensePermissionPromise = this.permissionService.getPermission('DriversLicense')
	            .then(function (permission) {
	            _this.driversLicensePermission = permission;
	        });
	        var southwestPacificLocalizationPermissionPromise = this.permissionService.getPermission('Localization-SouthwestPacific')
	            .then(function (permission) {
	            _this.southwestPacificLocalizationPermission = permission;
	        });
	        var northAmericaLocalizationPermissionPromise = this.permissionService.getPermission('Localization-NorthAmerica')
	            .then(function (permission) {
	            _this.northAmericaLocalizationPermission = permission;
	        });
	        return this.$q.all([
	            revenueRadarPermissionPromise,
	            neverContactViaPermissionPromise,
	            salesSoldChangeStatusPermissionPromise,
	            salesSoldPermissionPromise,
	            eventSourcePermissionPromise,
	            gmCustomerSearchPermissionPromise,
	            driversLicensePermissionPromise,
	            southwestPacificLocalizationPermissionPromise,
	            northAmericaLocalizationPermissionPromise
	        ]);
	    };
	    individualCardController.prototype.inlineEditEmailOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var originalValue = self.contact.contactPoints.email.value;
	            var originalPreferred = self.contact.contactPoints.email.preferred;
	            self.contact.contactPoints.email.preferred = facade.model.preferred;
	            self.contact.contactPoints.email.value = facade.model.value;
	            if (self.contact.contactPoints.email.preferred) {
	                self.contact.contactPoints.mobile.preferred = false;
	                self.contact.contactPoints.other.preferred = false;
	                self.contact.contactPoints.work.preferred = false;
	            }
	            return self.ContactApiService.updateIndividualViaApi(self.contact).then(function (updatedContact) {
	                self.contact = updatedContact;
	                self.IndividualCardInlineEditConfig.init(self.contact, self.individualRefDefs);
	                self.phonesFacade = _this.IndividualCardInlineEditConfig.getPhoneFacade(_this.TranslationCache.get('crm.contact.contact_points.PHONE_NUMBERS'), self.contact.contactPoints, self.inlineEditPhoneOnSave, self.checkDncOptionsForIcon(), self.phonesFacade.guid);
	                self.inlineEditingService.updateModel(self.phonesFacade.guid, self.phonesFacade);
	            }, function () {
	                self.contact.contactPoints.email.value = originalValue;
	                self.contact.contactPoints.email.preferred = originalPreferred;
	            });
	        };
	    };
	    individualCardController.prototype.hasOtherContactPoints = function () {
	        var hasPhoneNumber = this.contact.contactPoints.getPhoneNumber();
	        var hasAddress = this.contact.address.isComplete;
	        return hasPhoneNumber || hasAddress;
	    };
	    // TODO: This is some copy and paste pasta that we will work on improving soooon.
	    individualCardController.prototype.inlineEditDriversLicenseNumberOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = self.contact.driversLicenseNumber;
	            self.contact.driversLicenseNumber = facade.model.driversLicenseNumber;
	            return self.ContactApiService.updateIndividualViaApi(self.contact).then(function () {
	                return true;
	            }, function () {
	                self.contact.driversLicenseNumber = original;
	            });
	        };
	    };
	    individualCardController.prototype.inlineEditGenderOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = self.contact.gender;
	            self.contact.gender = facade.model.selectedGender.value;
	            return self.ContactApiService.updateIndividualViaApi(self.contact).then(function () {
	                return true;
	            }, function () {
	                self.contact.gender = original;
	            });
	        };
	    };
	    individualCardController.prototype.inlineEditIncomeOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = angular.copy(self.contact.income);
	            self.contact.income = facade.model.selectedIncome;
	            return self.ContactApiService.updateIndividualViaApi(self.contact).then(function () {
	                return true;
	            }, function () {
	                self.contact.income = original;
	            });
	        };
	    };
	    individualCardController.prototype.inlineEditPreferredLanguageOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = angular.copy(self.contact.preferredLanguage);
	            self.contact.preferredLanguage = facade.model.preferredLanguage;
	            return self.ContactApiService.updateIndividualViaApi(self.contact).then(function () {
	                return true;
	            }, function () {
	                self.contact.preferredLanguage = original;
	            });
	        };
	    };
	    individualCardController.prototype.inlineEditEmployerOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var originalEmployer = self.contact.employer;
	            var originalCompanyId = self.contact.companyId;
	            self.contact.employer = facade.model.employer;
	            self.contact.companyId = facade.model.companyId;
	            return self.ContactApiService.updateIndividualViaApi(self.contact).then(function () {
	                return true;
	            }, function () {
	                self.contact.employer = originalEmployer;
	                self.contact.companyId = originalCompanyId;
	            });
	        };
	    };
	    individualCardController.prototype.inlineEditSourceOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = angular.copy(self.contact.source);
	            self.contact.source = facade.model.source;
	            return self.ContactApiService.updateIndividualViaApi(self.contact).then(function () {
	                return true;
	            }, function () {
	                self.contact.source = original;
	            });
	        };
	    };
	    individualCardController.prototype.inlineEditStatusOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var original = angular.copy(self.contact.status);
	            // TODO: Does this also set the active flag on contact?
	            self.contact.status = facade.model.status;
	            return self.ContactApiService.updateIndividualViaApi(self.contact).then(function () {
	                return true;
	            }, function () {
	                self.contact.status = original;
	            });
	        };
	    };
	    individualCardController.prototype.inlineEditCustomerTypeOnSave = function () {
	        var _this = this;
	        return function (facade) {
	            var self = _this;
	            var originalType = angular.copy(self.contact.contactType);
	            var originalSubType = angular.copy(self.contact.contactSubType);
	            self.contact.contactType = facade.model.contactType;
	            self.contact.contactSubType = facade.model.contactSubType;
	            return self.ContactApiService.updateIndividualViaApi(self.contact).then(function () {
	                return true;
	            }, function () {
	                self.contact.contactType = originalType;
	                self.contact.contactSubType = originalSubType;
	            });
	        };
	    };
	    individualCardController.prototype.showPingsModal = function (event) {
	        var _this = this;
	        event.stopPropagation();
	        var fabulousTemplate = '<crm-ping-collection-modal contact-id="ctrl.contact.id" full-name="ctrl.contact.getFullName()" on-close="ctrl.onClosePingsModal()"></crm-ping-collection-modal>';
	        var modalInstance = this.ModalService.openModalViaTemplateAndGetHandle(fabulousTemplate, this);
	        this.onClosePingsModal = function () {
	            modalInstance.close();
	            _this.isOpeningIncentiveModal = false;
	        };
	    };
	    individualCardController.prototype.disableSoldStatus = function (facade) {
	        var self = this;
	        _.each(facade.fields[0].fieldValues, function (value, index) {
	            if ((value.text == 'Sold' || value.text == 'Deal') && !self.changeStatusToSoldPermission.edit) {
	                facade.fields[0].fieldValues.splice(index, 1);
	            }
	        });
	        if ((facade.model.status.text == 'Sold' || facade.model.status.text == 'Deal') && !this.changeStatusFromSoldPermission.edit) {
	            facade.disableEdit = true;
	        }
	    };
	    individualCardController.prototype.getContactSubtypeClass = function () {
	        if (!this.contact || !this.contact.contactSubType || !this.contact.contactSubType.text) {
	            return '';
	        }
	        if (this.contact.contactSubType.text == "Platinum") {
	            return "ws-platinum";
	        }
	        else if (this.contact.contactSubType.text == "Gold") {
	            return "ws-gold";
	        }
	        else if (this.contact.contactSubType.text == "Silver") {
	            return "ws-silver";
	        }
	        else if (this.contact.contactSubType.text == "Bronze") {
	            return "ws-bronze";
	        }
	        else {
	            return 'ws-custom';
	        }
	    };
	    individualCardController.prototype.isDncValid = function () {
	        return !!this.contact && !!this.contact.contactPoints;
	    };
	    individualCardController.prototype.openDriversLicenseModal = function () {
	        var driversLicenseTemplateUrl = 'app/driversLicense/driversLicenseModal.html';
	        this.modal = this.ModalService.openModalViaTemplateUrl(driversLicenseTemplateUrl, this);
	    };
	    individualCardController.prototype.getExternalReferenceIds = function () {
	        if (this.contact.externalReferences) {
	            return _.pluck(this.contact.externalReferences, 'externalReferenceId').join(', ');
	        }
	        return '';
	    };
	    ;
	    individualCardController.$inject = [
	        '$scope',
	        '$q',
	        '$translate',
	        'ServiceWrapper',
	        'FranchiseRefDefApiService',
	        'ContactSsnService',
	        'inlineEditingService',
	        'IndividualCardInlineEditConfig',
	        'ContactService',
	        'TranslationCache',
	        'InlineEditFacadeFactory',
	        'DataApiSettings',
	        'modalService',
	        'permissionService',
	        'EmailVerifyFrontendService',
	        'GmLookupService',
	        'RefDefService',
	        'eventManagerService',
	        'CrmConstants',
	        'ContactApiService'
	    ];
	    return individualCardController;
	}());
	module.exports = individualCardController;


/***/ },
/* 145 */
/***/ function(module, exports) {

	"use strict";
	(function (EmailVerifyOptions) {
	    EmailVerifyOptions[EmailVerifyOptions["FIX_EMAIL"] = 1] = "FIX_EMAIL";
	    EmailVerifyOptions[EmailVerifyOptions["REMOVE_EMAIL"] = 2] = "REMOVE_EMAIL";
	    EmailVerifyOptions[EmailVerifyOptions["SAVE_ANYWAY"] = 3] = "SAVE_ANYWAY";
	})(exports.EmailVerifyOptions || (exports.EmailVerifyOptions = {}));
	var EmailVerifyOptions = exports.EmailVerifyOptions;


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ContactCardInlineEditConfig = __webpack_require__(147);
	var DNC_OPTIONS = [
	    "Don't Contact",
	    "DNC List - Don't Contact"
	];
	var DO_NOT_CONTACT_OPTION = DNC_OPTIONS[0];
	var DNC_DO_NOT_CONTACT_OPTION = DNC_OPTIONS[1];
	var IndividualCardInlineEditConfig = (function (_super) {
	    __extends(IndividualCardInlineEditConfig, _super);
	    function IndividualCardInlineEditConfig(inlineEditFacadeFactory, translationCache, EmailFactory) {
	        _super.call(this, inlineEditFacadeFactory, translationCache);
	        this.EmailFactory = EmailFactory;
	    }
	    IndividualCardInlineEditConfig.prototype.init = function (individual, individualRefDefs) {
	        _super.prototype.init.call(this, individual, individualRefDefs, 'individual');
	        this.individual = individual;
	        this.individualRefDefs = individualRefDefs;
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    IndividualCardInlineEditConfig.prototype.getNameFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditNameModel = {
	            salutation: this.individual.salutation,
	            firstName: this.individual.firstName,
	            middleName: this.individual.middleName,
	            lastName: this.individual.lastName,
	            friendlyName: this.individual.friendlyName
	        };
	        inlineEditNameModel.salutation = _.find(this.individualRefDefs['individual.salutation'], function (prefix) {
	            return prefix.text === inlineEditNameModel.salutation.text;
	        });
	        // TODO: Temp solution for disable inline edit when cross site
	        return this.inlineEditFacadeFactory.createIndividualNameFacade("Customer Name", inlineEditNameModel, this.individualRefDefs['individual.salutation'], onSave, disableEditCrossSite);
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    IndividualCardInlineEditConfig.prototype.getPhoneFacade = function (title, contactPoints, onSave, tooltip, guidToUse, disableEditCrossSite) {
	        var inlineEditPhoneModel = {
	            mobile: {
	                value: contactPoints.mobile.value,
	                preferred: contactPoints.mobile.preferred
	            },
	            home: {
	                value: contactPoints.other.value,
	                preferred: contactPoints.other.preferred
	            },
	            work: {
	                value: contactPoints.work.value,
	                preferred: contactPoints.work.preferred
	            },
	            selectedPreferred: undefined
	        };
	        if (contactPoints.mobile.preferred) {
	            inlineEditPhoneModel.selectedPreferred = "mobile";
	        }
	        else if (contactPoints.other.preferred) {
	            inlineEditPhoneModel.selectedPreferred = "home";
	        }
	        else if (contactPoints.work.preferred) {
	            inlineEditPhoneModel.selectedPreferred = "work";
	        }
	        var fields = [
	            {
	                label: this.translationCache.get("crm.contact.contact_points.MOBILE_LETTER"),
	                fieldName: "mobile",
	                type: "phone",
	                htmlAttributeName: "phoneMobileInlineEdit"
	            },
	            {
	                label: this.translationCache.get("crm.contact.contact_points.HOME_LETTER"),
	                fieldName: "home",
	                type: "phone",
	                htmlAttributeName: "phoneHomeInlineEdit"
	            },
	            {
	                label: this.translationCache.get("crm.contact.contact_points.WORK_LETTER"),
	                fieldName: "work",
	                type: "phone",
	                htmlAttributeName: "phoneWorkInlineEdit"
	            }
	        ];
	        var disableEdit = contactPoints.dncOption == DO_NOT_CONTACT_OPTION ||
	            contactPoints.dncOption == DNC_DO_NOT_CONTACT_OPTION ||
	            // TODO: Temp solution for disable inline edit when cross site
	            disableEditCrossSite;
	        var phoneFacade = this.inlineEditFacadeFactory.createGeneralFacade(title, inlineEditPhoneModel, fields, onSave, disableEdit, guidToUse);
	        phoneFacade.tooltip = tooltip;
	        return phoneFacade;
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    IndividualCardInlineEditConfig.prototype.getEmailFacade = function (contactPoints, onBeforeSave, onSave, guidToUse, disableEditCrossSite) {
	        var inlineEditEmailModel = {
	            value: contactPoints.email.value,
	            preferred: contactPoints.email.preferred
	        };
	        var sampleEmail = this.EmailFactory.create();
	        var inlineEditEmailFields = [
	            {
	                fieldName: "value",
	                type: "text",
	                placeholder: "john@example.com",
	                validation: { pattern: sampleEmail.validationRegex },
	                htmlAttributeName: "emailInlineEdit"
	            }
	        ];
	        var facade = this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.contact.EMAIL"), inlineEditEmailModel, inlineEditEmailFields, onSave, 
	        // TODO: Temp solution for disable inline edit when cross site
	        disableEditCrossSite, guidToUse);
	        facade.onBeforeSave = onBeforeSave;
	        return facade;
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    IndividualCardInlineEditConfig.prototype.getDriversLicenseNumberFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditDriversLicenseFields = [
	            {
	                fieldName: "driversLicenseNumber",
	                type: "text",
	                placeholder: this.translationCache.get("crm.contact.headers.DRIVERS_LICENSE_NUMBER"),
	                htmlAttributeName: "inlineEditInput"
	            }
	        ];
	        var facadeModel = {
	            driversLicenseNumber: this.individual.driversLicenseNumber
	        };
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.contact.headers.DRIVERS_LICENSE_NUMBER_SHORT"), facadeModel, inlineEditDriversLicenseFields, onSave, 
	        // TODO: Temp solution for disable inline edit when cross site
	        disableEditCrossSite);
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    IndividualCardInlineEditConfig.prototype.getGenderFacade = function (onSave, disableEditCrossSite) {
	        var _this = this;
	        var genders = [
	            { text: this.translationCache.get("crm.contact.gender.SELECT"), value: "" },
	            { text: this.translationCache.get("crm.contact.gender.FEMALE"), value: "Female" },
	            { text: this.translationCache.get("crm.contact.gender.MALE"), value: "Male" }
	        ];
	        var inlineEditGenderFields = [
	            {
	                fieldName: "selectedGender",
	                type: "select",
	                fieldValues: genders,
	                htmlAttributeName: "genderInlineInput"
	            }
	        ];
	        var selectedGender = _.find(genders, function (gender) {
	            if (!gender.value || !_this.individual || !_this.individual.gender) {
	                return false;
	            }
	            return gender.value === _this.individual.gender;
	        });
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.contact.headers.GENDER"), { selectedGender: selectedGender }, inlineEditGenderFields, onSave, 
	        // TODO: Temp solution for disable inline edit when cross site
	        disableEditCrossSite);
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    IndividualCardInlineEditConfig.prototype.getIncomeFacade = function (onSave, disableEditCrossSite) {
	        var _this = this;
	        var inlineEditFields = [
	            {
	                fieldName: "selectedIncome",
	                type: "select",
	                fieldValues: this.individualRefDefs['individual.income'],
	                htmlAttributeName: "incomeInlineEdit"
	            }
	        ];
	        this.individual.income = _.find(this.individualRefDefs['individual.income'], function (value) {
	            if (!value || !_this.individual || !_this.individual.income) {
	                return false;
	            }
	            return value.text === _this.individual.income.text;
	        });
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.contact.headers.INCOME"), { selectedIncome: this.individual.income }, inlineEditFields, onSave, 
	        // TODO: Temp solution for disable inline edit when cross site
	        disableEditCrossSite);
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    IndividualCardInlineEditConfig.prototype.getPreferredLanguageFacade = function (onSave, disableEditCrossSite) {
	        var _this = this;
	        var inlineEditFields = [
	            {
	                fieldName: "preferredLanguage",
	                type: "select",
	                fieldValues: this.individualRefDefs['pref.languages'],
	                htmlAttributeName: "preferredLanguageInlineEdit"
	            }
	        ];
	        this.individual.preferredLanguage = _.find(this.individualRefDefs['pref.languages'], function (value) {
	            if (!value || !_this.individual || !_this.individual.preferredLanguage) {
	                return false;
	            }
	            return value.text === _this.individual.preferredLanguage.text;
	        });
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.contact.headers.PREFERRED_LANGUAGE"), { preferredLanguage: this.individual.preferredLanguage }, inlineEditFields, onSave, 
	        // TODO: Temp solution for disable inline edit when cross site
	        disableEditCrossSite);
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    IndividualCardInlineEditConfig.prototype.getEmployerFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditFields = [
	            {
	                fieldName: "employer",
	                type: "text",
	                placeholder: "",
	                htmlAttributeName: "inlineEditInput"
	            }
	        ];
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.contact.headers.PRIMARY_COMPANY"), {
	            employer: this.individual.employer,
	            companyId: this.individual.companyId
	        }, inlineEditFields, onSave, 
	        // TODO: Temp solution for disable inline edit when cross site
	        disableEditCrossSite);
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    IndividualCardInlineEditConfig.prototype.getSourceFacade = function (onSave, disableEditCrossSite) {
	        var _this = this;
	        var inlineEditFields = [
	            {
	                fieldName: "source",
	                type: "select",
	                fieldValues: this.individualRefDefs['individual.source'],
	                htmlAttributeName: "sourceInlineEdit"
	            }
	        ];
	        this.individual.source = _.find(this.individualRefDefs['individual.source'], function (value) {
	            if (!value || !_this.individual || !_this.individual.source) {
	                return false;
	            }
	            return value.text === _this.individual.source.text;
	        });
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.contact.headers.CUSTOMER_SOURCE"), { source: this.individual.source }, inlineEditFields, onSave, 
	        // TODO: Temp solution for disable inline edit when cross site
	        disableEditCrossSite);
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    IndividualCardInlineEditConfig.prototype.getStatusFacade = function (onSave, disableEditCrossSite) {
	        var _this = this;
	        var inlineEditFields = [
	            {
	                fieldName: "status",
	                type: "select",
	                fieldValues: this.individualRefDefs['individual.status'],
	                htmlAttributeName: "statusInlineEdit"
	            }
	        ];
	        this.individual.status = _.find(this.individualRefDefs['individual.status'], function (value) {
	            if (!value || !_this.individual || !_this.individual.status) {
	                return false;
	            }
	            return value.text === _this.individual.status.text;
	        });
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.contact.headers.STATUS"), { status: this.individual.status }, inlineEditFields, onSave, 
	        // TODO: Temp solution for disable inline edit when cross site
	        disableEditCrossSite);
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    IndividualCardInlineEditConfig.prototype.getAddressFacade = function (onSave, disableEditCrossSite) {
	        return this.inlineEditFacadeFactory.createAddressFacade("Home Address", 
	        // TODO: Temp solution for disable inline edit when cross site
	        this.individual.address, onSave, disableEditCrossSite);
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    IndividualCardInlineEditConfig.prototype.getNotesFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditNotesFields = [
	            {
	                fieldName: "notes",
	                type: "textarea",
	                htmlAttributeName: "notesInlineEdit"
	            }
	        ];
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.contact.headers.NOTES"), this.individual, inlineEditNotesFields, onSave, 
	        // TODO: Temp solution for disable inline edit when cross site
	        disableEditCrossSite);
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    IndividualCardInlineEditConfig.prototype.getNeverContactViaFacade = function (onSave, permission, disableEditCrossSite) {
	        var _this = this;
	        var refDefs = this.individualRefDefs['individual.nevervia'];
	        if (permission.restricted) {
	            refDefs = refDefs.filter(function (refDef) {
	                return _.find(permission.enabledValues, function (value) { return value == refDef.value; }) != undefined;
	            });
	        }
	        var inlineEditNeverContactViaFields = [
	            {
	                fieldName: "neverContactVia",
	                type: "select",
	                fieldValues: refDefs,
	                htmlAttributeName: "neverContactViaInlineEdit"
	            }
	        ];
	        this.individual.neverContactVia = _.find(this.individualRefDefs['individual.nevervia'], function (value) {
	            if (!value || !_this.individual || !_this.individual.neverContactVia) {
	                return false;
	            }
	            return value.text === _this.individual.neverContactVia.text;
	        });
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.contact.headers.NEVER_CONTACT_VIA"), this.individual, inlineEditNeverContactViaFields, onSave, 
	        // TODO: Temp solution for disable inline edit when cross site
	        disableEditCrossSite);
	    };
	    IndividualCardInlineEditConfig.$inject = [
	        "InlineEditFacadeFactory",
	        "TranslationCache",
	        "EmailFactory"
	    ];
	    return IndividualCardInlineEditConfig;
	}(ContactCardInlineEditConfig));
	module.exports = IndividualCardInlineEditConfig;


/***/ },
/* 147 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var ContactCardInlineEditConfig = (function () {
	    function ContactCardInlineEditConfig(inlineEditFacadeFactory, translationCache) {
	        this.inlineEditFacadeFactory = inlineEditFacadeFactory;
	        this.translationCache = translationCache;
	    }
	    ContactCardInlineEditConfig.prototype.init = function (contact, refDefs, contactType) {
	        this.contactType = contactType;
	        this.contact = contact;
	        this.refDefs = refDefs;
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    ContactCardInlineEditConfig.prototype.getTypeSubTypeFacade = function (onSave, disableEditCrossSite) {
	        var inlineEditFields = [];
	        if (this.contactType == 'individual') {
	            inlineEditFields = [
	                {
	                    fieldName: "contactType",
	                    type: "select",
	                    fieldValues: this.refDefs['individual.type'],
	                    htmlAttributeName: "contactTypeInlineEdit"
	                },
	                {
	                    fieldName: "contactSubType",
	                    type: "select",
	                    fieldValues: this.refDefs['individual.subtype'],
	                    htmlAttributeName: "contactSubTypeInlineEdit"
	                }
	            ];
	        }
	        else if (this.contactType == 'company') {
	            inlineEditFields = [
	                {
	                    fieldName: "contactType",
	                    type: "select",
	                    fieldValues: this.refDefs['company.type'],
	                    htmlAttributeName: "contactTypeInlineEdit"
	                },
	                {
	                    fieldName: "contactSubType",
	                    type: "select",
	                    fieldValues: this.refDefs['company.subtype'],
	                    htmlAttributeName: "contactSubTypeInlineEdit"
	                }
	            ];
	        }
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.contact.headers.CUSTOMER_TYPE"), {
	            contactType: this.contact.contactType,
	            contactSubType: this.contact.contactSubType
	        }, inlineEditFields, onSave, 
	        // TODO: Temp solution for disable inline edit when cross site
	        disableEditCrossSite);
	    };
	    return ContactCardInlineEditConfig;
	}());
	module.exports = ContactCardInlineEditConfig;


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var organizationCardDirective = __webpack_require__(149);
	var angular = __webpack_require__(2);
	var OrganizationCardInlineEditConfig = __webpack_require__(151);
	module.exports = angular.module("crm.organization", [])
	    .directive("crmOrganizationCard", organizationCardDirective)
	    .service("OrganizationCardInlineEditConfig", OrganizationCardInlineEditConfig);


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../../../../typings/index.d.ts" />
	"use strict";
	var organizationCardController_1 = __webpack_require__(150);
	function organizationCardDirective() {
	    return {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            contactType: "@",
	            showFullProfile: "=",
	            // TODO: Temp solution for disable inline edit when cross site
	            dealershipId: '='
	        },
	        templateUrl: "app/contact/views/card/organization/organizationCardTemplate.html",
	        controller: organizationCardController_1.OrganizationCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	}
	module.exports = organizationCardDirective;


/***/ },
/* 150 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var OrganizationCardController = (function () {
	    function OrganizationCardController($scope, $q, eventManagerService, inlineEditFacadeFactory, inlineEditingService, translationCache, ContactApiService, modalService, CrmConstants, organizationCardInlineEditConfig, RefDefService, DataApiSettings) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$q = $q;
	        this.eventManagerService = eventManagerService;
	        this.inlineEditFacadeFactory = inlineEditFacadeFactory;
	        this.inlineEditingService = inlineEditingService;
	        this.translationCache = translationCache;
	        this.ContactApiService = ContactApiService;
	        this.modalService = modalService;
	        this.CrmConstants = CrmConstants;
	        this.organizationCardInlineEditConfig = organizationCardInlineEditConfig;
	        this.RefDefService = RefDefService;
	        this.DataApiSettings = DataApiSettings;
	        this.isCollapsed = true;
	        this.loadingRefDefs = true;
	        this.setFacades = function () {
	            _this.nameFacade = _this.getContactNameFacade();
	            _this.addressFacade = _this.inlineEditFacadeFactory.createAddressFacade(_this.translationCache.get("crm.contact.organization.ADDRESS"), _this.contact.address, _this.getInlineEditOnSave(_this.contact.address), 
	            // TODO: Temp solution for disable inline edit when cross site
	            _this.disableEditCrossSite);
	            _this.badgeTypeSubTypeFacade = _this.organizationCardInlineEditConfig.getTypeSubTypeFacade(_this.getInlineEditOnSave(_this.contact), _this.disableEditCrossSite);
	            _this.typeSubTypeFacade = _this.organizationCardInlineEditConfig.getTypeSubTypeFacade(_this.getInlineEditOnSave(_this.contact), _this.disableEditCrossSite);
	        };
	        this.getInlineEditOnSave = function (model) {
	            var self = _this;
	            return function (facade) {
	                var original = angular.copy(model);
	                facade.fields.forEach(function (field) {
	                    model[field.fieldName] = facade.model[field.fieldName];
	                });
	                model["isComplete"] = facade.model.isComplete;
	                if (!_this.contact.dealershipId) {
	                    _this.contact.dealershipId = _this.DataApiSettings.getSiteId();
	                }
	                return self.ContactApiService.updateOrganizationViaApi(self.contact).then(function (updatedContact) {
	                    return true;
	                }, function () {
	                    model = original;
	                });
	            };
	        };
	        this.primaryContactOnSave = function (facade) {
	            var primaryContact = _this.contact.primaryContact;
	            var originalPrimaryContact = angular.copy(primaryContact);
	            var originalPrimaryContactId = _this.contact.primaryContactId;
	            facade.fields.forEach(function (field) {
	                primaryContact[field.fieldName] = facade.model[field.fieldName];
	            });
	            _this.contact.primaryContactId = facade.model.primaryContactId;
	            if (!_this.contact.dealershipId) {
	                _this.contact.dealershipId = _this.DataApiSettings.getSiteId();
	            }
	            return _this.ContactApiService.updateOrganizationViaApi(_this.contact).then(function () {
	                _this.primaryContactName = _this.getPrimaryContactName();
	                _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.COBUYER.COBUYER_ADDED);
	            }, function () {
	                _this.contact.primaryContact = originalPrimaryContact;
	                _this.contact.primaryContactId = originalPrimaryContactId;
	            });
	        };
	        // TODO: Temp solution for disable inline edit when cross site
	        var unbindDealershipIdWatch = $scope.$watch('ctrl.dealershipId', function (dealershipId) {
	            if (dealershipId) {
	                _this.dealershipId = dealershipId;
	                _this.disableEditCrossSite = dealershipId != _this.DataApiSettings.getSiteId();
	                unbindDealershipIdWatch();
	            }
	        });
	        var unwatch = $scope.$watch("ctrl.contact", function (newValue) {
	            if (newValue) {
	                var getRefDefPromise = _this.RefDefService.getRefDefs([
	                    'company.source',
	                    'company.status',
	                    'company.type',
	                ]);
	                var getRefDefSubtypePromise = _this.RefDefService.getSubRefDef('company.type', _this.contact.contactType.value);
	                _this.$q.all([getRefDefPromise, getRefDefSubtypePromise])
	                    .then(function (resolutions) {
	                    _this.organizationRefDefs = resolutions[0];
	                    _this.organizationRefDefs['company.subtype'] = resolutions[1];
	                    _this.organizationCardInlineEditConfig.init(_this.contact, _this.organizationRefDefs);
	                    _this.setFacades();
	                    _this.primaryContactName = _this.getPrimaryContactName();
	                    _this.primaryContactFacade = _this.getPrimaryContactFacade();
	                });
	                unwatch();
	            }
	        });
	    }
	    OrganizationCardController.prototype.viewPrimaryContact = function () {
	        this.eventManagerService.publish("tabChanged", "primaryContact");
	    };
	    OrganizationCardController.prototype.isPrimaryContactLinked = function () {
	        return this.contact.primaryContactId && this.contact.primaryContactId != '0';
	    };
	    OrganizationCardController.prototype.unlinkPrimaryContact = function () {
	        var _this = this;
	        var self = this;
	        var prompt = self.translationCache.get('crm.contact.organization.UNLINK_PRIMARY_CONTACT_PROMPT')
	            .replace('{contactName}', self.getPrimaryContactName())
	            .replace('{companyName}', self.contact.name);
	        return this.modalService.openModal(prompt, 'crm.contact.organization.UNLINK_PRIMARY_CONTACT_TITLE', 'crm.contact.organization.UNLINK_PRIMARY_CONTACT_CONFIRM', 'crm.contact.organization.UNLINK_PRIMARY_CONTACT_CANCEL')
	            .then(function (modalInstance) {
	            var originalPrimaryContactId = self.contact.primaryContactId;
	            var originalPrimaryContact = angular.copy(self.contact.primaryContact);
	            self.contact.primaryContactId = '0';
	            self.contact.primaryContact.First = '';
	            self.contact.primaryContact.Middle = '';
	            self.contact.primaryContact.Last = '';
	            self.contact.primaryContact.Friendly = '';
	            if (!_this.contact.dealershipId) {
	                _this.contact.dealershipId = _this.DataApiSettings.getSiteId();
	            }
	            self.ContactApiService.updateOrganizationViaApi(self.contact).then(function () {
	                self.eventManagerService.publish(self.CrmConstants.CONTACT.ORGANIZATION_PRIMARY_CONTACT_UNLINKED);
	            }, function () {
	                self.contact.primaryContactId = originalPrimaryContactId;
	                self.contact.primaryContact = originalPrimaryContact;
	            });
	            self.primaryContactName = self.getPrimaryContactName();
	            modalInstance.close();
	            return true;
	        }, function (modalInstance) {
	            modalInstance.dismiss();
	            return false;
	        });
	    };
	    OrganizationCardController.prototype.getPrimaryContactName = function () {
	        var primaryContact = this.contact.primaryContact;
	        var name = "";
	        if (primaryContact.First) {
	            name += primaryContact.First + " ";
	        }
	        if (primaryContact.Friendly) {
	            name += "\"" + primaryContact.Friendly + "\"" + " ";
	        }
	        if (primaryContact.Middle) {
	            name += primaryContact.Middle + " ";
	        }
	        if (primaryContact.Last) {
	            name += primaryContact.Last;
	        }
	        return name;
	    };
	    ;
	    OrganizationCardController.prototype.getPrimaryContactFacade = function () {
	        var model = angular.copy(this.contact.primaryContact);
	        model.primaryContactId = this.contact.primaryContactId;
	        var fields = [
	            {
	                fieldName: "First",
	                placeholder: this.translationCache.get("crm.contact.FIRST_NAME"),
	                type: "text",
	                htmlAttributeName: "primaryContactFisrtNameInlineEdit"
	            },
	            {
	                fieldName: "Last",
	                placeholder: this.translationCache.get("crm.contact.LAST_NAME"),
	                type: "text",
	                htmlAttributeName: "primaryContactLastNameInlineEdit"
	            }
	        ];
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.contact.organization.PRIMARY_CONTACT"), model, fields, this.primaryContactOnSave, 
	        // TODO: Temp solution for disable inline edit when cross site
	        this.disableEditCrossSite);
	    };
	    OrganizationCardController.prototype.getContactNameFacade = function () {
	        var fields = [{
	                fieldName: 'name',
	                type: 'text',
	                htmlAttributeName: 'companyName'
	            }];
	        return this.inlineEditFacadeFactory.createGeneralFacade(this.translationCache.get('crm.contact.organization.NAME'), this.contact, fields, this.getInlineEditOnSave(this.contact), 
	        // TODO: Temp solution for disable inline edit when cross site
	        this.disableEditCrossSite);
	    };
	    OrganizationCardController.prototype.getContactSubtypeClass = function () {
	        if (!this.contact || !this.contact.contactSubType || !this.contact.contactSubType.text) {
	            return '';
	        }
	        if (this.contact.contactSubType.text == "Platinum") {
	            return "ws-platinum";
	        }
	        else if (this.contact.contactSubType.text == "Gold") {
	            return "ws-gold";
	        }
	        else if (this.contact.contactSubType.text == "Silver") {
	            return "ws-silver";
	        }
	        else if (this.contact.contactSubType.text == "Bronze") {
	            return "ws-bronze";
	        }
	        else {
	            return 'ws-custom';
	        }
	    };
	    OrganizationCardController.prototype.showPingsModal = function (event) {
	        var _this = this;
	        event.stopPropagation();
	        var fabulousTemplate = '<crm-ping-collection-modal contact-id="ctrl.contact.id" full-name="ctrl.contact.getFullName()" on-close="ctrl.onClosePingsModal()"></crm-ping-collection-modal>';
	        var modalInstance = this.modalService.openModalViaTemplateAndGetHandle(fabulousTemplate, this);
	        this.onClosePingsModal = function () {
	            modalInstance.close();
	            _this.isOpeningIncentiveModal = false;
	        };
	    };
	    OrganizationCardController.$inject = [
	        '$scope',
	        '$q',
	        'eventManagerService',
	        'InlineEditFacadeFactory',
	        'inlineEditingService',
	        'TranslationCache',
	        'ContactApiService',
	        'modalService',
	        'CrmConstants',
	        'OrganizationCardInlineEditConfig',
	        'RefDefService',
	        'DataApiSettings'
	    ];
	    return OrganizationCardController;
	}());
	exports.OrganizationCardController = OrganizationCardController;


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ContactCardInlineEditConfig = __webpack_require__(147);
	var OrganizationCardInlineEditConfig = (function (_super) {
	    __extends(OrganizationCardInlineEditConfig, _super);
	    function OrganizationCardInlineEditConfig(inlineEditFacadeFactory, translationCache) {
	        _super.call(this, inlineEditFacadeFactory, translationCache);
	    }
	    OrganizationCardInlineEditConfig.prototype.init = function (organization, organizationRefDefs) {
	        _super.prototype.init.call(this, organization, organizationRefDefs, 'company');
	        this.organization = organization;
	        this.organizationRefDefs = organizationRefDefs;
	    };
	    OrganizationCardInlineEditConfig.$inject = [
	        "InlineEditFacadeFactory",
	        "TranslationCache"
	    ];
	    return OrganizationCardInlineEditConfig;
	}(ContactCardInlineEditConfig));
	module.exports = OrganizationCardInlineEditConfig;


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var getContactCardDirective = __webpack_require__(153);
	module.exports = angular.module("crm.contact.getContactCard", [])
	    .directive("crmGetContactCard", getContactCardDirective);


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var getContactCardController = __webpack_require__(154);
	function getContactCardDirective() {
	    var directive = {
	        restrict: "E",
	        scope: {
	            contact: "="
	        },
	        templateUrl: 'app/contact/views/card/getContactCard/getContactCardTemplate.html',
	        controller: getContactCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = getContactCardDirective;


/***/ },
/* 154 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var auditLogModalTemplateUrl = 'app/auditLog/plainTextAuditLogModalTemplate.html';
	var customerNotesModalTemplateUrl = 'app/contact/views/card/getContactCard/templates/customerNotesModalTemplate.html';
	var communicationSummaryWindowParams = 'toolbar=no,location=no,directories=no,status=yes,menubar=no,scrollbars=yes,resizable=yes,width=1024,height=780';
	var pullCreditReportModalTemplateUrl = 'app/contact/views/card/getContactCard/templates/pullCreditReportModalTemplate.html';
	var GetContactCardController = (function () {
	    function GetContactCardController($state, $stateParams, $window, ServiceWrapper, ContactService, eventManagerService, Constants, CrmConstants, NotFoundErrorService, TranslationCache, modalService, AuditLogApiService, creditApplicationApiService, CommunicationSummaryApiService, activityTimelineService, permissionService, creditReportApiService, dataApiSettings, AppSettings, SiteCacheService, DocumentManagerService) {
	        var _this = this;
	        this.$state = $state;
	        this.$stateParams = $stateParams;
	        this.$window = $window;
	        this.ServiceWrapper = ServiceWrapper;
	        this.ContactService = ContactService;
	        this.eventManagerService = eventManagerService;
	        this.Constants = Constants;
	        this.CrmConstants = CrmConstants;
	        this.NotFoundErrorService = NotFoundErrorService;
	        this.TranslationCache = TranslationCache;
	        this.modalService = modalService;
	        this.AuditLogApiService = AuditLogApiService;
	        this.creditApplicationApiService = creditApplicationApiService;
	        this.CommunicationSummaryApiService = CommunicationSummaryApiService;
	        this.activityTimelineService = activityTimelineService;
	        this.permissionService = permissionService;
	        this.creditReportApiService = creditReportApiService;
	        this.dataApiSettings = dataApiSettings;
	        this.AppSettings = AppSettings;
	        this.SiteCacheService = SiteCacheService;
	        this.DocumentManagerService = DocumentManagerService;
	        this.isLoading = false;
	        this.creditApplicationUrl = '';
	        this.hasDelCompanyPermission = false;
	        this.showError = false;
	        this.bureau = null;
	        this.pullCreditInvalid = false;
	        this.creditReportData = null;
	        this.ssn = null;
	        if (this.contact) {
	            this.getCreditApplicationUrl();
	            activityTimelineService.loadActivityTimelineItems(this.contact)
	                .then(function () {
	                _this.customerNotes = _this.activityTimelineService.activityTimeline;
	            });
	            this.eventManagerService.subscribe(this.Constants.CRM_CONTACT_ADDED, this.updateContact);
	            this.getPermissions();
	        }
	        else {
	            this.showError = true;
	        }
	    }
	    GetContactCardController.prototype.getPermissions = function () {
	        var _this = this;
	        this.permissionService.getPermission('Individual').then(function (permission) {
	            _this.individualPermission = permission;
	        });
	        this.permissionService.getPermission('Company').then(function (permission) {
	            _this.hasDelCompanyPermission = permission.delete;
	        });
	        this.permissionService.getPermission('Touches').then(function (permission) {
	            _this.touchesPermission = permission;
	        });
	        this.permissionService.getPermission('NewCreditApplication').then(function (permission) {
	            _this.creditAppPermission = permission;
	        });
	    };
	    GetContactCardController.prototype.updateContact = function (newContact) {
	        var _this = this;
	        if (newContact && newContact.id) {
	            this.contact = newContact;
	        }
	        else {
	            this.ServiceWrapper.get(this.ContactService, this.$stateParams.contactId).then(function (data) {
	                if (data.error) {
	                    _this.NotFoundErrorService.redirectTo404();
	                }
	                else {
	                    _this.contact = data;
	                }
	            });
	        }
	    };
	    GetContactCardController.prototype.deleteContact = function () {
	        var _this = this;
	        if (!this.contact || !this.contact.id) {
	            return;
	        }
	        this.ContactService.delete(this.contact.id).then(function (response) {
	            if (response === true) {
	                _this.eventManagerService.publish(_this.CrmConstants.CONTACT.CONTACT_DELETED, _this.contact);
	                _this.contact = undefined;
	                _this.$state.go('view.contact', { 'contactId': '' });
	            }
	            else if (typeof response == 'string') {
	                _this.eventManagerService.publish(_this.CrmConstants.CONTACT.CONTACT_DELETE_FAILED, {
	                    alertType: 'error',
	                    message: response || _this.TranslationCache.get('crm.contact.errors.DELETE_FAILED')
	                });
	            }
	            else {
	                _this.eventManagerService.publish(_this.CrmConstants.CONTACT.CONTACT_DELETE_FAILED, {
	                    alertType: 'error',
	                    message: _this.TranslationCache.get('crm.contact.errors.DELETE_FAILED')
	                });
	            }
	            _this.isLoading = false;
	        });
	    };
	    GetContactCardController.prototype.showDeleteContact = function () {
	        if (this.contact && this.contact.isOrganization) {
	            if (this.contact.isOrganization()) {
	                return this.hasDelCompanyPermission;
	            }
	            else {
	                return this.individualPermission ? this.individualPermission.delete : false;
	            }
	        }
	        else {
	            return false;
	        }
	    };
	    GetContactCardController.prototype.showDeleteConfirmationModal = function () {
	        var _this = this;
	        if (this.individualPermission.delete) {
	            var prompt = this.TranslationCache.get('crm.contact.modal.MODAL_PROMPT').replace('{customerName}', this.contact.getFullName());
	            this.modalService.openModal(prompt, this.TranslationCache.get('crm.contact.modal.MODAL_TITLE'), this.TranslationCache.get('crm.contact.modal.MODAL_ACCEPT'), this.TranslationCache.get('crm.contact.modal.MODAL_DECLINE'))
	                .then(function (modalInstance) {
	                _this.isLoading = true;
	                _this.deleteContact();
	                modalInstance.close();
	            }, function (modalInstance) {
	                modalInstance.dismiss();
	            });
	        }
	    };
	    GetContactCardController.prototype.openAuditLog = function () {
	        var _this = this;
	        var data = {
	            logType: this.Constants.AUDIT_LOGS.CONTACT,
	            entityId: this.contact.id,
	        };
	        this.AuditLogApiService.get(data)
	            .then(function (response) {
	            _this.auditLogs = response;
	            _this.modal = _this.modalService.openModalViaTemplateUrl(auditLogModalTemplateUrl, _this);
	        });
	    };
	    GetContactCardController.prototype.openCreditApplication = function () {
	        this.$window.open(this.creditApplicationUrl, "_blank", this.getCreditApplicationWindowParams());
	    };
	    GetContactCardController.prototype.getCreditApplicationUrl = function () {
	        var _this = this;
	        this.creditApplicationApiService.get(this.contact.id)
	            .then(function (response) {
	            _this.creditApplicationUrl = response.data;
	            if (_this.creditApplicationUrl) {
	                _this.creditApplicationUrl += (_this.creditApplicationUrl.indexOf("?") >= 0) ? "&" : "?";
	                _this.creditApplicationUrl += "openCreditApplication=true&openInNewWindow=true";
	            }
	        });
	    };
	    GetContactCardController.prototype.getCreditApplicationWindowParams = function () {
	        return [
	            "width" + screen.width,
	            "height" + screen.height
	        ].join(",");
	    };
	    GetContactCardController.prototype.openCommunicationPreferences = function () {
	        var _this = this;
	        this.CommunicationSummaryApiService.get(this.contact.id)
	            .then(function (url) {
	            _this.$window.open(url, "_blank", communicationSummaryWindowParams);
	        });
	    };
	    GetContactCardController.prototype.openCustomerNotes = function () {
	        this.modal = this.modalService.openModalViaTemplateUrl(customerNotesModalTemplateUrl, this);
	    };
	    GetContactCardController.prototype.openPullCreditReport = function () {
	        var _this = this;
	        this.creditReportApiService.dealershipIsSetUp(this.contact.id).then(function (result) {
	            if (result.data.isSetUp) {
	                _this.creditReportApiService.getData(_this.contact.id).then(function (response) {
	                    _this.creditReportData = response.data;
	                    if (_this.creditReportData.transunion.default) {
	                        _this.bureau = "TU";
	                    }
	                    else if (_this.creditReportData.experian.default) {
	                        _this.bureau = "XPN";
	                    }
	                    else if (_this.creditReportData.equifax.default) {
	                        _this.bureau = "EFX";
	                    }
	                });
	                _this.modal = _this.modalService.openModalViaTemplateUrl(pullCreditReportModalTemplateUrl, _this);
	            }
	            else {
	                _this.eventManagerService.publish(_this.CrmConstants.CREDIT_REPORT.CREDIT_REPORT_ERROR, {
	                    alertType: 'error',
	                    message: result.data.errorMessage
	                });
	            }
	        });
	    };
	    GetContactCardController.prototype.pullCreditIfValid = function () {
	        if (!!this.contact.id && !!this.ssn.value && !!this.bureau && !!this.creditReportData.accountName && !!this.creditReportData.password) {
	            this.pullCreditInvalid = false;
	            window.open(this.dataApiSettings.AppSettings.crmUrl + "/credit/credit_report_pull.aspx?EntityId=" + this.contact.id + "&SSN=" + this.ssn.value + "&Bureau=" + this.bureau + "&AccntName=" + this.creditReportData.accountName + "&Psswrd=" + this.creditReportData.password + "&Agency=" + this.creditReportData.agency + "&saveSSN=false", "", "width=950,height=671");
	        }
	        else {
	            this.pullCreditInvalid = true;
	        }
	    };
	    GetContactCardController.prototype.ClickResetLoginLink = function () {
	        var crmUrl = this.AppSettings.crmUrl;
	        var myleft = (window.screen.availWidth / 2) - 200;
	        var mytop = (window.screen.availHeight / 2) - 150;
	        var sURL = crmUrl + "/../SDCP/Security/SendCustomerLogin?SiteID=" + this.contact.encryptedSiteId + "&EntityId=" + this.contact.encryptedContactId;
	        this.$window.open(sURL, "ServiceDriverEmailLoginLink", "height=240, width=375, top=" + mytop + ", left=" + myleft + ", menubar=0, location=0, resizable=1, status=1");
	    };
	    GetContactCardController.prototype.ClickEmailMobileAppLink = function () {
	        var crmUrl = this.AppSettings.crmUrl;
	        var currentSiteId = this.SiteCacheService.getCurrentSiteId();
	        var currentEntityId = this.contact.id;
	        var sURL = crmUrl + "/Mobile/EmailMobileAppLink.aspx?SiteID=" + currentSiteId + "&EntityId=" + currentEntityId;
	        this.$window.open(sURL, "EmailMobileAppLink", "height=596, width=720, menubar=0, location=0, resizable=0, status=1");
	    };
	    GetContactCardController.prototype.openDocumentForAction = function (forEmail) {
	        var docType = forEmail ? 0 : 1;
	        this.DocumentManagerService.openDocumentEntity(docType, 5, this.contact.id);
	    };
	    GetContactCardController.$inject = [
	        '$state',
	        '$stateParams',
	        '$window',
	        'ServiceWrapper',
	        'ContactService',
	        'eventManagerService',
	        'Constants',
	        'CrmConstants',
	        'NotFoundErrorService',
	        'TranslationCache',
	        'modalService',
	        'AuditLogApiService',
	        'creditApplicationApiService',
	        'CommunicationSummaryApiService',
	        'ActivityTimelineService',
	        'permissionService',
	        'creditReportApiService',
	        'DataApiSettings',
	        'AppSettings',
	        'SiteCacheService',
	        'DocumentManagerService'
	    ];
	    return GetContactCardController;
	}());
	module.exports = GetContactCardController;


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var ContactSummaryCardDirective = __webpack_require__(156);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.contact.summaryCard", [])
	    .directive(ContactSummaryCardDirective.directiveName, ContactSummaryCardDirective);


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var ContactSummaryCardController = __webpack_require__(157);
	var ContactSummaryCardDirective = function () {
	    return {
	        restrict: 'E',
	        scope: {
	            contact: '='
	        },
	        transclude: true,
	        templateUrl: 'app/contact/summaryCard/contactSummaryCardTemplate.html',
	        controller: ContactSummaryCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	};
	ContactSummaryCardDirective.directiveName = 'crmContactSummaryCard';
	module.exports = ContactSummaryCardDirective;


/***/ },
/* 157 */
/***/ function(module, exports) {

	"use strict";
	var ContactSummaryCardController = (function () {
	    function ContactSummaryCardController(StringHelper) {
	        this.StringHelper = StringHelper;
	        this.setPhoneVariables();
	    }
	    ContactSummaryCardController.prototype.setPhoneVariables = function () {
	        this.phoneNumbers = this.contact.contactPoints.getPhoneNumbers();
	    };
	    ContactSummaryCardController.prototype.hasPrimaryContactFriendlyName = function () {
	        var organization = this.contact;
	        var primaryContact = organization.primaryContact;
	        return !!primaryContact.Friendly;
	    };
	    ContactSummaryCardController.prototype.hasPrimaryContactMiddleName = function () {
	        var organization = this.contact;
	        var primaryContact = organization.primaryContact;
	        return !!primaryContact.Middle && primaryContact.Middle.length > 0;
	    };
	    ContactSummaryCardController.$inject = [
	        "StringHelper"
	    ];
	    return ContactSummaryCardController;
	}());
	module.exports = ContactSummaryCardController;


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var gmLookupDirective = __webpack_require__(159);
	module.exports = angular.module('crm.contact.gmlookup', [])
	    .directive('crmGmLookup', gmLookupDirective);


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var GmLookupController = __webpack_require__(160);
	function gmLookupDirective() {
	    return {
	        restrict: 'E',
	        controller: GmLookupController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/contact/gmLookup/gmLookupTemplate.html',
	        scope: {
	            scopeModel: '='
	        },
	        link: function (scope, element, attrs) {
	            var frame = element.find('#gmLookupFrame');
	            frame.on('load', function () {
	                var contents = frame.contents();
	                var linkButton = contents.find('#btnLink');
	                linkButton.click(scope.ctrl.toggleLinkContact);
	            });
	        }
	    };
	}
	module.exports = gmLookupDirective;


/***/ },
/* 160 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var GmLookupController = (function () {
	    function GmLookupController(GmStates, GmLookupService) {
	        this.GmStates = GmStates;
	        this.GmLookupService = GmLookupService;
	    }
	    GmLookupController.prototype.getUrl = function () {
	        return this.GmLookupService.getGmUrl(this.scopeModel);
	    };
	    GmLookupController.prototype.toggleLinkContact = function () {
	        if (this.scopeModel.gmInfo.gmState == this.GmStates.linked) {
	            this.unlinkContact();
	        }
	        else if (this.scopeModel.gmInfo.gmState == this.GmStates.unlinked) {
	            this.linkContact();
	        }
	    };
	    GmLookupController.prototype.linkContact = function () {
	        this.scopeModel.gmInfo.gmState = this.GmStates.linked;
	        this.scopeModel.onClose();
	    };
	    GmLookupController.prototype.unlinkContact = function () {
	        this.scopeModel.gmInfo.gmState = this.GmStates.unlinked;
	        this.scopeModel.onClose();
	    };
	    GmLookupController.$inject = [
	        'GmStates',
	        'AppSettings',
	        'GmLookupService'
	    ];
	    return GmLookupController;
	}());
	module.exports = GmLookupController;


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var contactPhoneNumbersDirective = __webpack_require__(162);
	module.exports = angular.module('crm.contact.phoneNumbers', [])
	    .directive('crmContactPhoneNumbers', contactPhoneNumbersDirective);


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var ContactPhoneNumbersController = __webpack_require__(163);
	function contactPhoneNumbersDirective() {
	    return {
	        restrict: 'E',
	        templateUrl: 'app/contact/phoneNumbers/template.html',
	        controller: ContactPhoneNumbersController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        scope: {
	            eventId: '=',
	            contact: '=',
	            letterOnly: '='
	        }
	    };
	}
	module.exports = contactPhoneNumbersDirective;


/***/ },
/* 163 */
/***/ function(module, exports) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var DNC_DO_NOT_CONTACT_OPTION = "DNC List - Don't Contact";
	var ContactPhoneNumbersController = (function () {
	    function ContactPhoneNumbersController($window, ClickToCallApiService, AppSettings) {
	        var _this = this;
	        this.$window = $window;
	        this.ClickToCallApiService = ClickToCallApiService;
	        this.AppSettings = AppSettings;
	        this.phoneNumbers = [];
	        this.doNotCall = false;
	        this.classicWindowArgs = 'toolbar=no,location=no,directories=no,status=yes,menubar=no,scrollbars=no,resizable=yes,width=530,height=280,left=175,top=130';
	        this.makeClickToCall = function (phoneNumber) {
	            var url = _this.AppSettings.clickToCallUrl + 'dial1=' + _this.fromPhone + '&dial2=' +
	                phoneNumber.replace(/\D/g, "") + '&lid=' + _this.accountId + '&phoneCode=' + _this.ctiId;
	            _this.$window.open(url, 'Click to Call', _this.classicWindowArgs);
	        };
	        this.loadParams = function () {
	            var self = _this;
	            if (_this.contact.contactPoints.dncOption == DNC_DO_NOT_CONTACT_OPTION) {
	                _this.permission = false;
	                _this.doNotCall = true;
	            }
	            else {
	                self.ClickToCallApiService.getPermissions(self.contact.id, self.eventId)
	                    .then(function (permission) {
	                    if (permission) {
	                        self.ClickToCallApiService.getParams(self.eventId + '')
	                            .then(function (data) {
	                            self.permission = (data.data.validity === 'true');
	                            if (self.permission) {
	                                _this.fromPhone = data.data.fromPhone;
	                                _this.accountId = data.data.accountId;
	                                _this.ctiId = data.data.ctiId;
	                            }
	                        });
	                    }
	                });
	            }
	        };
	        Object.defineProperty(this, "phoneNumbers", {
	            get: function () {
	                if (!_this._phoneNumbers && _this.contact) {
	                    _this.phoneNumbers = _this.contact.contactPoints.getPhoneNumbers();
	                }
	                return _this._phoneNumbers;
	            },
	            set: function (value) {
	                _this._phoneNumbers = value;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        this.permission = false;
	        this.loadParams();
	    }
	    ContactPhoneNumbersController.$inject = [
	        '$window',
	        'ClickToCallApiService',
	        'AppSettings'
	    ];
	    return ContactPhoneNumbersController;
	}());
	module.exports = ContactPhoneNumbersController;


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var PlainTextAuditLogDirective = __webpack_require__(165);
	module.exports = angular.module("crm.auditLogs.plainTextLogs", [])
	    .directive("crmPlainTextAuditLogCard", PlainTextAuditLogDirective);


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var PlainTextAuditLogController = __webpack_require__(166);
	function PlainTextAuditLogDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            auditLog: "="
	        },
	        templateUrl: 'app/auditLog/plainText/plainTextAuditLogTemplate.html',
	        controller: PlainTextAuditLogController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = PlainTextAuditLogDirective;


/***/ },
/* 166 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var AuditLogController = (function () {
	    function AuditLogController($scope) {
	        var _this = this;
	        this.$scope = $scope;
	        this.cleanedLogEntries = new Array();
	        var auditLogWatcher = $scope.$watch("ctrl.auditLog", function () {
	            _this.createCleanedLogEntries(_this.auditLog.entries);
	            auditLogWatcher();
	        });
	    }
	    AuditLogController.prototype.createCleanedLogEntries = function (entries) {
	        var _this = this;
	        _.each(this.auditLog.entries, function (entry) {
	            if (!_this.isNullOrWhiteSpace(entry)) {
	                _this.cleanedLogEntries.push(entry);
	            }
	        });
	    };
	    AuditLogController.prototype.isNullOrWhiteSpace = function (entry) {
	        return !entry || entry.trim().length == 0;
	    };
	    AuditLogController.$inject = [
	        "$scope"
	    ];
	    return AuditLogController;
	}());
	module.exports = AuditLogController;


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(2);
	var module_1 = __webpack_require__(168);
	var module_2 = __webpack_require__(171);
	var module_3 = __webpack_require__(174);
	exports.ContactMarketingModule = angular.module('ds.components.contact-marketing', [
	    module_1.ContactMarketingCardModule.name,
	    module_2.ContactMarketingPanelModule.name,
	    module_3.ContactMarketingSharedModule.name
	]);


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(2);
	var contact_marketing_card_component_1 = __webpack_require__(169);
	exports.ContactMarketingCardModule = angular.module('ds.component.contact-marketing-card', [])
	    .component(contact_marketing_card_component_1.ContactMarketingCardComponent.componentName, new contact_marketing_card_component_1.ContactMarketingCardComponent());


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var contact_marketing_campaign_service_1 = __webpack_require__(170);
	var ContactMarketingCardComponent = (function () {
	    function ContactMarketingCardComponent() {
	        this.bindings = {
	            contact: '<',
	            campaign: '<',
	            permissions: '<',
	            onDelete: '&'
	        };
	        this.controller = ContactMarketingCardComponentController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/contact/marketing/card/contact-marketing-card.component.html';
	    }
	    ContactMarketingCardComponent.componentName = 'dsContactMarketingCard';
	    return ContactMarketingCardComponent;
	}());
	exports.ContactMarketingCardComponent = ContactMarketingCardComponent;
	var ContactMarketingCardComponentController = (function () {
	    function ContactMarketingCardComponentController($translate, eventManagerService, modalService, translationCache, dateTimeHelper, contactMarketingCampaignService, CrmConstants) {
	        this.$translate = $translate;
	        this.eventManagerService = eventManagerService;
	        this.modalService = modalService;
	        this.translationCache = translationCache;
	        this.dateTimeHelper = dateTimeHelper;
	        this.contactMarketingCampaignService = contactMarketingCampaignService;
	        this.CrmConstants = CrmConstants;
	        this.modalTemplateUrl = 'app/contact/marketing/card/contact-marketing-card.component.modal.html';
	        this.completeStatusClass = 'ws-status-good';
	        this.activeStatusClass = 'ws-status-warning';
	        this.inactiveStatusClass = 'ws-status-bad';
	    }
	    ContactMarketingCardComponentController.prototype.$onInit = function () {
	        this.initializeStatus();
	        this.completedMilestoneCount = this.contactMarketingCampaignService.getCompletedMilestoneCount(this.campaign);
	        this.getLastCompletedMilestoneDate();
	        this.initializeActionItems();
	    };
	    ContactMarketingCardComponentController.prototype.$onDestroy = function () {
	    };
	    ContactMarketingCardComponentController.prototype.getStatusClass = function () {
	        if (this.isCompleted) {
	            return this.completeStatusClass;
	        }
	        else if (this.isActive) {
	            return this.activeStatusClass;
	        }
	        else {
	            return this.inactiveStatusClass;
	        }
	    };
	    ContactMarketingCardComponentController.prototype.showCampaignSummaryModal = function () {
	        this.modalService.openModalViaTemplateUrlPromise(this.modalTemplateUrl, this, function () { })
	            .catch(function (result) {
	            result.modalInstance.close();
	        });
	    };
	    ContactMarketingCardComponentController.prototype.initializeStatus = function () {
	        this.isCompleted = this.contactMarketingCampaignService.isCampaignCompleted(this.campaign);
	        this.isActive = !this.isCompleted && this.contactMarketingCampaignService.isCampaignActive(this.campaign);
	        this.isInactive = !this.isCompleted && !this.isActive;
	    };
	    ContactMarketingCardComponentController.prototype.setIsLoading = function (isLoading) {
	        this.eventManagerService.publish(this.CrmConstants.CONTACT.MARKETING.IS_LOADING, isLoading);
	    };
	    ContactMarketingCardComponentController.prototype.getLastCompletedMilestoneDate = function () {
	        this.lastCompletedMilestoneDate = this.campaign.lastCompletedMilestone ?
	            this.dateTimeHelper.timeAgo(this.campaign.lastCompletedMilestone) :
	            this.campaign.lastCompletedMilestone;
	    };
	    ContactMarketingCardComponentController.prototype.reactivateCampaign = function () {
	        var _this = this;
	        this.setIsLoading(true);
	        this.contactMarketingCampaignService.activateCampaign(this.contact.id, this.campaign)
	            .then(function () {
	            _this.initializeStatus();
	        })
	            .catch(function () {
	            _this.initializeStatus();
	            _this.publishError('REACTIVATION');
	        })
	            .finally(function () {
	            _this.setIsLoading(false);
	        });
	    };
	    ContactMarketingCardComponentController.prototype.deactivateCampaign = function () {
	        var _this = this;
	        this.setIsLoading(true);
	        this.contactMarketingCampaignService.deactivateCampaign(this.contact.id, this.campaign)
	            .then(function () {
	            _this.initializeStatus();
	        })
	            .catch(function () {
	            _this.initializeStatus();
	            _this.publishError('DEACTIVATION');
	        })
	            .finally(function () {
	            _this.setIsLoading(false);
	        });
	    };
	    ContactMarketingCardComponentController.prototype.deleteCampaign = function () {
	        var _this = this;
	        this.setIsLoading(true);
	        this.contactMarketingCampaignService.deleteCampaign(this.contact.id, this.campaign)
	            .then(function () {
	            if (_this.onDelete)
	                _this.onDelete({ campaign: _this.campaign });
	        })
	            .catch(function () {
	            _this.publishError('DELETION');
	        })
	            .finally(function () {
	            _this.setIsLoading(false);
	        });
	    };
	    ContactMarketingCardComponentController.prototype.showReactivateCampaignModal = function () {
	        var _this = this;
	        var prompt = this.getReactivateCampaignModalPrompt();
	        var title = 'crm.contact.marketing.reactivateCampaignModal.TITLE';
	        var accept = 'crm.contact.marketing.reactivateCampaignModal.ACCEPT';
	        var cancel = 'crm.contact.marketing.reactivateCampaignModal.CANCEL';
	        this.modalService.openModal(prompt, title, accept, cancel)
	            .then(function (modalInstance) {
	            modalInstance.close();
	            _this.reactivateCampaign();
	        })
	            .catch(function (modalInstance) {
	            modalInstance.dismiss();
	        });
	    };
	    ContactMarketingCardComponentController.prototype.getReactivateCampaignModalPrompt = function () {
	        var note = this.$translate.instant('crm.contact.marketing.reactivateCampaignModal.NOTE');
	        var noteDescription = this.$translate.instant('crm.contact.marketing.reactivateCampaignModal.NOTE_DESCRIPTION', {
	            note: "<strong>" + note + "</strong>"
	        });
	        var prompt = this.$translate.instant('crm.contact.marketing.reactivateCampaignModal.PROMPT', {
	            campaignName: "<strong>" + this.campaign.name + "</strong>",
	            contactName: "<strong>" + this.contact.getFullName() + "</strong>"
	        });
	        return prompt + "<br/><br/>" + noteDescription;
	    };
	    ContactMarketingCardComponentController.prototype.showDeactivateCampaignModal = function () {
	        var _this = this;
	        var prompt = this.getDeactivateCampaignModalPrompt();
	        var title = 'crm.contact.marketing.deactivateCampaignModal.TITLE';
	        var accept = 'crm.contact.marketing.deactivateCampaignModal.ACCEPT';
	        var cancel = 'crm.contact.marketing.deactivateCampaignModal.CANCEL';
	        this.modalService.openModal(prompt, title, accept, cancel)
	            .then(function (modalInstance) {
	            modalInstance.close();
	            _this.deactivateCampaign();
	        })
	            .catch(function (modalInstance) {
	            modalInstance.dismiss();
	        });
	    };
	    ContactMarketingCardComponentController.prototype.getDeactivateCampaignModalPrompt = function () {
	        var note = this.$translate.instant('crm.contact.marketing.deactivateCampaignModal.NOTE');
	        var noteDescription = this.$translate.instant('crm.contact.marketing.deactivateCampaignModal.NOTE_DESCRIPTION', {
	            note: "<strong>" + note + "</strong>"
	        });
	        var prompt = this.$translate.instant('crm.contact.marketing.deactivateCampaignModal.PROMPT', {
	            campaignName: "<strong>" + this.campaign.name + "</strong>",
	            contactName: "<strong>" + this.contact.getFullName() + "</strong>"
	        });
	        return prompt + "<br/><br/>" + noteDescription;
	    };
	    ContactMarketingCardComponentController.prototype.showDeleteCampaignModal = function () {
	        var _this = this;
	        if (this.permissions && this.permissions.remove) {
	            var prompt = this.getDeleteCampaignModalPrompt();
	            var title = 'crm.contact.marketing.deleteCampaignModal.TITLE';
	            var accept = 'crm.contact.marketing.deleteCampaignModal.ACCEPT';
	            var cancel = 'crm.contact.marketing.deleteCampaignModal.CANCEL';
	            this.modalService.openModal(prompt, title, accept, cancel)
	                .then(function (modalInstance) {
	                modalInstance.close();
	                _this.deleteCampaign();
	            })
	                .catch(function (modalInstance) {
	                modalInstance.close();
	            });
	        }
	    };
	    ContactMarketingCardComponentController.prototype.getDeleteCampaignModalPrompt = function () {
	        var confirmation = this.$translate.instant('crm.contact.marketing.deleteCampaignModal.CONFIRMATION');
	        var prompt = this.$translate.instant('crm.contact.marketing.deleteCampaignModal.PROMPT', {
	            campaignName: "<strong>" + this.campaign.name + "</strong>",
	            contactName: "<strong>" + this.contact.getFullName() + "</strong>"
	        });
	        return prompt + "<br/><br/>" + confirmation;
	    };
	    ContactMarketingCardComponentController.prototype.initializeActionItems = function () {
	        var _this = this;
	        this.actionItems = [
	            {
	                text: this.translationCache.get('crm.contact.marketing.REACTIVATE_CAMPAIGN'),
	                callback: function () { _this.showReactivateCampaignModal(); },
	                isDisabled: function () { return false; },
	                isVisible: function () { return !_this.isActive; }
	            },
	            {
	                text: this.translationCache.get('crm.contact.marketing.DEACTIVATE_CAMPAIGN'),
	                callback: function () { _this.showDeactivateCampaignModal(); },
	                isDisabled: function () { return false; },
	                isVisible: function () { return _this.isActive; }
	            },
	            {
	                text: this.translationCache.get('crm.contact.marketing.DELETE_CAMPAIGN'),
	                callback: function () { _this.showDeleteCampaignModal(); },
	                isDisabled: function () { return !_this.permissions || !_this.permissions.remove; },
	                isVisible: function () { return true; }
	            }
	        ];
	    };
	    ContactMarketingCardComponentController.prototype.publishError = function (key) {
	        this.eventManagerService.publish(this.CrmConstants.CONTACT.MARKETING.ERROR_OCCURRED, {
	            alertType: 'error',
	            message: this.$translate.instant("crm.marketing.errors." + key)
	        });
	    };
	    ContactMarketingCardComponentController.$inject = [
	        '$translate',
	        'eventManagerService',
	        'modalService',
	        'TranslationCache',
	        'DateTimeHelper',
	        contact_marketing_campaign_service_1.ContactMarketingCampaignService.serviceName,
	        'CrmConstants'
	    ];
	    return ContactMarketingCardComponentController;
	}());


/***/ },
/* 170 */
/***/ function(module, exports) {

	"use strict";
	var ContactMarketingCampaignService = (function () {
	    function ContactMarketingCampaignService($q, eventManagerService, contactCampaignApiService, Constants, CrmConstants) {
	        var _this = this;
	        this.$q = $q;
	        this.eventManagerService = eventManagerService;
	        this.contactCampaignApiService = contactCampaignApiService;
	        this.Constants = Constants;
	        this.CrmConstants = CrmConstants;
	        this.sortMethodDateAddedNewest = function (campaigns) {
	            return _.sortBy(campaigns, 'id').reverse();
	        };
	        this.sortMethodDateAddedOldest = function (campaigns) {
	            return _.sortBy(campaigns, 'id');
	        };
	        this.sortMethodLastUpdatedNewest = function (campaigns) {
	            return _this.sortByLastUpdated(campaigns).reverse();
	        };
	        this.sortMethodLastUpdatedOldest = function (campaigns) {
	            return _this.sortByLastUpdated(campaigns);
	        };
	        this.defaultSort = CrmConstants.DATE_ADDED_NEWEST;
	        this.sortingMethods = {};
	        this.sortingMethods[CrmConstants.DATE_ADDED_NEWEST] = this.sortMethodDateAddedNewest;
	        this.sortingMethods[CrmConstants.DATE_ADDED_OLDEST] = this.sortMethodDateAddedOldest;
	        this.sortingMethods[CrmConstants.LAST_UPDATED_NEWEST] = this.sortMethodLastUpdatedNewest;
	        this.sortingMethods[CrmConstants.LAST_UPDATED_OLDEST] = this.sortMethodLastUpdatedOldest;
	    }
	    ContactMarketingCampaignService.prototype.getCampaigns = function (contactId) {
	        return this.contactCampaignApiService.getAll(contactId);
	    };
	    ContactMarketingCampaignService.prototype.getRefDefs = function () {
	        return this.contactCampaignApiService.getRefDefs();
	    };
	    ContactMarketingCampaignService.prototype.getCampaignRefDefs = function (contactId, statusId, categoryId) {
	        return this.contactCampaignApiService.getCampaigns(contactId, statusId, categoryId);
	    };
	    ContactMarketingCampaignService.prototype.sortCampaigns = function (campaigns, sortingMethod) {
	        return this.sortingMethods[sortingMethod](campaigns);
	    };
	    ContactMarketingCampaignService.prototype.getCompletedMilestoneCount = function (campaign) {
	        var milestonesCompleted = 0;
	        for (var i in campaign.milestones) {
	            if (!campaign.milestones[i].completed) {
	                break;
	            }
	            milestonesCompleted++;
	        }
	        return milestonesCompleted;
	    };
	    ContactMarketingCampaignService.prototype.isCampaignCompleted = function (campaign) {
	        var completedMilestoneCount = this.getCompletedMilestoneCount(campaign);
	        return (completedMilestoneCount == campaign.milestones.length && campaign.milestones.length > 0) ||
	            campaign.status.toLowerCase().indexOf('complete') >= 0;
	    };
	    ContactMarketingCampaignService.prototype.isCampaignActive = function (campaign) {
	        return campaign &&
	            campaign.status &&
	            campaign.status === this.Constants.SALES_OPPORTUNITY_MARKETING_CAMPAIGN_STATUS_ACTIVE;
	    };
	    ContactMarketingCampaignService.prototype.getActiveCampaignCount = function (campaigns) {
	        return _.where(campaigns, {
	            status: this.CrmConstants.CONTACT.MARKETING.ACTIVE_STATUS
	        }).length;
	    };
	    ContactMarketingCampaignService.prototype.getCompletedCampaignCount = function (campaigns) {
	        return _.where(campaigns, {
	            status: this.CrmConstants.CONTACT.MARKETING.COMPLETE_STATUS
	        }).length;
	    };
	    ContactMarketingCampaignService.prototype.addCampaign = function (contactId, campaignId) {
	        return this.contactCampaignApiService.addCampaign(contactId, campaignId);
	    };
	    ContactMarketingCampaignService.prototype.activateCampaign = function (contactId, campaign) {
	        return this.saveCampaignWithNewStatus(contactId, campaign, this.CrmConstants.CONTACT.MARKETING.ACTIVE_STATUS);
	    };
	    ContactMarketingCampaignService.prototype.deactivateCampaign = function (contactId, campaign) {
	        return this.saveCampaignWithNewStatus(contactId, campaign, this.CrmConstants.CONTACT.MARKETING.INACTIVE_STATUS);
	    };
	    ContactMarketingCampaignService.prototype.deleteCampaign = function (contactId, campaign) {
	        var _this = this;
	        return this.contactCampaignApiService.delete(contactId, campaign.id)
	            .catch(function (reason) {
	            return _this.$q.reject(reason);
	        });
	    };
	    ContactMarketingCampaignService.prototype.saveCampaign = function (contactId, campaign) {
	        return this.contactCampaignApiService.save(contactId, campaign);
	    };
	    ContactMarketingCampaignService.prototype.saveCampaignWithNewStatus = function (contactId, campaign, status) {
	        var _this = this;
	        var originalStatus = campaign.status;
	        campaign.status = status;
	        return this.saveCampaign(contactId, campaign)
	            .catch(function (reason) {
	            campaign.status = originalStatus;
	            return _this.$q.reject(reason);
	        });
	    };
	    ContactMarketingCampaignService.prototype.sortByLastUpdated = function (campaigns) {
	        var campaigns = _.clone(campaigns);
	        campaigns.sort(function (a, b) {
	            var aValue = new Date(a.lastCompletedMilestone).getTime();
	            var bValue = new Date(b.lastCompletedMilestone).getTime();
	            return bValue - aValue;
	        });
	        return campaigns;
	    };
	    ContactMarketingCampaignService.serviceName = 'contactMarketingCampaignService';
	    ContactMarketingCampaignService.$inject = [
	        '$q',
	        'eventManagerService',
	        'ContactCampaignApiService',
	        'Constants',
	        'CrmConstants'
	    ];
	    return ContactMarketingCampaignService;
	}());
	exports.ContactMarketingCampaignService = ContactMarketingCampaignService;


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(2);
	var contact_marketing_panel_component_1 = __webpack_require__(172);
	exports.ContactMarketingPanelModule = angular.module('ds.components.contact-marketing-panel', [])
	    .component(contact_marketing_panel_component_1.ContactMarketingPanelComponent.componentName, new contact_marketing_panel_component_1.ContactMarketingPanelComponent());


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var contact_marketing_campaign_service_1 = __webpack_require__(170);
	var loading_service_1 = __webpack_require__(173);
	var ContactMarketingPanelComponent = (function () {
	    function ContactMarketingPanelComponent() {
	        this.bindings = {
	            contact: '<',
	            campaigns: '=',
	            refDefs: '<',
	            permissions: '<'
	        };
	        this.controller = ContactMarketingPanelComponentController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/contact/marketing/panel/contact-marketing-panel.component.html';
	    }
	    ContactMarketingPanelComponent.componentName = 'dsContactMarketingPanel';
	    return ContactMarketingPanelComponent;
	}());
	exports.ContactMarketingPanelComponent = ContactMarketingPanelComponent;
	var ContactMarketingPanelComponentController = (function () {
	    function ContactMarketingPanelComponentController($timeout, $translate, eventManagerService, loadingService, modalService, contactMarketingCampaignService, CrmConstants) {
	        this.$timeout = $timeout;
	        this.$translate = $translate;
	        this.eventManagerService = eventManagerService;
	        this.loadingService = loadingService;
	        this.modalService = modalService;
	        this.contactMarketingCampaignService = contactMarketingCampaignService;
	        this.CrmConstants = CrmConstants;
	        this.addModalTemplateUrl = 'app/contact/marketing/panel/contact-marketing-panel.component.add-modal.html';
	        this.selectedSort = {
	            value: contactMarketingCampaignService.defaultSort,
	            text: this.getSortTranslation(contactMarketingCampaignService.defaultSort)
	        };
	    }
	    ContactMarketingPanelComponentController.prototype.showAddCampaign = function () {
	        var _this = this;
	        this.selectedStatusId = null;
	        this.selectedCategoryId = null;
	        this.selectedCampaignId = null;
	        this.modalService.openModalViaTemplateUrlPromise(this.addModalTemplateUrl, this, function (result) {
	            result.modalInstance.close();
	            _this.addCampaign();
	        })
	            .catch(function (result) {
	            result.modalInstance.close();
	        });
	    };
	    ContactMarketingPanelComponentController.prototype.tryLoadCampaignRefDefs = function () {
	        var _this = this;
	        if (this.selectedStatusId && this.selectedCategoryId) {
	            this.isAddModalLoading = true;
	            this.contactMarketingCampaignService.getCampaignRefDefs(this.contact.id, this.selectedStatusId, this.selectedCategoryId)
	                .then(function (campaignRefDefs) {
	                _this.campaignRefDefs = campaignRefDefs;
	            })
	                .catch(function (error) {
	                _this.eventManagerService.publish(_this.CrmConstants.CONTACT.MARKETING.ADD_MODAL.ERROR_OCCURRED, {
	                    alertType: 'error',
	                    message: _this.$translate.instant('crm.contact.marketing.errors.UNKNOWN')
	                });
	            })
	                .finally(function () {
	                _this.isAddModalLoading = false;
	            });
	        }
	    };
	    ContactMarketingPanelComponentController.prototype.onDelete = function (campaign) {
	        var index = _.findIndex(this.campaigns, function (otherCampaign) {
	            return otherCampaign.id == campaign.id;
	        });
	        if (index >= 0) {
	            this.campaigns.splice(index, 1);
	        }
	    };
	    ContactMarketingPanelComponentController.prototype.addCampaign = function () {
	        var _this = this;
	        this.loadingService.set(this.CrmConstants.CONTACT.MARKETING.IS_LOADING, true);
	        this.contactMarketingCampaignService.addCampaign(this.contact.id, this.selectedCampaignId)
	            .then(function (campaigns) {
	            _this.campaigns = campaigns;
	            _this.sortCampaigns();
	        })
	            .catch(function (error) {
	            _this.eventManagerService.publish(_this.CrmConstants.CONTACT.MARKETING.ERROR_OCCURRED, {
	                alertType: 'error',
	                message: _this.$translate.instant('crm.contact.marketing.errors.ADD')
	            });
	        })
	            .finally(function () {
	            _this.loadingService.set(_this.CrmConstants.CONTACT.MARKETING.IS_LOADING, false);
	        });
	    };
	    ContactMarketingPanelComponentController.prototype.setSelectedSort = function (sort) {
	        this.selectedSort = {
	            value: sort,
	            text: this.getSortTranslation(sort)
	        };
	        this.sortCampaigns();
	    };
	    ContactMarketingPanelComponentController.prototype.sortCampaigns = function () {
	        var _this = this;
	        this.loadingService.set(this.CrmConstants.CONTACT.MARKETING.IS_LOADING, true);
	        this.$timeout(function () {
	            _this.campaigns = _this.contactMarketingCampaignService.sortCampaigns(_this.campaigns, _this.selectedSort.value);
	            _this.loadingService.set(_this.CrmConstants.CONTACT.MARKETING.IS_LOADING, false);
	        });
	    };
	    ContactMarketingPanelComponentController.prototype.getSortTranslation = function (sort) {
	        return this.$translate.instant("crm.contact.sorting." + sort);
	    };
	    ContactMarketingPanelComponentController.$inject = [
	        '$timeout',
	        '$translate',
	        'eventManagerService',
	        loading_service_1.LoadingService.serviceName,
	        'modalService',
	        contact_marketing_campaign_service_1.ContactMarketingCampaignService.serviceName,
	        'CrmConstants'
	    ];
	    return ContactMarketingPanelComponentController;
	}());


/***/ },
/* 173 */
/***/ function(module, exports) {

	"use strict";
	var LoadingService = (function () {
	    function LoadingService() {
	        this.clear();
	    }
	    LoadingService.prototype.clear = function () {
	        this._counts = {};
	    };
	    LoadingService.prototype.set = function (key, isLoading) {
	        if (!key) {
	            throw new Error('Loading key must be defined');
	        }
	        if (isLoading) {
	            this.increment(key);
	        }
	        else {
	            this.decrement(key);
	        }
	    };
	    LoadingService.prototype.get = function (key) {
	        return this._counts[key] > 0;
	    };
	    LoadingService.prototype.increment = function (key) {
	        var count = this._counts[key] ? this._counts[key] : 0;
	        this._counts[key] = count + 1;
	    };
	    LoadingService.prototype.decrement = function (key) {
	        var count = this._counts[key];
	        if (!count) {
	            throw new Error("Tried to decrement count for key '" + key + "' when it was already 0");
	        }
	        this._counts[key] = count - 1;
	    };
	    LoadingService.serviceName = 'loadingService';
	    return LoadingService;
	}());
	exports.LoadingService = LoadingService;


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(2);
	var contact_marketing_campaign_service_1 = __webpack_require__(170);
	exports.ContactMarketingSharedModule = angular.module('ds.components.contact-marketing.shared', [])
	    .service(contact_marketing_campaign_service_1.ContactMarketingCampaignService.serviceName, contact_marketing_campaign_service_1.ContactMarketingCampaignService);


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var driversLicenseComponent_1 = __webpack_require__(176);
	module.exports = angular.module("crm.contact.driversLicense", [])
	    .component(driversLicenseComponent_1.DriversLicenseComponent.componentName, new driversLicenseComponent_1.DriversLicenseComponent());


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var PrintService = __webpack_require__(177);
	var DriversLicenseComponent = (function () {
	    function DriversLicenseComponent() {
	        this.bindings = {
	            contactId: '<',
	            closeCallback: '&'
	        };
	        this.controller = DriversLicenseController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/driversLicense/driversLicenseTemplate.html';
	    }
	    DriversLicenseComponent.componentName = 'crmContactDriversLicense';
	    return DriversLicenseComponent;
	}());
	exports.DriversLicenseComponent = DriversLicenseComponent;
	var FRONT_HORIZONTAL_PLACEHOLDER = 'http://i.imgur.com/UF7vBTG.jpg';
	var FRONT_VERTICAL_PLACEHOLDER = 'http://i.imgur.com/6EZZF9b.jpg';
	var BACK_HORIZONTAL_PLACEHOLDER = 'http://i.imgur.com/BfbLIJU.jpg';
	var BACK_VERTICAL_PLACEHOLDER = 'http://i.imgur.com/0wc456k.jpg';
	var FRONT = "Front";
	var BACK = "Back";
	var DriversLicenseController = (function () {
	    function DriversLicenseController($q, $timeout, $window, DriversLicenseService, eventManagerService, CrmConstants, TranslationCache, permissionService, AppSettings, PrintService) {
	        this.$q = $q;
	        this.$timeout = $timeout;
	        this.$window = $window;
	        this.DriversLicenseService = DriversLicenseService;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.TranslationCache = TranslationCache;
	        this.permissionService = permissionService;
	        this.AppSettings = AppSettings;
	        this.PrintService = PrintService;
	        this.isScannerWorking = true; // TODO: setting this as true until we have an actual scanner tool.
	        this.isShowingScannerOptions = false;
	        this.countries = [];
	        this.states = [];
	    }
	    DriversLicenseController.prototype.$onInit = function () {
	        var _this = this;
	        this.isFrontLoading = true;
	        this.isBackLoading = true;
	        this.getPermissions()
	            .then(function () {
	            if (_this.driversLicensePermission.view) {
	                _this.getDriversLicense();
	            }
	        });
	        this.countries.push(this.TranslationCache.get('crm.contact.driversLicense.modal.AUTO_DETECT'));
	        this.selectedCountry = this.countries[0];
	        this.states.push(this.TranslationCache.get('crm.contact.driversLicense.modal.AUTO_DETECT'));
	        this.selectedState = this.states[0];
	    };
	    DriversLicenseController.prototype.getPermissions = function () {
	        var _this = this;
	        var driversLicensePermissionPromise = this.permissionService.getPermission('DriversLicense')
	            .then(function (permission) {
	            _this.driversLicensePermission = permission;
	        });
	        var scanLicensePermissionPromise = this.permissionService.getPermission('ScanDL')
	            .then(function (permission) {
	            _this.scanLicensePermission = permission;
	        });
	        return this.$q.all([driversLicensePermissionPromise, scanLicensePermissionPromise]);
	    };
	    DriversLicenseController.prototype.getDriversLicense = function () {
	        var _this = this;
	        return this.DriversLicenseService.get(this.contactId)
	            .then(function (driversLicense) {
	            if (driversLicense) {
	                _this.license = driversLicense;
	                _this.setImageOrientations();
	            }
	        })
	            .catch(function () {
	            _this.eventManagerService.publish(_this.CrmConstants.CONTACT.DRIVERS_LICENSE.DRIVERS_LICENSE_LOAD_FAIL, {
	                alertType: 'error',
	                message: _this.TranslationCache.get('crm.contact.driversLicense.LOAD_FAILED')
	            });
	        })
	            .finally(function () {
	            _this.isFrontLoading = false;
	            _this.isBackLoading = false;
	        });
	    };
	    DriversLicenseController.prototype.setImageOrientations = function () {
	        var _this = this;
	        var isFrontDefined = !!this.license.licenseFrontUrl && !!this.license.licenseFrontUrl.length;
	        var isBackDefined = !!this.license.licenseBackUrl && !!this.license.licenseBackUrl.length;
	        if (isFrontDefined && isBackDefined) {
	            this.setImageIsHorizontal(FRONT);
	            this.setImageIsHorizontal(BACK);
	        }
	        else if (isFrontDefined && !isBackDefined) {
	            this.setImageIsHorizontal(FRONT)
	                .then(function () {
	                _this.isBackHorizontal = _this.isFrontHorizontal;
	                _this.license.licenseBackUrl = _this.isBackHorizontal ? BACK_HORIZONTAL_PLACEHOLDER : BACK_VERTICAL_PLACEHOLDER;
	            });
	        }
	        else if (!isFrontDefined && isBackDefined) {
	            this.setImageIsHorizontal(BACK)
	                .then(function () {
	                _this.isFrontHorizontal = _this.isBackHorizontal;
	                _this.license.licenseFrontUrl = _this.isFrontHorizontal ? FRONT_HORIZONTAL_PLACEHOLDER : FRONT_VERTICAL_PLACEHOLDER;
	            });
	        }
	        else {
	            this.isFrontHorizontal = true;
	            this.license.licenseFrontUrl = FRONT_HORIZONTAL_PLACEHOLDER;
	            this.isBackHorizontal = true;
	            this.license.licenseBackUrl = BACK_HORIZONTAL_PLACEHOLDER;
	        }
	    };
	    DriversLicenseController.prototype.setImageIsHorizontal = function (propertyName) {
	        var _this = this;
	        return this.isImageHorizontal(this.license[("license" + propertyName + "Url")])
	            .then(function (isHorizontal) {
	            _this[("is" + propertyName + "Horizontal")] = isHorizontal;
	        })
	            .catch(function (error) {
	            _this[("is" + propertyName + "Horizontal")] = true;
	            console.error(error);
	        });
	    };
	    DriversLicenseController.prototype.isImageHorizontal = function (url) {
	        var deferred = this.$q.defer();
	        var image = new Image();
	        image.onload = function () {
	            deferred.resolve(image.width >= image.height);
	        };
	        image.onerror = function (error) {
	            deferred.reject(error);
	        };
	        image.src = url;
	        return deferred.promise;
	    };
	    DriversLicenseController.prototype.selectScannerOption = function (option) {
	        this.scannerOption = option;
	        // TODO: Handle different states for hardware
	    };
	    DriversLicenseController.prototype.isFrontPlaceholder = function (url) {
	        return url == FRONT_HORIZONTAL_PLACEHOLDER || url == FRONT_VERTICAL_PLACEHOLDER;
	    };
	    DriversLicenseController.prototype.isBackPlaceholder = function (url) {
	        return url == BACK_HORIZONTAL_PLACEHOLDER || url == BACK_VERTICAL_PLACEHOLDER;
	    };
	    DriversLicenseController.prototype.openScannerOptions = function () {
	        this.isShowingScannerOptions = false; // TODO: set to true when scanner functionality added.
	    };
	    DriversLicenseController.prototype.isPrintEnabled = function () {
	        if (this.license && this.license.licenseFrontUrl && this.license.licenseBackUrl) {
	            return !this.isFrontPlaceholder(this.license.licenseFrontUrl) || !this.isBackPlaceholder(this.license.licenseBackUrl);
	        }
	        return false;
	    };
	    DriversLicenseController.prototype.print = function () {
	        var _this = this;
	        var frontHtml = $('img', $('.ws-dl-front'))[0].outerHTML;
	        var backHtml = $('img', $('.ws-dl-back'))[0].outerHTML;
	        var hasValidFrontImage = !this.isFrontPlaceholder(this.license.licenseFrontUrl);
	        var hasValidBackImage = !this.isBackPlaceholder(this.license.licenseBackUrl);
	        var printWindow = this.PrintService.getPrintWindow();
	        var doc = printWindow.document;
	        this.$timeout(function () {
	            if (hasValidFrontImage) {
	                angular.element(doc.body).append(frontHtml);
	            }
	            if (hasValidBackImage) {
	                angular.element(doc.body).append(backHtml);
	            }
	            _this.PrintService.showPrintWindow(printWindow);
	        });
	    };
	    DriversLicenseController.prototype.close = function () {
	        this.closeCallback();
	    };
	    DriversLicenseController.$inject = [
	        '$q',
	        '$timeout',
	        '$window',
	        'DriversLicenseService',
	        'eventManagerService',
	        'CrmConstants',
	        'TranslationCache',
	        'permissionService',
	        'AppSettings',
	        PrintService.serviceName
	    ];
	    return DriversLicenseController;
	}());


/***/ },
/* 177 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var INDICATOR_HTML = "<div id=\"style-load-indicator\" style=\"height: 1px; width: 1px;\"></div>";
	var PRINT_WAIT_INTERVAL = 500;
	var PrintService = (function () {
	    function PrintService($timeout, $window, AppSettings) {
	        this.$timeout = $timeout;
	        this.$window = $window;
	        this.AppSettings = AppSettings;
	    }
	    PrintService.prototype.getPrintWindow = function (windowParams) {
	        var baseUrl = this.AppSettings.proxyUrl;
	        var base = "<base href=\"" + baseUrl + "\">";
	        var styles = $.map($("style, link[rel='stylesheet']"), function (style) {
	            return style.outerHTML;
	        }).join(' ');
	        windowParams = windowParams || 'location=0,scrollbars=yes';
	        var printWindow = this.$window.open("", "_blank", windowParams);
	        var doc = printWindow.document;
	        angular.element(doc.head).append(base);
	        angular.element(doc.head).append(styles);
	        angular.element(doc.body).append(INDICATOR_HTML);
	        return printWindow;
	    };
	    PrintService.prototype.showPrintWindow = function (printWindow) {
	        var doc = printWindow.document;
	        this.tryPrint(printWindow);
	    };
	    PrintService.prototype.isDisplayingContent = function (printWindow) {
	        var doc = printWindow.document;
	        var loadIndicator = doc.getElementById('style-load-indicator');
	        return loadIndicator.offsetParent === null;
	    };
	    PrintService.prototype.tryPrint = function (printWindow) {
	        var _this = this;
	        if (this.isDisplayingContent(printWindow)) {
	            printWindow.focus();
	            printWindow.print();
	            printWindow.close();
	            return;
	        }
	        this.$timeout(function () {
	            _this.tryPrint(printWindow);
	        }, PRINT_WAIT_INTERVAL);
	    };
	    PrintService.serviceName = "PrintService";
	    PrintService.$inject = [
	        '$timeout',
	        '$window',
	        'AppSettings'
	    ];
	    return PrintService;
	}());
	module.exports = PrintService;


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var CustomerPanelModule = __webpack_require__(179);
	var CustomerDetailsModule = __webpack_require__(182);
	var CustomerLastTwentyModule = __webpack_require__(192);
	module.exports = angular.module("crm.customer", [
	    CustomerPanelModule.name,
	    CustomerDetailsModule.name,
	    CustomerLastTwentyModule.name,
	]);


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var CustomerPanelDirective = __webpack_require__(180);
	module.exports = angular.module("crm.customer.panel", [])
	    .directive("crmCustomerPanel", CustomerPanelDirective);


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var CustomerPanelController = __webpack_require__(181);
	function CustomerPanelDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            customerId: '=',
	            customerType: '@'
	        },
	        templateUrl: 'app/customer/CustomerPanel/CustomerPanelTemplate.html',
	        controller: CustomerPanelController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = CustomerPanelDirective;


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var emailVerifyOptions_1 = __webpack_require__(145);
	var CustomerPanelController = (function () {
	    function CustomerPanelController(IndividualFactory, OrganizationFactory, ServiceWrapper, ContactService, ContactFactory, $state, $stateParams, $scope, $location, eventManagerService, Constants, CrmConstants, modalService, TranslationCache, DuplicateService, permissionService, EmailVerifyFrontendService) {
	        var _this = this;
	        this.IndividualFactory = IndividualFactory;
	        this.OrganizationFactory = OrganizationFactory;
	        this.ServiceWrapper = ServiceWrapper;
	        this.ContactService = ContactService;
	        this.ContactFactory = ContactFactory;
	        this.$state = $state;
	        this.$stateParams = $stateParams;
	        this.$scope = $scope;
	        this.$location = $location;
	        this.eventManagerService = eventManagerService;
	        this.Constants = Constants;
	        this.CrmConstants = CrmConstants;
	        this.modalService = modalService;
	        this.TranslationCache = TranslationCache;
	        this.DuplicateService = DuplicateService;
	        this.permissionService = permissionService;
	        this.EmailVerifyFrontendService = EmailVerifyFrontendService;
	        this.selectContactTemplateUrl = 'app/contact/duplicates/duplicateSelectionModalTemplate.html';
	        this.addIndividualMode = "AddIndividual";
	        this.individualProfileMode = "IndividualProfile";
	        this.addOrganizationMode = "AddOrganization";
	        this.organizationProfileMode = "OrganizationProfile";
	        if ($stateParams.contact) {
	            this.contact = ContactFactory.create($stateParams.contact);
	        }
	        else if (this.contactId) {
	            this.ServiceWrapper.get(this.ContactService, this.contactId)
	                .then(function (contact) {
	                _this.contact = contact;
	            });
	        }
	        else {
	            if (this.customerType == 'individual') {
	                this.contact = IndividualFactory.create();
	            }
	            else if (this.customerType == 'organization') {
	                this.contact = OrganizationFactory.create();
	            }
	            else {
	                this.contact = {};
	            }
	        }
	        var prefillSubscription = eventManagerService.subscribe(CrmConstants.CONTACT.PREFILL_LOADED, function (contact) {
	            _this.contact = ContactFactory.create(contact);
	        });
	        $scope.$on('$destroy', function () {
	            eventManagerService.unSubscribe(CrmConstants.CONTACT.PREFILL_LOADED, prefillSubscription);
	        });
	        this.isSaveButtonDisabled = false;
	    }
	    CustomerPanelController.prototype.checkForDuplicates = function () {
	        var _this = this;
	        this.DuplicateService.checkForDuplicates(this.contact, "newContact")
	            .then(function (duplicateOption) {
	            if (duplicateOption.isDefined()) {
	                _this.navigateToContact(duplicateOption.getValue());
	            }
	            else {
	                _this.verifyEmail();
	            }
	        })
	            .catch(function () {
	            _this.eventManagerService.publish(_this.Constants.ALERT_EVENT_SAVE_BUTTON_PRESS);
	            _this.isSaveButtonDisabled = false;
	        });
	    };
	    CustomerPanelController.prototype.verifyEmail = function () {
	        var _this = this;
	        if (this.contact.contactPoints.email.value) {
	            this.EmailVerifyFrontendService.verifyEmail(this.contact.contactPoints.email.value)
	                .then(function (emailVerifyResult) {
	                switch (emailVerifyResult) {
	                    case emailVerifyOptions_1.EmailVerifyOptions.FIX_EMAIL:
	                        _this.isSaveButtonDisabled = false;
	                        break;
	                    case emailVerifyOptions_1.EmailVerifyOptions.REMOVE_EMAIL:
	                        _this.contact.contactPoints.email.value = '';
	                        _this.sendSaveRequest();
	                        _this.isSaveButtonDisabled = false;
	                        break;
	                    case emailVerifyOptions_1.EmailVerifyOptions.SAVE_ANYWAY:
	                        _this.sendSaveRequest();
	                        break;
	                    default:
	                        _this.sendSaveRequest();
	                        break;
	                }
	            }, function () {
	                _this.isSaveButtonDisabled = false;
	            });
	        }
	        else {
	            this.sendSaveRequest();
	        }
	    };
	    CustomerPanelController.prototype.sendSaveRequest = function () {
	        var _this = this;
	        this.eventManagerService.publish(this.Constants.ALERT_EVENT_SAVE_BUTTON_PRESS);
	        this.ServiceWrapper.save(this.ContactService, this.contact)
	            .then(function (response) {
	            _this.saveCustomerWasPublished(response);
	            _this.isSaveButtonDisabled = false;
	        });
	    };
	    CustomerPanelController.prototype.saveCustomer = function () {
	        this.isSaveButtonDisabled = true;
	        this.checkForDuplicates();
	    };
	    CustomerPanelController.prototype.saveCustomerWasPublished = function (response) {
	        if (this.isResponseValid(response))
	            this.onCustomerSuccessfullySaved(response);
	        this.isSaveButtonDisabled = false;
	    };
	    CustomerPanelController.prototype.isResponseValid = function (response) {
	        return response && !response.error;
	    };
	    CustomerPanelController.prototype.onCustomerSuccessfullySaved = function (response) {
	        this.contact = response;
	        this.navigateToContact(this.contact);
	    };
	    CustomerPanelController.prototype.navigateToContact = function (contact) {
	        this.$state.go('view.contact', { 'contactId': contact.id });
	    };
	    CustomerPanelController.prototype.addOrganization = function () {
	        this.contact = this.OrganizationFactory.create();
	    };
	    CustomerPanelController.$inject = [
	        'IndividualFactory',
	        'OrganizationFactory',
	        'ServiceWrapper',
	        'ContactService',
	        'ContactFactory',
	        '$state',
	        '$stateParams',
	        '$scope',
	        '$location',
	        'eventManagerService',
	        'Constants',
	        'CrmConstants',
	        'modalService',
	        'TranslationCache',
	        'DuplicateService',
	        'permissionService',
	        'EmailVerifyFrontendService'
	    ];
	    return CustomerPanelController;
	}());
	module.exports = CustomerPanelController;


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var CustomerDetailsTabsModule = __webpack_require__(183);
	var CustomerDetailsVehiclesModule = __webpack_require__(186);
	var CustomerVehicleModule = __webpack_require__(189);
	module.exports = angular.module("crm.customer.details", [
	    CustomerDetailsTabsModule.name,
	    CustomerDetailsVehiclesModule.name,
	    CustomerVehicleModule.name
	]);


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var CustomerDetailsTabsDirective = __webpack_require__(184);
	module.exports = angular.module("crm.customer.details.tabs", [])
	    .directive(CustomerDetailsTabsDirective.htmlName, CustomerDetailsTabsDirective.create);


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var CustomerDetailsTabsController = __webpack_require__(185);
	var SalesOpportunityTabsDirective = (function () {
	    function SalesOpportunityTabsDirective() {
	        this.restrict = 'E';
	        this.scope = {
	            contact: '='
	        };
	        this.templateUrl = "app/customer/CustomerDetails/CustomerDetailsTabs/CustomerDetailsTabsTemplate.html";
	        this.controller = CustomerDetailsTabsController;
	        this.controllerAs = 'ctrl';
	        this.bindToController = true;
	    }
	    SalesOpportunityTabsDirective.create = function () {
	        return new SalesOpportunityTabsDirective();
	    };
	    SalesOpportunityTabsDirective.htmlName = "crmCustomerDetailsTabs";
	    return SalesOpportunityTabsDirective;
	}());
	module.exports = SalesOpportunityTabsDirective;


/***/ },
/* 185 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var CustomerDetailsTabsController = (function () {
	    function CustomerDetailsTabsController($scope, $q, $translate, EventManagerService, Constants, CrmConstants, loadingService, ContactVehicleApiService, VehicleInfoService, permissionService, contactMarketingCampaignService, contactCampaignPermissionApiService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$q = $q;
	        this.$translate = $translate;
	        this.EventManagerService = EventManagerService;
	        this.Constants = Constants;
	        this.CrmConstants = CrmConstants;
	        this.loadingService = loadingService;
	        this.ContactVehicleApiService = ContactVehicleApiService;
	        this.VehicleInfoService = VehicleInfoService;
	        this.permissionService = permissionService;
	        this.contactMarketingCampaignService = contactMarketingCampaignService;
	        this.contactCampaignPermissionApiService = contactCampaignPermissionApiService;
	        this.updatingVehicleRecords = false;
	        this.vehicleCountLoaded = false;
	        this.hasViewQAPermission = false;
	        this.onSalesTabUpdated = function (counts) {
	            _this.salesCounts = {
	                open: counts.open,
	                sold: counts.sold
	            };
	        };
	        this.vehicleRecordsTabSelected = function () {
	            if (!_this.updatingVehicleRecords && _this.contact) {
	                _this.updatingVehicleRecords = true;
	                _this.ContactVehicleApiService.get(_this.contact.id).then(function (vehicles) {
	                    _this.updatingVehicleRecords = false;
	                    _this.vehicleCounts = _this.VehicleInfoService.getVehicleCounts(vehicles);
	                    _this.EventManagerService.publish(_this.CrmConstants.CUSTOMER_DETAILS.VEHICLE_RECORDS_TAB.LOADED, vehicles);
	                });
	            }
	        };
	        this.onDeleteVehicle = function (vehicle) {
	            _this.ContactVehicleApiService.deleteVehicle(_this.contact.id, vehicle.id).then(function (isDeleted) {
	                if (isDeleted) {
	                    _this.vehicleRecordsTabSelected();
	                }
	            });
	        };
	        this.onDeleteServiceEvent = function (serviceEvent) {
	            _this.ContactVehicleApiService.deleteServiceEvent(_this.contact.id, serviceEvent.id).then(function (isDeleted) {
	                if (isDeleted) {
	                    _this.vehicleRecordsTabSelected();
	                }
	            });
	        };
	        this.onCSITabUpdated = function (CSIEvents) {
	            _this.openCSIEvents = CSIEvents.open;
	            _this.resolvedCSIEvents = CSIEvents.resolved;
	        };
	        this.permissionService.getPermission('QA')
	            .then(function (permission) {
	            _this.hasViewQAPermission = permission.view;
	        });
	        this.permissionService.getPermission('Vehicle')
	            .then(function (permission) {
	            _this.vehiclePermission = permission;
	        });
	        this.setupScope();
	        this.loadMarketingData();
	    }
	    CustomerDetailsTabsController.prototype.setupScope = function () {
	        var _this = this;
	        var salesTabUpdatedEvent = this.EventManagerService.subscribe(this.CrmConstants.SALES_OPPORTUNITY.SALES_TAB.UPDATED, this.onSalesTabUpdated);
	        var csiTabUpdatedEvent = this.EventManagerService.subscribe(this.CrmConstants.SALES_OPPORTUNITY.CSI_TAB.UPDATED, this.onCSITabUpdated);
	        var vehicleServiceDeleteEvent = this.EventManagerService.subscribe(this.CrmConstants.CUSTOMER_DETAILS.VEHICLE_RECORDS_TAB.DELETE_VEHICLE, this.onDeleteVehicle);
	        var serviceEventDeleteEvent = this.EventManagerService.subscribe(this.CrmConstants.CUSTOMER_DETAILS.VEHICLE_RECORDS_TAB.DELETE_SERVICE, this.onDeleteServiceEvent);
	        var serviceEventMergeEvent = this.EventManagerService.subscribe(this.CrmConstants.CUSTOMER_DETAILS.VEHICLE_RECORDS_TAB.MERGE_SERVICE, this.vehicleRecordsTabSelected);
	        var deregister = this.$scope.$watch('ctrl.contact', function (contact) {
	            if (contact) {
	                _this.contact = contact;
	                _this.EventManagerService.publish(_this.Constants.SALES_OPPORTUNITY_TAB_SELECTED, _this.Constants.SALES_OPPORTUNITY_MARKETING_TAB);
	                _this.ContactVehicleApiService.get(_this.contact.id).then(function (vehicles) {
	                    _this.vehicleCounts = _this.VehicleInfoService.getVehicleCounts(vehicles);
	                    _this.vehicleCountLoaded = true;
	                });
	                deregister();
	            }
	        });
	        this.$scope.$on('$destroy', function () {
	            _this.EventManagerService.unSubscribe(_this.CrmConstants.SALES_OPPORTUNITY.SALES_TAB.UPDATED, salesTabUpdatedEvent);
	            _this.EventManagerService.unSubscribe(_this.CrmConstants.SALES_OPPORTUNITY.CSI_TAB.UPDATED, csiTabUpdatedEvent);
	            _this.EventManagerService.unSubscribe(_this.CrmConstants.CUSTOMER_DETAILS.VEHICLE_RECORDS_TAB.DELETE_VEHICLE, vehicleServiceDeleteEvent);
	            _this.EventManagerService.unSubscribe(_this.CrmConstants.CUSTOMER_DETAILS.VEHICLE_RECORDS_TAB.DELETE_SERVICE, serviceEventDeleteEvent);
	            _this.EventManagerService.unSubscribe(_this.CrmConstants.CUSTOMER_DETAILS.VEHICLE_RECORDS_TAB.MERGE_SERVICE, serviceEventMergeEvent);
	        });
	    };
	    CustomerDetailsTabsController.prototype.tabSelected = function (tabName) {
	        this.EventManagerService.publish(this.Constants.SALES_OPPORTUNITY_TAB_SELECTED, tabName);
	    };
	    CustomerDetailsTabsController.prototype.loadMarketingData = function () {
	        var _this = this;
	        this.loadingService.set(this.CrmConstants.CONTACT.MARKETING.IS_LOADING, true);
	        this.$q.all([
	            this.loadMarketingCampaigns(),
	            this.loadMarketingPermissions(),
	            this.loadMarketingRefDefs()
	        ])
	            .finally(function () {
	            _this.loadingService.set(_this.CrmConstants.CONTACT.MARKETING.IS_LOADING, false);
	        });
	    };
	    CustomerDetailsTabsController.prototype.loadMarketingCampaigns = function () {
	        var _this = this;
	        return this.contactMarketingCampaignService.getCampaigns(this.contact.id)
	            .then(function (campaigns) {
	            _this.marketingCampaigns = _this.contactMarketingCampaignService.sortCampaigns(campaigns, _this.contactMarketingCampaignService.defaultSort);
	        })
	            .catch(function (error) {
	            console.error(error);
	            _this.EventManagerService.publish(_this.CrmConstants.CONTACT.MARKETING.ERROR_OCCURRED, {
	                alertType: 'error',
	                message: _this.$translate.instant('crm.marketing.errors.LOADING')
	            });
	        });
	    };
	    CustomerDetailsTabsController.prototype.loadMarketingRefDefs = function () {
	        var _this = this;
	        return this.contactMarketingCampaignService.getRefDefs()
	            .then(function (refDefs) {
	            _this.marketingRefDefs = refDefs;
	        })
	            .catch(function (error) {
	            console.error(error);
	            _this.EventManagerService.publish(_this.CrmConstants.CONTACT.MARKETING.ERROR_OCCURRED, {
	                alertType: 'error',
	                message: _this.$translate.instant('crm.marketing.errors.LOADING')
	            });
	        });
	    };
	    CustomerDetailsTabsController.prototype.loadMarketingPermissions = function () {
	        var _this = this;
	        return this.contactCampaignPermissionApiService.get(this.contact.id)
	            .then(function (permissions) {
	            _this.marketingPermissions = permissions;
	        })
	            .catch(function (error) {
	            console.error(error);
	            _this.EventManagerService.publish(_this.CrmConstants.CONTACT.MARKETING.ERROR_OCCURRED, {
	                alertType: 'error',
	                message: _this.$translate.instant('crm.marketing.errors.PERMISSIONS')
	            });
	        });
	    };
	    CustomerDetailsTabsController.prototype.getMarketingTabActiveCampaignCount = function () {
	        return this.contactMarketingCampaignService.getActiveCampaignCount(this.marketingCampaigns);
	    };
	    CustomerDetailsTabsController.prototype.getMarketingTabCompletedCampaignCount = function () {
	        return this.contactMarketingCampaignService.getCompletedCampaignCount(this.marketingCampaigns);
	    };
	    CustomerDetailsTabsController.$inject = [
	        '$scope',
	        '$q',
	        '$translate',
	        'eventManagerService',
	        'Constants',
	        'CrmConstants',
	        'loadingService',
	        'ContactVehicleApiService',
	        'VehicleInfoService',
	        'permissionService',
	        'contactMarketingCampaignService',
	        'ContactCampaignPermissionApiService'
	    ];
	    return CustomerDetailsTabsController;
	}());
	module.exports = CustomerDetailsTabsController;


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var CustomerDetailsVehiclesDirective = __webpack_require__(187);
	module.exports = angular.module("crm.customer.details.vehicles", [])
	    .directive(CustomerDetailsVehiclesDirective.htmlName, CustomerDetailsVehiclesDirective.create);


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var CustomerDetailsVehiclesController = __webpack_require__(188);
	var CustomerDetailsVehiclesDirective = (function () {
	    function CustomerDetailsVehiclesDirective() {
	        this.restrict = 'E';
	        this.scope = {
	            contact: '='
	        };
	        this.templateUrl = "app/customer/CustomerDetails/CustomerDetailsVehicles/CustomerDetailsVehiclesTemplate.html";
	        this.controller = CustomerDetailsVehiclesController;
	        this.controllerAs = 'ctrl';
	        this.bindToController = true;
	    }
	    CustomerDetailsVehiclesDirective.create = function () {
	        return new CustomerDetailsVehiclesDirective();
	    };
	    CustomerDetailsVehiclesDirective.htmlName = "crmCustomerDetailsVehicles";
	    return CustomerDetailsVehiclesDirective;
	}());
	module.exports = CustomerDetailsVehiclesDirective;


/***/ },
/* 188 */
/***/ function(module, exports) {

	"use strict";
	var CustomerDetailsVehiclesController = (function () {
	    function CustomerDetailsVehiclesController($scope, CrmConstants, TranslationCache, permissionService, modalService, ContactVehicleApiService, DateService, eventManagerService, Constants, VehicleInfoService, $filter) {
	        var _this = this;
	        this.$scope = $scope;
	        this.CrmConstants = CrmConstants;
	        this.TranslationCache = TranslationCache;
	        this.permissionService = permissionService;
	        this.modalService = modalService;
	        this.ContactVehicleApiService = ContactVehicleApiService;
	        this.DateService = DateService;
	        this.eventManagerService = eventManagerService;
	        this.Constants = Constants;
	        this.VehicleInfoService = VehicleInfoService;
	        this.$filter = $filter;
	        this.vehicles = [];
	        this.closedROExpanded = {};
	        this.vehiclePermission = null;
	        this.servicePermission = null;
	        this.totalServiceEventCount = 0;
	        this.selectedSort = {
	            name: '',
	            value: ''
	        };
	        this.sortOptions = [];
	        this.vehicleOptions = {
	            onVehicleStatusChanged: function (vehicle) {
	                _this.showChangeOwnershipStatus(vehicle);
	            }
	        };
	        this.setSelectedSort = function (value) {
	            _this.selectedSort.value = value;
	            _this.selectedSort.name = _this.TranslationCache.get('crm.vehicle.tabs.' + value);
	            _this.sortVehicles();
	        };
	        this.onVehiclesLoaded = function (vehicles) {
	            _this.vehicles = vehicles;
	            _this.sortVehicles();
	        };
	        this.permissionService.getPermission('Service').then(function (permission) {
	            _this.servicePermission = permission;
	        });
	        this.permissionService.getPermission('Vehicle').then(function (permission) {
	            _this.vehiclePermission = permission;
	        });
	        this.setSelectedSort(this.CrmConstants.VEHICLE_YEAR_OLDEST);
	        var vehiclesLoadedEvent = this.eventManagerService.subscribe(this.CrmConstants.CUSTOMER_DETAILS.VEHICLE_RECORDS_TAB.LOADED, this.onVehiclesLoaded);
	        var unwatchContact = $scope.$watch('ctrl.contact', function (contact) {
	            if (contact) {
	                _this.setupTranslations();
	                unwatchContact();
	            }
	        });
	        $scope.$on("$destroy", function () {
	            _this.eventManagerService.unSubscribe(_this.CrmConstants.CUSTOMER_DETAILS.VEHICLE_RECORDS_TAB.LOADED, vehiclesLoadedEvent);
	        });
	    }
	    CustomerDetailsVehiclesController.prototype.setupTranslations = function () {
	        var self = this;
	        var grantOwnershipTitle = self.TranslationCache.get('crm.vehicle.modal.ownershipStatusModal.GRANT_OWNERSHIP_TITLE');
	        var removeOwnershipTitle = self.TranslationCache.get('crm.vehicle.modal.ownershipStatusModal.REMOVE_OWNERSHIP_TITLE');
	        var ownedText = self.TranslationCache.get('crm.vehicle.modal.ownershipStatusModal.OWNED');
	        var notOwnedText = self.TranslationCache.get('crm.vehicle.modal.ownershipStatusModal.NOT_OWNED');
	        var promptText = self.TranslationCache.get('crm.vehicle.modal.ownershipStatusModal.PROMPT');
	        var acceptText = self.TranslationCache.get('crm.vehicle.modal.ownershipStatusModal.ACCEPT');
	        var cancelText = self.TranslationCache.get('crm.vehicle.modal.ownershipStatusModal.CANCEL');
	        self.translations = {
	            grantOwnershipTitle: grantOwnershipTitle.replace(/\{contact\}/, self.contact.getFullName()),
	            removeOwnershipTitle: removeOwnershipTitle.replace(/\{contact\}/, self.contact.getFullName()),
	            ownedText: ownedText,
	            notOwnedText: notOwnedText,
	            promptText: promptText,
	            removeOwnershipPrompt: promptText.replace(/\{origin\}/, ownedText).replace(/\{target\}/, notOwnedText),
	            grantOwnershipPrompt: promptText.replace(/\{origin\}/, notOwnedText).replace(/\{target\}/, ownedText),
	            acceptText: acceptText,
	            cancelText: cancelText,
	        };
	    };
	    CustomerDetailsVehiclesController.prototype.showChangeOwnershipStatus = function (vehicle) {
	        var self = this;
	        var vehicleText = vehicle.year + ' ' + vehicle.make + ' ' + vehicle.model;
	        var removeOwnershipPrompt = self.translations.removeOwnershipPrompt.replace(/\{vehicle\}/, vehicleText);
	        var grantOwnershipPrompt = self.translations.grantOwnershipPrompt.replace(/\{vehicle\}/, vehicleText);
	        self.modalService.openModal(vehicle.isCustomerOwned ? removeOwnershipPrompt : grantOwnershipPrompt, vehicle.isCustomerOwned ? self.translations.removeOwnershipTitle : self.translations.grantOwnershipTitle, self.translations.acceptText, self.translations.cancelText)
	            .then(function (modalInstance) {
	            self.modalAccepted(modalInstance, vehicle);
	        }, function (modalInstance) {
	            self.modalCanceled(modalInstance);
	        });
	    };
	    CustomerDetailsVehiclesController.prototype.modalAccepted = function (modalInstance, vehicle) {
	        var self = this;
	        self.ContactVehicleApiService.updateVehicleStatus({
	            contactId: self.contact.id,
	            vehicleId: vehicle.id,
	            isActive: !vehicle.isCustomerOwned
	        }).then(function () {
	            vehicle.isCustomerOwned = !vehicle.isCustomerOwned;
	        });
	        modalInstance.close();
	    };
	    CustomerDetailsVehiclesController.prototype.modalCanceled = function (modalInstance) {
	        modalInstance.dismiss();
	    };
	    CustomerDetailsVehiclesController.prototype.sortVehicles = function () {
	        if (this.selectedSort.value == this.CrmConstants.VEHICLE_YEAR_NEWEST) {
	            this.vehicles = this.sortVehiclesByYear().reverse();
	        }
	        else if (this.selectedSort.value == this.CrmConstants.VEHICLE_YEAR_OLDEST) {
	            this.vehicles = this.sortVehiclesByYear();
	        }
	        else if (this.selectedSort.value == this.CrmConstants.LAST_SERVICED_NEWEST) {
	            this.vehicles = this.sortVehiclesByLastServiced().reverse();
	        }
	        else {
	            this.vehicles = this.sortVehiclesByLastServiced();
	        }
	    };
	    CustomerDetailsVehiclesController.prototype.sortVehiclesByYear = function () {
	        return _.sortBy(this.vehicles, function (vehicle) {
	            return vehicle.year;
	        });
	    };
	    CustomerDetailsVehiclesController.prototype.sortVehiclesByLastServiced = function () {
	        var _this = this;
	        return _.sortBy(this.vehicles, function (vehicle) {
	            return _this.DateService.getDate(vehicle.lastServiced);
	        });
	    };
	    CustomerDetailsVehiclesController.prototype.isOpen = function (event) {
	        return this.VehicleInfoService.isServiceEventOpen(event);
	    };
	    CustomerDetailsVehiclesController.prototype.isClosed = function (event) {
	        return !this.VehicleInfoService.isServiceEventOpen(event);
	    };
	    CustomerDetailsVehiclesController.$inject = [
	        '$scope',
	        'CrmConstants',
	        'TranslationCache',
	        'permissionService',
	        'modalService',
	        'ContactVehicleApiService',
	        'DateService',
	        'eventManagerService',
	        'Constants',
	        'VehicleInfoService',
	        '$filter'
	    ];
	    return CustomerDetailsVehiclesController;
	}());
	module.exports = CustomerDetailsVehiclesController;


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var customerVehicleCardComponent_1 = __webpack_require__(190);
	var customerVehicleServiceEventCardComponent_1 = __webpack_require__(191);
	module.exports = angular.module("crm.customer.details.vehicle", [])
	    .component(customerVehicleCardComponent_1.CustomerVehicleCardComponent.componentName, new customerVehicleCardComponent_1.CustomerVehicleCardComponent())
	    .component(customerVehicleServiceEventCardComponent_1.CustomerVehicleServiceEventCardComponent.componentName, new customerVehicleServiceEventCardComponent_1.CustomerVehicleServiceEventCardComponent());


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var moment = __webpack_require__(19);
	var CustomerVehicleCardComponent = (function () {
	    function CustomerVehicleCardComponent() {
	        this.templateUrl = "app/customer/CustomerDetails/vehicle/card/customerVehicleCardTemplate.html";
	        this.bindings = {
	            contact: "=",
	            vehicle: "<",
	            permission: "<",
	            servicePermission: "<"
	        };
	        this.controller = CustomerVehicleCardController;
	        this.controllerAs = "ctrl";
	    }
	    CustomerVehicleCardComponent.componentName = "crmCustomerVehicleCard";
	    return CustomerVehicleCardComponent;
	}());
	exports.CustomerVehicleCardComponent = CustomerVehicleCardComponent;
	var CustomerVehicleCardController = (function () {
	    function CustomerVehicleCardController(modalService, eventManagerService, contactVehicleApiService, translationCache, crmBrowserLocaleService, vehicleInfoService, CrmConstants) {
	        this.modalService = modalService;
	        this.eventManagerService = eventManagerService;
	        this.contactVehicleApiService = contactVehicleApiService;
	        this.translationCache = translationCache;
	        this.crmBrowserLocaleService = crmBrowserLocaleService;
	        this.vehicleInfoService = vehicleInfoService;
	        this.CrmConstants = CrmConstants;
	        this.serviceEventCardMergeModalTemplate = "app/customer/CustomerDetails/vehicle/card/serviceEventCardMergeModalTemplate.html";
	        this.ownedStatus = "complete";
	        this.notOwnedStatus = "overdue";
	        this.serviceEventStatusRegex = /\d+ - (\w+)/;
	    }
	    CustomerVehicleCardController.prototype.$onInit = function () {
	        this.panelStatus = this.getStatus();
	        this.status = this.getStatus("text-");
	        this.title = this.getTitle();
	        this.isExpanded = false;
	        this.initializeServiceEvents();
	        this.initializeTranslatedText();
	        this.initializeActionItems();
	    };
	    CustomerVehicleCardController.prototype.showChangeOwnershipStatusModal = function () {
	        var _this = this;
	        this.modalService.openModal(this.vehicle.isCustomerOwned ? this.translatedText.removeOwnership : this.translatedText.grantOwnership, this.vehicle.isCustomerOwned ? this.translatedText.removeOwnershipTitle : this.translatedText.grantOwnershipTitle, this.translationCache.get("crm.vehicle.modal.ownershipStatusModal.ACCEPT"), this.translationCache.get("crm.vehicle.modal.ownershipStatusModal.CANCEL"))
	            .then(function (modalInstance) {
	            _this.updateVehicleOwnershipStatus().finally(function () {
	                modalInstance.close();
	            });
	        }, function (modalInstance) {
	            modalInstance.close();
	        });
	    };
	    CustomerVehicleCardController.prototype.getDateFormattedText = function (value) {
	        var date = moment(new Date(value));
	        date.locale(this.crmBrowserLocaleService.getLocale());
	        return date.format("LL");
	    };
	    CustomerVehicleCardController.prototype.toggleIsExpanded = function () {
	        this.isExpanded = !this.isExpanded;
	    };
	    CustomerVehicleCardController.prototype.getServiceEventStatus = function (serviceEvent) {
	        if (!serviceEvent || !serviceEvent.status || !serviceEvent.status.text) {
	            return this.notOwnedStatus;
	        }
	        var match = this.serviceEventStatusRegex.exec(serviceEvent.status.text);
	        if (!match || !match[1]) {
	            return this.notOwnedStatus;
	        }
	        var status = match[1].toLowerCase();
	        if (status == "completed") {
	            return this.ownedStatus;
	        }
	        else if (status == "lost") {
	            return this.notOwnedStatus;
	        }
	        return "open";
	    };
	    CustomerVehicleCardController.prototype.onMergeServiceEvent = function (serviceEvent) {
	        var _this = this;
	        this.initializeMergeData(serviceEvent);
	        this.modalService.openModalViaTemplateUrlPromise(this.serviceEventCardMergeModalTemplate, this, function (result) {
	            _this.mergeServiceEventService(result);
	        }).then(function () {
	        }, function (result) {
	            result.modalInstance.close();
	        });
	    };
	    ;
	    CustomerVehicleCardController.prototype.getStatus = function (prefix) {
	        if (prefix) {
	            return this.vehicle.isCustomerOwned ?
	                "" + prefix + this.ownedStatus :
	                "" + prefix + this.notOwnedStatus;
	        }
	        else {
	            return this.vehicle.isCustomerOwned ?
	                this.ownedStatus :
	                this.notOwnedStatus;
	        }
	    };
	    CustomerVehicleCardController.prototype.initializeServiceEvents = function () {
	        var _this = this;
	        this.openServiceEvents = [];
	        this.closedServiceEvents = [];
	        this.vehicle.serviceEvents.forEach(function (serviceEvent) {
	            if (_this.vehicleInfoService.isServiceEventOpen(serviceEvent)) {
	                _this.openServiceEvents.push(serviceEvent);
	            }
	            else {
	                _this.closedServiceEvents.push(serviceEvent);
	            }
	        });
	    };
	    CustomerVehicleCardController.prototype.initializeTranslatedText = function () {
	        var contactName = this.contact.getFullName();
	        var ownedText = this.translationCache.get("crm.vehicle.modal.ownershipStatusModal.OWNED");
	        var notOwnedText = this.translationCache.get("crm.vehicle.modal.ownershipStatusModal.NOT_OWNED");
	        var promptText = this.translationCache.get("crm.vehicle.modal.ownershipStatusModal.PROMPT");
	        this.translatedText = {
	            grantOwnership: promptText
	                .replace(/\{origin\}/, notOwnedText)
	                .replace(/\{target\}/, ownedText)
	                .replace(/\{vehicle\}/, this.title),
	            removeOwnership: promptText
	                .replace(/\{origin\}/, ownedText)
	                .replace(/\{target\}/, notOwnedText)
	                .replace(/\{vehicle\}/, this.title),
	            grantOwnershipTitle: this.translationCache.get("crm.vehicle.modal.ownershipStatusModal.GRANT_OWNERSHIP_TITLE")
	                .replace(/\{contact\}/, contactName),
	            removeOwnershipTitle: this.translationCache.get("crm.vehicle.modal.ownershipStatusModal.REMOVE_OWNERSHIP_TITLE")
	                .replace(/\{contact\}/, contactName)
	        };
	    };
	    CustomerVehicleCardController.prototype.initializeActionItems = function () {
	        var _this = this;
	        if (!this.vehicle.isPhantomVehicle) {
	            this.actionItems = [
	                {
	                    text: this.translationCache.get("crm.vehicle.popover.DELETE_VEHICLE"),
	                    callback: function () { _this.deleteVehicle(); },
	                    isDisabled: function () { return !_this.vehicle.id || !_this.permission.delete; },
	                    isVisible: function () { return true; }
	                }
	            ];
	        }
	    };
	    CustomerVehicleCardController.prototype.getTitle = function () {
	        if (this.vehicle.isPhantomVehicle) {
	            return this.translationCache.get("crm.vehicle.PHANTOM_VEHICLE_TITLE");
	        }
	        var items = [];
	        if (this.vehicle.year)
	            items.push(this.vehicle.year);
	        if (this.vehicle.make)
	            items.push(this.vehicle.make);
	        if (this.vehicle.model)
	            items.push(this.vehicle.model);
	        return items.join(" ");
	    };
	    CustomerVehicleCardController.prototype.updateVehicleOwnershipStatus = function () {
	        var _this = this;
	        return this.contactVehicleApiService.updateVehicleStatus({
	            contactId: this.contact.id,
	            vehicleId: this.vehicle.id,
	            isActive: !this.vehicle.isCustomerOwned
	        }).then(function () {
	            _this.vehicle.isCustomerOwned = !_this.vehicle.isCustomerOwned;
	        }).catch(function () {
	            _this.eventManagerService.publish(_this.CrmConstants.UNKNOWN_ERROR_OCCURRED, {
	                alertType: "error",
	                message: _this.translationCache.get("crm.vehicle.CHANGE_OWNERSHIP_STATUS_ERROR")
	            });
	        });
	    };
	    CustomerVehicleCardController.prototype.deleteVehicle = function () {
	        var _this = this;
	        if (this.vehicle.id && this.permission.delete) {
	            var title = "crm.modal.VEHICLE_DELETE_TITLE";
	            var acceptText = "crm.modal.VEHICLE_DELETE_ACCEPT";
	            var cancelText = "crm.modal.VEHICLE_DELETE_CANCEL";
	            var prompt = this.translationCache.get("crm.modal.VEHICLE_DELETE_PROMPT");
	            if (this.vehicle.id && this.permission.delete) {
	                this.modalService.openModal(prompt, title, acceptText, cancelText)
	                    .then(function (modalInstance) {
	                    _this.eventManagerService.publish(_this.CrmConstants.CUSTOMER_DETAILS.VEHICLE_RECORDS_TAB.DELETE_VEHICLE, _this.vehicle);
	                    modalInstance.close();
	                })
	                    .catch(function (modalInstance) {
	                    modalInstance.dismiss();
	                });
	            }
	        }
	    };
	    CustomerVehicleCardController.prototype.initializeMergeData = function (serviceEvent) {
	        var secondaryServiceEvents = [];
	        this.vehicle.serviceEvents.forEach(function (otherServiceEvent) {
	            if (otherServiceEvent.id != serviceEvent.id) {
	                secondaryServiceEvents.push(otherServiceEvent);
	            }
	        });
	        this.mergeData = {
	            primaryServiceEvent: serviceEvent,
	            secondaryServiceEvents: secondaryServiceEvents,
	            selectedIdToMerge: null,
	            mergePending: false
	        };
	    };
	    CustomerVehicleCardController.prototype.mergeServiceEventService = function (modalManager) {
	        var _this = this;
	        var data = {
	            entityId: this.contact.id,
	            primaryEventId: this.mergeData.primaryServiceEvent.id,
	            secondaryEventId: this.mergeData.selectedIdToMerge
	        };
	        this.mergeData.mergePending = true;
	        return this.contactVehicleApiService.mergeServices(data.entityId, data.secondaryEventId, data.primaryEventId)
	            .then(function (response) {
	            _this.contactVehicleApiService.get(data.entityId);
	            _this.mergeData.mergePending = false;
	            modalManager.modalInstance.close();
	            _this.eventManagerService.publish(_this.CrmConstants.CUSTOMER_DETAILS.VEHICLE_RECORDS_TAB.MERGE_SERVICE);
	        }).catch(function () {
	            _this.mergeData.mergePending = false;
	            _this.eventManagerService.publish(_this.CrmConstants.SERVICE.MERGE_FAILED, {
	                alertType: "error",
	                message: _this.translationCache.get("crm.vehicle.modal.mergeModal.MERGE_FAIL_MESSAGE")
	            });
	        });
	    };
	    CustomerVehicleCardController.$inject = [
	        "modalService",
	        "eventManagerService",
	        "ContactVehicleApiService",
	        "TranslationCache",
	        "crmBrowserLocaleService",
	        "VehicleInfoService",
	        "CrmConstants"
	    ];
	    return CustomerVehicleCardController;
	}());


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var moment = __webpack_require__(19);
	var CustomerVehicleServiceEventCardComponent = (function () {
	    function CustomerVehicleServiceEventCardComponent() {
	        this.templateUrl = "app/customer/CustomerDetails/vehicle/serviceEventCard/customerVehicleServiceEventCardTemplate.html";
	        this.bindings = {
	            status: "@",
	            contactName: "@",
	            totalServiceEventCount: "<",
	            serviceEvent: "<",
	            permission: "<",
	            hideActions: "<",
	            onMerge: "&"
	        };
	        this.controller = CustomerVehicleServiceEventCardController;
	        this.controllerAs = "ctrl";
	    }
	    CustomerVehicleServiceEventCardComponent.componentName = "crmCustomerVehicleServiceEventCard";
	    return CustomerVehicleServiceEventCardComponent;
	}());
	exports.CustomerVehicleServiceEventCardComponent = CustomerVehicleServiceEventCardComponent;
	var CustomerVehicleServiceEventCardController = (function () {
	    function CustomerVehicleServiceEventCardController(crmBrowserLocaleService, eventManagerService, modalService, translationCache, CrmConstants) {
	        this.crmBrowserLocaleService = crmBrowserLocaleService;
	        this.eventManagerService = eventManagerService;
	        this.modalService = modalService;
	        this.translationCache = translationCache;
	        this.CrmConstants = CrmConstants;
	        this.openStatus = "open";
	        this.completeStatus = "complete";
	        this.lostStatus = "overdue";
	    }
	    CustomerVehicleServiceEventCardController.prototype.$onInit = function () {
	        this.setStatusClass();
	        this.setIsAppointmentVisible();
	        this.setIsDueDateVisible();
	        this.setCanDeleteServiceEvent();
	        this.setActionItems();
	        this.dueDate = this.getDateFormattedText(this.serviceEvent.dueDate, "l");
	    };
	    CustomerVehicleServiceEventCardController.prototype.getDateFormattedText = function (value, format) {
	        if (!value) {
	            return this.translationCache.get("crm.dateStyles.NA");
	        }
	        var date = moment(new Date(value));
	        date.locale(this.crmBrowserLocaleService.getLocale());
	        return date.format(format || "LL");
	    };
	    CustomerVehicleServiceEventCardController.prototype.setStatusClass = function () {
	        this.statusClass = "text-" + this.status;
	    };
	    CustomerVehicleServiceEventCardController.prototype.setIsAppointmentVisible = function () {
	        this.isAppointmentVisible =
	            (!!this.serviceEvent.dueDate && this.status != this.openStatus)
	                || !this.serviceEvent.dueDate;
	    };
	    CustomerVehicleServiceEventCardController.prototype.setIsDueDateVisible = function () {
	        this.isDueDateVisible = !!this.serviceEvent.dueDate && !this.isAppointmentVisible;
	    };
	    CustomerVehicleServiceEventCardController.prototype.setCanDeleteServiceEvent = function () {
	        this.canDeleteServiceEvent = !!this.permission.delete && this.status != this.openStatus;
	    };
	    CustomerVehicleServiceEventCardController.prototype.setActionItems = function () {
	        var _this = this;
	        this.actionItems = [
	            {
	                text: this.translationCache.get("crm.vehicle.popover.MERGE_INTO"),
	                callback: function () { _this.mergeServiceEvents(); },
	                isDisabled: function () { return !_this.permission.edit; },
	                isVisible: function () { return _this.totalServiceEventCount > 1; }
	            },
	            {
	                text: this.translationCache.get("crm.vehicle.popover.NO_MERGE_AVAILABLE"),
	                callback: function () { },
	                isDisabled: function () { return true; },
	                isVisible: function () { return _this.totalServiceEventCount <= 1; }
	            },
	            {
	                text: this.translationCache.get("crm.vehicle.popover.DELETE_SERVICE"),
	                callback: function () { _this.deleteServiceEvent(); },
	                isDisabled: function () { return !_this.canDeleteServiceEvent; },
	                isVisible: function () { return true; }
	            }
	        ];
	    };
	    CustomerVehicleServiceEventCardController.prototype.mergeServiceEvents = function () {
	        if (this.permission.edit) {
	            this.onMerge({ serviceEvent: this.serviceEvent });
	        }
	    };
	    CustomerVehicleServiceEventCardController.prototype.deleteServiceEvent = function () {
	        var _this = this;
	        if (this.canDeleteServiceEvent) {
	            var title = "crm.modal.VEHICLE_SERVICE_DELETE_TITLE";
	            var acceptText = "crm.modal.VEHICLE_SERVICE_DELETE_ACCEPT";
	            var cancelText = "crm.modal.VEHICLE_SERVICE_DELETE_CANCEL";
	            var prompt = this.translationCache.get("crm.modal.VEHICLE_SERVICE_DELETE_PROMPT")
	                .replace(/\{serviceId\}/, this.serviceEvent.id)
	                .replace(/\{customerName\}/, this.contactName);
	            this.modalService.openModal(prompt, title, acceptText, cancelText)
	                .then(function (modalInstance) {
	                _this.eventManagerService.publish(_this.CrmConstants.CUSTOMER_DETAILS.VEHICLE_RECORDS_TAB.DELETE_SERVICE, _this.serviceEvent);
	                modalInstance.close();
	            })
	                .catch(function (modalInstance) {
	                modalInstance.dismiss();
	            });
	        }
	    };
	    CustomerVehicleServiceEventCardController.$inject = [
	        "crmBrowserLocaleService",
	        "eventManagerService",
	        "modalService",
	        "TranslationCache",
	        "CrmConstants"
	    ];
	    return CustomerVehicleServiceEventCardController;
	}());


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var LastTwentyCustomersDirective = __webpack_require__(193);
	module.exports = angular.module("crm.customer.lasttwenty", [])
	    .directive("crmLastTwentyCustomers", LastTwentyCustomersDirective);


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var LastTwentyController = __webpack_require__(194);
	function LastTwentyDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {},
	        templateUrl: 'app/customer/lastTwenty/template.html',
	        controller: LastTwentyController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = LastTwentyDirective;


/***/ },
/* 194 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var LastTwentyController = (function () {
	    function LastTwentyController(ContactService, $stateParams, primaryPointOfContactService, $scope, $state, $q, eventManagerService, CrmConstants, permissionService) {
	        this.ContactService = ContactService;
	        this.$stateParams = $stateParams;
	        this.primaryPointOfContactService = primaryPointOfContactService;
	        this.$scope = $scope;
	        this.$state = $state;
	        this.$q = $q;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.permissionService = permissionService;
	        this.init();
	    }
	    LastTwentyController.prototype.init = function () {
	        var _this = this;
	        this.getLastTwentyContacts();
	        this.isCollapsed = true;
	        this.contactDeletedCallback = this.eventManagerService.subscribe(this.CrmConstants.CONTACT.CONTACT_DELETED, function () {
	            _this.getLastTwentyContacts();
	        });
	        this.dealershipCallback = this.eventManagerService.subscribe(this.CrmConstants.DEALERSHIP_CHANGED, function () {
	            _this.getLastTwentyContacts();
	        });
	        this.contactLoadedCallback = this.eventManagerService.subscribe(this.CrmConstants.CONTACT.CONTACT_LOADED, function (contact) {
	            _this.contactLoaded(contact);
	        });
	        this.permissionService.getPermission('Individual').then(function (permission) {
	            _this.hasAddIndividualPermission = permission.add;
	        });
	        this.permissionService.getPermission('Company').then(function (permission) {
	            _this.hasAddCompanyPermission = permission.add;
	        });
	        this.$scope.$on("$destroy", function () {
	            _this.destroy();
	        });
	    };
	    LastTwentyController.prototype.destroy = function () {
	        this.eventManagerService.unSubscribe(this.CrmConstants.DEALERSHIP_CHANGED, this.dealershipCallback);
	        this.eventManagerService.unSubscribe(this.CrmConstants.CONTACT.CONTACT_LOADED, this.contactLoadedCallback);
	        this.eventManagerService.unSubscribe(this.CrmConstants.CONTACT.CONTACT_DELETED, this.contactDeletedCallback);
	    };
	    LastTwentyController.prototype.getLastTwentyContacts = function () {
	        var promise = this.$q.defer();
	        var self = this;
	        self.isLoading = true;
	        self.contacts = [];
	        this.ContactService.getLastTwentyContacts().then(function (response) {
	            self.contacts = response;
	            self.isLoading = false;
	            promise.resolve(true);
	        });
	        return promise.promise;
	    };
	    LastTwentyController.prototype.contactClicked = function (contactId) {
	        var _this = this;
	        var self = this;
	        this.$state.go('view.contact', { 'contactId': contactId }).then(function () {
	            self.pushContactToTop(contactId);
	            self.eventManagerService.publish(_this.CrmConstants.CONTACT.LAST_TWENTY_SCROLL_EVENT_KEY);
	        });
	    };
	    LastTwentyController.prototype.pushContactToTop = function (selectedContactId) {
	        if (selectedContactId != this.$stateParams.contactId) {
	            return;
	        }
	        var results = [_.findWhere(this.contacts, { id: selectedContactId })];
	        _.each(this.contacts, function (contact) {
	            if (contact.id != selectedContactId) {
	                results.push(contact);
	            }
	        });
	        this.contacts = results;
	    };
	    LastTwentyController.prototype.contactLoaded = function (contact) {
	        var contactInList = _.findWhere(this.contacts, { id: contact.id });
	        if (!contactInList) {
	            this.addContactToLastTwenty(contact);
	        }
	        else {
	            this.pushContactToTop(contact.id);
	        }
	    };
	    LastTwentyController.prototype.addContactToLastTwenty = function (contact) {
	        var length = this.contacts.unshift(contact);
	        if (length > LastTwentyController.listSize) {
	            this.contacts.splice(-1, 1);
	        }
	    };
	    LastTwentyController.prototype.getPrimaryMethodOfContact = function (contact) {
	        return this.primaryPointOfContactService.getNumber(contact);
	    };
	    LastTwentyController.prototype.getPrimaryMethodOfContactTranslation = function (contact) {
	        return this.primaryPointOfContactService.getTypeTranslation(contact);
	    };
	    LastTwentyController.listSize = 20;
	    LastTwentyController.$inject = [
	        'ContactService',
	        '$stateParams',
	        'primaryPointOfContactService',
	        '$scope',
	        '$state',
	        '$q',
	        'eventManagerService',
	        'CrmConstants',
	        'permissionService'
	    ];
	    return LastTwentyController;
	}());
	module.exports = LastTwentyController;


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	//services
	var angular = __webpack_require__(2);
	var htmlService = __webpack_require__(196);
	var inlineEditingService = __webpack_require__(197);
	var modalService = __webpack_require__(198);
	var duplicateAlertService = __webpack_require__(199);
	var contactValidationAlertService = __webpack_require__(200);
	var organizationValidationAlertService = __webpack_require__(201);
	var validationWrapperService = __webpack_require__(202);
	var CrmConstants = __webpack_require__(203);
	var ODataServiceHelpers = __webpack_require__(204);
	var DateSwapperService = __webpack_require__(205);
	var DateFormatService = __webpack_require__(206);
	var TranslationCache = __webpack_require__(207);
	var WordService = __webpack_require__(208);
	var PhoneNumberLabelService = __webpack_require__(209);
	var TaskFilterService = __webpack_require__(210);
	var VehicleInfoService = __webpack_require__(211);
	var salesOpportunityTradesService = __webpack_require__(212);
	var ContactService = __webpack_require__(213);
	var EmployeeDashboardService = __webpack_require__(217);
	var GmLookupService = __webpack_require__(218);
	var addressService = __webpack_require__(219);
	var DuplicateService = __webpack_require__(220);
	var ReportsService = __webpack_require__(225);
	var PrintTaskService = __webpack_require__(226);
	var FilterManagerService = __webpack_require__(227);
	var salesOpportunityService = __webpack_require__(228);
	var TradeIntegrationsService = __webpack_require__(229);
	var EmailDialogService = __webpack_require__(230);
	var ConvertOpportunityTypeService = __webpack_require__(231);
	var EmailVerifyFrontendService = __webpack_require__(232);
	var DriversLicenseService = __webpack_require__(234);
	var PrintService = __webpack_require__(177);
	var PrintProspectService = __webpack_require__(235);
	var DocumentManagerService = __webpack_require__(236);
	var activityFilterService_1 = __webpack_require__(237);
	var loading_service_1 = __webpack_require__(173);
	//modules
	var api = __webpack_require__(238);
	var utils = __webpack_require__(240);
	var salesRecapModalService_1 = __webpack_require__(244);
	module.exports = angular.module('crm.services', [
	    api.name,
	    utils.name
	])
	    .service("duplicateAlertService", duplicateAlertService)
	    .service("contactValidationAlertService", contactValidationAlertService)
	    .service("modalService", modalService)
	    .service("htmlService", htmlService)
	    .service("organizationValidationAlertService", organizationValidationAlertService)
	    .service("validationWrapperService", validationWrapperService)
	    .service("inlineEditingService", inlineEditingService)
	    .service("CrmConstants", CrmConstants)
	    .service("ODataServiceHelpers", ODataServiceHelpers)
	    .service("DateSwapperService", DateSwapperService)
	    .service("DateFormatService", DateFormatService)
	    .service("TranslationCache", TranslationCache)
	    .service("WordService", WordService)
	    .service(PhoneNumberLabelService.serviceName, PhoneNumberLabelService)
	    .service('TaskFilterService', TaskFilterService)
	    .service('VehicleInfoService', VehicleInfoService)
	    .service('salesOpportunityTradesService', salesOpportunityTradesService)
	    .service(ContactService.serviceName, ContactService)
	    .service('ActivityFilterService', activityFilterService_1.ActivityFilterService)
	    .service('EmployeeDashboardService', EmployeeDashboardService)
	    .service('GmLookupService', GmLookupService)
	    .service('addressService', addressService)
	    .service('DuplicateService', DuplicateService)
	    .service('ReportsService', ReportsService)
	    .service('PrintTaskService', PrintTaskService)
	    .service('salesOpportunityService', salesOpportunityService)
	    .service('salesRecapModalService', salesRecapModalService_1.SalesRecapModalService)
	    .service('FilterManagerService', FilterManagerService)
	    .service('tradeIntegrationsService', TradeIntegrationsService)
	    .service('EmailDialogService', EmailDialogService)
	    .service('convertOpportunityTypeService', ConvertOpportunityTypeService)
	    .service('EmailVerifyFrontendService', EmailVerifyFrontendService)
	    .service('DriversLicenseService', DriversLicenseService)
	    .service(PrintService.serviceName, PrintService)
	    .service(loading_service_1.LoadingService.serviceName, loading_service_1.LoadingService)
	    .service(PrintProspectService.serviceName, PrintProspectService)
	    .service('DocumentManagerService', DocumentManagerService);


/***/ },
/* 196 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var htmlService = (function () {
	    function htmlService() {
	    }
	    htmlService.prototype.makeBold = function (text) {
	        return '<b>' + text + '</b>';
	    };
	    return htmlService;
	}());
	module.exports = htmlService;


/***/ },
/* 197 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var inlineEditingService = (function () {
	    function inlineEditingService($q, $document, $timeout) {
	        this.$q = $q;
	        this.$document = $document;
	        this.$timeout = $timeout;
	        this.isEditOpen = false;
	        this.inlineEditControls = [];
	        this.openInlineEditControls = [];
	    }
	    inlineEditingService.prototype.getEditOpen = function () {
	        return this.isEditOpen;
	    };
	    inlineEditingService.prototype.setEditOpen = function (bool) {
	        this.isEditOpen = bool;
	    };
	    inlineEditingService.prototype.registerInlineEditControl = function (inlineEditControl) {
	        this.inlineEditControls.push(inlineEditControl);
	    };
	    inlineEditingService.prototype.deregisterInlineEditControl = function (guid) {
	        this.inlineEditControls = _.filter(this.inlineEditControls, function (control) {
	            return control.facade.guid !== guid;
	        });
	    };
	    inlineEditingService.prototype.openInlineEdit = function (guid) {
	        var _this = this;
	        var self = this;
	        var control = self.getInlineEditControlByGuid(guid);
	        if (!this.areAnyInlineEditsOpen()) {
	            control.onOpen();
	            this.openInlineEditControls.push(control);
	            self.$timeout(function () {
	                self.$document.bind('click.inlineedit', function (event) {
	                    if (self.isClickOutsideOfElement(control.facade.element, event.target)) {
	                        control.onClose(true).then(function (wasClosed) {
	                            if (wasClosed) {
	                                _this.openInlineEditControls = [];
	                                self.$document.unbind('click.inlineedit');
	                            }
	                        });
	                    }
	                });
	            });
	        }
	    };
	    inlineEditingService.prototype.updateModel = function (guid, facade) {
	        var control = this.getInlineEditControlByGuid(guid);
	        control.onUpdate(facade);
	    };
	    inlineEditingService.prototype.closeInlineEdit = function (guid) {
	        var control = this.getInlineEditControlByGuid(guid);
	        if (control) {
	            control.onClose();
	        }
	        this.openInlineEditControls = [];
	        this.$document.unbind('click.inlineedit');
	    };
	    inlineEditingService.prototype.isClickOutsideOfElement = function (element, click) {
	        return element.has(click).length == 0;
	    };
	    inlineEditingService.prototype.areAnyInlineEditsOpen = function () {
	        return (this.openInlineEditControls.length > 0 || this.getEditOpen());
	    };
	    inlineEditingService.prototype.getInlineEditControlByGuid = function (guid) {
	        return _.find(this.inlineEditControls, function (control) {
	            return control.facade.guid === guid;
	        });
	    };
	    inlineEditingService.$inject = [
	        '$q',
	        '$document',
	        '$timeout'
	    ];
	    return inlineEditingService;
	}());
	module.exports = inlineEditingService;


/***/ },
/* 198 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var modalService = (function () {
	    function modalService($q, $uibModal, $uibModalStack, constants) {
	        this.$q = $q;
	        this.$uibModal = $uibModal;
	        this.$uibModalStack = $uibModalStack;
	        this.constants = constants;
	    }
	    modalService.prototype.openModal = function (prompt, title, acceptText, cancelText, windowClass) {
	        var promise = this.$q.defer();
	        var modalInstance = this.$uibModal.open({
	            size: 'lg',
	            windowClass: windowClass,
	            templateUrl: 'app/ui/modal/modalTemplate.html',
	            controller: function () {
	                var ctrl = this;
	                ctrl.prompt = prompt;
	                ctrl.title = title;
	                ctrl.acceptText = acceptText;
	                ctrl.cancelText = cancelText;
	                ctrl.accept = function () {
	                    promise.resolve(modalInstance);
	                };
	                ctrl.cancel = function (event) {
	                    if (event) {
	                        event.stopPropagation();
	                    }
	                    promise.reject(modalInstance);
	                };
	            },
	            controllerAs: 'ctrl'
	        });
	        return promise.promise;
	    };
	    modalService.prototype.openSelectModal = function (selections, title, acceptText, cancelText, selectLabel, optionalSelectLabel) {
	        var promise = this.$q.defer();
	        var modalInstance = this.$uibModal.open({
	            size: 'lg',
	            templateUrl: 'app/ui/modal/selectModalTemplate.html',
	            controller: function () {
	                var ctrl = this;
	                ctrl.title = title;
	                ctrl.acceptText = acceptText;
	                ctrl.cancelText = cancelText;
	                ctrl.selectLabel = selectLabel;
	                ctrl.primarySelect = null;
	                ctrl.selections = selections;
	                ctrl.optionalSelectLabel = optionalSelectLabel;
	                ctrl.optionalSelect = null;
	                ctrl.optionalSelectOptions = null;
	                ctrl.accept = function () {
	                    var resolveObject = {
	                        modalInstance: modalInstance,
	                        primarySelect: ctrl.primarySelect,
	                        optionalSelect: ctrl.optionalSelect
	                    };
	                    promise.resolve(resolveObject);
	                };
	                ctrl.cancel = function () {
	                    promise.reject(modalInstance);
	                };
	                ctrl.primarySelectChangeHandler = function () {
	                    if (ctrl.primarySelect == null) {
	                        ctrl.optionalSelectOptions = null;
	                    }
	                    else {
	                        _.each(ctrl.selections, function (selection) {
	                            if (selection.itemValueId === ctrl.primarySelect) {
	                                ctrl.optionalSelectOptions = selection.options.length == 0 ? null : selection.options;
	                                ctrl.optionalSelect = '';
	                            }
	                        });
	                    }
	                };
	            },
	            controllerAs: 'ctrl'
	        });
	        modalInstance.result.catch(function () {
	            promise.reject();
	        });
	        return promise.promise;
	    };
	    modalService.prototype.openSelectSaveModal = function (selections, title, saveText, selectLabel, optionalSelectLabel, loadingKey) {
	        loadingKey = loadingKey ? loadingKey : this.constants.SELECT_SAVE_MODAL_DEFAULT_LOADING_KEY;
	        var promise = this.$q.defer();
	        var modalInstance = this.$uibModal.open({
	            size: 'lg',
	            templateUrl: 'app/ui/modal/selectSaveModalTemplate.html',
	            controller: function () {
	                var ctrl = this;
	                ctrl.loadingKey = loadingKey;
	                ctrl.title = title;
	                ctrl.saveText = saveText;
	                ctrl.selectLabel = selectLabel;
	                ctrl.primarySelect = null;
	                ctrl.selections = selections;
	                ctrl.optionalSelectLabel = optionalSelectLabel;
	                ctrl.optionalSelect = null;
	                ctrl.optionalSelectOptions = null;
	                ctrl.accept = function () {
	                    var resolveObject = {
	                        modalInstance: modalInstance,
	                        primarySelect: ctrl.primarySelect,
	                        optionalSelect: ctrl.optionalSelect
	                    };
	                    promise.resolve(resolveObject);
	                };
	                ctrl.cancel = function () {
	                    promise.reject(modalInstance);
	                };
	                ctrl.primarySelectChangeHandler = function () {
	                    if (ctrl.primarySelect == null) {
	                        ctrl.optionalSelectOptions = null;
	                    }
	                    else {
	                        _.each(ctrl.selections, function (selection) {
	                            if (selection.itemValueId === ctrl.primarySelect) {
	                                ctrl.optionalSelectOptions = selection.options.length == 0 ? null : selection.options;
	                            }
	                        });
	                    }
	                };
	            },
	            controllerAs: 'ctrl'
	        });
	        modalInstance.result.catch(function () {
	            promise.reject();
	        });
	        return promise.promise;
	    };
	    modalService.prototype.openModalViaTemplateUrl = function (templateUrl, externalController, isModal) {
	        if (isModal === void 0) { isModal = false; }
	        var promise = this.$q.defer();
	        var modalmodalServiceInstance = this.$uibModal.open({
	            size: 'lg',
	            templateUrl: templateUrl,
	            backdrop: isModal ? 'static' : true,
	            controller: function () {
	                return externalController;
	            },
	            controllerAs: 'ctrl'
	        });
	        var modalManager = {
	            accept: function () {
	                promise.resolve(modalmodalServiceInstance);
	                modalmodalServiceInstance.close();
	            },
	            cancel: function () {
	                promise.reject(modalmodalServiceInstance);
	                modalmodalServiceInstance.close();
	            },
	            result: modalmodalServiceInstance.result,
	            opened: modalmodalServiceInstance.opened,
	            rendered: modalmodalServiceInstance.rendered
	        };
	        return modalManager;
	    };
	    modalService.prototype.open = function (templateUrl, externalController) {
	        var modalInstance = this.$uibModal.open({
	            size: 'lg',
	            templateUrl: templateUrl,
	            controller: function () { return externalController; },
	            controllerAs: 'ctrl',
	            bindToController: true
	        });
	        externalController.closeModal = function (result) {
	            if (modalInstance) {
	                modalInstance.close(result);
	            }
	        };
	        return modalInstance.result;
	    };
	    modalService.prototype.openModalViaTemplate = function (template, externalController) {
	        var modalInstance = this.$uibModal.open({
	            size: 'lg',
	            template: template,
	            controller: function () { return externalController ? externalController : { closeModal: function (result) {
	                    if (modalInstance) {
	                        modalInstance.close(result);
	                    }
	                } }; },
	            controllerAs: 'ctrl',
	            bindToController: true
	        });
	        externalController.closeModal = function (result) {
	            if (modalInstance) {
	                modalInstance.close(result);
	            }
	        };
	        return modalInstance.result;
	    };
	    modalService.prototype.openModalViaTemplateAndGetHandle = function (template, externalController) {
	        return this.$uibModal.open({
	            size: 'lg',
	            template: template,
	            controller: function () { return externalController; },
	            controllerAs: 'ctrl',
	            bindToController: true
	        });
	    };
	    modalService.prototype.openModalViaTemplateUrlAndGetHandle = function (templateUrl, externalController) {
	        return this.$uibModal.open({
	            size: 'lg',
	            templateUrl: templateUrl,
	            controller: externalController,
	            controllerAs: 'ctrl',
	            bindToController: true
	        });
	    };
	    modalService.prototype.openModalViaTemplateUrlPromise = function (templateUrl, externalController, onSuccess) {
	        var promise = this.$q.defer();
	        var modalInstance = this.$uibModal.open({
	            size: 'lg',
	            templateUrl: templateUrl,
	            controller: function () {
	                var ctrl = externalController;
	                ctrl.accept = function () {
	                    var resolveObject = {
	                        modalInstance: modalInstance,
	                        primarySelect: ctrl.primarySelect,
	                        optionalSelect: ctrl.optionalSelect
	                    };
	                    onSuccess(resolveObject);
	                };
	                ctrl.cancel = function () {
	                    promise.reject({ "modalInstance": modalInstance });
	                };
	                return ctrl;
	            },
	            controllerAs: 'ctrl'
	        });
	        return promise.promise;
	    };
	    modalService.prototype.isOpen = function () {
	        return !!this.$uibModalStack.getTop();
	    };
	    modalService.$inject = [
	        '$q',
	        '$uibModal',
	        '$uibModalStack',
	        'Constants'
	    ];
	    return modalService;
	}());
	module.exports = modalService;


/***/ },
/* 199 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var duplicateAlertService = (function () {
	    function duplicateAlertService($translate, eventManagerService, Constants) {
	        this.$translate = $translate;
	        this.eventManagerService = eventManagerService;
	        this.Constants = Constants;
	    }
	    duplicateAlertService.prototype.updateDuplicateCount = function (duplicateCount) {
	        var self = this;
	        var duplicatesFoundPath = 'crm.contact.duplicates.DUPLICATES_FOUND';
	        var viewDuplicatesPath = 'crm.contact.duplicates.VIEW_DUPLICATES';
	        self.$translate([duplicatesFoundPath, viewDuplicatesPath])
	            .then(sendDuplicateAlertEvent);
	        function sendDuplicateAlertEvent(translations) {
	            var duplicatesFound = translations[duplicatesFoundPath];
	            var viewDuplicates = translations[viewDuplicatesPath];
	            var alertInfo = {
	                alertName: self.Constants.ALERT_EVENT_DUPLICATES_FOUND,
	                alertType: "",
	                message: duplicateCount + "  " + duplicatesFound + " | <span class='alert-inline-anchor' ng-click='alertCallback()'>" + viewDuplicates + "</span>",
	                closeAlert: !duplicateCount,
	                alertCallback: sendOpenDuplicateMenuEvent
	            };
	            self.eventManagerService.publish(self.Constants.ALERT_EVENT_DUPLICATES_FOUND, alertInfo);
	            function sendOpenDuplicateMenuEvent() {
	                self.eventManagerService.publish(self.Constants.ALERT_EVENT_OPEN_DUPLICATES_MENU, alertInfo);
	            }
	        }
	    };
	    duplicateAlertService.$inject = ['$translate', 'eventManagerService', 'Constants'];
	    return duplicateAlertService;
	}());
	module.exports = duplicateAlertService;


/***/ },
/* 200 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var contactValidationAlertService = (function () {
	    function contactValidationAlertService($translate, eventManagerService, Constants) {
	        var _this = this;
	        this.$translate = $translate;
	        this.eventManagerService = eventManagerService;
	        this.Constants = Constants;
	        this._isBuyerValid = true;
	        this._isCoBuyerValid = true;
	        this._isConnectionsValid = true;
	        this._isIndividualValid = true;
	        this.saveAttempted = false;
	        this.setSaveAttempted = function () {
	            _this.saveAttempted = true;
	            _this.updateAlertStatus();
	        };
	    }
	    contactValidationAlertService.prototype.reset = function () {
	        this._isBuyerValid = true;
	        this._isCoBuyerValid = true;
	        this._isConnectionsValid = true;
	        this.saveAttempted = false;
	        this.eventManagerService.unSubscribe(this.Constants.ALERT_EVENT_SAVE_BUTTON_PRESS, this.eventSetSaveAttempted);
	        this.eventSetSaveAttempted = this.eventManagerService.subscribe(this.Constants.ALERT_EVENT_SAVE_BUTTON_PRESS, this.setSaveAttempted);
	        this.updateAlertStatus();
	    };
	    Object.defineProperty(contactValidationAlertService.prototype, "isBuyerValid", {
	        get: function () {
	            return this._isBuyerValid;
	        },
	        set: function (newValue) {
	            this._isBuyerValid = newValue;
	            if (this.saveAttempted) {
	                this.updateAlertStatus();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(contactValidationAlertService.prototype, "isCoBuyerValid", {
	        get: function () {
	            return this._isCoBuyerValid;
	        },
	        set: function (newValue) {
	            this._isCoBuyerValid = newValue;
	            if (this.saveAttempted) {
	                this.updateAlertStatus();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(contactValidationAlertService.prototype, "isConnectionsValid", {
	        get: function () {
	            return this._isConnectionsValid;
	        },
	        set: function (newValue) {
	            this._isConnectionsValid = newValue;
	            if (this.saveAttempted) {
	                this.updateAlertStatus();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(contactValidationAlertService.prototype, "isIndividualValid", {
	        get: function () {
	            return this._isIndividualValid;
	        },
	        set: function (newValue) {
	            this._isIndividualValid = newValue;
	            if (this.saveAttempted) {
	                this.updateAlertStatus();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    contactValidationAlertService.prototype.updateAlertMessage = function (alertPropertyPath) {
	        var self = this;
	        self.$translate(alertPropertyPath).then(function (translatedMessage) {
	            self.eventManagerService.publish(self.Constants.ALERT_EVENT_CONTACT_INVALID, {
	                alertType: "warning",
	                message: translatedMessage
	            });
	        });
	    };
	    contactValidationAlertService.prototype.updateAlertStatus = function () {
	        if (!this._isBuyerValid && !this._isCoBuyerValid && !this._isConnectionsValid) {
	            this.updateAlertMessage('crm.contact.InvalidContactMessage.ALL');
	        }
	        else if (!this._isBuyerValid && this._isCoBuyerValid && this._isConnectionsValid) {
	            this.updateAlertMessage('crm.contact.InvalidContactMessage.BUYER');
	        }
	        else if (this._isBuyerValid && !this._isCoBuyerValid && this._isConnectionsValid) {
	            this.updateAlertMessage('crm.contact.InvalidContactMessage.COBUYER');
	        }
	        else if (this._isBuyerValid && this._isCoBuyerValid && !this._isConnectionsValid) {
	            this.updateAlertMessage('crm.contact.InvalidContactMessage.CONNECTIONS');
	        }
	        else if (!this._isBuyerValid && !this._isCoBuyerValid && this._isConnectionsValid) {
	            this.updateAlertMessage('crm.contact.InvalidContactMessage.BUYER_COBUYER');
	        }
	        else if (!this._isBuyerValid && this._isCoBuyerValid && !this._isConnectionsValid) {
	            this.updateAlertMessage('crm.contact.InvalidContactMessage.BUYER_CONNECTIONS');
	        }
	        else if (this._isBuyerValid && !this._isCoBuyerValid && !this._isConnectionsValid) {
	            this.updateAlertMessage('crm.contact.InvalidContactMessage.COBUYER_CONNECTIONS');
	        }
	        else if (!this._isIndividualValid) {
	            this.updateAlertMessage('crm.contact.InvalidContactMessage.INDIVIDUAL');
	        }
	        else {
	            this.eventManagerService.publish(this.Constants.ALERT_EVENT_CONTACT_INVALID, {
	                alertType: "warning",
	                message: "",
	                closeAlert: true
	            });
	        }
	    };
	    contactValidationAlertService.$inject = ['$translate', 'eventManagerService', 'Constants'];
	    return contactValidationAlertService;
	}());
	module.exports = contactValidationAlertService;


/***/ },
/* 201 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var organizationValidationAlertService = (function () {
	    function organizationValidationAlertService($translate, eventManagerService, Constants) {
	        var _this = this;
	        this.$translate = $translate;
	        this.eventManagerService = eventManagerService;
	        this.Constants = Constants;
	        this._isCompanyValid = true;
	        this._isPrimaryContactValid = true;
	        this._isConnectionsValid = true;
	        this.saveAttempted = false;
	        this.setSaveAttempted = function () {
	            _this.saveAttempted = true;
	            _this.updateAlertStatus();
	        };
	    }
	    organizationValidationAlertService.prototype.reset = function () {
	        this._isCompanyValid = true;
	        this._isPrimaryContactValid = true;
	        this._isConnectionsValid = true;
	        this.saveAttempted = false;
	        this.eventManagerService.unSubscribe(this.Constants.ALERT_EVENT_SAVE_BUTTON_PRESS, this.eventSetSaveAttempted);
	        this.eventSetSaveAttempted = this.eventManagerService.subscribe(this.Constants.ALERT_EVENT_SAVE_BUTTON_PRESS, this.setSaveAttempted);
	        this.updateAlertStatus();
	    };
	    Object.defineProperty(organizationValidationAlertService.prototype, "isCompanyValid", {
	        get: function () {
	            return this._isCompanyValid;
	        },
	        set: function (newValue) {
	            this._isCompanyValid = newValue;
	            if (this.saveAttempted) {
	                this.updateAlertStatus();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(organizationValidationAlertService.prototype, "isPrimaryContactValid", {
	        get: function () {
	            return this._isPrimaryContactValid;
	        },
	        set: function (newValue) {
	            this._isPrimaryContactValid = newValue;
	            if (this.saveAttempted) {
	                this.updateAlertStatus();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(organizationValidationAlertService.prototype, "isConnectionsValid", {
	        get: function () {
	            return this._isConnectionsValid;
	        },
	        set: function (newValue) {
	            this._isConnectionsValid = newValue;
	            if (this.saveAttempted) {
	                this.updateAlertStatus();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    organizationValidationAlertService.prototype.updateAlertMessage = function (alertPropertyPath) {
	        var self = this;
	        self.$translate(alertPropertyPath).then(function (translatedMessage) {
	            self.eventManagerService.publish(self.Constants.ALERT_EVENT_ORGANIZATION_INVALID, {
	                alertType: "warning",
	                message: translatedMessage
	            });
	        });
	    };
	    organizationValidationAlertService.prototype.updateAlertStatus = function () {
	        if (!this._isCompanyValid && !this._isPrimaryContactValid && !this._isConnectionsValid) {
	            this.updateAlertMessage('crm.contact.InvalidCompanyMessage.ALL');
	        }
	        else if (!this._isCompanyValid && this._isPrimaryContactValid && this._isConnectionsValid) {
	            this.updateAlertMessage('crm.contact.InvalidCompanyMessage.COMPANY');
	        }
	        else if (this._isCompanyValid && !this._isPrimaryContactValid && this._isConnectionsValid) {
	            this.updateAlertMessage('crm.contact.InvalidCompanyMessage.PRIMARY_CONTACT');
	        }
	        else if (this._isCompanyValid && this._isPrimaryContactValid && !this._isConnectionsValid) {
	            this.updateAlertMessage('crm.contact.InvalidCompanyMessage.CONNECTIONS');
	        }
	        else if (!this._isCompanyValid && !this._isPrimaryContactValid && this._isConnectionsValid) {
	            this.updateAlertMessage('crm.contact.InvalidCompanyMessage.COMPANY_PRIMARY_CONTACT');
	        }
	        else if (!this._isCompanyValid && this._isPrimaryContactValid && !this._isConnectionsValid) {
	            this.updateAlertMessage('crm.contact.InvalidCompanyMessage.COMPANY_CONNECTIONS');
	        }
	        else if (this._isCompanyValid && !this._isPrimaryContactValid && !this._isConnectionsValid) {
	            this.updateAlertMessage('crm.contact.InvalidCompanyMessage.PRIMARY_CONTACT_CONNECTIONS');
	        }
	        else {
	            this.eventManagerService.publish(this.Constants.ALERT_EVENT_ORGANIZATION_INVALID, {
	                alertType: "warning",
	                message: "",
	                closeAlert: true
	            });
	        }
	    };
	    organizationValidationAlertService.$inject = ['$translate',
	        'eventManagerService',
	        'Constants'
	    ];
	    return organizationValidationAlertService;
	}());
	module.exports = organizationValidationAlertService;


/***/ },
/* 202 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var ValidationWrapperService = (function () {
	    function ValidationWrapperService(contactValidationAlertService, organizationValidationAlertService) {
	        this.contactValidationAlertService = contactValidationAlertService;
	        this.organizationValidationAlertService = organizationValidationAlertService;
	    }
	    ValidationWrapperService.prototype.validateContactType = function (value, contact, contactType) {
	        if (contactType) {
	            if (contact.isEmpty()) {
	                value = true;
	            }
	            switch (contactType) {
	                case "company":
	                    this.organizationValidationAlertService.isCompanyValid = value;
	                    break;
	                case "primaryContact":
	                    this.organizationValidationAlertService.isPrimaryContactValid = value;
	                    break;
	                case "companyConnection":
	                    this.organizationValidationAlertService.isConnectionsValid = value;
	                    break;
	                case "buyer":
	                    this.contactValidationAlertService.isBuyerValid = value;
	                    break;
	                case "cobuyer":
	                    this.contactValidationAlertService.isCoBuyerValid = value;
	                    break;
	                case "individualConnection":
	                    this.contactValidationAlertService.isConnectionsValid = value;
	                    break;
	            }
	        }
	    };
	    ValidationWrapperService.$inject = [
	        'contactValidationAlertService',
	        'organizationValidationAlertService'
	    ];
	    return ValidationWrapperService;
	}());
	module.exports = ValidationWrapperService;


/***/ },
/* 203 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var CrmConstants = (function () {
	    function CrmConstants() {
	        this.DATE_ADDED_NEWEST = "DATE_ADDED_NEWEST";
	        this.DATE_ADDED_OLDEST = "DATE_ADDED_OLDEST";
	        this.LAST_UPDATED_NEWEST = "LAST_UPDATED_NEWEST";
	        this.LAST_UPDATED_OLDEST = "LAST_UPDATED_OLDEST";
	        this.PRIORITY = "PRIORITY";
	        this.DIRTY_ACTIVITY_MESSAGE = "DIRTY_ACTIVITY_MESSAGE";
	        this.VEHICLE_YEAR_NEWEST = "VEHICLE_YEAR_NEWEST";
	        this.VEHICLE_YEAR_OLDEST = "VEHICLE_YEAR_OLDEST";
	        this.LAST_SERVICED_NEWEST = "LAST_SERVICED_NEWEST";
	        this.LAST_SERVICED_OLDEST = "LAST_SERVICED_OLDEST";
	        this.DEALERSHIP_CHANGED = "DEALERSHIP_CHANGED";
	        this.UNKNOWN_ERROR_OCCURRED = "UNKNOWN_ERROR_OCCURRED";
	        this.VIEW_IS_LOADING = "VIEW_IS_LOADING";
	        this.CONTACT = {
	            CONTACT_LOADED: "CONTACT_LOADED",
	            CONTACT_DELETED: "CONTACT_DELETED",
	            CONTACT_DELETE_FAILED: "CONTACT_DELETE_FAILED",
	            PREFILL_LOADED: "PREFILL_LOADED",
	            ORGANIZATION_PRIMARY_CONTACT_UNLINKED: "ORGANIZATION_PRIMARY_CONTACT_UNLINKED",
	            CONTACT_POINTS: {
	                DEFAULT_PHONE_TYPE: "mobile",
	                EMAIL_DELETE_ERROR: "EMAIL_DELETE_ERROR"
	            },
	            MARKETING: {
	                IS_LOADING: "CONTACT_MARKETING_IS_LOADING",
	                ERROR_OCCURRED: "CONTACT_MARKETING_ERROR_OCCURRED",
	                ACTIVE_STATUS: "Active",
	                INACTIVE_STATUS: "Inactive",
	                COMPLETE_STATUS: "Complete",
	                ADD_MODAL: {
	                    ERROR_OCCURRED: "CONTACT_MARKETING_ADD_MODAL_ERROR_OCCURRED"
	                }
	            },
	            DRIVERS_LICENSE: {
	                DRIVERS_LICENSE_LOAD_FAIL: "DRIVERS_LICENSE_LOAD_FAIL",
	                DRIVERS_LICENSE_SAVE_FAIL: "DRIVERS_LICENSE_SAVE_FAIL",
	            },
	            LAST_TWENTY_SCROLL_EVENT_KEY: "LAST_TWENTY_SCROLL_EVENT_KEY"
	        };
	        this.ODATA = {
	            ASCENDING: "asc",
	            DESCENDING: "desc",
	        };
	        this.CSI_EVENT = {
	            STATUS: {
	                IRRESOLVABLE: 'CSI_EVENT_IRRESOLVABLE',
	                ACTIVE: 'CSI_EVENT_ACTIVE'
	            },
	            CSI_LOADED: 'CSI_LOADED',
	        };
	        this.SALES_OPPORTUNITY = {
	            POST_TO_DMS_RESULT: 'SALES_OPPORTUNITY_POST_TO_DMS_RESULT',
	            SALES_RECAP_ALERT_KEY: 'SALES_RECAP_ALERT_KEY',
	            SALES_TAB: {
	                NAME: 'Sales',
	                UPDATED: 'SALES_OPPORTUNITY_SALES_TAB_UPDATED',
	                OPPORTUNITY_DELETED: 'SALES_OPPORTUNITY_SALES_TAB_OPPORTUNITY_DELETED',
	                MERGED: 'SALES_OPPORTUNITY_SALES_TAB_MERGED',
	                MERGE_FAILED: 'SALES_OPPORTUNITY_SALES_TAB_MERGE_FAILED',
	                STATUS_CHANGE_FAILED: 'SALES_OPPORTUNITY_STATUS_CHANGE_FAILED'
	            },
	            CSI_TAB: {
	                NAME: 'CSI',
	                UPDATED: 'CSI_TAB_UPDATED',
	                ERROR_MESSAGE: 'CSI_ADD_ERRORED',
	            },
	            CREATE: {
	                INVALID: 'SALES_OPPORTUNITY_CREATE_FAILED'
	            },
	            SAVE: {
	                VOI_ERROR: 'SALES_OPPORTUNITY_SAVE_FAILED_VOI',
	                CONCURRENT_EDIT_ERROR: "SALES_OPPORTUNITY_CONCURRENT_EDIT_ERROR",
	                ERROR: 'SALES_OPPORTUNITY_SAVE_FAILED'
	            },
	            COBUYER: {
	                COBUYER_ADDED: "SALES_OPPORTUNITY_COBUYER_ADDED"
	            },
	            TABS: {
	                OPPORTUNITY_TIMELINE_TAB_SELECTED: 'OPPORTUNITY_TIMELINE_TAB_SELECTED',
	                VEHICLE_OF_INTEREST_TAB_SELECTED: 'VEHICLE_OF_INTEREST_TAB_SELECTED',
	                TRADES_TAB_SELECTED: 'TRADES_TAB_SELECTED',
	                OPPORTUNITY_TIMELINE_TAB_LOADED: 'OPPORTUNITY_TIMELINE_TAB_LOADED',
	                VEHICLE_OF_INTEREST_TAB_LOADED: 'VEHICLE_OF_INTEREST_TAB_LOADED',
	                TRADES_TAB_LOADED: 'TRADES_TAB_LOADED'
	            },
	            TRADES: {
	                NAME: 'Trades',
	                ADD_TRADE_ACTIVE: 'ADD_TRADE_ACTIVE',
	                ADD_TRADE_INACTIVE: 'ADD_TRADE_INACTIVE',
	                GENERATE_CARFAX_REPORT: 'GENERATE_CARFAX_REPORT',
	                SAVE_TRADES_WITH_ID: 'SALES_OPPORTUNITY_TRADES_SAVE_TRADE_WITH_ID',
	                ALERT: 'SALES_OPPORTUNITY_TRADES_ALERT',
	                VALUATION_MODAL: {
	                    ALERT: 'SALES_OPPORTUNITY_TRADES_VALUATION_MODAL_ALERT',
	                    CLOSE_ALERT: 'CLOSE_SALES_OPPORTUNITY_TRADES_ALERT',
	                },
	                CANCEL_PUSH_SELECTION: 'SALES_OPPORTUNITY_TRADES_CANCEL_PUSH_SELECTION',
	                UPDATE_ACTIVE_TRADES: 'SALES_OPPORTUNITY_TRADES_UPDATE_ACTIVE_TRADES',
	                SET_PANEL_LOADING: 'SALES_OPPORTUNITY_TRADES_SET_PANEL_LOADING',
	                TRADE_REMOVED: 'SALES_OPPORTUNITY_TRADES_TRADE_REMOVED'
	            },
	            STATUS: {
	                LOST: 'SALES_OPPORTUNITY_LOST',
	                ACTIVE: 'SALES_OPPORTUNITY_ACTIVE'
	            },
	            VEHICLE_OF_INTEREST: {
	                OPEN_E_BROCHURE: 'VIEW_VEHICLE_OF_INTEREST_E_BROCHURE',
	                LOADING_EVENT_KEY: 'VEHICLE_OF_INTEREST_LOADING_EVENT_KEY',
	                SHOW_MANUAL_ENTRY_MODAL: 'VEHICLE_OF_INTEREST_SHOW_MANUAL_ENTRY_MODAL',
	                ADD_ERROR: "VEHICLE_OF_INTEREST_ADD_ERRROR"
	            },
	            ACTIVITIES: {
	                TASK_ACTION_ALERT: 'TASK_ACTION_ALERT',
	                SHOW_TASK_COMPLETE_CARD: 'SHOW_TASK_COMPLETE_CARD',
	                CLOSE_TASK_COMPLETE_CARD: 'CLOSE_TASK_COMPLETE_CARD',
	                CREATE_ACTIVITY: 'CREATE_ACTIVITY'
	            },
	            AUDIT_LOG: {
	                LOAD_ERROR: 'AUDIT_LOG_LOAD_ERROR'
	            },
	            SURVEYS: {
	                LOAD_ERROR: 'SURVEYS_LOAD_ERROR'
	            },
	            CHECKLIST: {
	                "LOAD_ERROR": 'CHECK_LIST_LOAD_ERROR',
	                "SAVE_ERROR": 'CHECK_LIST_SAVE_ERROR',
	                "FILE_TYPE_ERROR": 'CHECKLIST_FILE_TYPE_ERROR'
	            },
	            RECAP: {
	                SAVE_SALES_RECAP_ERROR: 'SAVE_SALES_RECAP_ERROR'
	            }
	        };
	        this.CREDIT_REPORT = {
	            "CREDIT_REPORT_ERROR": "Credit report error"
	        };
	        this.CUSTOMER_DETAILS = {
	            VEHICLE_RECORDS_TAB: {
	                NAME: 'CUSTOMER_DETAILS_VEHICLE_RECORDS_TAB',
	                UPDATED: 'CUSTOMER_DETAILS_VEHICLE_RECORDS_TAB_UPDATED',
	                DELETE_VEHICLE: 'CUSTOMER_DETAILS_VEHICLE_RECORDS_TAB_DELETE_VEHICLE',
	                DELETE_SERVICE: 'CUSTOMER_DETAILS_VEHICLE_RECORDS_TAB_DELETE_SERVICE',
	                MERGE_SERVICE: 'CUSTOMER_DETAILS_VEHICLE_RECORDS_TAB_MERGE_SERVICE',
	                LOADED: 'CUSTOMER_DETAILS_VEHICLE_RECORDS_TAB_LOADED'
	            }
	        };
	        this.SERVICE = {
	            MERGE_FAILED: 'SERVICE_MERGE_FAILED'
	        };
	        this.CONNECTIONS = {
	            COUNT_UPDATED: 'CONNECTIONS_COUNT_UPDATED'
	        };
	    }
	    return CrmConstants;
	}());
	module.exports = CrmConstants;


/***/ },
/* 204 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var ODataServiceHelpers = (function () {
	    function ODataServiceHelpers(CrmConstants, ODataServiceWrapper, ODataServiceObjectFactory) {
	        this.CrmConstants = CrmConstants;
	        this.ODataServiceWrapper = ODataServiceWrapper;
	        this.ODataServiceObjectFactory = ODataServiceObjectFactory;
	    }
	    ODataServiceHelpers.prototype.setupOrderByByDateAndLastUpdated = function (odataObject, sortValue) {
	        if (!odataObject.query || !odataObject.query.$orderby) {
	            return odataObject;
	        }
	        var LastUpdated = "LastUpdatedOrSoldDate";
	        var DateAdded = "Id";
	        switch (sortValue) {
	            case this.CrmConstants.DATE_ADDED_OLDEST:
	                odataObject.query.$orderby.push(DateAdded + " " + this.CrmConstants.ODATA.ASCENDING);
	                break;
	            case this.CrmConstants.LAST_UPDATED_NEWEST:
	                odataObject.query.$orderby.push(LastUpdated + " " + this.CrmConstants.ODATA.DESCENDING);
	                break;
	            case this.CrmConstants.LAST_UPDATED_OLDEST:
	                odataObject.query.$orderby.push(LastUpdated + " " + this.CrmConstants.ODATA.ASCENDING);
	                break;
	            default:
	                odataObject.query.$orderby.push(DateAdded + " " + this.CrmConstants.ODATA.DESCENDING);
	                break;
	        }
	        return odataObject;
	    };
	    ODataServiceHelpers.prototype.setupCountByStatus = function (odataObject) {
	        if (!odataObject.query || !odataObject.query.$countby) {
	            return odataObject;
	        }
	        var statusProperty = "Status/text";
	        odataObject.query.$countby.push(statusProperty);
	        return odataObject;
	    };
	    ODataServiceHelpers.prototype.setupFilterStatus = function (odataObject, filters) {
	        if (!odataObject.query || !odataObject.query.$filter) {
	            return odataObject;
	        }
	        var statusProperty = "Status/text";
	        var operator = "eq";
	        for (var filter in filters) {
	            if (filters[filter]) {
	                odataObject.query.$filter.push(statusProperty + " " + operator + " " + "'" + filter + "'");
	            }
	        }
	        return odataObject;
	    };
	    ODataServiceHelpers.$inject = [
	        'CrmConstants',
	        'ODataServiceWrapper',
	        'ODataServiceObjectFactory',
	    ];
	    return ODataServiceHelpers;
	}());
	module.exports = ODataServiceHelpers;


/***/ },
/* 205 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var DateSwapperService = (function () {
	    function DateSwapperService() {
	        this.SyncChannels = {};
	    }
	    DateSwapperService.prototype.ToggleMode = function (mode) {
	        if (mode && mode.active && mode.options) {
	            var i = _.indexOf(mode.options, mode.active);
	            var l = _.size(mode.options);
	            if (i >= 0) {
	                mode.active = mode.options[(i + 1) % l];
	            }
	            else {
	                mode.active = _.first(mode.options) || mode.active;
	            }
	        }
	    };
	    return DateSwapperService;
	}());
	module.exports = DateSwapperService;


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var moment = __webpack_require__(19);
	var JUST_NOW_TIME_IN_MINUTES = 30;
	var DateFormatService = (function () {
	    function DateFormatService(TranslationCache) {
	        this.TranslationCache = TranslationCache;
	    }
	    DateFormatService.prototype.getFormattedDate = function (date, displayJustNow) {
	        if (displayJustNow === void 0) { displayJustNow = true; }
	        if (displayJustNow && Math.abs(date.diff(moment(), 'minutes')) < JUST_NOW_TIME_IN_MINUTES) {
	            return this.TranslationCache.get('crm.salesOpportunity.activities.JUST_NOW');
	        }
	        return date.format('l, LT');
	    };
	    DateFormatService.$inject = [
	        'TranslationCache'
	    ];
	    return DateFormatService;
	}());
	module.exports = DateFormatService;


/***/ },
/* 207 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var TranslationCache = (function () {
	    function TranslationCache($translate) {
	        this.$translate = $translate;
	        this.clear();
	    }
	    TranslationCache.prototype.get = function (translationName) {
	        if (this._cache.hasOwnProperty(translationName))
	            return this._cache[translationName];
	        return this.$translate.instant(translationName);
	    };
	    TranslationCache.prototype.clear = function () {
	        this._cache = {};
	    };
	    TranslationCache.$inject = ['$translate'];
	    return TranslationCache;
	}());
	module.exports = TranslationCache;


/***/ },
/* 208 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var WordService = (function () {
	    function WordService() {
	    }
	    WordService.prototype.doesWordStartWithVowel = function (word) {
	        if (!word) {
	            return false;
	        }
	        var vowels = ['a', 'e', 'i', 'o', 'u'];
	        return _.contains(vowels, word[0]);
	    };
	    WordService.$inject = [];
	    return WordService;
	}());
	module.exports = WordService;


/***/ },
/* 209 */
/***/ function(module, exports) {

	"use strict";
	var PhoneNumberLabelService = (function () {
	    function PhoneNumberLabelService(TranslationCache, StringHelper) {
	        this.TranslationCache = TranslationCache;
	        this.StringHelper = StringHelper;
	        this.labelTranslationKeys = {
	            mainNumber: {
	                labelKey: 'crm.contact.contact_points.MAIN',
	                labelLetterKey: 'crm.contact.contact_points.MOBILE_LETTER'
	            },
	            tollFree: {
	                labelKey: 'crm.contact.contact_points.TOLL_FREE',
	                labelLetterKey: 'crm.contact.contact_points.TOLL_FREE_LETTER'
	            },
	            fax: {
	                labelKey: 'crm.contact.contact_points.FAX',
	                labelLetterKey: 'crm.contact.contact_points.FAX_LETTER'
	            },
	            mobile: {
	                labelKey: 'crm.contact.contact_points.MOBILE',
	                labelLetterKey: 'crm.contact.contact_points.MOBILE_LETTER'
	            },
	            work: {
	                labelKey: 'crm.contact.contact_points.WORK',
	                labelLetterKey: 'crm.contact.contact_points.WORK_LETTER'
	            },
	            other: {
	                labelKey: 'crm.contact.contact_points.OTHER',
	                labelLetterKey: 'crm.contact.contact_points.OTHER_LETTER'
	            },
	            home: {
	                labelKey: 'crm.contact.contact_points.HOME',
	                labelLetterKey: 'crm.contact.contact_points.HOME_LETTER'
	            }
	        };
	    }
	    PhoneNumberLabelService.prototype.getLabel = function (phoneNumber, letterOnly) {
	        if (letterOnly === void 0) { letterOnly = false; }
	        var labelType = letterOnly ? 'labelLetterKey' : 'labelKey';
	        var phoneType = phoneNumber ? phoneNumber.phoneType : '';
	        var translationKeys = this.labelTranslationKeys[phoneType];
	        if (translationKeys) {
	            return this.TranslationCache.get(translationKeys[labelType]);
	        }
	        return '';
	    };
	    PhoneNumberLabelService.serviceName = "PhoneNumberLabelService";
	    PhoneNumberLabelService.$inject = [
	        'TranslationCache',
	        'StringHelper',
	    ];
	    return PhoneNumberLabelService;
	}());
	module.exports = PhoneNumberLabelService;


/***/ },
/* 210 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var TaskFilterService = (function () {
	    function TaskFilterService(StringHelper) {
	        this.StringHelper = StringHelper;
	    }
	    TaskFilterService.prototype.getFilteredTasks = function (filter, tasks) {
	        var self = this;
	        var filteredTasks = [];
	        if (!filter) {
	            return tasks;
	        }
	        _.each(tasks, function (task) {
	            if (self.matchesSearchText(filter, task)) {
	                filteredTasks.push(task);
	            }
	        });
	        return filteredTasks;
	    };
	    TaskFilterService.prototype.matchesSearchText = function (searchText, task) {
	        var matches = [
	            this.StringHelper.contains(task.fullName, searchText),
	            this.StringHelper.contains(task.activityType, searchText),
	            this.StringHelper.contains(task.description, searchText),
	            this.StringHelper.contains(task.eventStatus, searchText),
	            this.StringHelper.contains(task.year, searchText),
	            this.StringHelper.contains(task.make, searchText),
	            this.StringHelper.contains(task.model, searchText),
	            this.StringHelper.contains(task.assignedTo, searchText),
	            this.StringHelper.contains(task.assignedBy, searchText),
	        ];
	        return matches.some(function (match) { return match === true; });
	    };
	    TaskFilterService.$inject = [
	        'StringHelper'
	    ];
	    return TaskFilterService;
	}());
	module.exports = TaskFilterService;


/***/ },
/* 211 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var VehicleInfoService = (function () {
	    function VehicleInfoService() {
	    }
	    VehicleInfoService.prototype.isServiceEventOpen = function (event) {
	        var parts = event.status.text.split(' ');
	        var lastWord = parts[parts.length - 1];
	        if (lastWord.toLowerCase() == 'completed' || lastWord.toLowerCase() == 'lost') {
	            return false;
	        }
	        else {
	            return true;
	        }
	    };
	    VehicleInfoService.prototype.getVehicleCounts = function (vehicles) {
	        var vehicleCount = 0;
	        var openEventCount = 0;
	        var closedEventCount = 0;
	        var self = this;
	        if (vehicles) {
	            _.forEach(vehicles, function (vehicle) {
	                if (vehicle != null && vehicle.isCustomerOwned && vehicle.id != null) {
	                    vehicleCount++;
	                }
	                if (vehicle.serviceEvents) {
	                    _.forEach(vehicle.serviceEvents, function (serviceEvent) {
	                        if (self.isServiceEventOpen(serviceEvent)) {
	                            openEventCount++;
	                        }
	                        else {
	                            closedEventCount++;
	                        }
	                    });
	                }
	            });
	        }
	        return {
	            vehicleCount: vehicleCount,
	            openEventCount: openEventCount,
	            closedEventCount: closedEventCount
	        };
	    };
	    return VehicleInfoService;
	}());
	module.exports = VehicleInfoService;


/***/ },
/* 212 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunityTradesService = (function () {
	    function SalesOpportunityTradesService($q, tradeEventFactory, tradeFactory, salesOpportunityTradesApiService, salesOpportunityTradeVehiclesApiService, modalService, translationCache) {
	        this.$q = $q;
	        this.tradeEventFactory = tradeEventFactory;
	        this.tradeFactory = tradeFactory;
	        this.salesOpportunityTradesApiService = salesOpportunityTradesApiService;
	        this.salesOpportunityTradeVehiclesApiService = salesOpportunityTradeVehiclesApiService;
	        this.modalService = modalService;
	        this.translationCache = translationCache;
	        this.classicSuccessString = "Success";
	        this.emptyRefDef = { value: "", text: "" };
	        this.cachedTradeEvent = null;
	    }
	    SalesOpportunityTradesService.prototype.clearCache = function () {
	        this.cachedTradeEvent = null;
	    };
	    SalesOpportunityTradesService.prototype.loadTrades = function (contactId, eventId, dealershipId) {
	        if (eventId === null) {
	            var deferred = this.$q.defer();
	            deferred.resolve(this.cachedTradeEvent || this.tradeEventFactory.create());
	            return deferred.promise;
	        }
	        return this.salesOpportunityTradesApiService.get({
	            entityId: contactId,
	            eventId: eventId,
	            dealershipId: dealershipId
	        });
	    };
	    SalesOpportunityTradesService.prototype.saveTrades = function (tradeEvent, eventId, siteId) {
	        if (eventId === null) {
	            this.cachedTradeEvent = tradeEvent;
	            var deferred = this.$q.defer();
	            deferred.resolve({ title: this.classicSuccessString });
	            return deferred.promise;
	        }
	        return this.salesOpportunityTradesApiService.post({
	            entityId: tradeEvent.contactId,
	            eventId: eventId,
	            trades: tradeEvent.trades,
	            siteId: siteId
	        });
	    };
	    SalesOpportunityTradesService.prototype.removeTrade = function (trade) {
	        var id = trade.id;
	        var emptyTrade = this.tradeFactory.create();
	        _.extend(trade, emptyTrade);
	        trade.id = id;
	    };
	    SalesOpportunityTradesService.prototype.showVinLookupConfirmationModal = function (trade, hasTrim) {
	        var deferred = this.$q.defer();
	        if (trade.vin) {
	            if (trade.year) {
	                this.modalService.openModal(this.getVinLookupModalPrompt(hasTrim), this.translationCache.get("crm.salesOpportunity.trades.modal.TITLE"), this.translationCache.get("crm.salesOpportunity.trades.modal.YES"), this.translationCache.get("crm.salesOpportunity.trades.modal.NO"))
	                    .then(function (modalInstance) {
	                    deferred.resolve();
	                    modalInstance.dismiss();
	                }, function (modalInstance) {
	                    deferred.reject();
	                    modalInstance.dismiss();
	                });
	            }
	            else {
	                deferred.resolve();
	            }
	        }
	        else {
	            deferred.reject();
	        }
	        return deferred.promise;
	    };
	    SalesOpportunityTradesService.prototype.performVinLookup = function (tradeEvent, trade, dealershipId) {
	        var _this = this;
	        return this.salesOpportunityTradeVehiclesApiService
	            .getVehicleInfoFromVin(trade.book.value, tradeEvent.setup.siteAddress.country, tradeEvent.setup.siteAddress.state, trade.vin, dealershipId)
	            .then(function (vinLookupResult) {
	            if (vinLookupResult.error === 0) {
	                trade.year = vinLookupResult.year;
	                trade.make = vinLookupResult.make;
	                trade.model = vinLookupResult.model;
	                trade.trim = vinLookupResult.trim;
	                trade.makesLookup = [trade.make];
	                trade.modelsLookup = (trade.model.value && trade.model.text) ? [trade.model] : vinLookupResult.modelsLookup;
	                trade.trimsLookup = (trade.model.value && trade.model.text) ? [trade.trim] : [];
	            }
	            else {
	                trade.year = 0;
	                trade.make = _.clone(_this.emptyRefDef);
	                trade.model = _.clone(_this.emptyRefDef);
	                trade.trim = _.clone(_this.emptyRefDef);
	                trade.makesLookup = [];
	                trade.modelsLookup = [];
	                trade.trimsLookup = [];
	            }
	            return vinLookupResult;
	        });
	    };
	    SalesOpportunityTradesService.prototype.onYearChanged = function (tradeEvent, trade, setIsLoading) {
	        var _this = this;
	        if (!trade.isFreeText) {
	            trade.makesLookup = [];
	            trade.modelsLookup = [];
	            trade.trimsLookup = [];
	            if (trade.year) {
	                setIsLoading(true);
	                this.salesOpportunityTradeVehiclesApiService
	                    .getMakes(trade.book.value, tradeEvent.setup.siteAddress.country, trade.year)
	                    .then(function (makes) {
	                    trade.makesLookup = _this.filterList(makes);
	                    setIsLoading(false);
	                });
	            }
	            else {
	                trade.make = _.clone(this.emptyRefDef);
	                trade.model = _.clone(this.emptyRefDef);
	                trade.trim = _.clone(this.emptyRefDef);
	            }
	        }
	    };
	    SalesOpportunityTradesService.prototype.onMakeChanged = function (tradeEvent, trade, setIsLoading) {
	        trade.modelsLookup = [];
	        trade.trimsLookup = [];
	        if (trade.make) {
	            setIsLoading(true);
	            this.getModels(tradeEvent, trade).then(function () {
	                setIsLoading(false);
	            });
	        }
	        else {
	            trade.make = _.clone(this.emptyRefDef);
	            trade.model = _.clone(this.emptyRefDef);
	            trade.trim = _.clone(this.emptyRefDef);
	        }
	    };
	    SalesOpportunityTradesService.prototype.onModelChanged = function (tradeEvent, trade, setIsLoading) {
	        var _this = this;
	        trade.trimsLookup = [];
	        if (trade.model) {
	            setIsLoading(true);
	            this.salesOpportunityTradeVehiclesApiService
	                .getTrims(trade.book.value, tradeEvent.setup.siteAddress.country, trade.year, trade.make.value, trade.model.value)
	                .then(function (trims) {
	                trade.trimsLookup = _this.filterList(trims);
	                setIsLoading(false);
	            });
	        }
	        else {
	            trade.model = _.clone(this.emptyRefDef);
	            trade.trim = _.clone(this.emptyRefDef);
	        }
	    };
	    SalesOpportunityTradesService.prototype.getModelOptions = function (tradeEvent, trade) {
	        return this.salesOpportunityTradeVehiclesApiService
	            .getModelOptions(trade.book.value, tradeEvent.setup.siteAddress.country, tradeEvent.setup.siteAddress.state, trade.year, trade.make.value, trade.model.value, trade.vin)
	            .then(function (options) {
	            trade.appraisal.equipment = options.equipment;
	            trade.appraisal.equipmentRelationships = options.equipmentRelationships;
	            trade.enginesLookup = options.enginesLookup;
	            trade.transmissionsLookup = options.transmissionsLookup;
	            trade.drivesLookup = options.drivesLookup;
	        });
	    };
	    SalesOpportunityTradesService.prototype.validateTrade = function (trade) {
	        var isYearValid = trade.year > 0;
	        var isMakeValid = trade.make && trade.make.text && trade.make.text.length > 0;
	        var isModelValid = trade.model && trade.model.text && trade.model.text.length > 0;
	        return {
	            isValid: isYearValid && isMakeValid && isModelValid,
	            isYearValid: isYearValid,
	            isMakeValid: isMakeValid,
	            isModelValid: isModelValid
	        };
	    };
	    SalesOpportunityTradesService.prototype.addExistingVehicleAsTrade = function (tradeEvent, trade, vehicle, eventId, siteId) {
	        trade.year = parseInt(vehicle.year);
	        trade.make = {
	            value: "",
	            text: vehicle.make
	        };
	        trade.model = {
	            value: "",
	            text: vehicle.model
	        };
	        trade.trim = {
	            value: "",
	            text: vehicle.trim
	        };
	        trade.vin = vehicle.vin;
	        trade.odometer = vehicle.odometer;
	        trade.cylinders = vehicle.cylinders;
	        trade.exteriorColor = vehicle.exteriorColor;
	        return this.saveTrades(tradeEvent, eventId, siteId);
	    };
	    SalesOpportunityTradesService.prototype.getTradeValuation = function (tradeEvent, trade) {
	        return this.salesOpportunityTradesApiService.getValuation(tradeEvent, trade);
	    };
	    SalesOpportunityTradesService.prototype.getNonCarFaxIntegrations = function (tradeEvent) {
	        return _.filter(tradeEvent.integrations, function (integration) {
	            return integration.text != "CarFax";
	        });
	    };
	    SalesOpportunityTradesService.prototype.getVinLookupModalPrompt = function (hasTrim) {
	        var prompt = this.translationCache.get("crm.salesOpportunity.trades.modal.PROMPT") +
	            "<strong>" + this.translationCache.get("crm.salesOpportunity.trades.YEAR") + "</strong>, " +
	            "<strong>" + this.translationCache.get("crm.salesOpportunity.trades.MAKE") + "</strong>, ";
	        if (hasTrim) {
	            prompt += "<strong>" + this.translationCache.get("crm.salesOpportunity.trades.MODEL") + "</strong>, " +
	                this.translationCache.get("crm.salesOpportunity.trades.modal.AND") +
	                " <strong>" + this.translationCache.get("crm.salesOpportunity.trades.TRIM") + "</strong>.";
	        }
	        else {
	            prompt += this.translationCache.get("crm.salesOpportunity.trades.modal.AND") +
	                "<strong>" + this.translationCache.get("crm.salesOpportunity.trades.MODEL") + "</strong>.";
	        }
	        prompt += "<br /><br />" + this.translationCache.get("crm.salesOpportunity.trades.modal.DO_YOU_WANT_TO_CONTINUE");
	        return prompt;
	    };
	    SalesOpportunityTradesService.prototype.filterList = function (list) {
	        return list.filter(function (refDef) {
	            return refDef.value && refDef.value.length > 0 && refDef.text && refDef.text.length > 0;
	        });
	    };
	    SalesOpportunityTradesService.prototype.getModels = function (tradeEvent, trade) {
	        var _this = this;
	        return this.salesOpportunityTradeVehiclesApiService
	            .getModels(trade.book.value, tradeEvent.setup.siteAddress.country, trade.year, trade.make.value)
	            .then(function (models) {
	            trade.modelsLookup = _this.filterList(models);
	        });
	    };
	    SalesOpportunityTradesService.$inject = [
	        "$q",
	        "tradeEventFactory",
	        "tradeFactory",
	        "salesOpportunityTradesApiService",
	        "salesOpportunityTradeVehiclesApiService",
	        "modalService",
	        "TranslationCache"
	    ];
	    return SalesOpportunityTradesService;
	}());
	module.exports = SalesOpportunityTradesService;


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var CacheItem = __webpack_require__(214);
	var moment = __webpack_require__(19);
	var _ = __webpack_require__(215);
	var contactService = (function () {
	    function contactService(ContactApiService, ContactSummaryApiService, $q, $state, eventManagerService, CrmConstants, DataApiSettings) {
	        var _this = this;
	        this.ContactApiService = ContactApiService;
	        this.ContactSummaryApiService = ContactSummaryApiService;
	        this.$q = $q;
	        this.$state = $state;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.DataApiSettings = DataApiSettings;
	        this.addToCache = function (contact) {
	            _this.contactCache[contact.id] = new CacheItem(contact);
	            _this.contactCacheQueue.push(contact.id);
	            return contact;
	        };
	        this.contactCache = {};
	        this.contactCacheQueue = [];
	    }
	    contactService.prototype.get = function (idObject) {
	        var options = {
	            contactId: idObject.guid || idObject.contactId || idObject,
	            summaryOnly: idObject.summaryOnly || false,
	            dealershipId: idObject.dealershipId || this.DataApiSettings.getSiteId()
	        };
	        var contactPromise;
	        var cachedContact = this.getContactFromCache(options.contactId);
	        if (cachedContact) {
	            contactPromise = this.$q.when(cachedContact);
	        }
	        else {
	            contactPromise = this.getContactApiPromise(options.contactId, options.dealershipId);
	        }
	        this.ContactApiService.updateHistory(+this.DataApiSettings.getSiteId(), +options.contactId);
	        return contactPromise;
	    };
	    contactService.prototype.getContactFromCache = function (id) {
	        if (this.contactCache[id]) {
	            var expired = (Date.now() - this.contactCache[id].timestamp) > contactService.contactCacheDuration;
	            if (!expired) {
	                var contact = this.contactCache[id].value;
	                if (contact.dateOfBirth instanceof Date) {
	                    contact.dateOfBirth = moment(contact.dateOfBirth);
	                }
	                return this.$q.when(contact);
	            }
	            else {
	                var head = this.contactCacheQueue[0];
	                while (head) {
	                    delete this.contactCache[this.contactCacheQueue.shift()];
	                    if (head == id) {
	                        break;
	                    }
	                    head = this.contactCacheQueue[0];
	                }
	            }
	        }
	        return null;
	    };
	    contactService.prototype.getContactApiPromise = function (id, dealershipId) {
	        var contactPromise = this.ContactApiService.getSingleContact(id, dealershipId)
	            .then(this.addToCache);
	        return contactPromise;
	    };
	    contactService.prototype.evictFromCache = function (id) {
	        if (this.contactCache[id]) {
	            delete this.contactCache[id];
	            for (var i = 0; i < this.contactCacheQueue.length; i++) {
	                if (this.contactCacheQueue[i] == id) {
	                    this.contactCacheQueue.splice(i, 1);
	                }
	            }
	            return true;
	        }
	        return false;
	    };
	    contactService.prototype.getLastTwentyContacts = function () {
	        var _this = this;
	        var siteId = this.DataApiSettings.getSiteId();
	        var historyPromise = this.ContactApiService.getHistory(+siteId);
	        historyPromise.then(function (history) {
	            _.each(history, function (contact) {
	                _this.addToCache(contact);
	            });
	        });
	        return historyPromise;
	    };
	    contactService.prototype.getLastContact = function () {
	        var siteId = this.DataApiSettings.getSiteId();
	        var lastContactPromise = this.ContactApiService.getLastContact(+siteId)
	            .then(this.addToCache);
	        return lastContactPromise;
	    };
	    contactService.prototype.delete = function (id) {
	        var self = this;
	        return this.ContactApiService.delete(id).then(function (suceeded) {
	            if (suceeded === true) {
	                self.evictFromCache(id);
	            }
	            if (typeof suceeded == 'object') {
	                return suceeded.error.data;
	            }
	            return suceeded;
	        });
	    };
	    contactService.prototype.save = function (contact) {
	        var _this = this;
	        var contactId = contact.id;
	        if (this.getContactFromCache(contactId)) {
	            this.contactCacheQueue = _.without(this.contactCacheQueue, contactId);
	        }
	        return this.ContactApiService.save(contact)
	            .then(function (contact) {
	            if (contact.id) {
	                return contact;
	            }
	            else {
	                return _this.ContactApiService.get(contactId);
	            }
	        })
	            .then(function (contact) {
	            _this.addToCache(contact);
	            return contact;
	        });
	    };
	    contactService.prototype.view = function (contact) {
	        this.eventManagerService.publish(this.CrmConstants.CONTACT.CONTACT_LOADED, contact);
	        this.$state.go("view.contact", { contactId: contact.id });
	    };
	    contactService.serviceName = 'ContactService';
	    contactService.$inject = [
	        'ContactApiService',
	        'ContactSummaryApiService',
	        '$q',
	        '$state',
	        'eventManagerService',
	        'CrmConstants',
	        'DataApiSettings'
	    ];
	    contactService.contactCacheSize = 100;
	    contactService.contactCacheDuration = 300000; //300000 ms = 5 minutes
	    return contactService;
	}());
	module.exports = contactService;


/***/ },
/* 214 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var CacheItem = (function () {
	    function CacheItem(value) {
	        this.value = value;
	        this.timestamp = Date.now();
	    }
	    return CacheItem;
	}());
	module.exports = CacheItem;


/***/ },
/* 215 */,
/* 216 */,
/* 217 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var TASK_TAB_NAME = 'tasks';
	var OPPORTUNITY_TAB_NAME = 'opportunities';
	var CACHE_CAPACITY = 8;
	var CACHE_SLICING_NUMBER = 4;
	var EmployeeDashboardService = (function () {
	    function EmployeeDashboardService($q, DataApiSettings, EmployeeDashboardApiService, modalService, eventManagerService, CrmConstants, TranslationCache, AuthenticationService) {
	        var _this = this;
	        this.$q = $q;
	        this.DataApiSettings = DataApiSettings;
	        this.EmployeeDashboardApiService = EmployeeDashboardApiService;
	        this.modalService = modalService;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.TranslationCache = TranslationCache;
	        this.AuthenticationService = AuthenticationService;
	        this.selectedTab = null;
	        this.filters = {
	            franchises: [],
	            categoryFilters: {
	                tasks: [],
	                opportunities: []
	            },
	            employees: []
	        };
	        this.selectedCategoryFilters = {
	            tasks: null,
	            opportunities: null
	        };
	        this.selectedTodos = {
	            tasks: null,
	            opportunities: null
	        };
	        this.cachePool = {};
	        this.cacheQueue = [];
	        this.defaultUsername = AuthenticationService.getUser().username;
	        this.createSortOrderOptions(TranslationCache);
	        eventManagerService.subscribe(CrmConstants.DEALERSHIP_CHANGED, function () {
	            _this.selectedTab = null;
	            _this.loadingStatesPromise = null;
	            _this.sortOrder = _this.sortOrderOptions[0];
	        });
	    }
	    EmployeeDashboardService.prototype.setStates = function (selectedTab, selectedTodoId, selectedFilterId) {
	        var self = this;
	        self.preferredFilterId = selectedFilterId;
	        if (!self.loadingStatesPromise) {
	            var deferred = this.$q.defer();
	            if (!selectedTab) {
	                var currentSelectedTab = self.selectedTab || OPPORTUNITY_TAB_NAME;
	                self.setSelectedTab(currentSelectedTab).then(function () {
	                    self.loadingStatesPromise = null;
	                    deferred.resolve();
	                });
	            }
	            else {
	                self.setSelectedTab(selectedTab).then(function () {
	                    if (selectedTodoId) {
	                        var cachePoolKey = self.getCachePoolKey();
	                        var todos = self.cachePool[cachePoolKey];
	                        if (todos && todos.length && todos.length > 0) {
	                            self.selectedTodos[self.selectedTab] = _.find(todos, function (todo) {
	                                var todoId = self.selectedTab === TASK_TAB_NAME ? todo.activityId : todo.salesOpportunityId;
	                                return todoId == selectedTodoId;
	                            }) || todos[0];
	                        }
	                    }
	                    self.loadingStatesPromise = null;
	                    deferred.resolve();
	                });
	            }
	            self.loadingStatesPromise = deferred.promise;
	        }
	        return self.loadingStatesPromise;
	    };
	    EmployeeDashboardService.prototype.getTodos = function () {
	        var cachePoolKey = this.getCachePoolKey();
	        return this.cachePool[cachePoolKey];
	    };
	    EmployeeDashboardService.prototype.getFilters = function () {
	        return {
	            franchises: this.filters.franchises,
	            categoryFilters: this.filters.categoryFilters[this.selectedTab],
	            employees: this.filters.employees
	        };
	    };
	    EmployeeDashboardService.prototype.getSelectedFranchise = function () {
	        return this.selectedFranchise;
	    };
	    EmployeeDashboardService.prototype.getSelectedCategoryFilter = function () {
	        return this.selectedCategoryFilters[this.selectedTab];
	    };
	    EmployeeDashboardService.prototype.getAllCategoriesAndFilters = function () {
	        var allFilters = this.filters.categoryFilters.tasks.concat(this.filters.categoryFilters.opportunities);
	        var groupedByFilterCategory = _.groupBy(allFilters, 'filterCategory');
	        return groupedByFilterCategory;
	    };
	    EmployeeDashboardService.prototype.getSelectedEmployee = function () {
	        return this.selectedEmployee;
	    };
	    EmployeeDashboardService.prototype.setSelectedFranchise = function (newValue) {
	        var self = this;
	        var getTaskCategoryFiltersPromise = self.EmployeeDashboardApiService.getCategoryFilters(true, newValue.value);
	        var getOpportunityCategoryFiltersPromise = self.EmployeeDashboardApiService.getCategoryFilters(false, newValue.value);
	        var getEmployeeNamesPromise = self.EmployeeDashboardApiService.getEmployeeNames(newValue.value);
	        return self.$q.all([getTaskCategoryFiltersPromise, getOpportunityCategoryFiltersPromise, getEmployeeNamesPromise]).then(function (resolutions) {
	            self.filters.categoryFilters[TASK_TAB_NAME] = resolutions[0];
	            self.filters.categoryFilters[OPPORTUNITY_TAB_NAME] = resolutions[1];
	            self.filters.employees = resolutions[2];
	            self.selectedFranchise = _.find(self.filters.franchises, function (franchise) {
	                return franchise.value == newValue.value;
	            });
	            self.selectedCategoryFilters[TASK_TAB_NAME] = null;
	            var defaultTaskFilter = self.filters.categoryFilters[TASK_TAB_NAME][0];
	            _.each(self.filters.categoryFilters[TASK_TAB_NAME], function (categoryFilter) {
	                if (categoryFilter.id.toString && categoryFilter.id.toString() == self.preferredFilterId) {
	                    self.selectedCategoryFilters[TASK_TAB_NAME] = categoryFilter;
	                }
	                if (categoryFilter.isDefault) {
	                    defaultTaskFilter = categoryFilter;
	                }
	            });
	            if (!self.selectedCategoryFilters[TASK_TAB_NAME]) {
	                self.selectedCategoryFilters[TASK_TAB_NAME] = defaultTaskFilter;
	            }
	            self.selectedCategoryFilters[OPPORTUNITY_TAB_NAME] = null;
	            var defaultOpportunityFilter = self.filters.categoryFilters[OPPORTUNITY_TAB_NAME][0];
	            _.each(self.filters.categoryFilters[OPPORTUNITY_TAB_NAME], function (categoryFilter) {
	                if (categoryFilter.id.toString && categoryFilter.id.toString() == self.preferredFilterId) {
	                    self.selectedCategoryFilters[OPPORTUNITY_TAB_NAME] = categoryFilter;
	                }
	                if (categoryFilter.isDefault) {
	                    defaultOpportunityFilter = categoryFilter;
	                }
	            });
	            if (!self.selectedCategoryFilters[OPPORTUNITY_TAB_NAME]) {
	                self.selectedCategoryFilters[OPPORTUNITY_TAB_NAME] = defaultOpportunityFilter;
	            }
	            self.selectedEmployee = _.find(self.filters.employees, function (employee) {
	                return employee.value === self.defaultUsername;
	            }) || self.filters.employees[0];
	            return self.retrieveTodos();
	        }).then(function () {
	            var cachePoolKey = self.getCachePoolKey();
	            if (self.cachePool[cachePoolKey].length > 0) {
	                self.selectedTodos[self.selectedTab] = self.cachePool[cachePoolKey][0];
	            }
	            else {
	                self.selectedTodos[self.selectedTab] = null;
	            }
	        });
	    };
	    EmployeeDashboardService.prototype.setSelectedCategoryFilter = function (newValue) {
	        this.selectedCategoryFilters[this.selectedTab] = _.find(this.filters.categoryFilters[this.selectedTab], function (categoryFilter) {
	            return categoryFilter.id === newValue.id;
	        });
	        return this.retrieveTodos();
	    };
	    EmployeeDashboardService.prototype.setSelectedEmployee = function (newValue) {
	        this.selectedEmployee = _.find(this.filters.employees, function (employee) {
	            return employee.value === newValue.value;
	        });
	        return this.retrieveTodos();
	    };
	    EmployeeDashboardService.prototype.getSelectedTodoId = function () {
	        if (!this.selectedTodos[this.selectedTab]) {
	            return null;
	        }
	        else {
	            if (this.selectedTab === TASK_TAB_NAME) {
	                return this.selectedTodos[this.selectedTab].activityId;
	            }
	            else {
	                return this.selectedTodos[this.selectedTab].salesOpportunityId;
	            }
	        }
	    };
	    EmployeeDashboardService.prototype.getSelectedTodoOptions = function () {
	        if (!this.selectedTodos[this.selectedTab]) {
	            return null;
	        }
	        else {
	            var selectedTodo = this.selectedTodos[this.selectedTab];
	            return {
	                contactId: selectedTodo.contactId,
	                opportunityId: selectedTodo.salesOpportunityId,
	                opportunityType: selectedTodo.opportunityType,
	                dealershipId: this.selectedFranchise.value
	            };
	        }
	    };
	    EmployeeDashboardService.prototype.getSelectedTab = function () {
	        return this.selectedTab;
	    };
	    EmployeeDashboardService.prototype.setSelectedTab = function (newState) {
	        var self = this;
	        if (!self.selectedTab || self.preferredFilterId) {
	            self.selectedTab = newState ? newState : OPPORTUNITY_TAB_NAME;
	            return self.retrieveFranchises();
	        }
	        else {
	            if (self.selectedTab === newState) {
	                return self.$q.when();
	            }
	            else {
	                self.selectedTab = newState;
	                return self.retrieveTodos();
	            }
	        }
	    };
	    EmployeeDashboardService.prototype.setSelectedTodo = function (newTodo) {
	        var _this = this;
	        var cachePoolKey = this.getCachePoolKey();
	        var cachedTodos = this.cachePool[cachePoolKey];
	        this.selectedTodos[this.selectedTab] = _.find(cachedTodos, function (todo) {
	            if (_this.selectedTab === TASK_TAB_NAME) {
	                return todo.activityId === newTodo.activityId;
	            }
	            else {
	                return todo.salesOpportunityId === newTodo.salesOpportunityId;
	            }
	        });
	    };
	    EmployeeDashboardService.prototype.deleteTask = function (newTodo) {
	        var self = this;
	        return self.EmployeeDashboardApiService.delete(newTodo).then(function () {
	            self.clearCache();
	            return self.retrieveTodos();
	        });
	    };
	    EmployeeDashboardService.prototype.extractSelectedFilters = function () {
	        var selectedFilters = {
	            siteId: this.selectedFranchise ? this.selectedFranchise.value : null,
	            filterId: this.selectedCategoryFilters && this.selectedCategoryFilters[this.selectedTab] ? this.selectedCategoryFilters[this.selectedTab].id : null,
	            assignedTo: this.selectedEmployee ? this.selectedEmployee.value : null
	        };
	        return selectedFilters;
	    };
	    EmployeeDashboardService.prototype.getCachePoolKey = function () {
	        var filters = this.extractSelectedFilters();
	        return JSON.stringify(filters);
	    };
	    EmployeeDashboardService.prototype.retrieveFranchises = function () {
	        var self = this;
	        return self.EmployeeDashboardApiService.getFranchises().then(function (franchises) {
	            if (!franchises || franchises.length === 0) {
	                self.filters.franchises = [];
	                self.selectedFranchise = null;
	            }
	            else {
	                self.filters.franchises = franchises;
	                var defaultFranchise = _.find(self.filters.franchises, function (franchise) {
	                    return franchise.value == self.DataApiSettings.getSiteId();
	                }) || self.filters.franchises[0];
	                return self.setSelectedFranchise(defaultFranchise);
	            }
	        });
	    };
	    EmployeeDashboardService.prototype.retrieveTodos = function () {
	        var self = this;
	        var deferred = self.$q.defer();
	        var cachePoolKey = self.getCachePoolKey();
	        if (self.cachePool[cachePoolKey]) {
	            self.refreshSelectedTodo();
	            deferred.resolve();
	        }
	        else {
	            var selectedFilters = self.extractSelectedFilters();
	            var isTask = self.selectedTab === TASK_TAB_NAME;
	            var payload = {
	                params: selectedFilters,
	                isTask: isTask
	            };
	            self.EmployeeDashboardApiService.get(payload).then(function (todos) {
	                var filteredTodos;
	                if (isTask) {
	                    filteredTodos = _.filter(todos, function (todo) {
	                        return todo.activityId != "0";
	                    });
	                }
	                else {
	                    filteredTodos = todos;
	                }
	                self.pushCache(cachePoolKey, filteredTodos);
	                self.refreshSelectedTodo();
	                deferred.resolve();
	            }, function (error) {
	                deferred.reject(error);
	            });
	        }
	        return deferred.promise;
	    };
	    EmployeeDashboardService.prototype.refreshSelectedTodo = function () {
	        var self = this;
	        var cachePoolKey = self.getCachePoolKey();
	        var currentTodos = self.cachePool[cachePoolKey];
	        var selectedTodo = self.selectedTodos[self.selectedTab];
	        if (!currentTodos || currentTodos.length === 0) {
	            self.selectedTodos[self.selectedTab] = null;
	        }
	        else {
	            if (!selectedTodo) {
	                self.selectedTodos[self.selectedTab] = currentTodos[0];
	            }
	            else {
	                self.selectedTodos[self.selectedTab] = _.find(currentTodos, function (todo) {
	                    if (self.selectedTab === TASK_TAB_NAME) {
	                        return todo.activityId == selectedTodo.activityId;
	                    }
	                    else {
	                        return todo.salesOpportunityId == selectedTodo.salesOpportunityId;
	                    }
	                }) || currentTodos[0];
	            }
	        }
	    };
	    EmployeeDashboardService.prototype.refreshCategoryFilters = function () {
	        var self = this;
	        var getTaskCategoryFiltersPromise = self.EmployeeDashboardApiService.getCategoryFilters(true, self.selectedFranchise.value);
	        var getOpportunityCategoryFiltersPromise = self.EmployeeDashboardApiService.getCategoryFilters(false, self.selectedFranchise.value);
	        return self.$q.all([getTaskCategoryFiltersPromise, getOpportunityCategoryFiltersPromise]).then(function (resolutions) {
	            var selectedTaskFilter = self.selectedCategoryFilters[TASK_TAB_NAME];
	            var selectedOpportunityFilter = self.selectedCategoryFilters[OPPORTUNITY_TAB_NAME];
	            self.filters.categoryFilters[TASK_TAB_NAME] = resolutions[0];
	            self.filters.categoryFilters[OPPORTUNITY_TAB_NAME] = resolutions[1];
	            if (selectedTaskFilter) {
	                self.selectedCategoryFilters[TASK_TAB_NAME] = _.find(self.filters.categoryFilters[TASK_TAB_NAME], function (categoryFilter) {
	                    return categoryFilter.id == selectedTaskFilter.id;
	                });
	            }
	            else {
	                self.selectedCategoryFilters[TASK_TAB_NAME] = _.find(self.filters.categoryFilters[TASK_TAB_NAME], function (categoryFilter) {
	                    return categoryFilter.isDefault;
	                });
	            }
	            if (selectedOpportunityFilter) {
	                self.selectedCategoryFilters[OPPORTUNITY_TAB_NAME] = _.find(self.filters.categoryFilters[OPPORTUNITY_TAB_NAME], function (categoryFilter) {
	                    return categoryFilter.id == selectedOpportunityFilter.id;
	                });
	            }
	            else {
	                self.selectedCategoryFilters[OPPORTUNITY_TAB_NAME] = _.find(self.filters.categoryFilters[OPPORTUNITY_TAB_NAME], function (categoryFilter) {
	                    return categoryFilter.isDefault;
	                });
	            }
	        });
	    };
	    EmployeeDashboardService.prototype.pushCache = function (key, todos) {
	        if (this.cacheQueue.length === CACHE_CAPACITY) {
	            for (var i = 0; i < CACHE_SLICING_NUMBER; i++) {
	                var shifted = this.cacheQueue.shift();
	                delete this.cachePool[shifted];
	            }
	        }
	        this.cachePool[key] = todos;
	        this.cacheQueue.push(key);
	    };
	    EmployeeDashboardService.prototype.clearCache = function () {
	        this.cachePool = {};
	        this.cacheQueue = [];
	    };
	    EmployeeDashboardService.prototype.getFilterProperties = function () {
	        return this.EmployeeDashboardApiService.getFilterProperties();
	    };
	    EmployeeDashboardService.prototype.saveFilter = function (data) {
	        return this.EmployeeDashboardApiService.saveFilter(data);
	    };
	    EmployeeDashboardService.prototype.createSortOrderOptions = function (translationCache) {
	        this.sortOrderOptions = [
	            {
	                name: 'priority',
	                value: '',
	                description: translationCache.get('crm.employeeDashboard.sortOptions.PRIORITY')
	            },
	            {
	                name: 'age_newest',
	                value: 'age',
	                description: translationCache.get('crm.employeeDashboard.sortOptions.AGE_NEWEST')
	            },
	            {
	                name: 'age_oldest',
	                value: '-age',
	                description: translationCache.get('crm.employeeDashboard.sortOptions.AGE_OLDEST')
	            },
	            {
	                name: 'last_updated_newest',
	                value: 'lastUpdate',
	                description: translationCache.get('crm.employeeDashboard.sortOptions.LAST_UPDATED_NEWEST')
	            },
	            {
	                name: 'last_updated_oldest',
	                value: '-lastUpdate',
	                description: translationCache.get('crm.employeeDashboard.sortOptions.LAST_UPDATED_OLDEST')
	            },
	            {
	                name: 'due_date_newest',
	                value: '-activityDateTime',
	                description: translationCache.get('crm.employeeDashboard.sortOptions.DUE_DATE_NEWEST')
	            },
	            {
	                name: 'due_date_oldest',
	                value: 'activityDateTime',
	                description: translationCache.get('crm.employeeDashboard.sortOptions.DUE_DATE_OLDEST')
	            },
	            {
	                name: 'customer_name_a_z',
	                value: 'fullName',
	                description: translationCache.get('crm.employeeDashboard.sortOptions.CUSTOMER_NAME_AZ')
	            },
	            {
	                name: 'customer_name_z_a',
	                value: '-fullName',
	                description: translationCache.get('crm.employeeDashboard.sortOptions.CUSTOMER_NAME_ZA')
	            }
	        ];
	        this.sortOrder = this.sortOrderOptions[0];
	    };
	    EmployeeDashboardService.$inject = [
	        '$q',
	        'DataApiSettings',
	        'EmployeeDashboardApiService',
	        'modalService',
	        'eventManagerService',
	        'CrmConstants',
	        'TranslationCache',
	        'AuthenticationService'
	    ];
	    return EmployeeDashboardService;
	}());
	module.exports = EmployeeDashboardService;


/***/ },
/* 218 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var GmLookupService = (function () {
	    function GmLookupService(GmStates, AppSettings, $window) {
	        this.GmStates = GmStates;
	        this.AppSettings = AppSettings;
	        this.$window = $window;
	        this.detailsWindowOptions = "width=855,height=560,Help=0,toolbar=no,location=no,directories=no,menubar=no,Status=0,resizable=no,Scroll=No,top=100px,left=200px";
	        this.searchWindowOptions = "width=855,height=690,Help=0,toolbar=no,location=no,directories=no,menubar=no,Status=0,resizable=no,Scroll=No,scrollbars=0,top=100px,left=200px";
	    }
	    GmLookupService.prototype.launchGmWindow = function (data) {
	        this.$window.open(this.getGmUrl(data), 'GM Lookup', this.getWindowOptions(data));
	    };
	    GmLookupService.prototype.getGmUrl = function (data) {
	        var crmUrl = this.AppSettings.crmUrl;
	        if (data.gmInfo.gmState === this.GmStates.linked) {
	            return crmUrl + '/quickref/cd_gm_details.aspx' + this.buildQueryString(data);
	        }
	        else if (data.gmInfo.gmState === this.GmStates.unlinked) {
	            return crmUrl + '/quickref/cd_gm_search.aspx' + this.buildQueryString(data);
	        }
	    };
	    GmLookupService.prototype.getWindowOptions = function (data) {
	        if (data.gmInfo.gmState === this.GmStates.linked) {
	            return this.detailsWindowOptions;
	        }
	        else if (data.gmInfo.gmState === this.GmStates.unlinked) {
	            return this.searchWindowOptions;
	        }
	    };
	    GmLookupService.prototype.buildQueryString = function (data) {
	        return '?ContactType=1&EntityId='
	            + data.contactId
	            + '&SiteId=' + data.siteId
	            + '&SurrogateId=' + data.gmInfo.surrogateId;
	    };
	    GmLookupService.$inject = [
	        'GmStates',
	        'AppSettings',
	        '$window'
	    ];
	    return GmLookupService;
	}());
	module.exports = GmLookupService;


/***/ },
/* 219 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var AddressService = (function () {
	    function AddressService($q, countries, statesProvinces, crmBrowserLocaleService, AddressLookupService) {
	        this.$q = $q;
	        this.countries = countries;
	        this.statesProvinces = statesProvinces;
	        this.crmBrowserLocaleService = crmBrowserLocaleService;
	        this.AddressLookupService = AddressLookupService;
	    }
	    AddressService.prototype.setDefaultCountryToBrowserLocale = function (address) {
	        if (address) {
	            var locale = this.crmBrowserLocaleService.getCountryLocale();
	            address.country = (this.countries.hasOwnProperty(locale)) ? locale : AddressService.defaultCountry;
	        }
	    };
	    AddressService.prototype.getCountries = function () {
	        return this.countries;
	    };
	    AddressService.prototype.getCountryNames = function () {
	        var availableCountries = [];
	        for (var country in this.countries) {
	            availableCountries.push(country);
	        }
	        return availableCountries;
	    };
	    AddressService.prototype.getStateProvinces = function (address) {
	        return this.statesProvinces[address.country];
	    };
	    AddressService.prototype.lookupPostalCode = function (address) {
	        var currentCountryLookup = this.countries[address.country].lookup;
	        var currentCountryPostalLength = this.countries[address.country].fields.postal.length;
	        if (this.AddressLookupService.isCountrySupported(currentCountryLookup) && address.postal.length === currentCountryPostalLength) {
	            return this.AddressLookupService.getPartialAddressFromPostalCodeByShim(address.postal)
	                .then(function (bestAddress) {
	                address.city = bestAddress.cities[0] || "";
	                address.state = bestAddress.state;
	                address.county = bestAddress.counties[0] || "";
	                return {
	                    cities: bestAddress.cities,
	                    counties: bestAddress.counties
	                };
	            });
	        }
	        var deferred = this.$q.defer();
	        deferred.reject();
	        return deferred.promise;
	    };
	    AddressService.prototype.lookupCounty = function (address) {
	        return this.AddressLookupService.getPartialAddressFromCounty(address.postal, address.county)
	            .then(function (bestAddress) {
	            address.city = bestAddress.cities[0] || "";
	            return {
	                cities: bestAddress.cities
	            };
	        });
	    };
	    AddressService.prototype.checkIfAddressIsComplete = function (address, fields) {
	        var _this = this;
	        var isComplete = true;
	        var address = address;
	        _.each(fields, function (field, fieldName) {
	            if (field.required && _this.isEmptyOrWhitespace(address[fieldName])) {
	                isComplete = false;
	            }
	        });
	        address.isComplete = isComplete;
	    };
	    AddressService.prototype.isFieldValid = function (contact, address, fields, field, isFormSubmitted, isFieldValidCallback) {
	        if (isFieldValidCallback) {
	            return isFieldValidCallback({ field: field });
	        }
	        if (address.isEmpty())
	            return true;
	        if (!fields[field].required)
	            return true;
	        if (!isFormSubmitted)
	            return true;
	        if (!contact.contactPoints.isValid()) {
	            return !this.isEmptyOrWhitespace(address[field]);
	        }
	        return true;
	    };
	    AddressService.prototype.isEmptyOrWhitespace = function (value) {
	        if (!value)
	            return true;
	        return value.trim().length === 0;
	    };
	    AddressService.defaultCountry = 'USA';
	    AddressService.$inject = [
	        '$q',
	        'countries',
	        'statesProvinces',
	        'crmBrowserLocaleService',
	        'AddressLookupService'
	    ];
	    return AddressService;
	}());
	module.exports = AddressService;


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var DuplicateSelectionResult = __webpack_require__(221);
	var DuplicateSelectionModalController = __webpack_require__(222);
	var Option = __webpack_require__(224);
	var DuplicateService = (function () {
	    function DuplicateService(ContactApiDuplicatesService, modalService, permissionService, $q) {
	        this.ContactApiDuplicatesService = ContactApiDuplicatesService;
	        this.modalService = modalService;
	        this.permissionService = permissionService;
	        this.$q = $q;
	        this.selectContactTemplateUrl = 'app/contact/duplicates/duplicateSelectionModalTemplate.html';
	    }
	    DuplicateService.prototype.checkForDuplicates = function (contact, duplicateType) {
	        var _this = this;
	        return this.ContactApiDuplicatesService.duplicateContactCheck(contact)
	            .then(function (duplicates) {
	            if (duplicates && duplicates.length > 0) {
	                var deferred = _this.$q.defer();
	                _this.modalService.open(_this.selectContactTemplateUrl, new DuplicateSelectionModalController(duplicates, duplicateType, _this.permissionService))
	                    .then(function (result) {
	                    switch (result.value) {
	                        case DuplicateSelectionResult.addAnyways:
	                            deferred.resolve(Option.None());
	                            break;
	                        case DuplicateSelectionResult.selectedExisting:
	                            deferred.resolve(Option.Create(result.selectedContact));
	                            break;
	                        case DuplicateSelectionResult.cancel:
	                        default:
	                            deferred.reject('cancel adding contact');
	                            break;
	                    }
	                });
	                return deferred.promise;
	            }
	            else {
	                var deferred = _this.$q.defer();
	                deferred.resolve(Option.None());
	                return deferred.promise;
	            }
	        });
	    };
	    DuplicateService.$inject = [
	        'ContactApiDuplicatesService',
	        'modalService',
	        'permissionService',
	        '$q'
	    ];
	    return DuplicateService;
	}());
	module.exports = DuplicateService;


/***/ },
/* 221 */
/***/ function(module, exports) {

	"use strict";
	var DuplicateSelectionResult = (function () {
	    function DuplicateSelectionResult(value, selection) {
	        this.value = value;
	        this.selectedContact = selection;
	    }
	    DuplicateSelectionResult.addAnywaysResult = function () {
	        return new DuplicateSelectionResult(DuplicateSelectionResult.addAnyways);
	    };
	    DuplicateSelectionResult.cancelResult = function () {
	        return new DuplicateSelectionResult(DuplicateSelectionResult.cancel);
	    };
	    DuplicateSelectionResult.selectedExistingResult = function (contact) {
	        return new DuplicateSelectionResult(DuplicateSelectionResult.selectedExisting, contact);
	    };
	    DuplicateSelectionResult.addAnyways = 'addAnyways';
	    DuplicateSelectionResult.cancel = 'cancel';
	    DuplicateSelectionResult.selectedExisting = 'selectedExisting';
	    return DuplicateSelectionResult;
	}());
	module.exports = DuplicateSelectionResult;


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var DuplicateSelectionResult = __webpack_require__(221);
	var ModalController = __webpack_require__(223);
	var DuplicateSelectionModalController = (function (_super) {
	    __extends(DuplicateSelectionModalController, _super);
	    function DuplicateSelectionModalController(duplicates, duplicateType, permissionService) {
	        var _this = this;
	        _super.call(this);
	        this.duplicates = duplicates;
	        this.duplicateType = duplicateType;
	        this.permissionService = permissionService;
	        this.canAddDuplicate = false;
	        this.sort(duplicates);
	        this.setTranslationKeys(duplicateType);
	        this.permissionService.getPermission('CDAllowDuplicate')
	            .then(function (permission) {
	            if (permission.add && permission.view && permission.edit && permission.delete) {
	                _this.canAddDuplicate = true;
	            }
	        });
	    }
	    DuplicateSelectionModalController.prototype.sort = function (duplicates) {
	        duplicates.sort(function (a, b) {
	            return a.fullName > b.fullName ? 1 : 0;
	        });
	    };
	    DuplicateSelectionModalController.prototype.buildTranslationKey = function (type, key) {
	        return 'crm.contact.duplicates.' + type + '.' + key;
	    };
	    DuplicateSelectionModalController.prototype.setTranslationKeys = function (type) {
	        this.modalTitleKey = this.buildTranslationKey(type, 'MODAL_TITLE');
	        this.selectionInstructionsKey = this.buildTranslationKey(type, 'SELECTION_INSTRUCTIONS');
	        this.selectActionTextKey = this.buildTranslationKey(type, 'SELECT_ACTION_TEXT');
	        this.addAnywaysTextKey = this.buildTranslationKey(type, 'ADD_ANYWAYS_TEXT');
	    };
	    DuplicateSelectionModalController.prototype.close = function () {
	        this.closeModal(DuplicateSelectionResult.cancelResult());
	    };
	    DuplicateSelectionModalController.prototype.selectExistingContact = function (contact) {
	        this.closeModal(DuplicateSelectionResult.selectedExistingResult(contact));
	    };
	    DuplicateSelectionModalController.prototype.addAnyways = function () {
	        this.closeModal(DuplicateSelectionResult.addAnywaysResult());
	    };
	    return DuplicateSelectionModalController;
	}(ModalController));
	module.exports = DuplicateSelectionModalController;


/***/ },
/* 223 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var ModalController = (function () {
	    function ModalController() {
	        this.closeModal = function (result) { return; };
	    }
	    return ModalController;
	}());
	module.exports = ModalController;


/***/ },
/* 224 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var Option = (function () {
	    function Option() {
	    }
	    Option.Create = function (value) {
	        var option = new Option();
	        option._isDefined = true;
	        option._value = value;
	        return option;
	    };
	    Option.None = function () {
	        var option = new Option();
	        option._isDefined = false;
	        return option;
	    };
	    Option.prototype.isDefined = function () {
	        return this._isDefined;
	    };
	    Option.prototype.getValue = function () {
	        return this._value;
	    };
	    Option.prototype.map = function (func) {
	        if (!this._isDefined)
	            return Option.None();
	        return Option.Create(func(this._value));
	    };
	    return Option;
	}());
	module.exports = Option;


/***/ },
/* 225 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var TODO_DETAIL_URL = 'activity/ed_workplan.aspx';
	var EVENT_WITH_NOTES_URL = 'activity/ed_pipeline.aspx';
	var EVENT_WITHOUT_NOTES_URL = 'activity/ed_pipelist.aspx';
	var SALES_TRACKING_URL = 'reports/salesActivityReport.aspx';
	var ACTIVITY_SUMMARY_URL = 'reports/dsActivitySummary.aspx';
	var DAILY_CHECKOUT_URL = 'reports/dsDailyCheckOut.aspx';
	var ReportsService = (function () {
	    function ReportsService(EmployeeDashboardService, DataApiSettings, AppSettings) {
	        this.EmployeeDashboardService = EmployeeDashboardService;
	        this.DataApiSettings = DataApiSettings;
	        this.AppSettings = AppSettings;
	        this.crmUrl = AppSettings.crmUrl;
	    }
	    ReportsService.prototype.getToDoDetailUrl = function () {
	        var siteId = this.DataApiSettings.getSiteId();
	        var filterId = this.EmployeeDashboardService.getSelectedCategoryFilter().id;
	        var username = this.EmployeeDashboardService.getSelectedEmployee().value;
	        var url = this.crmUrl + "/" + TODO_DETAIL_URL + "?SiteId=" + siteId + "&FilterId=" + filterId + "&View=1&chMyUser=" + username;
	        return url;
	    };
	    ReportsService.prototype.getEventWithNotesUrl = function () {
	        var siteId = this.DataApiSettings.getSiteId();
	        var filterId = this.EmployeeDashboardService.getSelectedCategoryFilter().id;
	        var username = this.EmployeeDashboardService.getSelectedEmployee().value;
	        var url = this.crmUrl + "/" + EVENT_WITH_NOTES_URL + "?SiteId=" + siteId + "&FilterId=" + filterId + "&View=1&chMyUser=" + username;
	        return url;
	    };
	    ReportsService.prototype.getEventWithoutNotesUrl = function () {
	        var siteId = this.DataApiSettings.getSiteId();
	        var filterId = this.EmployeeDashboardService.getSelectedCategoryFilter().id;
	        var username = this.EmployeeDashboardService.getSelectedEmployee().value;
	        var url = this.crmUrl + "/" + EVENT_WITHOUT_NOTES_URL + "?SiteId=" + siteId + "&FilterId=" + filterId + "&View=1&chMyUser=" + username;
	        return url;
	    };
	    ReportsService.prototype.getSalesTrackingUrl = function () {
	        var todayDate = new Date(Date.now())
	            .toLocaleDateString();
	        var username = this.EmployeeDashboardService.getSelectedEmployee().value;
	        var url = this.crmUrl + "/" + SALES_TRACKING_URL + "?sourceId=0&beginDate=" + todayDate + "&endDate=" + todayDate + "&statusId=0&typeId=0&chAssignedTo=" + username + "&link=yes";
	        return url;
	    };
	    ReportsService.prototype.getActivitySummaryUrl = function () {
	        var todayDate = new Date(Date.now())
	            .toLocaleDateString();
	        var username = this.EmployeeDashboardService.getSelectedEmployee().value;
	        var url = this.crmUrl + "/" + ACTIVITY_SUMMARY_URL + "?sourceId=0&beginDate=" + todayDate + "&endDate=" + todayDate + "&statusId=0&typeId=0&eventCat=1&iAddress=0&iRoleId=0&chAssignedTo=" + username + "&link=yes";
	        return url;
	    };
	    ReportsService.prototype.getDailyCheckoutUrl = function () {
	        var url = this.crmUrl + "/" + DAILY_CHECKOUT_URL;
	        return url;
	    };
	    ReportsService.$inject = [
	        'EmployeeDashboardService',
	        'DataApiSettings',
	        'AppSettings'
	    ];
	    return ReportsService;
	}());
	module.exports = ReportsService;


/***/ },
/* 226 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var TASK_SHEET_URL = 'PrintOut/activitySheet.aspx';
	var TASK_SHEET_WINDOW_OPTIONS = 'toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=700,height=600';
	var PrintTaskService = (function () {
	    function PrintTaskService(AppSettings, DataApiSettings) {
	        this.AppSettings = AppSettings;
	        this.DataApiSettings = DataApiSettings;
	        this.crmUrl = AppSettings.crmUrl;
	    }
	    PrintTaskService.prototype.getTaskSheetUrl = function (eventId, activityId, entityId) {
	        var siteId = this.DataApiSettings.getSiteId();
	        var url = this.crmUrl + "/" + TASK_SHEET_URL + "?SiteId=" + siteId + "&Eventid=" + eventId + "&ActivityId=" + activityId + "&EntityId=" + entityId + "&EvtType=1&CallCenterInfo=1";
	        return url;
	    };
	    PrintTaskService.prototype.getTaskSheetWindowOptions = function () {
	        return TASK_SHEET_WINDOW_OPTIONS;
	    };
	    PrintTaskService.$inject = [
	        'AppSettings',
	        'DataApiSettings'
	    ];
	    return PrintTaskService;
	}());
	module.exports = PrintTaskService;


/***/ },
/* 227 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var FilterManagerService = (function () {
	    function FilterManagerService(FilterManagerApiService) {
	        this.FilterManagerApiService = FilterManagerApiService;
	    }
	    FilterManagerService.prototype.getConditionDataForFilter = function (filterId) {
	        var self = this;
	        return this.FilterManagerApiService.get(filterId).then(function (resolution) {
	            return {
	                sortOrder: resolution.sortOrder,
	                userAccess: resolution.userAccess,
	                opportunityType: resolution.opportunityType,
	                conditionCollection: self.extractConditionCollection(resolution)
	            };
	        });
	    };
	    FilterManagerService.prototype.extractConditionCollection = function (conditionData) {
	        var self = this;
	        var conditionCollection = [];
	        _.mapObject(conditionData.categorized, function (value, key) {
	            var conditionType = self.getConditionType(value);
	            var arrayItem = _.extend({}, {
	                name: value.filterName,
	                filterKey: key,
	                filterCategory: value.categoryName,
	                conditionType: conditionType
	            }, value);
	            conditionCollection.push(arrayItem);
	        });
	        return conditionCollection;
	    };
	    FilterManagerService.prototype.getConditionSelectedText = function (condition, conditionType) {
	        var result = '';
	        if (!condition || !condition.selected) {
	            return result;
	        }
	        var type = conditionType || condition.conditionType;
	        if (type === 'singleSelect') {
	            result = condition.selected.text;
	        }
	        else if (type === 'multiSelect') {
	            condition.selected.forEach(function (value) {
	                result += value.text + ', ';
	            });
	            result = result.substring(0, result.length - 2);
	        }
	        else {
	            result = condition.selected;
	        }
	        return result;
	    };
	    FilterManagerService.prototype.isEmptyCondition = function (condition) {
	        var selected = condition.selected;
	        if (!selected) {
	            return true;
	        }
	        return Array.isArray(selected) && selected.length === 0;
	    };
	    FilterManagerService.prototype.getConditionType = function (filter) {
	        var selected = filter.selected;
	        if (Array.isArray(selected)) {
	            return 'multiSelect';
	        }
	        if (typeof selected === 'string') {
	            return 'text';
	        }
	        return 'singleSelect';
	    };
	    FilterManagerService.prototype.createFilter = function (conditionData, newFilter) {
	        return this.FilterManagerApiService.post(conditionData, newFilter);
	    };
	    FilterManagerService.prototype.updateFilter = function (conditionData, selectedFilter) {
	        return this.FilterManagerApiService.put(conditionData, selectedFilter);
	    };
	    FilterManagerService.prototype.deleteFilter = function (filterId) {
	        return this.FilterManagerApiService.delete(filterId);
	    };
	    FilterManagerService.$inject = [
	        'FilterManagerApiService'
	    ];
	    return FilterManagerService;
	}());
	module.exports = FilterManagerService;


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var moment = __webpack_require__(19);
	var SalesOpportunityService = (function () {
	    function SalesOpportunityService($q, SalesOpportunityStatusList, CrmConstants, SalesOpportunityApiService, ServiceWrapper, eventManagerService, TranslationCache, Constants, salesRecapModalService, SalesOpportunityVehicleOfInterestApiService, VehicleOfInterestFactory, modalService, $translate, ContactService, omniSearchService, EmployeeDashboardApiService, StatusMappingService) {
	        this.$q = $q;
	        this.SalesOpportunityStatusList = SalesOpportunityStatusList;
	        this.CrmConstants = CrmConstants;
	        this.SalesOpportunityApiService = SalesOpportunityApiService;
	        this.ServiceWrapper = ServiceWrapper;
	        this.eventManagerService = eventManagerService;
	        this.TranslationCache = TranslationCache;
	        this.Constants = Constants;
	        this.salesRecapModalService = salesRecapModalService;
	        this.SalesOpportunityVehicleOfInterestApiService = SalesOpportunityVehicleOfInterestApiService;
	        this.VehicleOfInterestFactory = VehicleOfInterestFactory;
	        this.modalService = modalService;
	        this.$translate = $translate;
	        this.ContactService = ContactService;
	        this.omniSearchService = omniSearchService;
	        this.EmployeeDashboardApiService = EmployeeDashboardApiService;
	        this.StatusMappingService = StatusMappingService;
	        this.salesOpportunities = {};
	        this._salesOpportunitiesCache = {};
	        this._inProgressRequests = {};
	    }
	    SalesOpportunityService.prototype.save = function (contactId, eventId, newlyCompletedStatuses, canStatusMoveEventStatusBack, eventStatusLogGroupId, newlyCompletedDate, activityIdForEventStatusLogs) {
	        var _this = this;
	        if (newlyCompletedStatuses === void 0) { newlyCompletedStatuses = []; }
	        if (canStatusMoveEventStatusBack === void 0) { canStatusMoveEventStatusBack = false; }
	        return this.get(contactId, eventId)
	            .then(function (salesOpportunity) {
	            return _this.saveSalesOpportunity(salesOpportunity, contactId, newlyCompletedStatuses, canStatusMoveEventStatusBack, eventStatusLogGroupId, newlyCompletedDate, activityIdForEventStatusLogs);
	        });
	    };
	    SalesOpportunityService.prototype.saveNew = function (salesOpportunity, contactId) {
	        var _this = this;
	        return this.saveSalesOpportunity(salesOpportunity, contactId)
	            .then(function (salesOppResponse) {
	            _this.getSalesOpportunityFromServer(contactId, salesOppResponse.eventId);
	            return salesOppResponse;
	        });
	    };
	    SalesOpportunityService.prototype.get = function (contactId, eventId, dealershipId) {
	        var key = this.getSalesOpportunityMapKey(contactId, eventId);
	        if (this.salesOpportunities[key]) {
	            return this.$q.resolve(this.salesOpportunities[key]);
	        }
	        else {
	            return this.getSalesOpportunityFromServer(contactId, eventId, dealershipId);
	        }
	    };
	    SalesOpportunityService.prototype.deactivateOpportunity = function (contactId, eventId, resolutionCode1, resolutionCode2) {
	        var _this = this;
	        return this.get(contactId, eventId).then(function (salesOpp) {
	            salesOpp.status = _this.SalesOpportunityStatusList.lost;
	            salesOpp.lost = true;
	            salesOpp.resolutionCode1 = resolutionCode1;
	            salesOpp.resolutionCode2 = resolutionCode2;
	            return _this.save(contactId, eventId);
	        });
	    };
	    SalesOpportunityService.prototype.activateOpportunity = function (contactId, eventId) {
	        var _this = this;
	        return this.get(contactId, eventId).then(function (salesOpp) {
	            salesOpp.status = _this.SalesOpportunityStatusList.qualifiedContact;
	            salesOpp.lost = false;
	            return _this.save(contactId, eventId);
	        });
	    };
	    SalesOpportunityService.prototype.getSalesOpportunityMapKey = function (contactId, eventId) {
	        //TODO Hash me
	        return eventId + "##" + contactId;
	    };
	    SalesOpportunityService.prototype.updateSalesOpportunityMap = function (contactId, salesOpportunity) {
	        var key = this.getSalesOpportunityMapKey(contactId, salesOpportunity.id);
	        if (!this._salesOpportunitiesCache[key]) {
	            this._salesOpportunitiesCache[key] = {};
	        }
	        if (!this.salesOpportunities[key]) {
	            this.salesOpportunities[key] = salesOpportunity;
	        }
	        var cachedSalesOpportunity = this._salesOpportunitiesCache[key];
	        var publicSalesOpportunity = this.salesOpportunities[key];
	        SalesOpportunityService.POJO_FIELDS.forEach(function (field) {
	            cachedSalesOpportunity[field] = salesOpportunity[field];
	            publicSalesOpportunity[field] = salesOpportunity[field];
	        });
	    };
	    SalesOpportunityService.prototype.getSalesOpportunityFromServer = function (contactId, eventId, dealershipId) {
	        var _this = this;
	        var key = this.getSalesOpportunityMapKey(contactId, eventId);
	        if (this._inProgressRequests[key]) {
	            return this._inProgressRequests[key];
	        }
	        var promise = this.SalesOpportunityApiService.getSingleOpportunity(contactId, eventId, true, dealershipId);
	        this._inProgressRequests[key] = promise;
	        return promise
	            .then(function (salesOpportunity) {
	            _this.updateSalesOpportunityMap(contactId, salesOpportunity);
	            delete _this._inProgressRequests[key];
	            return _this.attachBuyerAndCoBuyer(salesOpportunity, dealershipId);
	        })
	            .then(function (salesOpportunity) {
	            var vehicleUrlPromises = [];
	            _.each(salesOpportunity.vehiclesOfInterest, function (voi) {
	                if (voi.stockNumber) {
	                    vehicleUrlPromises.push(_this.omniSearchService.search({
	                        searchEndpoint: 'InventoryVehicle',
	                        searchFields: ['StockNumber'],
	                        searchTerm: voi.stockNumber,
	                        includeSearchResults: true,
	                        paging: {
	                            page: 0,
	                            resultsPerPage: 100
	                        }
	                    }).then(function (searchResults) {
	                        var result;
	                        if (searchResults.results) {
	                            result = _.find(searchResults.results, function (result) {
	                                return voi.stockNumber && voi.stockNumber == result.model.stockNumber;
	                            });
	                        }
	                        if (result && result.model && result.model.vehicle && result.model.vehicle.imageUrls) {
	                            voi.imageUrls = result.model.vehicle.imageUrls;
	                        }
	                    }).finally(function () {
	                    }));
	                }
	            });
	            return _this.$q.all(vehicleUrlPromises)
	                .then(function () {
	                return salesOpportunity;
	            });
	        });
	    };
	    SalesOpportunityService.prototype.attachBuyerAndCoBuyer = function (salesOpportunity, dealershipId) {
	        var coBuyerPromise = this.$q.when(false);
	        var buyerPromise = this.$q.when(false);
	        if (salesOpportunity.coBuyerId) {
	            var idObject = { contactId: salesOpportunity.coBuyerId };
	            if (dealershipId) {
	                idObject.dealershipId = dealershipId;
	            }
	            coBuyerPromise = this.ContactService.get(idObject);
	        }
	        if (salesOpportunity.buyerId) {
	            var idObject = { contactId: salesOpportunity.buyerId };
	            if (dealershipId) {
	                idObject.dealershipId = dealershipId;
	            }
	            buyerPromise = this.ContactService.get(idObject);
	        }
	        return this.$q.all([coBuyerPromise, buyerPromise, salesOpportunity])
	            .then(function (resolutions) {
	            var coBuyer = resolutions[0];
	            var buyer = resolutions[1];
	            var salesOpportunity = resolutions[2];
	            salesOpportunity.buyer = buyer;
	            salesOpportunity.cobuyer = coBuyer;
	            return salesOpportunity;
	        });
	    };
	    SalesOpportunityService.prototype.saveSalesOpportunity = function (salesOpportunity, entityId, newlyCompletedStatuses, canStatusMoveEventStatusBack, eventStatusLogGroupId, newlyCompletedDate, activityIdForEventStatusLogs) {
	        var _this = this;
	        if (newlyCompletedStatuses === void 0) { newlyCompletedStatuses = []; }
	        if (canStatusMoveEventStatusBack === void 0) { canStatusMoveEventStatusBack = false; }
	        salesOpportunity.completedStatuses = newlyCompletedStatuses;
	        salesOpportunity.completionDate = newlyCompletedDate ?
	            newlyCompletedDate.format("MM/DD/YYYY") : moment().format("MM/DD/YYYY");
	        var normalizedEventStatuses = this.ignoreTurn(newlyCompletedStatuses);
	        if (normalizedEventStatuses.length > 0 && (canStatusMoveEventStatusBack || !this.isStatusMovingBackwards(salesOpportunity.status.id, _.last(normalizedEventStatuses).id))) {
	            salesOpportunity.status = _.last(normalizedEventStatuses);
	            if (!this.isVoiValid(salesOpportunity)) {
	                this.restoreFromCache(salesOpportunity);
	                this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.SAVE.VOI_ERROR, {
	                    alertType: this.TranslationCache.get('crm.activities.logAppointment.ALERT_TYPE_ERROR'),
	                    message: this.TranslationCache.get('crm.activities.logAppointment.VIN_REQUIRED')
	                });
	                return this.$q.reject(this.CrmConstants.SALES_OPPORTUNITY.SAVE.VOI_ERROR);
	            }
	        }
	        salesOpportunity.lost = salesOpportunity.status == this.SalesOpportunityStatusList.lost;
	        var oppToPost = {
	            entityId: entityId,
	            salesOpportunity: salesOpportunity
	        };
	        if (eventStatusLogGroupId !== null && eventStatusLogGroupId !== undefined) {
	            oppToPost.salesOpportunity.eventStatusLogGroupId = eventStatusLogGroupId.toString();
	        }
	        else {
	            oppToPost.salesOpportunity.eventStatusLogGroupId = undefined;
	        }
	        if (activityIdForEventStatusLogs) {
	            oppToPost.salesOpportunity.activityIdForEventStatusLogs = activityIdForEventStatusLogs.toString();
	        }
	        else {
	            oppToPost.salesOpportunity.activityIdForEventStatusLogs = undefined;
	        }
	        return this.ServiceWrapper.save(this.SalesOpportunityApiService, oppToPost)
	            .then(function (result) {
	            var id = result.eventId || result;
	            if (id == salesOpportunity.id) {
	                _this.checkIfSalesOpportunityIsSold(salesOpportunity);
	            }
	            return result;
	        }).catch(function (error) {
	            _this.restoreFromCache(salesOpportunity);
	            if (error.status == 412) {
	                throw _this.CrmConstants.SALES_OPPORTUNITY.SAVE.CONCURRENT_EDIT_ERROR;
	            }
	            else {
	                throw _this.CrmConstants.SALES_OPPORTUNITY.SAVE.ERROR;
	            }
	        });
	    };
	    SalesOpportunityService.prototype.isStatusMovingBackwards = function (currentStatusId, newStatusId) {
	        var orderedStatusList = this.StatusMappingService.getOrderedStatusArray();
	        var currentIndex = _.findIndex(orderedStatusList, function (status) {
	            return status.id === currentStatusId;
	        });
	        var newIndex = _.findIndex(orderedStatusList, function (status) {
	            return status.id === newStatusId;
	        });
	        if (currentIndex === -1 || newIndex === -1) {
	            return false;
	        }
	        return newIndex < currentIndex;
	    };
	    SalesOpportunityService.prototype.isVoiValid = function (salesOpportunity) {
	        if (salesOpportunity.status.id != this.SalesOpportunityStatusList.sold.id) {
	            return true;
	        }
	        var primaryVehicleOfInterest = this.getPrimaryVehicleOfInterest(salesOpportunity);
	        return primaryVehicleOfInterest && (!!primaryVehicleOfInterest.vin);
	    };
	    SalesOpportunityService.prototype.getPrimaryVehicleOfInterest = function (salesOpportunity) {
	        return _.find(salesOpportunity.vehiclesOfInterest, function (voi) {
	            return voi.preferred === true;
	        });
	    };
	    SalesOpportunityService.prototype.ignoreTurn = function (salesOppStatuses) {
	        var _this = this;
	        return salesOppStatuses.filter(function (status) {
	            return status.statusName !== _this.SalesOpportunityStatusList.turn.statusName;
	        });
	    };
	    SalesOpportunityService.prototype.restoreFromCache = function (salesOpportunity) {
	        var key = this.getSalesOpportunityMapKey(salesOpportunity.buyer.id, salesOpportunity.id);
	        var cachedSalesOpportunity = this._salesOpportunitiesCache[key];
	        SalesOpportunityService.POJO_FIELDS.forEach(function (field) {
	            salesOpportunity[field] = cachedSalesOpportunity[field];
	        });
	    };
	    SalesOpportunityService.prototype.isSalesOpportunitySold = function (salesOpportunity) {
	        return salesOpportunity.status.id == this.SalesOpportunityStatusList.sold.id;
	    };
	    SalesOpportunityService.prototype.isSalesOpportunityLost = function (salesOpportunity) {
	        return salesOpportunity.status.id == this.SalesOpportunityStatusList.lost.id;
	    };
	    SalesOpportunityService.prototype.checkIfSalesOpportunityIsSold = function (salesOpportunity) {
	        var key = this.getSalesOpportunityMapKey(salesOpportunity.buyer.id, salesOpportunity.id);
	        var cachedSalesOpportunity = this._salesOpportunitiesCache[key];
	        if (cachedSalesOpportunity.status.id != this.SalesOpportunityStatusList.sold.id && this.isSalesOpportunitySold(salesOpportunity)) {
	            this.salesRecapModalService.openSalesRecapModal(salesOpportunity.buyer.id, salesOpportunity.id);
	        }
	    };
	    SalesOpportunityService.prototype.setPrimaryVehicleOfInterest = function (salesOpportunity, vehicleId) {
	        var _this = this;
	        var self = this;
	        return this.SalesOpportunityVehicleOfInterestApiService.post(salesOpportunity, vehicleId).then(function (vehicles) {
	            var vois = _.map(vehicles, function (vehicle) {
	                return self.VehicleOfInterestFactory.create(vehicle);
	            });
	            salesOpportunity.vehiclesOfInterest = vois;
	            _this.updateSalesOpportunityMap(salesOpportunity.buyer.id, salesOpportunity);
	            return vois;
	        });
	    };
	    SalesOpportunityService.prototype.addManualVehicleOfInterest = function (salesOpportunity, vehicleOfInterest) {
	        var _this = this;
	        return this.SalesOpportunityVehicleOfInterestApiService.postManual(salesOpportunity, vehicleOfInterest).then(function (vehicles) {
	            salesOpportunity.vehiclesOfInterest = vehicles;
	            _this.updateSalesOpportunityMap(salesOpportunity.buyer.id, salesOpportunity);
	            return vehicles;
	        });
	    };
	    SalesOpportunityService.prototype.getVehicleOfInterestByStockNumber = function (stockNumber) {
	        return this.SalesOpportunityVehicleOfInterestApiService.getVehicleByStockNumber(stockNumber);
	    };
	    SalesOpportunityService.prototype.getEmployeeNames = function (siteId) {
	        return this.EmployeeDashboardApiService.getEmployeeNames(siteId);
	    };
	    SalesOpportunityService.prototype.getFranchises = function (siteId) {
	        return this.SalesOpportunityApiService.getFranchises(siteId);
	    };
	    SalesOpportunityService.POJO_FIELDS = [
	        'id',
	        'dealershipId',
	        'type',
	        'purchaseType',
	        'source',
	        'trackingCode',
	        'resolutionCode1',
	        'resolutionCode2',
	        'primaryAssigned',
	        'secondaryAssigned',
	        'bdcAssigned',
	        'buyer',
	        'cobuyer',
	        'dmsNumber',
	        'description',
	        'closeDate',
	        'workNote',
	        'expectedClose: string',
	        'sold',
	        'lost',
	        'lastUpdatedOrSoldDate',
	        'completedStatuses',
	        'completionDate',
	        'status',
	        'statusList',
	        'vehiclesOfInterest',
	        'buyerInterestLevel',
	        'isDraft',
	        'ranking',
	        'franchise',
	        'dealershipId',
	        'eventStatusLogGroupId'
	    ];
	    SalesOpportunityService.$inject = [
	        '$q',
	        'SalesOpportunityStatusList',
	        'CrmConstants',
	        'SalesOpportunityApiService',
	        'ServiceWrapper',
	        'eventManagerService',
	        'TranslationCache',
	        'Constants',
	        'salesRecapModalService',
	        'SalesOpportunityVehicleOfInterestApiService',
	        'VehicleOfInterestFactory',
	        'modalService',
	        '$translate',
	        'ContactService',
	        'omniSearchService',
	        'EmployeeDashboardApiService',
	        'StatusMappingService'
	    ];
	    return SalesOpportunityService;
	}());
	module.exports = SalesOpportunityService;


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var Option = __webpack_require__(224);
	var TradeIntegrationsService = (function () {
	    function TradeIntegrationsService($q, $window, modalService, contactService, salesOpportunityTradesService, salesOpportunityTradeIntegrationsApiService, translationCache) {
	        this.$q = $q;
	        this.$window = $window;
	        this.modalService = modalService;
	        this.contactService = contactService;
	        this.salesOpportunityTradesService = salesOpportunityTradesService;
	        this.salesOpportunityTradeIntegrationsApiService = salesOpportunityTradeIntegrationsApiService;
	        this.translationCache = translationCache;
	        this.xmlRegex = /<message>(.*)<\/message>/i;
	        this.classicSuccessMessage = "Appraisal successfully processed.";
	        this.modalTemplate = "app/salesOpportunity/trades/requiredFieldsModal/tradeRequiredFieldsModalParentTemplate.html";
	        this.carFaxWindowName = "carFaxReportWindow";
	        this.carFaxWindowParameters = "dialogWidth:800px;dialogHeight:600px;Help:no;Status=no;Scroll=yes;resizable=yes";
	    }
	    TradeIntegrationsService.prototype.pushToThirdParty = function (tradeEvent, trade, integration, salesOpportunity) {
	        var _this = this;
	        var data = {
	            entityId: tradeEvent.contactId,
	            eventId: trade.eventId,
	            addressId: tradeEvent.setup.siteAddress.id,
	            integrationKey: integration.text,
	            integrationValue: integration.value,
	            siteId: salesOpportunity.dealershipId
	        };
	        return this.salesOpportunityTradeIntegrationsApiService.get(data)
	            .then(function (result) {
	            var error = _this.parseErrorResult(result);
	            var deferred = _this.$q.defer();
	            error.isDefined() ? deferred.reject(error.getValue()) : deferred.resolve();
	            return deferred.promise;
	        });
	    };
	    TradeIntegrationsService.prototype.hasRequiredFields = function (contact, trade) {
	        var phone = contact.contactPoints.getPhoneNumber();
	        return trade.vin &&
	            contact.address.isComplete &&
	            phone && phone.isValid();
	    };
	    TradeIntegrationsService.prototype.showRequiredFieldsModal = function (contact, trade, integrations) {
	        var _this = this;
	        var ctrl = {
	            contact: contact,
	            trade: trade,
	            integrations: integrations
	        };
	        var deferred = this.$q.defer();
	        this.modalService.openModalViaTemplateUrlPromise(this.modalTemplate, ctrl, function (obj) {
	            _this.contactService.save(contact)
	                .then(function () {
	                deferred.resolve();
	            })
	                .catch(function (error) {
	                deferred.reject(error);
	            })
	                .finally(function () {
	                obj.modalInstance.close();
	            });
	        }).then(function () {
	        }, function (obj) {
	            deferred.reject();
	            obj.modalInstance.close();
	        });
	        return deferred.promise;
	    };
	    TradeIntegrationsService.prototype.generateCarFaxReport = function (tradeEvent, trade, siteId) {
	        var _this = this;
	        var tradeId = trade.id;
	        var replacedTrade = _.max(tradeEvent.trades, function (tradeValue) {
	            if (tradeValue.id > 0)
	                return tradeValue.id;
	            else
	                return -Infinity;
	        });
	        var replacedTradeId = replacedTrade.id;
	        trade.id = replacedTradeId;
	        replacedTrade.id = tradeId;
	        return this.salesOpportunityTradesService.saveTrades(tradeEvent, trade.eventId.toString(), siteId)
	            .then(function () {
	            return _this.callCarFaxApi(tradeEvent, trade, siteId);
	        })
	            .then(function () {
	            trade.id = tradeId;
	            replacedTrade.id = replacedTradeId;
	            _this.salesOpportunityTradesService.saveTrades(tradeEvent, trade.eventId.toString(), siteId);
	        });
	    };
	    TradeIntegrationsService.prototype.callCarFaxApi = function (tradeEvent, trade, siteId) {
	        var _this = this;
	        var carFaxIntegration = _.find(tradeEvent.integrations, function (integration) {
	            return integration.text == "CarFax";
	        });
	        var data = {
	            entityId: tradeEvent.contactId,
	            eventId: trade.eventId,
	            addressId: tradeEvent.setup.siteAddress.id,
	            integrationKey: carFaxIntegration.text,
	            integrationValue: carFaxIntegration.value,
	            siteId: siteId
	        };
	        return this.salesOpportunityTradeIntegrationsApiService.get(data)
	            .then(function (result) {
	            var success = _this.parseCarFaxResult(result);
	            var deferred = _this.$q.defer();
	            success ? deferred.resolve() : deferred.reject(result);
	            return deferred.promise;
	        });
	    };
	    TradeIntegrationsService.prototype.parseErrorResult = function (result) {
	        if (result == this.classicSuccessMessage) {
	            return Option.None();
	        }
	        else {
	            return Option.Create(this.parseXmlErrorResult(result));
	        }
	    };
	    TradeIntegrationsService.prototype.parseCarFaxResult = function (result) {
	        var index = result.indexOf("http");
	        if (index >= 0) {
	            var url = result.substr(index);
	            this.$window.open(url, this.carFaxWindowName, this.carFaxWindowParameters);
	            return true;
	        }
	        return false;
	    };
	    TradeIntegrationsService.prototype.parseXmlErrorResult = function (result) {
	        if (result.length >= 5 && result.substr(0, 5) == "<?xml") {
	            var match = this.xmlRegex.exec(result);
	            if (!match || !match[1]) {
	                return this.translationCache.get("crm.salesOpportunity.trades.pushThirdParty.UNKNOWN_ERROR");
	            }
	            return match[1];
	        }
	        else {
	            return result;
	        }
	    };
	    TradeIntegrationsService.$inject = [
	        "$q",
	        "$window",
	        "modalService",
	        "ContactService",
	        "salesOpportunityTradesService",
	        "salesOpportunityTradeIntegrationsApiService",
	        "TranslationCache"
	    ];
	    return TradeIntegrationsService;
	}());
	module.exports = TradeIntegrationsService;


/***/ },
/* 230 */
/***/ function(module, exports) {

	"use strict";
	var PRE_STRING = "do_Post('view','";
	var EmailDialogService = (function () {
	    function EmailDialogService(AppSettings, $window, messageBus) {
	        this.AppSettings = AppSettings;
	        this.$window = $window;
	        this.messageBus = messageBus;
	        this.classicWindowArgs = 'toolbar=no,location=no,directories=no,status=yes,menubar=no,scrollbars=no,resizable=yes,width=730,height=580,left=175,top=130';
	    }
	    EmailDialogService.prototype.sendEmail = function (emailDoc) {
	        return this.openClassicEmailDialog(emailDoc);
	        //TODO: Replace the above call with this once we finish all the email stories.
	        //this.openNewEmailDialog(emailDoc);
	    };
	    EmailDialogService.prototype.openClassicEmailDialog = function (emailDoc) {
	        var url = this.AppSettings.crmUrl + '/email/email_blank_message.aspx?SiteId=' + emailDoc.siteId + '&To=' + emailDoc.sendTo + '&Reference=' + emailDoc.eventId +
	            '&EntityId=' + emailDoc.entityId + '&TypeId=1&NoteType=' + emailDoc.noteType + '&EvtId=' + emailDoc.eventId + '&EventId=' + emailDoc.eventId;
	        return this.$window.open(url, 'email', this.classicWindowArgs);
	    };
	    EmailDialogService.prototype.openClassicViewEmailDialog = function (webleadId, userNmae, siteId) {
	        var url = this.AppSettings.crmUrl + '/email/print_email.aspx?SiteId=' + siteId + '&MailType=view&WebLeadID=' + webleadId + '&User=' + userNmae;
	        return this.$window.open(url, 'View Email', this.classicWindowArgs);
	    };
	    EmailDialogService.prototype.openNewEmailDialog = function (emailDoc) {
	        this.messageBus.ask(top, {
	            from: 'crm',
	            to: 'shell',
	            task: 'modal.open',
	            timeout: 480000,
	            data: {
	                targetAppId: 'communication',
	                targetAppRoute: 'sendEmail/'
	                    + emailDoc.entityId + '/'
	                    + emailDoc.sendTo + '/'
	                    + emailDoc.eventId + '/'
	                    + emailDoc.siteId
	            }
	        });
	    };
	    EmailDialogService.prototype.getWebleadId = function (workNoteText) {
	        var webleadId;
	        var startingIndex = workNoteText.indexOf(PRE_STRING) + PRE_STRING.length;
	        var endIndex = workNoteText.indexOf("'", startingIndex);
	        webleadId = workNoteText.substring(startingIndex, endIndex);
	        return webleadId;
	    };
	    EmailDialogService.prototype.viewClassicEmail = function (webleadId, userName, siteId) {
	        return this.openClassicViewEmailDialog(webleadId, userName, siteId);
	    };
	    EmailDialogService.prototype.checkAttachments = function (workNoteText, attachmentIndex) {
	        var attachmentResult = {
	            hasAttachment: false,
	            attachmentCount: 0
	        };
	        if (attachmentIndex === -1)
	            return attachmentResult;
	        else {
	            attachmentResult.hasAttachment = true;
	            attachmentResult.attachmentCount = (workNoteText.match(/onclick=\"DownloadFile/g) || []).length;
	            return attachmentResult;
	        }
	    };
	    EmailDialogService.prototype.getEmailSubject = function (startIndex, endIndex, workNoteText) {
	        if (endIndex === -1)
	            return workNoteText.substring(startIndex);
	        else
	            return String(workNoteText.substring(startIndex, endIndex)).replace(/<[^>]+>|&nbsp;/gm, ' ');
	    };
	    EmailDialogService.$inject = [
	        'AppSettings',
	        '$window',
	        'messageBus'
	    ];
	    return EmailDialogService;
	}());
	module.exports = EmailDialogService;


/***/ },
/* 231 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	var ConvertOpportunityTypeService = (function () {
	    function ConvertOpportunityTypeService($state, modalService, translationCache, convertOpportunityTypeApiService) {
	        this.$state = $state;
	        this.modalService = modalService;
	        this.translationCache = translationCache;
	        this.convertOpportunityTypeApiService = convertOpportunityTypeApiService;
	    }
	    ConvertOpportunityTypeService.prototype.getPermissions = function (contactId, opportunityId, opportunityType) {
	        return this.convertOpportunityTypeApiService.getPermissions(contactId, opportunityId, opportunityType)
	            .catch(function (error) {
	            throw new Error("Could not get convert opportunity type permissions: " + error);
	        });
	    };
	    ConvertOpportunityTypeService.prototype.convertOpportunityType = function (contactId, opportunityId, opportunityType, assignedTo) {
	        var _this = this;
	        return this.convertOpportunityTypeApiService.getValidForConversion(contactId, opportunityId, opportunityType)
	            .then(function (result) {
	            if (result.isSuccess) {
	                return _this.showConvertOpportunityTypeModal(contactId, opportunityId, opportunityType, assignedTo);
	            }
	            else {
	                return _this.showErrorModal(result.message);
	            }
	        })
	            .catch(function (error) {
	            return _this.showErrorModal(_this.translationCache.get("crm.convertOpportunityType.errorModal.UNKNOWN_ERROR_OCCURRED"));
	        });
	    };
	    ConvertOpportunityTypeService.prototype.performConversion = function (contactId, opportunityId, opportunityType, newOpportunityType, assignedTo) {
	        return this.convertOpportunityTypeApiService.post(contactId, opportunityId, opportunityType, newOpportunityType, assignedTo);
	    };
	    ConvertOpportunityTypeService.prototype.showConvertOpportunityTypeModal = function (contactId, opportunityId, opportunityType, assignedTo) {
	        var _this = this;
	        return this.modalService.openModalViaTemplateUrlPromise(ConvertOpportunityTypeService.modalTemplate, {
	            contactId: contactId,
	            opportunityId: opportunityId,
	            opportunityType: opportunityType,
	            assignedTo: assignedTo
	        }, function (result) {
	            result.modalInstance.close();
	            _this.$state.go('view.contact', { 'contactId': contactId });
	        })
	            .catch(function (result) {
	            result.modalInstance.close();
	        });
	    };
	    ConvertOpportunityTypeService.prototype.showErrorModal = function (message) {
	        return this.modalService.openModal(message, this.translationCache.get("crm.convertOpportunityType.errorModal.TITLE"), "", this.translationCache.get("crm.convertOpportunityType.errorModal.OK_GOT_IT"))
	            .then(function (modalInstance) {
	            modalInstance.close();
	        })
	            .catch(function (modalInstance) {
	            modalInstance.close();
	        });
	    };
	    ConvertOpportunityTypeService.modalTemplate = "app/convertOpportunityType/convertOpportunityTypeModalTemplate.html";
	    ConvertOpportunityTypeService.$inject = [
	        "$state",
	        "modalService",
	        "TranslationCache",
	        "convertOpportunityTypeApiService"
	    ];
	    return ConvertOpportunityTypeService;
	}());
	module.exports = ConvertOpportunityTypeService;


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var EmailVerifyModalController = __webpack_require__(233);
	var EmailVerifyFrontendService = (function () {
	    function EmailVerifyFrontendService(EmailVerifyService, modalService, permissionService, $q) {
	        this.EmailVerifyService = EmailVerifyService;
	        this.modalService = modalService;
	        this.permissionService = permissionService;
	        this.$q = $q;
	        this.modalTemplateUrl = 'app/contact/add/emailVerify/emailVerifyModalTemplate.html';
	    }
	    EmailVerifyFrontendService.prototype.verifyEmail = function (email) {
	        var _this = this;
	        return this.EmailVerifyService.verifyEmail(email)
	            .then(function (response) {
	            if (response.isReal) {
	                return '';
	            }
	            if (response['error']) {
	                console.error(response['error']);
	                return '';
	            }
	            else {
	                return _this.modalService.openModalViaTemplateUrlAndGetHandle(_this.modalTemplateUrl, EmailVerifyModalController).result
	                    .then(function (result) {
	                    return result;
	                });
	            }
	        });
	    };
	    EmailVerifyFrontendService.$inject = [
	        'EmailVerifyService',
	        'modalService',
	        'permissionService',
	        '$q'
	    ];
	    return EmailVerifyFrontendService;
	}());
	module.exports = EmailVerifyFrontendService;


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var emailVerifyOptions_1 = __webpack_require__(145);
	var VerifyEmailModalController = (function () {
	    function VerifyEmailModalController($uibModalInstance) {
	        this.$uibModalInstance = $uibModalInstance;
	        this.formControl = [
	            {
	                label: 'crm.emailVerify.FIX_EMAIL',
	                value: emailVerifyOptions_1.EmailVerifyOptions.FIX_EMAIL
	            },
	            {
	                label: 'crm.emailVerify.REMOVE_EMAIL',
	                value: emailVerifyOptions_1.EmailVerifyOptions.REMOVE_EMAIL
	            },
	            {
	                label: 'crm.emailVerify.SAVE_ANYWAY',
	                value: emailVerifyOptions_1.EmailVerifyOptions.SAVE_ANYWAY
	            }
	        ];
	    }
	    VerifyEmailModalController.prototype.submit = function () {
	        if (this.selected) {
	            this.$uibModalInstance.close(this.selected.value);
	        }
	    };
	    VerifyEmailModalController.prototype.close = function () {
	        this.$uibModalInstance.close(emailVerifyOptions_1.EmailVerifyOptions.FIX_EMAIL);
	    };
	    VerifyEmailModalController.$inject = ['$uibModalInstance'];
	    return VerifyEmailModalController;
	}());
	module.exports = VerifyEmailModalController;


/***/ },
/* 234 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var DriversLicenseService = (function () {
	    function DriversLicenseService($q, DriversLicenseApiService) {
	        this.$q = $q;
	        this.DriversLicenseApiService = DriversLicenseApiService;
	    }
	    DriversLicenseService.prototype.get = function (contactId) {
	        return this.DriversLicenseApiService.get(contactId);
	    };
	    DriversLicenseService.serviceName = 'DriversLicenseService';
	    DriversLicenseService.$inject = [
	        '$q',
	        'DriversLicenseApiService'
	    ];
	    return DriversLicenseService;
	}());
	module.exports = DriversLicenseService;


/***/ },
/* 235 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var PrintProspectService = (function () {
	    function PrintProspectService(DealershipApiService, AppSettings) {
	        this.DealershipApiService = DealershipApiService;
	        this.AppSettings = AppSettings;
	    }
	    PrintProspectService.prototype.getPrintProspectFormUrl = function (entityId, eventId) {
	        var _this = this;
	        return this.DealershipApiService.get()
	            .then(function (dealership) {
	            var siteId = dealership.key;
	            return _this.AppSettings.globalUrl + "/CRM/PrintOut/PrintAndSave.aspx?url=prospectSheet.aspx&formName=Prospect%20Sheet&SiteId=" + siteId + "&EntityId=" + entityId + "&EventId=" + eventId + "&EvtType=2&Reload=true";
	        });
	    };
	    PrintProspectService.serviceName = 'PrintProspectService';
	    PrintProspectService.$inject = [
	        'DealershipApiService',
	        'AppSettings'
	    ];
	    return PrintProspectService;
	}());
	module.exports = PrintProspectService;


/***/ },
/* 236 */
/***/ function(module, exports) {

	"use strict";
	var DocumentManagerService = (function () {
	    function DocumentManagerService(AppSettings, $window, messageBus) {
	        this.AppSettings = AppSettings;
	        this.$window = $window;
	        this.messageBus = messageBus;
	    }
	    DocumentManagerService.prototype.openDocumentEntity = function (docType, worknoteType, entityId) {
	        var crmUrl = this.AppSettings.crmUrl;
	        entityId = entityId || '0';
	        var vehicleId = 0;
	        var sURL = crmUrl + "/document/doc_literature_list.aspx?docType=" + docType + "&NT=" + worknoteType + "&VehId=" + vehicleId + "&EntityId=" + entityId;
	        if (entityId != '0') {
	            this.$window.open(sURL, 'dSelect', 'toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=no,resizable=no,width=420,height=300');
	        }
	        else {
	            Error("You Must Save This Record Before Using This Feature.");
	        }
	    };
	    DocumentManagerService.prototype.openDocumentEvent = function (docType, worknoteType, entityId, eventId) {
	        var crmUrl = this.AppSettings.crmUrl;
	        if (eventId != '0') {
	            if (docType >= 0) {
	                var sURL = crmUrl + "/document/doc_literature_list.aspx?docType=" + docType + "&NT=" + worknoteType + "&EvtId=" + eventId + "&EntityId=" + entityId;
	                this.$window.open(sURL, 'dSelect', 'toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=no,resizable=no,width=420,height=300');
	            }
	        }
	        else {
	            Error("You Must Save This Record Before Using This Feature.");
	        }
	    };
	    DocumentManagerService.$inject = [
	        'AppSettings',
	        '$window',
	        'messageBus'
	    ];
	    return DocumentManagerService;
	}());
	module.exports = DocumentManagerService;


/***/ },
/* 237 */
/***/ function(module, exports) {

	"use strict";
	var ActivityFilterService = (function () {
	    function ActivityFilterService(TranslationCache) {
	        this.TranslationCache = TranslationCache;
	        this.worknoteText = this.TranslationCache.get('crm.salesOpportunity.filter_bar.WORKNOTE');
	    }
	    ActivityFilterService.prototype.buildFilterCounts = function (baseCollection, selectedTypeFilters, selectedAssignedToFilters, selectedStatusFilters, selectedOpportunityFilters) {
	        var _this = this;
	        this.checkForRemovedFilters(baseCollection, selectedTypeFilters, selectedAssignedToFilters, selectedStatusFilters, selectedOpportunityFilters);
	        var unorderedTypeCountMap = {};
	        var unorderedStatusCountMap = {};
	        var unorderedAssignedToCountMap = {};
	        var unorderedOpportunityCountMap = {};
	        _.each(baseCollection, function (activityTimelineItem) {
	            _this.buildUnorderedCounts(activityTimelineItem, unorderedTypeCountMap, unorderedStatusCountMap, unorderedAssignedToCountMap, unorderedOpportunityCountMap);
	        });
	        var orderedTypeCountMap = {};
	        var orderedStatusCountMap = {};
	        var orderedAssignedToCountMap = {};
	        var orderedOpportunityCountMap = {};
	        this.sortCountMaps(unorderedTypeCountMap, orderedTypeCountMap, unorderedStatusCountMap, orderedStatusCountMap, unorderedAssignedToCountMap, orderedAssignedToCountMap, unorderedOpportunityCountMap, orderedOpportunityCountMap);
	        return {
	            typeCountMap: orderedTypeCountMap,
	            statusCountMap: orderedStatusCountMap,
	            assignedToCountMap: orderedAssignedToCountMap,
	            opportunityCountMap: orderedOpportunityCountMap,
	            selectedTypeFiltersCount: this.countSelectedFilters(selectedTypeFilters),
	            selectedAssignedToFiltersCount: this.countSelectedFilters(selectedAssignedToFilters),
	            selectedStatusFiltersCount: this.countSelectedFilters(selectedStatusFilters),
	            selectedOpportunityFiltersCount: this.countSelectedFilters(selectedOpportunityFilters)
	        };
	    };
	    ActivityFilterService.prototype.filterActivitiesAndWorknotes = function (filteredActivityWorknoteCollection, selectedTypeFilters, selectedAssignedToFilters, selectedStatusFilters, selectedOpportunityFilters) {
	        var _this = this;
	        var isAnyTypeSelected = this.isAnyFilterSelected(selectedTypeFilters);
	        var isAnyAssignedToSelected = this.isAnyFilterSelected(selectedAssignedToFilters);
	        var isAnyStatusSelected = this.isAnyFilterSelected(selectedStatusFilters);
	        var isAnyOpportunitySelected = this.isAnyFilterSelected(selectedOpportunityFilters);
	        filteredActivityWorknoteCollection.filterBy(function (activityTimelineItem) {
	            if (isAnyTypeSelected) {
	                if (activityTimelineItem.activity) {
	                    return !selectedTypeFilters[activityTimelineItem.activity.type.text];
	                }
	                else if (activityTimelineItem.workNote) {
	                    return !selectedTypeFilters[_this.worknoteText];
	                }
	            }
	            return false;
	        })
	            .thenBy(function (activityTimelineItem) {
	            if (isAnyAssignedToSelected && activityTimelineItem.activity) {
	                return !selectedAssignedToFilters[activityTimelineItem.activity.assignedTo.text];
	            }
	            return false;
	        })
	            .thenBy(function (activityTimelineItem) {
	            if (isAnyStatusSelected && activityTimelineItem.activity) {
	                return !selectedStatusFilters[activityTimelineItem.activity.status.text];
	            }
	            return false;
	        })
	            .thenBy(function (activityTimelineItem) {
	            if (isAnyOpportunitySelected) {
	                return !selectedOpportunityFilters[activityTimelineItem.eventType];
	            }
	            return false;
	        });
	    };
	    ActivityFilterService.prototype.isAnyFilterSelected = function (filters) {
	        for (var key in filters) {
	            if (filters.hasOwnProperty(key)) {
	                if (filters[key] && !(filters[key] === 'false')) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    };
	    ActivityFilterService.prototype.checkForRemovedFilters = function (baseCollection, selectedTypeFilters, selectedAssignedToFilters, selectedStatusFilters, selectedOpporturnityFilters) {
	        var _this = this;
	        for (var key in selectedTypeFilters) {
	            if (selectedTypeFilters.hasOwnProperty(key)) {
	                if (!baseCollection.some(function (activityTimelineItem) {
	                    if (activityTimelineItem.activity) {
	                        return activityTimelineItem.activity.type.text === key;
	                    }
	                    else if (activityTimelineItem.workNote) {
	                        return _this.worknoteText === key;
	                    }
	                    return false;
	                })) {
	                    selectedTypeFilters[key] = 'false';
	                }
	            }
	        }
	        for (var key in selectedAssignedToFilters) {
	            if (selectedAssignedToFilters.hasOwnProperty(key)) {
	                if (!baseCollection.some(function (activityTimelineItem) {
	                    if (activityTimelineItem.activity) {
	                        return activityTimelineItem.activity.assignedTo.text === key;
	                    }
	                    return false;
	                })) {
	                    selectedAssignedToFilters[key] = 'false';
	                }
	            }
	        }
	        for (var key in selectedStatusFilters) {
	            if (selectedStatusFilters.hasOwnProperty(key)) {
	                if (!baseCollection.some(function (activityTimelineItem) {
	                    if (activityTimelineItem.activity) {
	                        return activityTimelineItem.activity.status.text === key;
	                    }
	                    return false;
	                })) {
	                    selectedStatusFilters[key] = 'false';
	                }
	            }
	        }
	        for (var key in selectedOpporturnityFilters) {
	            if (selectedOpporturnityFilters.hasOwnProperty(key)) {
	                if (!baseCollection.some(function (activityTimelineItem) {
	                    return activityTimelineItem.eventType === +key;
	                })) {
	                    selectedOpporturnityFilters[key] = 'false';
	                }
	            }
	        }
	    };
	    ActivityFilterService.prototype.buildUnorderedCounts = function (activityTimelineItem, unorderedTypeCountMap, unorderedStatusCountMap, unorderedAssignedToCountMap, unorderedOpportuntiyCountMap) {
	        if (activityTimelineItem) {
	            if (activityTimelineItem.activity) {
	                this.countActivities(activityTimelineItem.activity, unorderedTypeCountMap, unorderedAssignedToCountMap, unorderedStatusCountMap);
	            }
	            else if (activityTimelineItem.workNote) {
	                this.countWorknotes(unorderedTypeCountMap);
	            }
	            this.countActivityTimelineOpprtunities(activityTimelineItem, unorderedOpportuntiyCountMap);
	        }
	    };
	    ActivityFilterService.prototype.countActivities = function (activity, unorderedTypeCountMap, unorderedAssignedToCountMap, unorderedStatusCountMap) {
	        if (unorderedTypeCountMap[activity.type.text]) {
	            unorderedTypeCountMap[activity.type.text] = ++unorderedTypeCountMap[activity.type.text];
	        }
	        else if (activity.type.text != null) {
	            unorderedTypeCountMap[activity.type.text] = 1;
	        }
	        if (unorderedStatusCountMap[activity.status.text]) {
	            unorderedStatusCountMap[activity.status.text] = ++unorderedStatusCountMap[activity.status.text];
	        }
	        else if (activity.status.text != null) {
	            unorderedStatusCountMap[activity.status.text] = 1;
	        }
	        if (unorderedAssignedToCountMap[activity.assignedTo.text]) {
	            unorderedAssignedToCountMap[activity.assignedTo.text] = ++unorderedAssignedToCountMap[activity.assignedTo.text];
	        }
	        else if (activity.assignedTo.text != null) {
	            unorderedAssignedToCountMap[activity.assignedTo.text] = 1;
	        }
	    };
	    ActivityFilterService.prototype.countWorknotes = function (unorderedTypeCountMap) {
	        if (unorderedTypeCountMap[this.worknoteText]) {
	            unorderedTypeCountMap[this.worknoteText] = ++unorderedTypeCountMap[this.worknoteText];
	        }
	        else {
	            unorderedTypeCountMap[this.worknoteText] = 1;
	        }
	    };
	    ActivityFilterService.prototype.countActivityTimelineOpprtunities = function (activityTimelineItem, unorderedOpportunityCountMap) {
	        if (unorderedOpportunityCountMap[activityTimelineItem.eventType]) {
	            unorderedOpportunityCountMap[activityTimelineItem.eventType] = ++unorderedOpportunityCountMap[activityTimelineItem.eventType];
	        }
	        else {
	            unorderedOpportunityCountMap[activityTimelineItem.eventType] = 1;
	        }
	    };
	    ActivityFilterService.prototype.sortCountMaps = function (unorderedTypeCountMap, orderedTypeCountMap, unorderedStatusCountMap, orderedStatusCountMap, unorderedAssignedToCountMap, orderedAssignedToCountMap, unorderedOpportunityCountMap, orderedOpportuntyCountMap) {
	        Object.keys(unorderedTypeCountMap).sort().forEach(function (key) {
	            orderedTypeCountMap[key] = unorderedTypeCountMap[key];
	        });
	        Object.keys(unorderedStatusCountMap).sort().forEach(function (key) {
	            orderedStatusCountMap[key] = unorderedStatusCountMap[key];
	        });
	        Object.keys(unorderedAssignedToCountMap).sort().forEach(function (key) {
	            orderedAssignedToCountMap[key] = unorderedAssignedToCountMap[key];
	        });
	        Object.keys(unorderedOpportunityCountMap).sort().forEach(function (key) {
	            orderedOpportuntyCountMap[key] = unorderedOpportunityCountMap[key];
	        });
	    };
	    ActivityFilterService.prototype.countSelectedFilters = function (filters) {
	        var count = 0;
	        for (var key in filters) {
	            if (filters.hasOwnProperty(key) && !(filters[key] === 'false')) {
	                if (filters[key]) {
	                    count++;
	                }
	            }
	        }
	        if (count == 0) {
	            return "";
	        }
	        else {
	            return "(" + count + ")";
	        }
	    };
	    ActivityFilterService.$inject = [
	        'TranslationCache'
	    ];
	    return ActivityFilterService;
	}());
	exports.ActivityFilterService = ActivityFilterService;


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var ServiceWrapper = __webpack_require__(239);
	module.exports = angular.module("crm.api", [])
	    .service("ServiceWrapper", ServiceWrapper);


/***/ },
/* 239 */
/***/ function(module, exports) {

	"use strict";
	var ServiceWrapper = (function () {
	    function ServiceWrapper(RedirectService, DataApiSettings) {
	        var _this = this;
	        this.RedirectService = RedirectService;
	        this.DataApiSettings = DataApiSettings;
	        this.errorCodes = [
	            400,
	            401,
	            404,
	            500,
	            504
	        ];
	        this.apiErrorHandler = function (error) {
	            if (error.status == 401) {
	                _this.RedirectService.redirect(_this.DataApiSettings.baseUrl);
	            }
	            throw error;
	        };
	    }
	    ServiceWrapper.prototype.get = function (service, data) {
	        var _this = this;
	        if (data) {
	            return service.get(data).then(function (data) {
	                if (_this.isErrorReturned(data) ||
	                    (data.length === 1 && _this.isErrorReturned(data[0]))) {
	                    var error = {
	                        status: 404
	                    };
	                    throw error;
	                }
	                return data;
	            }).catch(function (e) {
	                return _this.apiErrorHandler(e);
	            });
	        }
	        else {
	            return service.get().then(function (data) {
	                return data;
	            }).catch(this.apiErrorHandler);
	        }
	    };
	    ServiceWrapper.prototype.isErrorReturned = function (data) {
	        if (!data)
	            return true;
	        if (!data.status)
	            return false;
	        return this.errorCodes.indexOf(data.status) >= 0;
	    };
	    ServiceWrapper.prototype.post = function (service, data) {
	        return service.post(data).then(function (data) {
	            return data;
	        }).catch(this.apiErrorHandler);
	    };
	    ServiceWrapper.prototype.put = function (service, data) {
	        return service.put(data).then(function (data) {
	            return data;
	        }).catch(this.apiErrorHandler);
	    };
	    ServiceWrapper.prototype.delete = function (service, data) {
	        return service.delete(data).then(function (data) {
	            return data;
	        }).catch(this.apiErrorHandler);
	    };
	    ServiceWrapper.prototype.save = function (service, data) {
	        return service.save(data).then(function (data) {
	            return data;
	        }).catch(this.apiErrorHandler);
	    };
	    ServiceWrapper.prototype.callServiceMethod = function (serviceMethod, data) {
	        return serviceMethod(data).then(function (data) {
	            return data;
	        }).catch(this.apiErrorHandler);
	    };
	    ServiceWrapper.$inject = [
	        'RedirectService',
	        'DataApiSettings'
	    ];
	    return ServiceWrapper;
	}());
	module.exports = ServiceWrapper;


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	//services
	var primaryPointOfContactService = __webpack_require__(241);
	var dirtyFormWarningService = __webpack_require__(242);
	var classicWindowService = __webpack_require__(243);
	module.exports = angular.module('crm.services.utils', [])
	    .service("primaryPointOfContactService", primaryPointOfContactService)
	    .service("dirtyFormWarningService", dirtyFormWarningService)
	    .service('classicWindowService', classicWindowService);


/***/ },
/* 241 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var PrimaryPointOfContactService = (function () {
	    function PrimaryPointOfContactService(PhoneNumberLabelService) {
	        this.PhoneNumberLabelService = PhoneNumberLabelService;
	    }
	    PrimaryPointOfContactService.prototype.getNumber = function (contact) {
	        var contactPoints = contact.contactPoints.getFirstPrioritizedContactPoint();
	        if (contactPoints) {
	            return contactPoints.getValue();
	        }
	        else {
	            return "";
	        }
	    };
	    PrimaryPointOfContactService.prototype.getTypeTranslation = function (contact) {
	        return this.PhoneNumberLabelService.getLabel(contact.contactPoints.getFirstPrioritizedContactPoint(), true);
	    };
	    PrimaryPointOfContactService.$inject = [
	        'PhoneNumberLabelService'
	    ];
	    return PrimaryPointOfContactService;
	}());
	module.exports = PrimaryPointOfContactService;


/***/ },
/* 242 */
/***/ function(module, exports) {

	/// <reference path="../../../typings/index.d.ts" />
	"use strict";
	var DirtyFormWarningService = (function () {
	    function DirtyFormWarningService($rootScope, $state, modalService, TranslationCache) {
	        this.$rootScope = $rootScope;
	        this.$state = $state;
	        this.modalService = modalService;
	        this.TranslationCache = TranslationCache;
	        this._prevented = false;
	    }
	    Object.defineProperty(DirtyFormWarningService.prototype, "prevented", {
	        get: function () { return this._prevented; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    //WARNING, this will only work for one form per page. This should be extended in the future if it is needed multiple times on the same page.
	    DirtyFormWarningService.prototype.register = function (preventStateChange, onPreventStateChange, onContinueStateChange) {
	        this.preventStateChange = preventStateChange;
	        this.onPreventStateChange = onPreventStateChange;
	        this.onContinueStateChange = onContinueStateChange;
	        this._prevented = false;
	        this.listenForStateChange();
	    };
	    DirtyFormWarningService.prototype.deregister = function () {
	        this._prevented = false;
	        this.preventStateChange = undefined;
	        this.onPreventStateChange = undefined;
	        this.onContinueStateChange = undefined;
	        if (this.deregisterEventListener) {
	            this.deregisterEventListener();
	            this.deregisterEventListener = undefined;
	        }
	        if (this.deregisterSuccessListener) {
	            this.deregisterSuccessListener();
	            this.deregisterSuccessListener = undefined;
	        }
	    };
	    DirtyFormWarningService.prototype.showModal = function () {
	        //This method should generally not be used; only when canceling a form does not trigger an actual state change
	        return this.modalService.openModal(this.TranslationCache.get('crm.dirtyForm.MODAL_PROMPT'), this.TranslationCache.get('crm.dirtyForm.MODAL_TITLE'), this.TranslationCache.get('crm.dirtyForm.MODAL_ACCEPT'), this.TranslationCache.get('crm.dirtyForm.MODAL_DECLINE'));
	    };
	    DirtyFormWarningService.prototype.listenForStateChange = function () {
	        var self = this;
	        this.deregisterEventListener = this.$rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
	            if (!self.preventStateChange) {
	                self.deregister();
	                return;
	            }
	            if (self.preventStateChange()) {
	                event.preventDefault();
	                self._prevented = true;
	                if (self.onPreventStateChange) {
	                    self.onPreventStateChange();
	                }
	                self.showModal().then(function (modalInstance) {
	                    modalInstance.dismiss();
	                    self.deregister();
	                    self.$state.go(toState.name, toParams);
	                })
	                    .catch(function (modalInstance) {
	                    modalInstance.dismiss();
	                    if (self.onContinueStateChange) {
	                        self.onContinueStateChange();
	                    }
	                });
	            }
	        });
	        this.deregisterSuccessListener = this.$rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
	            self.deregister();
	        });
	    };
	    DirtyFormWarningService.$inject = ['$rootScope', '$state', 'modalService', 'TranslationCache'];
	    return DirtyFormWarningService;
	}());
	module.exports = DirtyFormWarningService;


/***/ },
/* 243 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var ClassicWindowService = (function () {
	    function ClassicWindowService($window, AppSettings) {
	        this.$window = $window;
	        this.AppSettings = AppSettings;
	        this.classicBaseUrl = AppSettings.globalUrl;
	    }
	    ClassicWindowService.prototype.open = function (path, params, width, height) {
	        if (width === void 0) { width = '1000'; }
	        if (height === void 0) { height = '700'; }
	        var url = this.classicBaseUrl + path + '?';
	        _.mapObject(params, function (value, key) {
	            url += key + '=' + value + '&';
	        });
	        url = url.slice(0, -1);
	        this.$window.open(url, '_blank', 'width=' + width + ', height=' + height);
	    };
	    ClassicWindowService.$inject = [
	        '$window',
	        'AppSettings'
	    ];
	    return ClassicWindowService;
	}());
	module.exports = ClassicWindowService;


/***/ },
/* 244 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var SalesRecapModalService = (function () {
	    function SalesRecapModalService($q, modalService, salesOpportunityRecapApiService, eventManagerService, translationCache, crmConstants, permissionService) {
	        this.$q = $q;
	        this.modalService = modalService;
	        this.salesOpportunityRecapApiService = salesOpportunityRecapApiService;
	        this.eventManagerService = eventManagerService;
	        this.translationCache = translationCache;
	        this.crmConstants = crmConstants;
	        this.permissionService = permissionService;
	        this.recapModalTemplateUrl = 'app/salesOpportunity/details/salesRecapBanner/salesRecapBannerModalTemplate.html';
	    }
	    SalesRecapModalService.prototype.openSalesRecapModal = function (contactId, salesOpportunityId) {
	        var _this = this;
	        this.permissionService.getPermission('RecapDeal')
	            .then(function (permission) {
	            if (permission.view) {
	                _this.showModal(contactId, salesOpportunityId);
	            }
	        })
	            .catch(function (error) {
	            _this.eventManagerService.publish(_this.crmConstants.SALES_OPPORTUNITY.RECAP.UNKNOWN_ERROR_OCCURRED, {
	                alertType: 'error',
	                message: _this.translationCache.get('crm.salesOpportunity.recap.UNKNOWN_ERROR_OCCURRED')
	            });
	        });
	    };
	    SalesRecapModalService.prototype.showModal = function (contactId, salesOpportunityId) {
	        this.modalService.openModalViaTemplateUrlPromise(this.recapModalTemplateUrl, {
	            contactId: contactId,
	            salesOpportunityId: salesOpportunityId
	        }, function (data) {
	            data.modalInstance.close();
	        })
	            .catch(function (data) {
	            data.modalInstance.close();
	        });
	    };
	    SalesRecapModalService.$inject = [
	        '$q',
	        'modalService',
	        'salesOpportunityRecapApiService',
	        'eventManagerService',
	        'TranslationCache',
	        'CrmConstants',
	        'permissionService'
	    ];
	    return SalesRecapModalService;
	}());
	exports.SalesRecapModalService = SalesRecapModalService;


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var crmAddress = __webpack_require__(246);
	var crmGender = __webpack_require__(256);
	var crmInlineEditing = __webpack_require__(258);
	var crmSocialMediaContact = __webpack_require__(331);
	var crmInputDate = __webpack_require__(16);
	var crmIntlPhone = __webpack_require__(333);
	var crmUiAlert = __webpack_require__(335);
	var crmTabValid = __webpack_require__(339);
	var crmSsnInput = __webpack_require__(341);
	var crmCard = __webpack_require__(343);
	var phoneNumberViewModule = __webpack_require__(354);
	var crmMasterDetailExpander = __webpack_require__(357);
	var crmTwoButton = __webpack_require__(360);
	var dynamicTranslationModule = __webpack_require__(363);
	var radioButtonModule = __webpack_require__(365);
	var checklistItemModule = __webpack_require__(368);
	var verticalExpanderModule = __webpack_require__(371);
	var duplicateBanner = __webpack_require__(376);
	var formatters = __webpack_require__(379);
	var pingCollectionModal = __webpack_require__(383);
	var runningMan = __webpack_require__(386);
	var module_1 = __webpack_require__(388);
	module.exports = angular.module("crm.ui", [
	    crmAddress.name,
	    crmGender.name,
	    crmInlineEditing.name,
	    crmSocialMediaContact.name,
	    crmInputDate.name,
	    crmIntlPhone.name,
	    crmUiAlert.name,
	    crmTabValid.name,
	    crmSsnInput.name,
	    module_1.DateModule.name,
	    crmCard.name,
	    phoneNumberViewModule.name,
	    crmMasterDetailExpander.name,
	    crmTwoButton.name,
	    dynamicTranslationModule.name,
	    radioButtonModule.name,
	    checklistItemModule.name,
	    verticalExpanderModule.name,
	    duplicateBanner.name,
	    formatters.name,
	    pingCollectionModal.name,
	    runningMan.name
	]);


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var addressFormatByCountry = __webpack_require__(247);
	var stateProvinceListByCountry = __webpack_require__(248);
	var angular = __webpack_require__(2);
	var crmBrowserLocale = __webpack_require__(249);
	var addressDirective = __webpack_require__(254);
	var addressController = __webpack_require__(255);
	module.exports = angular.module("crm.address", [crmBrowserLocale.name])
	    .directive("crmAddress", addressDirective)
	    .controller("crmAddressController", addressController)
	    .value("countries", addressFormatByCountry)
	    .value("statesProvinces", stateProvinceListByCountry);


/***/ },
/* 247 */
/***/ function(module, exports) {

	module.exports = {
		"Canada": {
			"fields": {
				"address1": {
					"show": true,
					"required": true
				},
				"address2": {
					"show": true,
					"required": false
				},
				"address3": {
					"show": false,
					"required": false
				},
				"city": {
					"show": true,
					"required": true
				},
				"county": {
					"show": false,
					"required": false
				},
				"state": {
					"show": true,
					"required": true
				},
				"postal": {
					"show": true,
					"required": true,
					"length": 6
				}
			},
			"lookup": "canada"
		},
		"Australia": {
			"fields": {
				"address1": {
					"show": true,
					"required": true
				},
				"address2": {
					"show": true,
					"required": false
				},
				"address3": {
					"show": false,
					"required": false
				},
				"county": {
					"show": false,
					"required": false
				},
				"city": {
					"show": true,
					"required": true
				},
				"state": {
					"show": true,
					"required": true
				},
				"postal": {
					"show": true,
					"required": true,
					"length": 4
				}
			},
			"lookup": "australia"
		},
		"USA": {
			"fields": {
				"address1": {
					"show": true,
					"required": true
				},
				"address2": {
					"show": true,
					"required": false
				},
				"address3": {
					"show": false,
					"required": false
				},
				"county": {
					"show": true,
					"required": false
				},
				"city": {
					"show": true,
					"required": true
				},
				"state": {
					"show": true,
					"required": true
				},
				"postal": {
					"show": true,
					"required": true,
					"length": 5
				}
			},
			"lookup": "usa"
		},
		"New Zealand": {
			"fields": {
				"address1": {
					"show": true,
					"required": true
				},
				"address2": {
					"show": true,
					"required": false
				},
				"address3": {
					"show": false,
					"required": false
				},
				"county": {
					"show": false,
					"required": false
				},
				"city": {
					"show": true,
					"required": true
				},
				"state": {
					"show": false,
					"required": false
				},
				"postal": {
					"show": true,
					"required": true,
					"length": 4
				}
			},
			"lookup": "new_zealand"
		}
	};

/***/ },
/* 248 */
/***/ function(module, exports) {

	module.exports = {
		"Australia": [
			{
				"abbr": "ACT",
				"name": "Australian Capital Territory"
			},
			{
				"abbr": "NSW",
				"name": "New South Wales"
			},
			{
				"abbr": "NT",
				"name": "Northern Territory"
			},
			{
				"abbr": "QLD",
				"name": "Queensland"
			},
			{
				"abbr": "SA",
				"name": "South Australia"
			},
			{
				"abbr": "TAS",
				"name": "Tasmania"
			},
			{
				"abbr": "VIC",
				"name": "Victoria"
			},
			{
				"abbr": "WA",
				"name": "Western Australia"
			}
		],
		"USA": [
			{
				"abbr": "AL",
				"name": "Alabama"
			},
			{
				"abbr": "AK",
				"name": "Alaska"
			},
			{
				"abbr": "AZ",
				"name": "Arizona"
			},
			{
				"abbr": "AR",
				"name": "Arkansas"
			},
			{
				"abbr": "CA",
				"name": "California"
			},
			{
				"abbr": "CO",
				"name": "Colorado"
			},
			{
				"abbr": "CT",
				"name": "Connecticut"
			},
			{
				"abbr": "DE",
				"name": "Delaware"
			},
			{
				"abbr": "FL",
				"name": "Florida"
			},
			{
				"abbr": "GA",
				"name": "Georgia"
			},
			{
				"abbr": "HI",
				"name": "Hawaii"
			},
			{
				"abbr": "ID",
				"name": "Idaho"
			},
			{
				"abbr": "IL",
				"name": "Illinois"
			},
			{
				"abbr": "IN",
				"name": "Indiana"
			},
			{
				"abbr": "IA",
				"name": "Iowa"
			},
			{
				"abbr": "KS",
				"name": "Kansas"
			},
			{
				"abbr": "KY",
				"name": "Kentucky"
			},
			{
				"abbr": "LA",
				"name": "Louisiana"
			},
			{
				"abbr": "ME",
				"name": "Maine"
			},
			{
				"abbr": "MD",
				"name": "Maryland"
			},
			{
				"abbr": "MA",
				"name": "Massachusetts"
			},
			{
				"abbr": "MI",
				"name": "Michigan"
			},
			{
				"abbr": "MN",
				"name": "Minnesota"
			},
			{
				"abbr": "MS",
				"name": "Mississippi"
			},
			{
				"abbr": "MO",
				"name": "Missouri"
			},
			{
				"abbr": "MT",
				"name": "Montana"
			},
			{
				"abbr": "NE",
				"name": "Nebraska"
			},
			{
				"abbr": "NV",
				"name": "Nevada"
			},
			{
				"abbr": "NH",
				"name": "New Hampshire"
			},
			{
				"abbr": "NJ",
				"name": "New Jersey"
			},
			{
				"abbr": "NM",
				"name": "New Mexico"
			},
			{
				"abbr": "NY",
				"name": "New York"
			},
			{
				"abbr": "NC",
				"name": "North Carolina"
			},
			{
				"abbr": "ND",
				"name": "North Dakota"
			},
			{
				"abbr": "OH",
				"name": "Ohio"
			},
			{
				"abbr": "OK",
				"name": "Oklahoma"
			},
			{
				"abbr": "OR",
				"name": "Oregon"
			},
			{
				"abbr": "PA",
				"name": "Pennsylvania"
			},
			{
				"abbr": "RI",
				"name": "Rhode Island"
			},
			{
				"abbr": "SC",
				"name": "South Carolina"
			},
			{
				"abbr": "SD",
				"name": "South Dakota"
			},
			{
				"abbr": "TN",
				"name": "Tennessee"
			},
			{
				"abbr": "TX",
				"name": "Texas"
			},
			{
				"abbr": "UT",
				"name": "Utah"
			},
			{
				"abbr": "VT",
				"name": "Vermont"
			},
			{
				"abbr": "VA",
				"name": "Virginia"
			},
			{
				"abbr": "WA",
				"name": "Washington"
			},
			{
				"abbr": "WV",
				"name": "West Virginia"
			},
			{
				"abbr": "WI",
				"name": "Wisconsin"
			},
			{
				"abbr": "WY",
				"name": "Wyoming"
			}
		],
		"Canada": [
			{
				"abbr": "AB",
				"name": "Alberta"
			},
			{
				"abbr": "BC",
				"name": "British Columbia"
			},
			{
				"abbr": "MB",
				"name": "Manitoba"
			},
			{
				"abbr": "NB",
				"name": "New Brunswick"
			},
			{
				"abbr": "NL",
				"name": "New Foundland"
			},
			{
				"abbr": "NT",
				"name": "Northwest Territories"
			},
			{
				"abbr": "NS",
				"name": "Nova Scotia"
			},
			{
				"abbr": "NU",
				"name": "Nunavut"
			},
			{
				"abbr": "ON",
				"name": "Ontario"
			},
			{
				"abbr": "PE",
				"name": "Prince Edward Island"
			},
			{
				"abbr": "QC",
				"name": "Quebec"
			},
			{
				"abbr": "SK",
				"name": "Saskatchewan"
			},
			{
				"abbr": "YT",
				"name": "Yukon Territories"
			}
		]
	};

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var browserLocaleService_1 = __webpack_require__(250);
	var ISO639_1 = __webpack_require__(251);
	var ISO639_2 = __webpack_require__(252);
	var ISO3166_1 = __webpack_require__(253);
	module.exports = angular.module("crm.browserLocale", [])
	    .service("crmBrowserLocaleService", browserLocaleService_1.BrowserLocaleService)
	    .value("ISO639_1", ISO639_1)
	    .value("ISO639_2", ISO639_2)
	    .value("ISO3166_1", ISO3166_1);


/***/ },
/* 250 */
/***/ function(module, exports) {

	"use strict";
	var BrowserLocaleService = (function () {
	    function BrowserLocaleService($rootScope, ISO639_1, ISO639_2, ISO3166_1) {
	        this.$rootScope = $rootScope;
	        this.ISO639_1 = ISO639_1;
	        this.ISO639_2 = ISO639_2;
	        this.ISO3166_1 = ISO3166_1;
	    }
	    BrowserLocaleService.prototype.getLocale = function () {
	        var languages = window.navigator;
	        if (languages) {
	            if (typeof languages === 'string' || languages instanceof String) {
	                return languages;
	            }
	            else {
	                return languages[0] || window.navigator.language;
	            }
	        }
	        else {
	            return window.navigator.userLanguage || window.navigator.language;
	        }
	    };
	    BrowserLocaleService.prototype.localeCodeToEnglish = function (loc) {
	        if (typeof loc !== 'string')
	            throw new TypeError('Input must be string');
	        var parts = loc.split('-');
	        if (parts.length > 2)
	            throw new SyntaxError('Unexpected number of segments ' + parts.length);
	        if (parts.length > 1)
	            return this.ISO3166_1[parts[1]];
	        if (parts.length > 0)
	            return this.ISO639_1[parts[0]] || this.ISO639_2[parts[0]] || this.ISO3166_1[parts[0]] || parts[0];
	        return '';
	    };
	    BrowserLocaleService.prototype.getCountryLocale = function (locale) {
	        var country = this.getCountry(locale);
	        if (country === "USA")
	            return country;
	        return this.toTitleCase(country);
	    };
	    BrowserLocaleService.prototype.getCountry = function (locale) {
	        locale = locale || this.getLocale();
	        return this.localeCodeToEnglish(locale);
	    };
	    BrowserLocaleService.prototype.toTitleCase = function (str) {
	        if (str) {
	            return str.replace(/\w\S*/g, function (txt) {
	                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
	            });
	        }
	        return '';
	    };
	    BrowserLocaleService.$inject = ["$rootScope", 'ISO639_1', 'ISO639_2', 'ISO3166_1'];
	    return BrowserLocaleService;
	}());
	exports.BrowserLocaleService = BrowserLocaleService;


/***/ },
/* 251 */
/***/ function(module, exports) {

	module.exports = {
		"ab": "Abkhazian",
		"aa": "Afar",
		"af": "Afrikaans",
		"ak": "Akan",
		"sq": "Albanian",
		"am": "Amharic",
		"ar": "Arabic",
		"an": "Aragonese",
		"hy": "Armenian",
		"as": "Assamese",
		"av": "Avaric",
		"ae": "Avestan",
		"ay": "Aymara",
		"az": "Azerbaijani",
		"bm": "Bambara",
		"ba": "Bashkir",
		"eu": "Basque",
		"be": "Belarusian",
		"bn": "Bengali",
		"bh": "Bihari languages",
		"bi": "Bislama",
		"nb": "Norwegian Bokmål",
		"bs": "Bosnian",
		"br": "Breton",
		"bg": "Bulgarian",
		"my": "Burmese",
		"es": "Spanish",
		"ca": "Valencian",
		"km": "Central Khmer",
		"ch": "Chamorro",
		"ce": "Chechen",
		"ny": "Nyanja",
		"zh": "Chinese",
		"za": "Zhuang",
		"cu": "Old Slavonic",
		"cv": "Chuvash",
		"kw": "Cornish",
		"co": "Corsican",
		"cr": "Cree",
		"hr": "Croatian",
		"cs": "Czech",
		"da": "Danish",
		"dv": "Maldivian",
		"nl": "Flemish",
		"dz": "Dzongkha",
		"en": "English",
		"eo": "Esperanto",
		"et": "Estonian",
		"ee": "Ewe",
		"fo": "Faroese",
		"fj": "Fijian",
		"fi": "Finnish",
		"fr": "French",
		"ff": "Fulah",
		"gd": "Scottish Gaelic",
		"gl": "Galician",
		"lg": "Ganda",
		"ka": "Georgian",
		"de": "German",
		"ki": "Kikuyu",
		"el": "Greek, Modern (1453-)",
		"kl": "Kalaallisut",
		"gn": "Guarani",
		"gu": "Gujarati",
		"ht": "Haitian Creole",
		"ha": "Hausa",
		"he": "Hebrew",
		"hz": "Herero",
		"hi": "Hindi",
		"ho": "Hiri Motu",
		"hu": "Hungarian",
		"is": "Icelandic",
		"io": "Ido",
		"ig": "Igbo",
		"id": "Indonesian",
		"ia": "Interlingua (International Auxiliary Language Association)",
		"ie": "Occidental",
		"iu": "Inuktitut",
		"ik": "Inupiaq",
		"ga": "Irish",
		"it": "Italian",
		"ja": "Japanese",
		"jv": "Javanese",
		"kn": "Kannada",
		"kr": "Kanuri",
		"ks": "Kashmiri",
		"kk": "Kazakh",
		"rw": "Kinyarwanda",
		"ky": "Kyrgyz",
		"kv": "Komi",
		"kg": "Kongo",
		"ko": "Korean",
		"kj": "Kwanyama",
		"ku": "Kurdish",
		"lo": "Lao",
		"la": "Latin",
		"lv": "Latvian",
		"lb": "Luxembourgish",
		"li": "Limburgish",
		"ln": "Lingala",
		"lt": "Lithuanian",
		"lu": "Luba-Katanga",
		"mk": "Macedonian",
		"mg": "Malagasy",
		"ms": "Malay",
		"ml": "Malayalam",
		"mt": "Maltese",
		"gv": "Manx",
		"mi": "Maori",
		"mr": "Marathi",
		"mh": "Marshallese",
		"ro": "Romanian",
		"mn": "Mongolian",
		"na": "Nauru",
		"nv": "Navajo",
		"nd": "North Ndebele",
		"nr": "South Ndebele",
		"ng": "Ndonga",
		"ne": "Nepali",
		"se": "Northern Sami",
		"no": "Norwegian",
		"nn": "Nynorsk, Norwegian",
		"ii": "Sichuan Yi",
		"oc": "Occitan (post 1500)",
		"oj": "Ojibwa",
		"or": "Oriya",
		"om": "Oromo",
		"os": "Ossetic",
		"pi": "Pali",
		"pa": "Punjabi",
		"ps": "Pushto",
		"fa": "Persian",
		"pl": "Polish",
		"pt": "Portuguese",
		"qu": "Quechua",
		"rm": "Romansh",
		"rn": "Rundi",
		"ru": "Russian",
		"sm": "Samoan",
		"sg": "Sango",
		"sa": "Sanskrit",
		"sc": "Sardinian",
		"sr": "Serbian",
		"sn": "Shona",
		"sd": "Sindhi",
		"si": "Sinhalese",
		"sk": "Slovak",
		"sl": "Slovenian",
		"so": "Somali",
		"st": "Sotho, Southern",
		"su": "Sundanese",
		"sw": "Swahili",
		"ss": "Swati",
		"sv": "Swedish",
		"tl": "Tagalog",
		"ty": "Tahitian",
		"tg": "Tajik",
		"ta": "Tamil",
		"tt": "Tatar",
		"te": "Telugu",
		"th": "Thai",
		"bo": "Tibetan",
		"ti": "Tigrinya",
		"to": "Tonga (Tonga Islands)",
		"ts": "Tsonga",
		"tn": "Tswana",
		"tr": "Turkish",
		"tk": "Turkmen",
		"tw": "Twi",
		"ug": "Uyghur",
		"uk": "Ukrainian",
		"ur": "Urdu",
		"uz": "Uzbek",
		"ve": "Venda",
		"vi": "Vietnamese",
		"vo": "Volapük",
		"wa": "Walloon",
		"cy": "Welsh",
		"fy": "Western Frisian",
		"wo": "Wolof",
		"xh": "Xhosa",
		"yi": "Yiddish",
		"yo": "Yoruba",
		"zu": "Zulu"
	};

/***/ },
/* 252 */
/***/ function(module, exports) {

	module.exports = {
		"abk": "Abkhazian",
		"ace": "Achinese",
		"ach": "Acoli",
		"ada": "Adangme",
		"ady": "Adyghe",
		"aar": "Afar",
		"afh": "Afrihili",
		"afr": "Afrikaans",
		"afa": "Afro-Asiatic languages",
		"ain": "Ainu",
		"aka": "Akan",
		"akk": "Akkadian",
		"alb": "Albanian",
		"sqi": "Albanian",
		"gsw": "Swiss German",
		"ale": "Aleut",
		"alg": "Algonquian languages",
		"tut": "Altaic languages",
		"amh": "Amharic",
		"anp": "Angika",
		"apa": "Apache languages",
		"ara": "Arabic",
		"arg": "Aragonese",
		"arp": "Arapaho",
		"arw": "Arawak",
		"arm": "Armenian",
		"hye": "Armenian",
		"rup": "Macedo-Romanian",
		"art": "Artificial languages",
		"asm": "Assamese",
		"ast": "Leonese",
		"ath": "Athapascan languages",
		"aus": "Australian languages",
		"map": "Austronesian languages",
		"ava": "Avaric",
		"ave": "Avestan",
		"awa": "Awadhi",
		"aym": "Aymara",
		"aze": "Azerbaijani",
		"ban": "Balinese",
		"bat": "Baltic languages",
		"bal": "Baluchi",
		"bam": "Bambara",
		"bai": "Bamileke languages",
		"bad": "Banda languages",
		"bnt": "Bantu languages",
		"bas": "Basa",
		"bak": "Bashkir",
		"baq": "Basque",
		"eus": "Basque",
		"btk": "Batak languages",
		"bej": "Beja",
		"bel": "Belarusian",
		"bem": "Bemba",
		"ben": "Bengali",
		"ber": "Berber languages",
		"bho": "Bhojpuri",
		"bih": "Bihari languages",
		"bik": "Bikol",
		"byn": "Blin",
		"bin": "Edo",
		"bis": "Bislama",
		"zbl": "Blissymbols",
		"nob": "Norwegian Bokmål",
		"bos": "Bosnian",
		"bra": "Braj",
		"bre": "Breton",
		"bug": "Buginese",
		"bul": "Bulgarian",
		"bua": "Buriat",
		"bur": "Burmese",
		"mya": "Burmese",
		"cad": "Caddo",
		"spa": "Spanish",
		"cat": "Valencian",
		"cau": "Caucasian languages",
		"ceb": "Cebuano",
		"cel": "Celtic languages",
		"cai": "Central American Indian languages",
		"khm": "Central Khmer",
		"chg": "Chagatai",
		"cmc": "Chamic languages",
		"cha": "Chamorro",
		"che": "Chechen",
		"chr": "Cherokee",
		"nya": "Nyanja",
		"chy": "Cheyenne",
		"chb": "Chibcha",
		"chi": "Chinese",
		"zho": "Chinese",
		"chn": "Chinook jargon",
		"chp": "Dene Suline",
		"cho": "Choctaw",
		"zha": "Zhuang",
		"chu": "Old Slavonic",
		"chk": "Chuukese",
		"chv": "Chuvash",
		"nwc": "Old Newari",
		"syc": "Classical Syriac",
		"rar": "Rarotongan",
		"cop": "Coptic",
		"cor": "Cornish",
		"cos": "Corsican",
		"cre": "Cree",
		"mus": "Creek",
		"crp": "Creoles and pidgins",
		"cpe": "Creoles and pidgins, English based",
		"cpf": "Creoles and pidgins, French-based",
		"cpp": "Creoles and pidgins, Portuguese-based",
		"crh": "Crimean Turkish",
		"hrv": "Croatian",
		"cus": "Cushitic languages",
		"cze": "Czech",
		"ces": "Czech",
		"dak": "Dakota",
		"dan": "Danish",
		"dar": "Dargwa",
		"del": "Delaware",
		"div": "Maldivian",
		"zza": "Zazaki",
		"din": "Dinka",
		"doi": "Dogri",
		"dgr": "Dogrib",
		"dra": "Dravidian languages",
		"dua": "Duala",
		"dut": "Flemish",
		"nld": "Flemish",
		"dum": "Dutch, Middle (ca.1050-1350)",
		"dyu": "Dyula",
		"dzo": "Dzongkha",
		"frs": "Eastern Frisian",
		"efi": "Efik",
		"egy": "Egyptian (Ancient)",
		"eka": "Ekajuk",
		"elx": "Elamite",
		"eng": "English",
		"enm": "English, Middle (1100-1500)",
		"ang": "English, Old (ca.450-1100)",
		"myv": "Erzya",
		"epo": "Esperanto",
		"est": "Estonian",
		"ewe": "Ewe",
		"ewo": "Ewondo",
		"fan": "Fang",
		"fat": "Fanti",
		"fao": "Faroese",
		"fij": "Fijian",
		"fil": "Pilipino",
		"fin": "Finnish",
		"fiu": "Finno-Ugrian languages",
		"fon": "Fon",
		"fre": "French",
		"fra": "French",
		"frm": "French, Middle (ca.1400-1600)",
		"fro": "French, Old (842-ca.1400)",
		"fur": "Friulian",
		"ful": "Fulah",
		"gaa": "Ga",
		"gla": "Scottish Gaelic",
		"car": "Galibi Carib",
		"glg": "Galician",
		"lug": "Ganda",
		"gay": "Gayo",
		"gba": "Gbaya",
		"gez": "Geez",
		"geo": "Georgian",
		"kat": "Georgian",
		"ger": "German",
		"deu": "German",
		"nds": "Saxon, Low",
		"gmh": "German, Middle High (ca.1050-1500)",
		"goh": "German, Old High (ca.750-1050)",
		"gem": "Germanic languages",
		"kik": "Kikuyu",
		"gil": "Gilbertese",
		"gon": "Gondi",
		"gor": "Gorontalo",
		"got": "Gothic",
		"grb": "Grebo",
		"grc": "Greek, Ancient (to 1453)",
		"gre": "Greek, Modern (1453-)",
		"ell": "Greek, Modern (1453-)",
		"kal": "Kalaallisut",
		"grn": "Guarani",
		"guj": "Gujarati",
		"gwi": "Gwich'in",
		"hai": "Haida",
		"hat": "Haitian Creole",
		"hau": "Hausa",
		"haw": "Hawaiian",
		"heb": "Hebrew",
		"her": "Herero",
		"hil": "Hiligaynon",
		"him": "Western Pahari languages",
		"hin": "Hindi",
		"hmo": "Hiri Motu",
		"hit": "Hittite",
		"hmn": "Mong",
		"hun": "Hungarian",
		"hup": "Hupa",
		"iba": "Iban",
		"ice": "Icelandic",
		"isl": "Icelandic",
		"ido": "Ido",
		"ibo": "Igbo",
		"ijo": "Ijo languages",
		"ilo": "Iloko",
		"arc": "Official Aramaic (700-300 BCE)",
		"smn": "Inari Sami",
		"inc": "Indic languages",
		"ine": "Indo-European languages",
		"ind": "Indonesian",
		"inh": "Ingush",
		"ina": "Interlingua (International Auxiliary Language Association)",
		"ile": "Occidental",
		"iku": "Inuktitut",
		"ipk": "Inupiaq",
		"ira": "Iranian languages",
		"gle": "Irish",
		"mga": "Irish, Middle (900-1200)",
		"sga": "Irish, Old (to 900)",
		"iro": "Iroquoian languages",
		"ita": "Italian",
		"jpn": "Japanese",
		"jav": "Javanese",
		"kac": "Kachin",
		"jrb": "Judeo-Arabic",
		"jpr": "Judeo-Persian",
		"kbd": "Kabardian",
		"kab": "Kabyle",
		"xal": "Oirat",
		"kam": "Kamba",
		"kan": "Kannada",
		"kau": "Kanuri",
		"pam": "Pampanga",
		"kaa": "Kara-Kalpak",
		"krc": "Karachay-Balkar",
		"krl": "Karelian",
		"kar": "Karen languages",
		"kas": "Kashmiri",
		"csb": "Kashubian",
		"kaw": "Kawi",
		"kaz": "Kazakh",
		"kha": "Khasi",
		"khi": "Khoisan languages",
		"kho": "Sakan",
		"kmb": "Kimbundu",
		"kin": "Kinyarwanda",
		"kir": "Kyrgyz",
		"tlh": "tlhIngan-Hol",
		"kom": "Komi",
		"kon": "Kongo",
		"kok": "Konkani",
		"kor": "Korean",
		"kos": "Kosraean",
		"kpe": "Kpelle",
		"kro": "Kru languages",
		"kua": "Kwanyama",
		"kum": "Kumyk",
		"kur": "Kurdish",
		"kru": "Kurukh",
		"kut": "Kutenai",
		"lad": "Ladino",
		"lah": "Lahnda",
		"lam": "Lamba",
		"day": "Land Dayak languages",
		"lao": "Lao",
		"lat": "Latin",
		"lav": "Latvian",
		"ltz": "Luxembourgish",
		"lez": "Lezghian",
		"lim": "Limburgish",
		"lin": "Lingala",
		"lit": "Lithuanian",
		"jbo": "Lojban",
		"dsb": "Lower Sorbian",
		"loz": "Lozi",
		"lub": "Luba-Katanga",
		"lua": "Luba-Lulua",
		"lui": "Luiseno",
		"smj": "Lule Sami",
		"lun": "Lunda",
		"luo": "Luo (Kenya and Tanzania)",
		"lus": "Lushai",
		"mac": "Macedonian",
		"mkd": "Macedonian",
		"mad": "Madurese",
		"mag": "Magahi",
		"mai": "Maithili",
		"mak": "Makasar",
		"mlg": "Malagasy",
		"may": "Malay",
		"msa": "Malay",
		"mal": "Malayalam",
		"mlt": "Maltese",
		"mnc": "Manchu",
		"mdr": "Mandar",
		"man": "Mandingo",
		"mni": "Manipuri",
		"mno": "Manobo languages",
		"glv": "Manx",
		"mao": "Maori",
		"mri": "Maori",
		"arn": "Mapudungun",
		"mar": "Marathi",
		"chm": "Mari",
		"mah": "Marshallese",
		"mwr": "Marwari",
		"mas": "Masai",
		"myn": "Mayan languages",
		"men": "Mende",
		"mic": "Micmac",
		"min": "Minangkabau",
		"mwl": "Mirandese",
		"moh": "Mohawk",
		"mdf": "Moksha",
		"rum": "Romanian",
		"ron": "Romanian",
		"mkh": "Mon-Khmer languages",
		"lol": "Mongo",
		"mon": "Mongolian",
		"mos": "Mossi",
		"mul": "Multiple languages",
		"mun": "Munda languages",
		"nqo": "N'Ko",
		"nah": "Nahuatl languages",
		"nau": "Nauru",
		"nav": "Navajo",
		"nde": "North Ndebele",
		"nbl": "South Ndebele",
		"ndo": "Ndonga",
		"nap": "Neapolitan",
		"new": "Newari",
		"nep": "Nepali",
		"nia": "Nias",
		"nic": "Niger-Kordofanian languages",
		"ssa": "Nilo-Saharan languages",
		"niu": "Niuean",
		"zxx": "Not applicable",
		"nog": "Nogai",
		"non": "Norse, Old",
		"nai": "North American Indian languages",
		"frr": "Northern Frisian",
		"sme": "Northern Sami",
		"nso": "Sotho, Northern",
		"nor": "Norwegian",
		"nno": "Nynorsk, Norwegian",
		"nub": "Nubian languages",
		"iii": "Sichuan Yi",
		"nym": "Nyamwezi",
		"nyn": "Nyankole",
		"nyo": "Nyoro",
		"nzi": "Nzima",
		"oci": "Occitan (post 1500)",
		"pro": "Provençal, Old (to 1500)",
		"oji": "Ojibwa",
		"ori": "Oriya",
		"orm": "Oromo",
		"osa": "Osage",
		"oss": "Ossetic",
		"oto": "Otomian languages",
		"pal": "Pahlavi",
		"pau": "Palauan",
		"pli": "Pali",
		"pag": "Pangasinan",
		"pan": "Punjabi",
		"pap": "Papiamento",
		"paa": "Papuan languages",
		"pus": "Pushto",
		"per": "Persian",
		"fas": "Persian",
		"peo": "Persian, Old (ca.600-400 B.C.)",
		"phi": "Philippine languages",
		"phn": "Phoenician",
		"pon": "Pohnpeian",
		"pol": "Polish",
		"por": "Portuguese",
		"pra": "Prakrit languages",
		"que": "Quechua",
		"raj": "Rajasthani",
		"rap": "Rapanui",
		"qaa-qtz": "Reserved for local use",
		"roa": "Romance languages",
		"roh": "Romansh",
		"rom": "Romany",
		"run": "Rundi",
		"rus": "Russian",
		"sal": "Salishan languages",
		"sam": "Samaritan Aramaic",
		"smi": "Sami languages",
		"smo": "Samoan",
		"sad": "Sandawe",
		"sag": "Sango",
		"san": "Sanskrit",
		"sat": "Santali",
		"srd": "Sardinian",
		"sas": "Sasak",
		"sco": "Scots",
		"sel": "Selkup",
		"sem": "Semitic languages",
		"srp": "Serbian",
		"srr": "Serer",
		"shn": "Shan",
		"sna": "Shona",
		"scn": "Sicilian",
		"sid": "Sidamo",
		"sgn": "Sign Languages",
		"bla": "Siksika",
		"snd": "Sindhi",
		"sin": "Sinhalese",
		"sit": "Sino-Tibetan languages",
		"sio": "Siouan languages",
		"sms": "Skolt Sami",
		"den": "Slave (Athapascan)",
		"sla": "Slavic languages",
		"slo": "Slovak",
		"slk": "Slovak",
		"slv": "Slovenian",
		"sog": "Sogdian",
		"som": "Somali",
		"son": "Songhai languages",
		"snk": "Soninke",
		"wen": "Sorbian languages",
		"sot": "Sotho, Southern",
		"sai": "South American Indian languages",
		"alt": "Southern Altai",
		"sma": "Southern Sami",
		"srn": "Sranan Tongo",
		"suk": "Sukuma",
		"sux": "Sumerian",
		"sun": "Sundanese",
		"sus": "Susu",
		"swa": "Swahili",
		"ssw": "Swati",
		"swe": "Swedish",
		"syr": "Syriac",
		"tgl": "Tagalog",
		"tah": "Tahitian",
		"tai": "Tai languages",
		"tgk": "Tajik",
		"tmh": "Tamashek",
		"tam": "Tamil",
		"tat": "Tatar",
		"tel": "Telugu",
		"ter": "Tereno",
		"tet": "Tetum",
		"tha": "Thai",
		"tib": "Tibetan",
		"bod": "Tibetan",
		"tig": "Tigre",
		"tir": "Tigrinya",
		"tem": "Timne",
		"tiv": "Tiv",
		"tli": "Tlingit",
		"tpi": "Tok Pisin",
		"tkl": "Tokelau",
		"tog": "Tonga (Nyasa)",
		"ton": "Tonga (Tonga Islands)",
		"tsi": "Tsimshian",
		"tso": "Tsonga",
		"tsn": "Tswana",
		"tum": "Tumbuka",
		"tup": "Tupi languages",
		"tur": "Turkish",
		"ota": "Turkish, Ottoman (1500-1928)",
		"tuk": "Turkmen",
		"tvl": "Tuvalu",
		"tyv": "Tuvinian",
		"twi": "Twi",
		"udm": "Udmurt",
		"uga": "Ugaritic",
		"uig": "Uyghur",
		"ukr": "Ukrainian",
		"umb": "Umbundu",
		"mis": "Uncoded languages",
		"und": "Undetermined",
		"hsb": "Upper Sorbian",
		"urd": "Urdu",
		"uzb": "Uzbek",
		"vai": "Vai",
		"ven": "Venda",
		"vie": "Vietnamese",
		"vol": "Volapük",
		"vot": "Votic",
		"wak": "Wakashan languages",
		"wln": "Walloon",
		"war": "Waray",
		"was": "Washo",
		"wel": "Welsh",
		"cym": "Welsh",
		"fry": "Western Frisian",
		"wal": "Wolaytta",
		"wol": "Wolof",
		"xho": "Xhosa",
		"sah": "Yakut",
		"yao": "Yao",
		"yap": "Yapese",
		"yid": "Yiddish",
		"yor": "Yoruba",
		"ypk": "Yupik languages",
		"znd": "Zande languages",
		"zap": "Zapotec",
		"zen": "Zenaga",
		"zul": "Zulu",
		"zun": "Zuni"
	};

/***/ },
/* 253 */
/***/ function(module, exports) {

	module.exports = {
		"AF": "AFGHANISTAN",
		"AX": "ÅLAND ISLANDS",
		"AL": "ALBANIA",
		"DZ": "ALGERIA",
		"AS": "AMERICAN SAMOA",
		"AD": "ANDORRA",
		"AO": "ANGOLA",
		"AI": "ANGUILLA",
		"AQ": "ANTARCTICA",
		"AG": "ANTIGUA AND BARBUDA",
		"AR": "ARGENTINA",
		"AM": "ARMENIA",
		"AW": "ARUBA",
		"AU": "AUSTRALIA",
		"AT": "AUSTRIA",
		"AZ": "AZERBAIJAN",
		"BS": "BAHAMAS",
		"BH": "BAHRAIN",
		"BD": "BANGLADESH",
		"BB": "BARBADOS",
		"BY": "BELARUS",
		"BE": "BELGIUM",
		"BZ": "BELIZE",
		"BJ": "BENIN",
		"BM": "BERMUDA",
		"BT": "BHUTAN",
		"BO": "BOLIVIA, PLURINATIONAL STATE OF",
		"BQ": "BONAIRE, SINT EUSTATIUS AND SABA",
		"BA": "BOSNIA AND HERZEGOVINA",
		"BW": "BOTSWANA",
		"BV": "BOUVET ISLAND",
		"BR": "BRAZIL",
		"IO": "BRITISH INDIAN OCEAN TERRITORY",
		"BN": "BRUNEI DARUSSALAM",
		"BG": "BULGARIA",
		"BF": "BURKINA FASO",
		"BI": "BURUNDI",
		"KH": "CAMBODIA",
		"CM": "CAMEROON",
		"CA": "CANADA",
		"CV": "CAPE VERDE",
		"KY": "CAYMAN ISLANDS",
		"CF": "CENTRAL AFRICAN REPUBLIC",
		"TD": "CHAD",
		"CL": "CHILE",
		"CN": "CHINA",
		"CX": "CHRISTMAS ISLAND",
		"CC": "COCOS (KEELING) ISLANDS",
		"CO": "COLOMBIA",
		"KM": "COMOROS",
		"CG": "CONGO",
		"CD": "CONGO, THE DEMOCRATIC REPUBLIC OF THE",
		"CK": "COOK ISLANDS",
		"CR": "COSTA RICA",
		"CI": "CÔTE D'IVOIRE",
		"HR": "CROATIA",
		"CU": "CUBA",
		"CW": "CURAÇAO",
		"CY": "CYPRUS",
		"CZ": "CZECH REPUBLIC",
		"DK": "DENMARK",
		"DJ": "DJIBOUTI",
		"DM": "DOMINICA",
		"DO": "DOMINICAN REPUBLIC",
		"EC": "ECUADOR",
		"EG": "EGYPT",
		"SV": "EL SALVADOR",
		"GQ": "EQUATORIAL GUINEA",
		"ER": "ERITREA",
		"EE": "ESTONIA",
		"ET": "ETHIOPIA",
		"FK": "FALKLAND ISLANDS (MALVINAS)",
		"FO": "FAROE ISLANDS",
		"FJ": "FIJI",
		"FI": "FINLAND",
		"FR": "FRANCE",
		"GF": "FRENCH GUIANA",
		"PF": "FRENCH POLYNESIA",
		"TF": "FRENCH SOUTHERN TERRITORIES",
		"GA": "GABON",
		"GM": "GAMBIA",
		"GE": "GEORGIA",
		"DE": "GERMANY",
		"GH": "GHANA",
		"GI": "GIBRALTAR",
		"GR": "GREECE",
		"GL": "GREENLAND",
		"GD": "GRENADA",
		"GP": "GUADELOUPE",
		"GU": "GUAM",
		"GT": "GUATEMALA",
		"GG": "GUERNSEY",
		"GN": "GUINEA",
		"GW": "GUINEA-BISSAU",
		"GY": "GUYANA",
		"HT": "HAITI",
		"HM": "HEARD ISLAND AND MCDONALD ISLANDS",
		"VA": "HOLY SEE (VATICAN CITY STATE)",
		"HN": "HONDURAS",
		"HK": "HONG KONG",
		"HU": "HUNGARY",
		"IS": "ICELAND",
		"IN": "INDIA",
		"ID": "INDONESIA",
		"IR": "IRAN, ISLAMIC REPUBLIC OF",
		"IQ": "IRAQ",
		"IE": "IRELAND",
		"IM": "ISLE OF MAN",
		"IL": "ISRAEL",
		"IT": "ITALY",
		"JM": "JAMAICA",
		"JP": "JAPAN",
		"JE": "JERSEY",
		"JO": "JORDAN",
		"KZ": "KAZAKHSTAN",
		"KE": "KENYA",
		"KI": "KIRIBATI",
		"KP": "KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF",
		"KR": "KOREA, REPUBLIC OF",
		"KW": "KUWAIT",
		"KG": "KYRGYZSTAN",
		"LA": "LAO PEOPLE'S DEMOCRATIC REPUBLIC",
		"LV": "LATVIA",
		"LB": "LEBANON",
		"LS": "LESOTHO",
		"LR": "LIBERIA",
		"LY": "LIBYA",
		"LI": "LIECHTENSTEIN",
		"LT": "LITHUANIA",
		"LU": "LUXEMBOURG",
		"MO": "MACAO",
		"MK": "MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF",
		"MG": "MADAGASCAR",
		"MW": "MALAWI",
		"MY": "MALAYSIA",
		"MV": "MALDIVES",
		"ML": "MALI",
		"MT": "MALTA",
		"MH": "MARSHALL ISLANDS",
		"MQ": "MARTINIQUE",
		"MR": "MAURITANIA",
		"MU": "MAURITIUS",
		"YT": "MAYOTTE",
		"MX": "MEXICO",
		"FM": "MICRONESIA, FEDERATED STATES OF",
		"MD": "MOLDOVA, REPUBLIC OF",
		"MC": "MONACO",
		"MN": "MONGOLIA",
		"ME": "MONTENEGRO",
		"MS": "MONTSERRAT",
		"MA": "MOROCCO",
		"MZ": "MOZAMBIQUE",
		"MM": "MYANMAR",
		"NA": "NAMIBIA",
		"NR": "NAURU",
		"NP": "NEPAL",
		"NL": "NETHERLANDS",
		"NC": "NEW CALEDONIA",
		"NZ": "NEW ZEALAND",
		"NI": "NICARAGUA",
		"NE": "NIGER",
		"NG": "NIGERIA",
		"NU": "NIUE",
		"NF": "NORFOLK ISLAND",
		"MP": "NORTHERN MARIANA ISLANDS",
		"NO": "NORWAY",
		"OM": "OMAN",
		"PK": "PAKISTAN",
		"PW": "PALAU",
		"PS": "PALESTINIAN TERRITORY, OCCUPIED",
		"PA": "PANAMA",
		"PG": "PAPUA NEW GUINEA",
		"PY": "PARAGUAY",
		"PE": "PERU",
		"PH": "PHILIPPINES",
		"PN": "PITCAIRN",
		"PL": "POLAND",
		"PT": "PORTUGAL",
		"PR": "PUERTO RICO",
		"QA": "QATAR",
		"RE": "RÉUNION",
		"RO": "ROMANIA",
		"RU": "RUSSIAN FEDERATION",
		"RW": "RWANDA",
		"BL": "SAINT BARTHÉLEMY",
		"SH": "SAINT HELENA, ASCENSION AND TRISTAN DA CUNHA",
		"KN": "SAINT KITTS AND NEVIS",
		"LC": "SAINT LUCIA",
		"MF": "SAINT MARTIN (FRENCH PART)",
		"PM": "SAINT PIERRE AND MIQUELON",
		"VC": "SAINT VINCENT AND THE GRENADINES",
		"WS": "SAMOA",
		"SM": "SAN MARINO",
		"ST": "SAO TOME AND PRINCIPE",
		"SA": "SAUDI ARABIA",
		"SN": "SENEGAL",
		"RS": "SERBIA",
		"SC": "SEYCHELLES",
		"SL": "SIERRA LEONE",
		"SG": "SINGAPORE",
		"SX": "SINT MAARTEN (DUTCH PART)",
		"SK": "SLOVAKIA",
		"SI": "SLOVENIA",
		"SB": "SOLOMON ISLANDS",
		"SO": "SOMALIA",
		"ZA": "SOUTH AFRICA",
		"GS": "SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS",
		"SS": "SOUTH SUDAN",
		"ES": "SPAIN",
		"LK": "SRI LANKA",
		"SD": "SUDAN",
		"SR": "SURINAME",
		"SJ": "SVALBARD AND JAN MAYEN",
		"SZ": "SWAZILAND",
		"SE": "SWEDEN",
		"CH": "SWITZERLAND",
		"SY": "SYRIAN ARAB REPUBLIC",
		"TW": "TAIWAN, PROVINCE OF CHINA",
		"TJ": "TAJIKISTAN",
		"TZ": "TANZANIA, UNITED REPUBLIC OF",
		"TH": "THAILAND",
		"TL": "TIMOR-LESTE",
		"TG": "TOGO",
		"TK": "TOKELAU",
		"TO": "TONGA",
		"TT": "TRINIDAD AND TOBAGO",
		"TN": "TUNISIA",
		"TR": "TURKEY",
		"TM": "TURKMENISTAN",
		"TC": "TURKS AND CAICOS ISLANDS",
		"TV": "TUVALU",
		"UG": "UGANDA",
		"UA": "UKRAINE",
		"AE": "UNITED ARAB EMIRATES",
		"GB": "UNITED KINGDOM",
		"US": "USA",
		"UM": "UNITED STATES MINOR OUTLYING ISLANDS",
		"UY": "URUGUAY",
		"UZ": "UZBEKISTAN",
		"VU": "VANUATU",
		"VE": "VENEZUELA, BOLIVARIAN REPUBLIC OF",
		"VN": "VIET NAM",
		"VG": "VIRGIN ISLANDS, BRITISH",
		"VI": "VIRGIN ISLANDS, U.S.",
		"WF": "WALLIS AND FUTUNA",
		"EH": "WESTERN SAHARA",
		"YE": "YEMEN",
		"ZM": "ZAMBIA",
		"ZW": "ZIMBABWE"
	};

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var addressController = __webpack_require__(255);
	function addressDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            title: "@",
	            contact: "=",
	            expanded: "=",
	            form: "=",
	            isFieldValidCallback: "&?",
	            disabled: "=?"
	        },
	        templateUrl: "app/ui/address/addressTemplate.html",
	        controller: addressController,
	        controllerAs: "ctrl",
	        bindToController: true,
	        transclude: true
	    };
	    return directive;
	}
	module.exports = addressDirective;


/***/ },
/* 255 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var AddressController = (function () {
	    function AddressController($scope, addressFactory, addressService, translationCache) {
	        this.$scope = $scope;
	        this.addressFactory = addressFactory;
	        this.addressService = addressService;
	        this.translationCache = translationCache;
	        this.isFreeText = true;
	        this.cities = [];
	        this.counties = [];
	        this.useDropDownText = this.translationCache.get("crm.address.headers.USE_DROP_DOWNS");
	        this.enterManuallyText = this.translationCache.get("crm.address.headers.ENTER_MANUALLY");
	        this.toggleText = this.enterManuallyText;
	        this.init();
	    }
	    AddressController.prototype.init = function () {
	        var _this = this;
	        if (!this.contact.address) {
	            this.contact.address = this.addressFactory.create();
	        }
	        this.addressService.setDefaultCountryToBrowserLocale(this.contact.address);
	        this.availableCountries = this.addressService.getCountryNames();
	        this.availableStatesProvinces = [];
	        this.$scope.$watch('ctrl.contact.address.country', function (newVal) {
	            if (newVal) {
	                _this.updateFieldsForSelectedCountry();
	            }
	        });
	    };
	    AddressController.prototype.updateFieldsForSelectedCountry = function () {
	        _.extend(this, this.addressService.getCountries()[this.contact.address.country]);
	        this.availableStatesProvinces = this.addressService.getStateProvinces(this.contact.address);
	    };
	    AddressController.prototype.onBlur = function () {
	        this.lookupPostalCode();
	        this.checkIfAddressIsComplete();
	    };
	    AddressController.prototype.lookupPostalCode = function () {
	        var _this = this;
	        this.addressService.lookupPostalCode(this.contact.address)
	            .then(function (result) {
	            _this.cities = result.cities;
	            _this.counties = result.counties;
	            _this.isFreeText = false;
	        });
	    };
	    AddressController.prototype.lookupCounty = function () {
	        var _this = this;
	        this.addressService.lookupCounty(this.contact.address)
	            .then(function (result) {
	            _this.cities = result.cities;
	            _this.isFreeText = false;
	        });
	    };
	    AddressController.prototype.checkIfAddressIsComplete = function () {
	        this.addressService.checkIfAddressIsComplete(this.contact.address, this.fields);
	    };
	    AddressController.prototype.isFieldValid = function (field) {
	        return this.addressService.isFieldValid(this.contact, this.contact.address, this.fields, field, this.form ? this.form.$submitted : true, this.isFieldValidCallback);
	    };
	    AddressController.prototype.toggleFreeText = function () {
	        this.isFreeText = !this.isFreeText;
	        this.toggleText = (this.isFreeText) ? this.useDropDownText : this.enterManuallyText;
	        if (!this.isFreeText) {
	            this.lookupPostalCode();
	        }
	    };
	    AddressController.$inject = [
	        '$scope',
	        'AddressFactory',
	        'addressService',
	        'TranslationCache'
	    ];
	    return AddressController;
	}());
	module.exports = AddressController;


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var genderDirective_1 = __webpack_require__(257);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.gender", [])
	    .directive("crmGender", genderDirective_1.genderDirective);


/***/ },
/* 257 */
/***/ function(module, exports) {

	"use strict";
	function genderDirective() {
	    return {
	        restrict: 'E',
	        scope: {
	            contact: "="
	        },
	        templateUrl: 'app/ui/gender/genderTemplate.html'
	    };
	}
	exports.genderDirective = genderDirective;


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var crmInlineEditingComponents = __webpack_require__(259);
	var mainComponent = __webpack_require__(268);
	var crmInlineEditingFields = __webpack_require__(272);
	module.exports = angular.module("crm.inlineEditing", [
	    crmInlineEditingComponents.name,
	    crmInlineEditingFields.name,
	    mainComponent.name
	]);


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var editEmpty = __webpack_require__(260);
	var editHover = __webpack_require__(262);
	var editOverlay = __webpack_require__(264);
	var editBlock = __webpack_require__(266);
	module.exports = angular.module("crm.inlineEditingComponents", [
	    editEmpty.name,
	    editHover.name,
	    editOverlay.name,
	    editBlock.name
	]);


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingEditEmptyDirective = __webpack_require__(261);
	module.exports = angular.module("crm.inlineEditingEditEmpty", [])
	    .directive("crmInlineEditingEditEmpty", inlineEditingEditEmptyDirective);


/***/ },
/* 261 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingEditEmptyDirective.$inject = ['inlineEditingService'];
	function inlineEditingEditEmptyDirective(inlineEditingService) {
	    var directive = {
	        restrict: "E",
	        scope: false,
	        transclude: true,
	        templateUrl: "app/ui/inlineEditing/components/editEmpty/inlineEditingEditEmptyTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes) {
	        $scope.editIfYouCan = function () {
	            if (!inlineEditingService.getEditOpen()) {
	                if ($scope.edit) {
	                    $scope.edit();
	                }
	            }
	        };
	    }
	    return directive;
	}
	module.exports = inlineEditingEditEmptyDirective;


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingEditHoverDirective = __webpack_require__(263);
	module.exports = angular.module("crm.inlineEditingEditHover", [])
	    .directive("crmInlineEditingEditHover", inlineEditingEditHoverDirective);


/***/ },
/* 263 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingEditHoverDirective.$inject = ['inlineEditingService'];
	function inlineEditingEditHoverDirective(inlineEditingService) {
	    var directive = {
	        restrict: "E",
	        scope: false,
	        transclude: true,
	        templateUrl: "app/ui/inlineEditing/components/editHover/inlineEditingEditHoverTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes) {
	        $scope.editIfYouCan = function () {
	            if (!inlineEditingService.getEditOpen()) {
	                $scope.edit();
	            }
	        };
	    }
	    return directive;
	}
	module.exports = inlineEditingEditHoverDirective;


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingEditOverlayDirective = __webpack_require__(265);
	module.exports = angular.module("crm.inlineEditingEditOverlay", [])
	    .directive("crmInlineEditingEditOverlay", inlineEditingEditOverlayDirective);


/***/ },
/* 265 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingEditOverlayDirective.$inject = ["$document", '$timeout', '$translate', 'modalService', 'inlineEditingService'];
	function inlineEditingEditOverlayDirective($document, $timeout, $translate, modalService, inlineEditingService) {
	    var directive = {
	        restrict: "E",
	        scope: false,
	        transclude: true,
	        templateUrl: "app/ui/inlineEditing/components/editOverlay/inlineEditingEditOverlayTemplate.html",
	        controller: ['$scope', '$element', '$attrs', inlineEditingEditOverlayController],
	        controllerAs: 'ctrl',
	        link: link
	    };
	    function inlineEditingEditOverlayController($scope, $element, $attributes) {
	        var ctrl = this;
	        ctrl.init = init;
	        ctrl.isCancelClicked = false;
	        $translate('crm.modal.DISCARD_PROMPT').then(function (translation) {
	            ctrl.prompt = translation;
	        });
	        function init() {
	            if (!$attributes['obsolete']) {
	                $scope.$watch('openEdit', function (newVal, oldVal) {
	                    if (newVal) {
	                        inlineEditingService.setEditOpen(true);
	                        var dismissClickHandler = function (evt) {
	                            $scope.isClickOutsideOfElement(evt.target);
	                        };
	                        $timeout(function () {
	                            $document.bind('click.oldinlineedit', dismissClickHandler);
	                        });
	                    }
	                    else {
	                        inlineEditingService.setEditOpen(false);
	                        $document.unbind('click.oldinlineedit');
	                    }
	                });
	            }
	        }
	    }
	    function link($scope, $element, $attributes, ctrl) {
	        $scope.isClickOutsideOfElement = isClickOutsideOfElement;
	        ctrl.heading = $attributes.heading;
	        ctrl.init();
	        function isClickOutsideOfElement(click) {
	            if ($element.has(click).length == 0 && !modalService.isOpen() && !ctrl.isCancelClicked) {
	                if (!$scope.editOverlayForm.$pristine) {
	                    modalService.openModal(ctrl.prompt, 'crm.modal.CONFIRM', 'crm.modal.ACCEPT', 'crm.modal.DISCARD_CANCEL')
	                        .then(modalAccept, modalCancel);
	                }
	                else {
	                    onCancel();
	                }
	            }
	        }
	        function modalAccept(modalInstance) {
	            onCancel();
	            modalInstance.close();
	        }
	        function modalCancel(modalInstance) {
	            ctrl.isCancelClicked = true;
	            modalInstance.dismiss();
	            $timeout(function () {
	                ctrl.isCancelClicked = false;
	            });
	        }
	        function onCancel() {
	            $scope.cancelEdit();
	            $scope.editOverlayForm.$setPristine();
	        }
	    }
	    return directive;
	}
	module.exports = inlineEditingEditOverlayDirective;


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingEditBlockDirective = __webpack_require__(267);
	module.exports = angular.module("crm.inlineEditingEditBlock", [])
	    .directive("crmInlineEditingEditBlock", inlineEditingEditBlockDirective);


/***/ },
/* 267 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingEditBlockDirective.$inject = ['inlineEditingService'];
	function inlineEditingEditBlockDirective(inlineEditingService) {
	    var directive = {
	        restrict: "E",
	        scope: false,
	        transclude: true,
	        templateUrl: "app/ui/inlineEditing/components/editBlock/inlineEditingEditBlockTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes) {
	        $scope.editIfYouCan = function () {
	            if (!inlineEditingService.getEditOpen()) {
	                $scope.edit();
	            }
	        };
	    }
	    return directive;
	}
	module.exports = inlineEditingEditBlockDirective;


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var inlineEditDirective = __webpack_require__(269);
	var inlineEditFacadeFactory = __webpack_require__(271);
	module.exports = angular.module('crm.inlineEdit', [])
	    .directive('crmInlineEdit', inlineEditDirective)
	    .service('InlineEditFacadeFactory', inlineEditFacadeFactory);


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(270);
	function inlineEditDirective() {
	    var directive = {
	        restrict: "E",
	        scope: {
	            facade: '=',
	            inline: '=',
	            hasValue: '='
	        },
	        transclude: true,
	        templateUrl: 'app/ui/inlineEditing/mainComponent/inlineEditTemplate.html',
	        controller: controller,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        link: function (scope, element, attrs, controller) {
	            var unbind = scope.$watch('ctrl.facade', function (facade) {
	                if (facade) {
	                    if (facade.then != undefined) {
	                        facade.then(function (realFacade) {
	                            controller.setElement(element, realFacade);
	                        });
	                    }
	                    else {
	                        controller.setElement(element, facade);
	                    }
	                    unbind();
	                }
	            });
	        }
	    };
	    return directive;
	}
	module.exports = inlineEditDirective;


/***/ },
/* 270 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var inlineEditController = (function () {
	    function inlineEditController($scope, inlineEditingService, modalService, $translate, $q) {
	        var _this = this;
	        this.$scope = $scope;
	        this.inlineEditingService = inlineEditingService;
	        this.modalService = modalService;
	        this.$translate = $translate;
	        this.$q = $q;
	        this.maxlength = 255;
	        this.isWaitingForOnSave = false;
	        $scope.$on('$destroy', function () {
	            if (_this.facade) {
	                inlineEditingService.deregisterInlineEditControl(_this.facade.guid);
	            }
	        });
	        $translate('crm.modal.DISCARD_PROMPT').then(function (translation) {
	            _this.confirmationPrompt = translation;
	        });
	        this.wasSaved = false;
	    }
	    inlineEditController.prototype.startDependencyWatches = function (fieldDependencies) {
	        var _this = this;
	        fieldDependencies.forEach(function (fieldDependency) {
	            var watchingName = 'ctrl.facade.model.' + fieldDependency.dependeeName;
	            _this.$scope.$watch(watchingName, function (newValue) {
	                if (newValue) {
	                    fieldDependency.callbackFunction(_this.facade.fields, newValue);
	                    fieldDependency.callbackFunction(_this.originalFacade.fields, newValue);
	                }
	            });
	        });
	    };
	    inlineEditController.prototype.save = function (form, ignoreForm) {
	        var _this = this;
	        if (ignoreForm === void 0) { ignoreForm = false; }
	        if (!ignoreForm && form.$invalid) {
	            return;
	        }
	        if (this.facade.onSave && !this.isWaitingForOnSave) {
	            this.isWaitingForOnSave = true;
	            this.facade.onSave(this.facade)
	                .then(function (shouldStayOpen) {
	                _this.originalFacade = angular.copy(_this.facade);
	                _this.isWaitingForOnSave = false;
	                _this.wasSaved = true;
	            })
	                .catch(function () {
	                _this.facade = angular.copy(_this.originalFacade);
	                _this.inlineEditForm.$setPristine();
	                _this.isWaitingForOnSave = false;
	            })
	                .finally(function () {
	                _this.inlineEditingService.closeInlineEdit(_this.facade.guid);
	            });
	        }
	    };
	    inlineEditController.prototype.submit = function (form) {
	        var _this = this;
	        if (_.isFunction(this.facade.onBeforeSave)) {
	            this.isWaitingForOnSave = true;
	            var onBeforeSavePromise = this.facade.onBeforeSave(this.facade);
	            onBeforeSavePromise.then(function (onBeforeSaveResponse) {
	                _this.isWaitingForOnSave = false;
	                if (onBeforeSaveResponse.shouldSave) {
	                    _this.save(form, !!onBeforeSaveResponse.ignoreForm);
	                }
	            }).catch(function (error) {
	                _this.isWaitingForOnSave = false;
	            });
	        }
	        else {
	            this.save(form);
	        }
	    };
	    inlineEditController.prototype.cancel = function () {
	        this.inlineEditingService.closeInlineEdit(this.facade.guid);
	    };
	    inlineEditController.prototype.isFormFieldValid = function (form, field) {
	        if (form && form.$error) {
	            return form.$error.pattern &&
	                _.find(form.$error.pattern, function (pattern) {
	                    return pattern['$name'] == field.fieldName;
	                });
	        }
	        return false;
	    };
	    inlineEditController.prototype.setElement = function (element, facade) {
	        var _this = this;
	        this.isResolved = true;
	        this.facade = angular.copy(facade);
	        this.facade.element = element;
	        this.refreshOriginalFacade();
	        this.startDependencyWatches(this.facade.fieldDependencies);
	        this.inlineEditControl = {
	            facade: this.facade,
	            onOpen: function () {
	                _this.isVisible = true;
	            },
	            onClose: function () {
	                if (!_this.inlineEditForm) {
	                    return _this.$q.when(true);
	                }
	                if (!_this.wasSaved && _this.inlineEditForm.$dirty) {
	                    return _this.displayConfirmationModal().then(function (result) {
	                        if (result) {
	                            _this.isVisible = false;
	                            _this.facade = angular.copy(_this.originalFacade);
	                            return true;
	                        }
	                        else {
	                            return false;
	                        }
	                    });
	                }
	                if (_this.isWaitingForOnSave) {
	                    return _this.$q.when(false);
	                }
	                else {
	                    _this.wasSaved = false;
	                    _this.isVisible = false;
	                    _this.facade = angular.copy(_this.originalFacade);
	                    return _this.$q.when(true);
	                }
	            },
	            onUpdate: function (facade) {
	                _this.facade.model = facade.model;
	                _this.facade.disableEdit = facade.disableEdit;
	                _this.facade.tooltip = facade.tooltip;
	                _this.refreshOriginalFacade();
	            }
	        };
	        this.inlineEditingService.registerInlineEditControl(this.inlineEditControl);
	    };
	    inlineEditController.prototype.refreshOriginalFacade = function () {
	        this.originalFacade = angular.copy(this.facade);
	    };
	    inlineEditController.prototype.openInlineEdit = function () {
	        var _this = this;
	        if (!this.facade.disableEdit && this.isResolved) {
	            this.inlineEditingService.openInlineEdit(this.facade.guid);
	        }
	        if (this.hasValue) {
	            _.each(this.facade.fields, function (field) {
	                if (field.fieldValues) {
	                    _this.facade.model[field.fieldName] = _.find(field.fieldValues, function (fieldValue) {
	                        return _.isEqual(_this.facade.model[field.fieldName], fieldValue);
	                    });
	                }
	            });
	        }
	    };
	    inlineEditController.prototype.isSelectStrings = function (field) {
	        return field.fieldValues && (typeof field.fieldValues[0] == 'string');
	    };
	    inlineEditController.prototype.displayConfirmationModal = function () {
	        var _this = this;
	        return this.modalService.openModal(this.confirmationPrompt, 'crm.modal.CONFIRM', 'crm.modal.ACCEPT', 'crm.modal.DISCARD_CANCEL')
	            .then(function (modalInstance) {
	            _this.inlineEditForm.$setPristine();
	            modalInstance.close();
	            return true;
	        }, function (modalInstance) {
	            modalInstance.dismiss();
	            return false;
	        });
	    };
	    inlineEditController.$inject = [
	        '$scope',
	        'inlineEditingService',
	        'modalService',
	        '$translate',
	        '$q'
	    ];
	    return inlineEditController;
	}());
	module.exports = inlineEditController;


/***/ },
/* 271 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var InlineEditFacadeFactory = (function () {
	    function InlineEditFacadeFactory(countries, statesProvinces, EmailFactory, ServiceWrapper, ContactService, inlineEditingService, GuidService, TranslationCache) {
	        this.countries = countries;
	        this.statesProvinces = statesProvinces;
	        this.EmailFactory = EmailFactory;
	        this.ServiceWrapper = ServiceWrapper;
	        this.ContactService = ContactService;
	        this.inlineEditingService = inlineEditingService;
	        this.GuidService = GuidService;
	        this.TranslationCache = TranslationCache;
	    }
	    InlineEditFacadeFactory.prototype.createGeneralFacade = function (title, model, inlineEditFields, onSave, disableEdit, guidToUse, disableCancelConfirmation) {
	        var self = this;
	        var facade = {
	            guid: guidToUse || self.GuidService.generate(),
	            title: title,
	            model: model,
	            fields: inlineEditFields,
	            fieldDependencies: [],
	            onSave: onSave,
	            disableEdit: !!disableEdit
	        };
	        return facade;
	    };
	    InlineEditFacadeFactory.prototype.getNeverContactVia = function (title, model, fieldValues, onSave, disableEdit) {
	        var fieldName = 'neverContactVia';
	        var fields = [
	            {
	                label: '',
	                fieldName: fieldName,
	                type: 'select',
	                validation: {},
	                fieldValues: fieldValues,
	                htmlAttributeName: 'neverContactViaInlineEdit'
	            }
	        ];
	        model[fieldName] = _.find(fieldValues, function (value) {
	            return value.text === model[fieldName].text;
	        });
	        return this.createGeneralFacade(title, model, fields, onSave, disableEdit);
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    InlineEditFacadeFactory.prototype.createIndividualNameFacade = function (title, nameModel, refDefValues, onSave, disableEditCrossSite) {
	        var fields = [
	            {
	                fieldName: 'salutation',
	                type: 'select',
	                placeholder: 'First Name',
	                fieldValues: refDefValues,
	                htmlAttributeName: 'salutationInlineEdit'
	            },
	            {
	                fieldName: 'firstName',
	                type: 'text',
	                placeholder: 'First Name',
	                htmlAttributeName: 'firstNameInlineEdit'
	            },
	            {
	                fieldName: 'middleName',
	                type: 'text',
	                placeholder: 'Middle Name',
	                htmlAttributeName: 'middleNameInlineEdit'
	            },
	            {
	                fieldName: 'lastName',
	                type: 'text',
	                placeholder: 'Last Name',
	                htmlAttributeName: 'lastNameInlineEdit'
	            },
	            {
	                fieldName: 'friendlyName',
	                type: 'text',
	                placeholder: 'Nickname',
	                htmlAttributeName: 'friendlyNameInlineEdit'
	            }
	        ];
	        // TODO: Temp solution for disable inline edit when cross site
	        return this.createGeneralFacade(title, nameModel, fields, onSave, disableEditCrossSite);
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    InlineEditFacadeFactory.prototype.createAddressFacade = function (title, address, onSave, disableEditCrossSite) {
	        var self = this;
	        var addressFields = [
	            {
	                fieldName: 'country',
	                type: 'select',
	                fieldValues: Object.keys(self.countries),
	                htmlAttributeName: 'countryInlineEdit'
	            },
	            {
	                fieldName: 'address1',
	                type: 'text',
	                placeholder: '',
	                htmlAttributeName: 'address1InlineEdit'
	            },
	            {
	                fieldName: 'address2',
	                type: 'text',
	                placeholder: '',
	                htmlAttributeName: 'address2InlineEdit'
	            },
	            {
	                fieldName: 'postal',
	                type: 'text',
	                placeholder: '',
	                htmlAttributeName: 'postalInlineEdit'
	            },
	            {
	                fieldName: 'city',
	                type: 'text',
	                placeholder: '',
	                htmlAttributeName: 'cityInlineEdit'
	            },
	            {
	                fieldName: 'state',
	                type: 'select',
	                fieldValues: self.getStatesOfCountry(address.country),
	                htmlAttributeName: 'stateInlineEdit'
	            },
	            {
	                fieldName: 'county',
	                type: 'text',
	                placeholder: '',
	                htmlAttributeName: 'countyInlineEdit'
	            }
	        ];
	        var statesDependency = {
	            dependeeName: 'country',
	            callbackFunction: function (fields, newValue) {
	                fields[5].fieldValues = self.getStatesOfCountry(newValue);
	                var countryValue = self.countries[newValue].lookup;
	                fields[1].placeholder = self.TranslationCache.get('crm.address.fields.' + countryValue + '.ADDRESS1');
	                fields[2].placeholder = self.TranslationCache.get('crm.address.fields.' + countryValue + '.ADDRESS2');
	                fields[3].placeholder = self.TranslationCache.get('crm.address.fields.' + countryValue + '.POSTAL');
	                fields[4].placeholder = self.TranslationCache.get('crm.address.fields.' + countryValue + '.CITY');
	                fields[6].placeholder = self.TranslationCache.get('crm.address.fields.' + countryValue + '.COUNTY');
	            }
	        };
	        var addressFacade = {
	            guid: self.GuidService.generate(),
	            title: title,
	            model: address,
	            fields: addressFields,
	            fieldDependencies: [statesDependency],
	            // TODO: Temp solution for disable inline edit when cross site
	            disableEdit: disableEditCrossSite,
	            onSave: function (facade) {
	                return onSave(facade);
	            }
	        };
	        return addressFacade;
	    };
	    InlineEditFacadeFactory.prototype.getStatesOfCountry = function (country) {
	        var states = [];
	        if (this.statesProvinces[country]) {
	            this.statesProvinces[country].forEach(function (state) {
	                states.push(state.abbr);
	            });
	        }
	        return states;
	    };
	    InlineEditFacadeFactory.$inject = [
	        'countries',
	        'statesProvinces',
	        'EmailFactory',
	        'ServiceWrapper',
	        'ContactService',
	        'inlineEditingService',
	        'GuidService',
	        'TranslationCache'
	    ];
	    return InlineEditFacadeFactory;
	}());
	module.exports = InlineEditFacadeFactory;


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var crmInlineEditingAddress = __webpack_require__(273);
	var crmInlineEditingField = __webpack_require__(276);
	var crmInlineEditingBirthdate = __webpack_require__(278);
	var crmInlineEditingExternalReference = __webpack_require__(280);
	var crmInlineEditingSocialMedia = __webpack_require__(282);
	var crmInlineEditingIndividualGender = __webpack_require__(284);
	var crmInlineEditingIndividualName = __webpack_require__(286);
	var crmInlineEditingIndividualNameOverlay = __webpack_require__(288);
	var crmInlineEditingIndividualNameTitle = __webpack_require__(290);
	var crmInlineEditingIndividualPhone = __webpack_require__(292);
	var crmInlineEditingIndividualSSN = __webpack_require__(294);
	var crmInlineEditingOrganizationPhone = __webpack_require__(296);
	var crmInlineEditingOrganizationNameTitle = __webpack_require__(298);
	var crmInlineEditingSelectOptionItem = __webpack_require__(300);
	var crmInlineEditingSelectEnum = __webpack_require__(302);
	var crmInlineEditingSelectRefDef = __webpack_require__(304);
	var crmInlineEditingSelectContactTypes = __webpack_require__(306);
	var crmInlineEditingSelectUser = __webpack_require__(309);
	var crmInlineEditingDriversLicense = __webpack_require__(311);
	var crmInlineEditingIndividualCompany = __webpack_require__(313);
	var crmInlineEditInternationalPhone = __webpack_require__(316);
	var crmInlineEditTradeInspectedBy = __webpack_require__(318);
	var crmInlineEditTradeYearMakeModelVin = __webpack_require__(320);
	var crmInlineEditConnectionRelationship = __webpack_require__(323);
	var crmInlineEditIndividualEmail = __webpack_require__(326);
	var crmInlineEditOrganizationPrimaryContact = __webpack_require__(328);
	module.exports = angular.module("crm.inlineEditingFields", [
	    crmInlineEditingAddress.name,
	    crmInlineEditingField.name,
	    crmInlineEditingSocialMedia.name,
	    crmInlineEditingExternalReference.name,
	    crmInlineEditingIndividualGender.name,
	    crmInlineEditingIndividualName.name,
	    crmInlineEditingIndividualNameOverlay.name,
	    crmInlineEditingIndividualNameTitle.name,
	    crmInlineEditingIndividualPhone.name,
	    crmInlineEditingOrganizationPhone.name,
	    crmInlineEditingIndividualSSN.name,
	    crmInlineEditingOrganizationNameTitle.name,
	    crmInlineEditingBirthdate.name,
	    crmInlineEditingSelectOptionItem.name,
	    crmInlineEditingSelectEnum.name,
	    crmInlineEditingSelectRefDef.name,
	    crmInlineEditingSelectContactTypes.name,
	    crmInlineEditingSelectUser.name,
	    crmInlineEditingDriversLicense.name,
	    crmInlineEditingIndividualCompany.name,
	    crmInlineEditInternationalPhone.name,
	    crmInlineEditTradeInspectedBy.name,
	    crmInlineEditTradeYearMakeModelVin.name,
	    crmInlineEditConnectionRelationship.name,
	    crmInlineEditIndividualEmail.name,
	    crmInlineEditOrganizationPrimaryContact.name
	]);


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var crmAddress = __webpack_require__(246);
	var inlineEditingAddressDirective = __webpack_require__(274);
	module.exports = angular.module("crm.inlineEditingAddress", [crmAddress.name])
	    .directive("crmInlineEditAddress", inlineEditingAddressDirective);


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(275);
	function inlineEditAddressDirective() {
	    return {
	        restrict: "E",
	        scope: {
	            facade: "=",
	            inline: "=",
	            contact: "=",
	            hasValue: "="
	        },
	        transclude: true,
	        templateUrl: "app/ui/inlineEditing/fields/address/inlineEditingAddressTemplate.html",
	        controller: controller,
	        controllerAs: "ctrl",
	        bindToController: true,
	        link: function (scope, element, attrs, controller) {
	            var unbind = scope.$watch("ctrl.facade", function (facade) {
	                if (facade) {
	                    if (facade.then != undefined) {
	                        facade.then(function (realFacade) {
	                            controller.setElement(element, realFacade);
	                        });
	                    }
	                    else {
	                        controller.setElement(element, facade);
	                    }
	                    unbind();
	                }
	            });
	        }
	    };
	}
	module.exports = inlineEditAddressDirective;


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var InlineEditController = __webpack_require__(270);
	var InlineEditAddressController = (function (_super) {
	    __extends(InlineEditAddressController, _super);
	    function InlineEditAddressController($scope, inlineEditingService, modalService, $translate, $q, addressFactory, addressService, translationCache) {
	        var _this = this;
	        _super.call(this, $scope, inlineEditingService, modalService, $translate, $q);
	        this.addressFactory = addressFactory;
	        this.addressService = addressService;
	        this.translationCache = translationCache;
	        this.isFreeText = true;
	        this.cities = [];
	        this.counties = [];
	        this.useDropDownText = this.translationCache.get("crm.address.headers.USE_DROP_DOWNS");
	        this.enterManuallyText = this.translationCache.get("crm.address.headers.ENTER_MANUALLY");
	        this.toggleText = this.useDropDownText;
	        var unwatch = $scope.$watch("ctrl.facade.model", function (newValue) {
	            if (newValue) {
	                _this.init();
	                unwatch();
	            }
	        });
	        $scope.$watch("ctrl.facade.model.country", function (newVal) {
	            if (newVal) {
	                _this.updateFieldsForSelectedCountry();
	            }
	        });
	    }
	    InlineEditAddressController.prototype.init = function () {
	        if (!this.facade.model) {
	            this.facade.model = this.addressFactory.create();
	        }
	        this.addressService.setDefaultCountryToBrowserLocale(this.facade.model);
	        this.availableCountries = this.addressService.getCountryNames();
	        this.availableStatesProvinces = [];
	    };
	    InlineEditAddressController.prototype.updateFieldsForSelectedCountry = function () {
	        _.extend(this, this.addressService.getCountries()[this.facade.model.country]);
	        this.availableStatesProvinces = this.addressService.getStateProvinces(this.facade.model);
	        this.isFieldValid = {};
	        for (var field in this.fields) {
	            this.isFieldValid[field] = true;
	        }
	    };
	    InlineEditAddressController.prototype.onBlur = function () {
	        if (!this.isFreeText) {
	            this.lookupPostalCode(this.facade.model.city);
	            this.checkIfAddressIsComplete();
	        }
	    };
	    InlineEditAddressController.prototype.lookupPostalCode = function (previousCity) {
	        var _this = this;
	        this.addressService.lookupPostalCode(this.facade.model)
	            .then(function (result) {
	            _this.cities = result.cities;
	            _this.counties = result.counties;
	            _this.isFreeText = false;
	            if (previousCity != null && _this.cities.indexOf(previousCity) >= 0) {
	                _this.facade.model.city = previousCity;
	            }
	        });
	    };
	    InlineEditAddressController.prototype.lookupCounty = function () {
	        var _this = this;
	        this.addressService.lookupCounty(this.facade.model)
	            .then(function (result) {
	            _this.cities = result.cities;
	            _this.isFreeText = false;
	        });
	    };
	    InlineEditAddressController.prototype.checkIfAddressIsComplete = function () {
	        this.addressService.checkIfAddressIsComplete(this.facade.model, this.fields);
	    };
	    InlineEditAddressController.prototype.toggleFreeText = function () {
	        this.isFreeText = !this.isFreeText;
	        this.toggleText = (this.isFreeText) ? this.useDropDownText : this.enterManuallyText;
	        if (!this.isFreeText) {
	            this.lookupPostalCode(this.facade.model.city);
	        }
	    };
	    InlineEditAddressController.prototype.saveAddress = function (form) {
	        if (!this.contact.contactPoints.isValid()) {
	            var hasError = false;
	            for (var field in this.fields) {
	                this.isFieldValid[field] = this.addressService.isFieldValid(this.contact, this.facade.model, this.fields, field, true);
	                if (!this.isFieldValid[field]) {
	                    hasError = true;
	                }
	            }
	            if (hasError) {
	                return;
	            }
	        }
	        this.checkIfAddressIsComplete();
	        _super.prototype.submit.call(this, form);
	    };
	    InlineEditAddressController.$inject = [
	        "$scope",
	        "inlineEditingService",
	        "modalService",
	        "$translate",
	        "$q",
	        "AddressFactory",
	        "addressService",
	        "TranslationCache"
	    ];
	    return InlineEditAddressController;
	}(InlineEditController));
	module.exports = InlineEditAddressController;


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingFieldDirective = __webpack_require__(277);
	module.exports = angular.module("crm.inlineEditingField", [])
	    .directive("crmInlineEditingField", inlineEditingFieldDirective);


/***/ },
/* 277 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingFieldDirective.$inject = [
	    '$timeout',
	    'eventManagerService',
	    'validationWrapperService',
	    'Constants',
	    'ContactApiService',
	    'DataApiSettings'
	];
	function inlineEditingFieldDirective($timeout, eventManagerService, validationWrapperService, Constants, ContactApiService, DataApiSettings) {
	    var directive = {
	        restrict: "E",
	        require: '?ngModel',
	        scope: {
	            apiService: "=",
	            entity: "=",
	            // TODO: Temp solution for disable inline edit when cross site
	            disableEditCrossSite: '=',
	            fieldHeading: "@",
	            binded: "=ngModel",
	            validation: "=",
	            invalidMessage: "@",
	            contactType: "@",
	            maxlength: "@",
	            type: "@",
	        },
	        templateUrl: "app/ui/inlineEditing/fields/field/inlineEditingFieldTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes, ngModel) {
	        $scope.openEdit = false;
	        $scope.omitHeading = typeof $attributes.omitHeading != 'undefined';
	        if ($attributes.addHeading) {
	            $scope.addHeading = $attributes.addHeading;
	        }
	        $timeout(function () {
	            $scope.field = ngModel;
	        });
	        $scope.$watch("field.$viewValue", function (newVal, oldVal) {
	            if (newVal != oldVal) {
	                ngModel.$setViewValue(newVal);
	            }
	        });
	        $scope.edit = function () {
	            $scope.original = $scope.binded;
	            $scope.openEdit = true;
	        };
	        $scope.cancelEdit = function () {
	            ngModel.$setViewValue($scope.original);
	            $scope.openEdit = false;
	            setIsContactValid(true);
	        };
	        $scope.saveEdit = function () {
	            $scope.openEdit = false;
	        };
	        $scope.submit = function (form) {
	            eventManagerService.publish(Constants.ALERT_EVENT_SAVE_BUTTON_PRESS);
	            if (formIsValid(form)) {
	                $scope.saveEntity();
	            }
	            updateAlert(form);
	        };
	        function updateAlert(form) {
	            setIsContactValid(formIsValid(form));
	        }
	        function setIsContactValid(value) {
	            validationWrapperService.validateContactType(value, $scope.contact, $scope.contactType);
	        }
	        function formIsValid(form) {
	            if (typeof $scope.validation == 'boolean') {
	                return form.$valid && $scope.entity.isValid() && $scope.validation;
	            }
	            return form.$valid && $scope.entity.isValid();
	        }
	        $scope.saveEntity = function () {
	            if (!$scope.contact.dealershipId) {
	                $scope.contact.dealershipId = DataApiSettings.getSiteId();
	            }
	            ContactApiService.updateOrganizationViaApi($scope.entity).then(function (savedEntity) {
	                $scope.saveEdit();
	            }, function (error) {
	            });
	        };
	    }
	    return directive;
	}
	module.exports = inlineEditingFieldDirective;


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingBirthdateDirective = __webpack_require__(279);
	module.exports = angular.module("crm.inlineEditingBirthdate", [])
	    .directive("crmInlineEditingBirthdate", inlineEditingBirthdateDirective);


/***/ },
/* 279 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingBirthdateDirective.$inject = [
	    'DateService',
	    'ContactService',
	    'ContactApiService'
	];
	function inlineEditingBirthdateDirective(DateService, ContactService, ContactApiService) {
	    var directive = {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            // TODO: Temp solution for disable inline edit when cross site
	            disableEditCrossSite: '=',
	            fieldHeading: "@",
	            binded: "=ngModel",
	            contactType: "@"
	        },
	        templateUrl: "app/ui/inlineEditing/fields/birthdate/inlineEditingBirthdateTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes) {
	        $scope.openEdit = false;
	        $scope.edit = function () {
	            $scope.originalDateOfBirth = $scope.contact.dateOfBirth;
	            $scope.openEdit = true;
	        };
	        $scope.cancelEdit = function () {
	            $scope.contact.dateOfBirth = $scope.originalDateOfBirth;
	            $scope.openEdit = false;
	        };
	        $scope.saveEdit = function () {
	            $scope.openEdit = false;
	        };
	        $scope.submit = function (form) {
	            if (!form.$invalid) {
	                if ($scope.contact.isValid()) {
	                    $scope.saveContact();
	                }
	            }
	        };
	        $scope.saveContact = function () {
	            ContactApiService.updateIndividualViaApi($scope.contact).then(function (contact) {
	                $scope.saveEdit();
	            }, function (error) {
	            });
	        };
	        $scope.getDateOfBirth = function () {
	            return DateService.getDate($scope.binded);
	        };
	    }
	    return directive;
	}
	module.exports = inlineEditingBirthdateDirective;


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineExternalReferenceDirective = __webpack_require__(281);
	module.exports = angular.module("crm.inlineExternalReference", [])
	    .directive("crmInlineExternalReference", inlineExternalReferenceDirective);


/***/ },
/* 281 */
/***/ function(module, exports) {

	"use strict";
	inlineExternalReferenceDirective.$inject = [
	    '$translate',
	    'ExternalReferenceApiService',
	    'FranchiseRefDefApiService',
	    'modalService',
	    'inlineEditingService',
	    'GuidService',
	    '$q'
	];
	function inlineExternalReferenceDirective($translate, ExternalReferenceApiService, FranchiseRefDefApiService, modalService, inlineEditingService, GuidService, $q) {
	    var directive = {
	        restrict: "E",
	        scope: {
	            fieldHeading: "@",
	            entity: "=",
	            contactType: "@",
	            // TODO: Temp solution for disable inline edit when cross site
	            disableEditCrossSite: '='
	        },
	        templateUrl: "app/ui/inlineEditing/fields/externalReference/inlineExternalReferenceTemplate.html",
	        link: link
	    };
	    function link($scope, element) {
	        $scope.openEdit = false;
	        $scope.modalOpen = false;
	        $scope.inlineEditFacade = undefined;
	        $scope.externalReferences = [];
	        $scope.wasSaved = false;
	        $translate('crm.modal.DISCARD_PROMPT').then(function (translation) {
	            $scope.prompt = translation;
	        });
	        $scope.$on('$destroy', function () {
	            if ($scope.inlineEditFacade) {
	                inlineEditingService.deregisterInlineEditControl($scope.inlineEditFacade.guid);
	            }
	        });
	        var unbindEntityWatch = $scope.$watch('entity', function (contact) {
	            if (contact) {
	                $scope.externalReferences = angular.copy(contact.externalReferences);
	                var franchisesPromise = FranchiseRefDefApiService.get(contact.id);
	                franchisesPromise.then(function (availableFranchises) {
	                    $scope.availableFranchises = availableFranchises;
	                    $scope.attachSelectedFranchises(availableFranchises);
	                });
	                $scope.registerWithInlineEditService();
	                unbindEntityWatch();
	            }
	        });
	        $scope.getExternalReferenceIds = function () {
	            if ($scope.externalReferences) {
	                return _.pluck($scope.externalReferences, 'externalReferenceId').join(', ');
	            }
	            return '';
	        };
	        $scope.attachSelectedFranchises = function (availableFranchises) {
	            $scope.availableFranchises = availableFranchises;
	            _.each($scope.externalReferences, function (externalReference) {
	                externalReference.selectedFranchise = _.find($scope.availableFranchises, function (franchise) {
	                    return franchise.text == externalReference.franchise;
	                });
	            });
	        };
	        $scope.registerWithInlineEditService = function () {
	            $scope.inlineEditFacade = {
	                element: element,
	                guid: GuidService.generate()
	            };
	            var inlineEditControl = {
	                facade: $scope.inlineEditFacade,
	                onOpen: function () {
	                    $scope.openEdit = true;
	                },
	                onClose: function (shouldApplyScope) {
	                    if (!$scope.editOverlayForm) {
	                        return $q.when(true);
	                    }
	                    if ($scope.isWaitingForOnSave) {
	                        return $q.when(false);
	                    }
	                    if (!$scope.wasSaved && $scope.editOverlayForm.$dirty && !$scope.modalOpen) {
	                        return $scope.displayConfirmationModal()
	                            .then(function (wasConfirmed) {
	                            if (wasConfirmed) {
	                                $scope.closeInlineEdit(false);
	                                return true;
	                            }
	                            else {
	                                return false;
	                            }
	                        });
	                    }
	                    else {
	                        $scope.closeInlineEdit(shouldApplyScope);
	                        return $q.when(true);
	                    }
	                },
	                onUpdate: undefined
	            };
	            inlineEditingService.registerInlineEditControl(inlineEditControl);
	        };
	        $scope.closeInlineEdit = function (shouldApplyScope) {
	            $scope.openEdit = false;
	            $scope.resetForm();
	            if (shouldApplyScope) {
	                $scope.$apply();
	            }
	        };
	        $scope.edit = function () {
	            inlineEditingService.openInlineEdit($scope.inlineEditFacade.guid);
	        };
	        $scope.resetForm = function () {
	            $scope.externalReferences = angular.copy($scope.entity.externalReferences);
	            $scope.attachSelectedFranchises($scope.availableFranchises);
	            $scope.editOverlayForm.$setPristine();
	            $scope.wasSaved = false;
	            $scope.modalOpen = false;
	        };
	        $scope.cancelEdit = function () {
	            if ($scope.editOverlayForm.$dirty) {
	                $scope.displayConfirmationModal()
	                    .then(function (wasConfirmed) {
	                    if (wasConfirmed) {
	                        inlineEditingService.closeInlineEdit($scope.inlineEditFacade.guid);
	                    }
	                });
	            }
	            else {
	                inlineEditingService.closeInlineEdit($scope.inlineEditFacade.guid);
	            }
	        };
	        $scope.saveEdit = function () {
	            var data = {
	                externalReferences: $scope.externalReferences,
	                entityId: $scope.entity.id
	            };
	            _.each(data.externalReferences, function (externalReference) {
	                if (externalReference.selectedFranchise) {
	                    externalReference.franchise = externalReference.selectedFranchise.text;
	                    externalReference.franchiseId = externalReference.selectedFranchise.value;
	                }
	            });
	            $scope.isWaitingForOnSave = true;
	            ExternalReferenceApiService
	                .post(data)
	                .then(function (updatedExternalReferences) {
	                $scope.entity.externalReferences = updatedExternalReferences;
	                $scope.wasSaved = true;
	                $scope.isWaitingForOnSave = false;
	                inlineEditingService.closeInlineEdit($scope.inlineEditFacade.guid);
	            });
	        };
	        $scope.submit = function (form) {
	            if (formIsValid(form)) {
	                $scope.saveEdit();
	            }
	            form.$setPristine();
	        };
	        $scope.showAdditionalRow = function () {
	            $scope.externalReferences.push({
	                franchise: {},
	                externalReferenceId: ''
	            });
	        };
	        $scope.removeExternalReference = function (referenceToRemove, event) {
	            event.preventDefault();
	            event.stopPropagation();
	            var index = _.indexOf($scope.externalReferences, referenceToRemove);
	            if (index > -1) {
	                $scope.externalReferences.splice(index, 1);
	            }
	        };
	        $scope.displayConfirmationModal = function () {
	            return modalService.openModal($scope.prompt, 'crm.modal.CONFIRM', 'crm.modal.ACCEPT', 'crm.modal.CANCEL_REMOVE')
	                .then(function (modalInstance) {
	                modalInstance.close();
	                $scope.modalOpen = true;
	                return true;
	            })
	                .catch(function (modalInstance) {
	                modalInstance.dismiss();
	                $scope.modalOpen = false;
	                return false;
	            });
	        };
	        function formIsValid(form) {
	            return ($scope.entity.isValid());
	        }
	    }
	    return directive;
	}
	module.exports = inlineExternalReferenceDirective;


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingSocialMediaDirective = __webpack_require__(283);
	module.exports = angular.module("crm.inlineEditingSocialMedia", [])
	    .directive("crmInlineEditingSocialMedia", inlineEditingSocialMediaDirective);


/***/ },
/* 283 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingFieldDirective.$inject = [
	    '$timeout',
	    'ContactSocialMediaService',
	    'eventManagerService',
	    'validationWrapperService',
	    'Constants',
	    'inlineEditingService'
	];
	function inlineEditingFieldDirective($timeout, ContactSocialMediaService, eventManagerService, validationWrapperService, Constants, inlineEditingService) {
	    var directive = {
	        restrict: "E",
	        require: '?ngModel',
	        scope: {
	            entity: "=",
	            fieldHeading: "@",
	            type: '@',
	            disableEditCrossSite: '=',
	            binded: "=ngModel",
	            validation: "=",
	            invalidMessage: "@",
	            contactType: "@",
	            maxlength: "@"
	        },
	        templateUrl: "app/ui/inlineEditing/fields/socialMedia/inlineEditingSocialMediaTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes, ngModel) {
	        $scope.openEdit = false;
	        if (!$scope.maxlength) {
	            $scope.maxlength = -1;
	        }
	        $scope.omitHeading = typeof $attributes.omitHeading != 'undefined';
	        if ($attributes.addHeading) {
	            $scope.addHeading = $attributes.addHeading;
	        }
	        $timeout(function () {
	            $scope.field = ngModel;
	        });
	        $scope.$watch("field.$viewValue", function (newVal, oldVal) {
	            if (newVal != oldVal) {
	                ngModel.$setViewValue(newVal);
	            }
	        });
	        $scope.edit = function () {
	            if (!inlineEditingService.areAnyInlineEditsOpen()) {
	                $scope.original = $scope.binded;
	                $scope.openEdit = true;
	            }
	        };
	        $scope.cancelEdit = function () {
	            ngModel.$setViewValue($scope.original);
	            $scope.openEdit = false;
	            setIsContactValid(true);
	        };
	        $scope.saveEdit = function () {
	            $scope.openEdit = false;
	        };
	        $scope.submit = function (form) {
	            eventManagerService.publish(Constants.ALERT_EVENT_SAVE_BUTTON_PRESS);
	            if (formIsValid(form)) {
	                $scope.saveEntity();
	            }
	            updateAlert(form);
	        };
	        function updateAlert(form) {
	            setIsContactValid(formIsValid(form));
	        }
	        function setIsContactValid(value) {
	            validationWrapperService.validateContactType(value, $scope.contact, $scope.contactType);
	        }
	        function formIsValid(form) {
	            return form.$valid;
	        }
	        $scope.saveEntity = function () {
	            if ($scope.binded) {
	                var socialMediaSave = {
	                    contact: $scope.entity,
	                    type: $scope.type,
	                    username: $scope.binded
	                };
	                ContactSocialMediaService.post(socialMediaSave)
	                    .then(function (response) {
	                    if (!response.Error) {
	                        $scope.saveEdit(true);
	                    }
	                    else {
	                        alert('Error saving SocialMedia!');
	                    }
	                });
	            }
	            else {
	                var socialMediaDelete = {
	                    contact: $scope.entity,
	                    type: $scope.type
	                };
	                ContactSocialMediaService.delete(socialMediaDelete).then(function (response) {
	                    if (!response.error) {
	                        $scope.saveEdit(false);
	                    }
	                    else {
	                        alert('Error deleting SocialMedia!');
	                    }
	                });
	            }
	        };
	    }
	    return directive;
	}
	module.exports = inlineEditingFieldDirective;


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingIndividualGenderDirective = __webpack_require__(285);
	module.exports = angular.module("crm.inlineEditingIndividualGender", [])
	    .directive("crmInlineEditingIndividualGender", inlineEditingIndividualGenderDirective);


/***/ },
/* 285 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingIndividualGenderDirective.$inject = ['ContactService'];
	function inlineEditingIndividualGenderDirective(ContactService) {
	    var directive = {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            fieldHeading: "@",
	            binded: "=ngModel",
	            contactType: "@"
	        },
	        templateUrl: "app/ui/inlineEditing/fields/individualGender/inlineEditingIndividualGenderTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes) {
	        $scope.openEdit = false;
	        $scope.edit = function () {
	            $scope.originalGender = $scope.contact.gender;
	            $scope.openEdit = true;
	        };
	        $scope.cancelEdit = function () {
	            $scope.contact.gender = $scope.originalGender;
	            $scope.openEdit = false;
	        };
	        $scope.saveEdit = function () {
	            $scope.openEdit = false;
	        };
	        $scope.submit = function (form) {
	            if (!form.$invalid) {
	                if ($scope.contact.isValid()) {
	                    $scope.saveContact();
	                }
	            }
	        };
	        $scope.saveContact = function () {
	            ContactService.save($scope.contact).then(function (contact) {
	                $scope.saveEdit();
	            }, function (error) {
	            });
	        };
	    }
	    return directive;
	}
	module.exports = inlineEditingIndividualGenderDirective;


/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingIndividualNameDirective = __webpack_require__(287);
	module.exports = angular.module("crm.inlineEditingIndividualName", [])
	    .directive("crmInlineEditingIndividualName", inlineEditingIndividualNameDirective);


/***/ },
/* 287 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	function inlineEditingIndividualNameDirective() {
	    var directive = {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            contactType: "@",
	            prefixes: "="
	        },
	        templateUrl: "app/ui/inlineEditing/fields/individualName/inlineEditingIndividualNameTemplate.html"
	    };
	    return directive;
	}
	module.exports = inlineEditingIndividualNameDirective;


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingIndividualNameOverlayDirective = __webpack_require__(289);
	module.exports = angular.module("crm.inlineEditingIndividualNameOverlay", [])
	    .directive("crmInlineEditingIndividualNameOverlay", inlineEditingIndividualNameOverlayDirective);


/***/ },
/* 289 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingIndividualNameOverlayDirective.$inject = [
	    '$timeout',
	    'GuidService',
	    'ContactService',
	    'eventManagerService',
	    'validationWrapperService',
	    'Constants'
	];
	function inlineEditingIndividualNameOverlayDirective($timeout, GuidService, ContactService, eventManagerService, validationWrapperService, Constants) {
	    var directive = {
	        restrict: "E",
	        scope: false,
	        transclude: true,
	        templateUrl: "app/ui/inlineEditing/fields/individualNameOverlay/inlineEditingIndividualNameOverlayTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes) {
	        $timeout(function () {
	            $scope.prefixId = GuidService.generate();
	        });
	        $scope.contactType = $attributes.contactType;
	        $scope.openEdit = false;
	        $scope.edit = function () {
	            $scope.originalSalutation = $scope.contact.salutation;
	            $scope.originalFirstName = $scope.contact.firstName;
	            $scope.originalMiddleName = $scope.contact.middleName;
	            $scope.originalLastName = $scope.contact.lastName;
	            $scope.originalFriendlyName = $scope.contact.friendlyName;
	            $scope.openEdit = true;
	        };
	        $scope.cancelEdit = function () {
	            $scope.contact.salutation = $scope.originalSalutation;
	            $timeout(function () {
	                $element.find('#' + $scope.prefixId).val($scope.contact.salutation.value);
	                $element.find('#' + $scope.prefixId).triggerHandler('change');
	            });
	            $scope.contact.firstName = $scope.originalFirstName;
	            $scope.contact.middleName = $scope.originalMiddleName;
	            $scope.contact.lastName = $scope.originalLastName;
	            $scope.contact.friendlyName = $scope.originalFriendlyName;
	            $scope.openEdit = false;
	            setIsContactValid(true);
	        };
	        $scope.saveEdit = function () {
	            $scope.openEdit = false;
	        };
	        $scope.submit = function (form) {
	            eventManagerService.publish(Constants.ALERT_EVENT_SAVE_BUTTON_PRESS);
	            if (formIsValid(form)) {
	                $scope.saveContact();
	            }
	            updateAlert(form);
	        };
	        function updateAlert(form) {
	            setIsContactValid(formIsValid(form));
	        }
	        function setIsContactValid(value) {
	            validationWrapperService.validateContactType(value, $scope.contact, $scope.contactType);
	        }
	        function formIsValid(form) {
	            return (form.$valid && $scope.contact.isValid());
	        }
	        $scope.saveContact = function () {
	            ContactService.save($scope.contact).then(function (contact) {
	                $scope.saveEdit();
	            }, function (error) {
	            });
	        };
	    }
	    return directive;
	}
	module.exports = inlineEditingIndividualNameOverlayDirective;


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingIndividualNameTitleDirective = __webpack_require__(291);
	module.exports = angular.module("crm.inlineEditingIndividualNameTitle", [])
	    .directive("crmInlineEditingIndividualNameTitle", inlineEditingIndividualNameTitleDirective);


/***/ },
/* 291 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	function inlineEditingIndividualNameTitleDirective() {
	    var directive = {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            contactType: "@",
	            prefixes: "="
	        },
	        templateUrl: "app/ui/inlineEditing/fields/individualNameTitle/inlineEditingIndividualNameTitleTemplate.html"
	    };
	    return directive;
	}
	module.exports = inlineEditingIndividualNameTitleDirective;


/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingIndividualPhoneDirective = __webpack_require__(293);
	module.exports = angular.module("crm.inlineEditingIndividualPhone", [])
	    .directive("crmInlineEditingIndividualPhone", inlineEditingIndividualPhoneDirective);


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var Controller = __webpack_require__(270);
	inlineEditingIndividualPhoneDirective.$inject = [];
	function inlineEditingIndividualPhoneDirective() {
	    return {
	        restrict: "E",
	        scope: {
	            facade: "=",
	            inline: "=",
	            contact: "=",
	            hasValue: "="
	        },
	        transclude: true,
	        templateUrl: "app/ui/inlineEditing/fields/individualPhone/inlineEditingIndividualPhoneTemplate.html",
	        controller: Controller,
	        controllerAs: "ctrl",
	        bindToController: true,
	        link: function (scope, element, attrs, controller) {
	            var unbind = scope.$watch("ctrl.facade", function (facade) {
	                if (facade) {
	                    if (facade.then != undefined) {
	                        facade.then(function (realFacade) {
	                            controller.setElement(element, realFacade);
	                        });
	                    }
	                    else {
	                        controller.setElement(element, facade);
	                    }
	                    unbind();
	                }
	            });
	        }
	    };
	}
	module.exports = inlineEditingIndividualPhoneDirective;


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingIndividualSSNDirective = __webpack_require__(295);
	module.exports = angular.module("crm.inlineEditingIndividualSsn", [])
	    .directive("crmInlineEditingIndividualSsn", inlineEditingIndividualSSNDirective);


/***/ },
/* 295 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingIndividualSSNDirective.$inject = [
	    '$timeout',
	    'eventManagerService',
	    'validationWrapperService',
	    'Constants',
	    'ServiceWrapper'
	];
	function inlineEditingIndividualSSNDirective($timeout, eventManagerService, validationWrapperService, Constants, ServiceWrapper) {
	    var directive = {
	        restrict: "E",
	        require: '?ngModel',
	        scope: {
	            apiService: "=",
	            entity: "=",
	            fieldHeading: "@",
	            validation: "=",
	            invalidMessage: "@",
	            contactType: "@",
	            disableEditCrossSite: '='
	        },
	        templateUrl: "app/ui/inlineEditing/fields/individualSSN/inlineEditingIndividualSSNTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes, ngModel) {
	        $scope.openEdit = false;
	        $scope.newSSN = { value: '', partial: false };
	        $scope.omitHeading = typeof $attributes.omitHeading != 'undefined';
	        if ($attributes.addHeading) {
	            $scope.addHeading = $attributes.addHeading;
	        }
	        $timeout(function () {
	            $scope.field = ngModel;
	        });
	        $scope.clearSsn = function () {
	            $scope.entity.hasSSN = false;
	        };
	        $scope.edit = function () {
	            $scope.original = $scope.entity.hasSSN;
	            $scope.openEdit = true;
	        };
	        $scope.cancelEdit = function () {
	            $scope.entity.hasSSN = $scope.original;
	            $scope.newSSN.value = '';
	            $scope.openEdit = false;
	            setIsContactValid(true);
	        };
	        $scope.saveEdit = function (hasSSN) {
	            $scope.openEdit = false;
	            $scope.newSSN.value = '';
	            $scope.entity.hasSSN = hasSSN;
	        };
	        $scope.submit = function (form) {
	            eventManagerService.publish(Constants.ALERT_EVENT_SAVE_BUTTON_PRESS);
	            if ($scope.entity.hasSSN === true) {
	                $scope.cancelEdit();
	            }
	            if (formIsValid(form)) {
	                $scope.saveEntity();
	            }
	            updateAlert(form);
	        };
	        function updateAlert(form) {
	            setIsContactValid(formIsValid(form));
	        }
	        function setIsContactValid(value) {
	            validationWrapperService.validateContactType(value, $scope.contact, $scope.contactType);
	        }
	        function formIsValid(form) {
	            return (form.$valid && $scope.entity.isValid());
	        }
	        $scope.saveEntity = function () {
	            if (!$scope.entity.hasSSN) {
	                if ($scope.newSSN.value) {
	                    var contactSsn = {
	                        contact: $scope.entity,
	                        ssn: $scope.newSSN.value
	                    };
	                    ServiceWrapper.post($scope.apiService, contactSsn)
	                        .then(function (response) {
	                        if (!response.Error) {
	                            $scope.saveEdit(true);
	                        }
	                        else {
	                            alert('Error saving SSN!');
	                        }
	                    });
	                }
	                else {
	                    ServiceWrapper.delete($scope.apiService, $scope.entity).then(function (response) {
	                        if (!response.error) {
	                            $scope.saveEdit(false);
	                        }
	                        else {
	                            alert('Error deleting SSN!');
	                        }
	                    });
	                }
	            }
	        };
	        //This is for when there is an api for ssn
	        // $scope.saveEntity = function () {
	        //     if ($scope.newSSN.value) {
	        //         var contactSsn = <IContactSsn>{
	        //             contact: $scope.entity,
	        //             ssn: $scope.newSSN.value
	        //         };
	        //         $scope.entity.ssn = $scope.newSSN.value;
	        //         contactApiService.updateIndividualViaApi($scope.entity)
	        //             .then((response: any): any => {
	        //                 if (!response.Error) {
	        //                     $scope.saveEdit(true);
	        //                     $scope.entity = response;
	        //                 } else {
	        //                     alert('Error saving SSN!');
	        //                 }
	        //             });
	        //     }
	        // }
	    }
	    return directive;
	}
	module.exports = inlineEditingIndividualSSNDirective;


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingOrganizationNameTitleDirective = __webpack_require__(297);
	module.exports = angular.module("crm.inlineEditingOrganizationNameTitle", [])
	    .directive("crmInlineEditingOrganizationNameTitle", inlineEditingOrganizationNameTitleDirective);


/***/ },
/* 297 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingOrganizationNameTitleDirective.$inject = [
	    'ContactService',
	    'eventManagerService',
	    'validationWrapperService',
	    'Constants'
	];
	function inlineEditingOrganizationNameTitleDirective(ContactService, eventManagerService, validationWrapperService, Constants) {
	    var directive = {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            contactType: "@"
	        },
	        templateUrl: "app/ui/inlineEditing/fields/organizationNameTitle/inlineEditingOrganizationNameTitleTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes) {
	        $scope.openEdit = false;
	        $scope.edit = function () {
	            $scope.originalName = $scope.contact.name;
	            $scope.openEdit = true;
	        };
	        $scope.cancelEdit = function () {
	            $scope.contact.name = $scope.originalName;
	            $scope.openEdit = false;
	            setIsContactValid(true);
	        };
	        $scope.saveEdit = function () {
	            $scope.openEdit = false;
	        };
	        $scope.submit = function (form) {
	            eventManagerService.publish(Constants.ALERT_EVENT_SAVE_BUTTON_PRESS);
	            if (formIsValid(form)) {
	                $scope.saveContact();
	            }
	            updateAlert(form);
	        };
	        function updateAlert(form) {
	            setIsContactValid(formIsValid(form));
	        }
	        function setIsContactValid(value) {
	            validationWrapperService.validateContactType(value, $scope.contact, $scope.contactType);
	        }
	        function formIsValid(form) {
	            return (form.$valid && $scope.contact.isValid());
	        }
	        $scope.saveContact = function () {
	            ContactService.save($scope.contact).then(function (contact) {
	                $scope.saveEdit();
	            }, function (error) {
	            });
	        };
	    }
	    return directive;
	}
	module.exports = inlineEditingOrganizationNameTitleDirective;


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingOrganizationPhoneDirective = __webpack_require__(299);
	module.exports = angular.module("crm.inlineEditingOrganizationPhone", [])
	    .directive("crmInlineEditingOrganizationPhone", inlineEditingOrganizationPhoneDirective);


/***/ },
/* 299 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingOrganizationPhoneDirective.$inject = [
	    'eventManagerService',
	    'validationWrapperService',
	    'Constants',
	    'ContactApiService',
	    'DataApiSettings'
	];
	function inlineEditingOrganizationPhoneDirective(eventManagerService, validationWrapperService, Constants, ContactApiService, DataApiSettings) {
	    var directive = {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            fieldHeading: "@",
	            binded: "=ngModel",
	            contactType: "@",
	            // TODO: Temp solution for disable inline edit when cross site
	            disableEditCrossSite: '='
	        },
	        templateUrl: "app/ui/inlineEditing/fields/organizationPhone/inlineEditingOrganizationPhoneTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes) {
	        $scope.openEdit = false;
	        $scope.omitHeading = typeof $attributes.omitHeading != 'undefined';
	        if ($attributes.addHeading) {
	            $scope.addHeading = $attributes.addHeading;
	        }
	        $scope.edit = function () {
	            $scope.originalMainNumber = $scope.contact.contactPoints.mainNumber.value;
	            $scope.originalTollFree = $scope.contact.contactPoints.tollFree.value;
	            $scope.originalFax = $scope.contact.contactPoints.fax.value;
	            $scope.openEdit = true;
	        };
	        $scope.cancelEdit = function () {
	            $scope.contact.contactPoints.mainNumber.value = $scope.originalMainNumber;
	            $scope.contact.contactPoints.tollFree.value = $scope.originalTollFree;
	            $scope.contact.contactPoints.fax.value = $scope.originalFax;
	            $scope.openEdit = false;
	            setIsContactValid(true);
	        };
	        $scope.saveEdit = function () {
	            $scope.openEdit = false;
	        };
	        $scope.submit = function (form) {
	            eventManagerService.publish(Constants.ALERT_EVENT_SAVE_BUTTON_PRESS);
	            if (formIsValid(form)) {
	                $scope.saveContact();
	            }
	            updateAlert(form);
	        };
	        function updateAlert(form) {
	            setIsContactValid(formIsValid(form));
	        }
	        function setIsContactValid(value) {
	            validationWrapperService.validateContactType(value, $scope.contact, $scope.contactType);
	        }
	        function formIsValid(form) {
	            return (form.$valid && $scope.contact.isValid());
	        }
	        $scope.saveContact = function () {
	            if (!$scope.contact.dealershipId) {
	                $scope.contact.dealershipId = DataApiSettings.getSiteId();
	            }
	            ContactApiService.updateOrganizationViaApi($scope.contact).then(function (contact) {
	                $scope.saveEdit();
	            });
	        };
	    }
	    return directive;
	}
	module.exports = inlineEditingOrganizationPhoneDirective;


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingSelectOptionItemDirective = __webpack_require__(301);
	module.exports = angular.module("crm.inlineEditingSelectOptionItem", [])
	    .directive("crmInlineEditingSelectOptionItem", inlineEditingSelectOptionItemDirective);


/***/ },
/* 301 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingSelectOptionItemDirective.$inject = [
	    '$timeout',
	    'GuidService'
	];
	function inlineEditingSelectOptionItemDirective($timeout, GuidService) {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            apiService: "=",
	            model: "=",
	            fieldHeading: "@",
	            optionItem: "=",
	            optionItemList: "=",
	            validation: "=",
	            invalidMessage: "@"
	        },
	        templateUrl: "app/ui/inlineEditing/fields/selectOptionItem/inlineEditingSelectOptionItemTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes) {
	        $timeout(function () {
	            $scope.id = GuidService.generate();
	        });
	        $scope.openEdit = false;
	        $scope.edit = function () {
	            $scope.originalOptionItem = $scope.optionItem;
	            $scope.openEdit = true;
	        };
	        $scope.cancelEdit = function () {
	            $scope.optionItem = $scope.originalOptionItem;
	            $timeout(function () {
	                $element.find('#' + $scope.id).val($scope.optionItem.itemValueId);
	                $element.find('#' + $scope.id).triggerHandler('change');
	            });
	            $scope.openEdit = false;
	        };
	        $scope.saveEdit = function () {
	            $scope.openEdit = false;
	        };
	        $scope.submit = function (form) {
	            if (!form.$invalid) {
	                if ($scope.model.isValid()) {
	                    $scope.saveModel();
	                }
	            }
	        };
	        $scope.update = function (selected) {
	            $scope.optionItem = selected;
	        };
	        $scope.saveModel = function () {
	            $scope.apiService.save($scope.model).then(function (savedModel) {
	                $scope.saveEdit();
	            }, function (error) {
	            });
	        };
	    }
	    return directive;
	}
	module.exports = inlineEditingSelectOptionItemDirective;


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingSelectEnumDirective = __webpack_require__(303);
	module.exports = angular.module("crm.inlineEditingEnum", [])
	    .directive("crmInlineEditingSelectEnum", inlineEditingSelectEnumDirective);


/***/ },
/* 303 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingSelectEnumDirective.$inject = [
	    '$timeout',
	    'GuidService'
	];
	function inlineEditingSelectEnumDirective($timeout, GuidService) {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            apiService: "=",
	            model: "=",
	            fieldHeading: "@",
	            property: "=",
	            enumList: "=",
	            validation: "=",
	            invalidMessage: "@"
	        },
	        templateUrl: "app/ui/inlineEditing/fields/selectEnum/inlineEditingSelectEnumTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes) {
	        $scope.options = _.filter($scope.enumList, function (key, value) {
	            if (!isNaN(value)) {
	                return value;
	            }
	        });
	        $timeout(function () {
	            $scope.id = GuidService.generate();
	        });
	        $scope.openEdit = false;
	        $scope.edit = function () {
	            $scope.originalProperty = $scope.property;
	            $scope.openEdit = true;
	        };
	        $scope.cancelEdit = function () {
	            $scope.property = $scope.originalProperty;
	            $timeout(function () {
	                $element.find('#' + $scope.id).val($scope.property);
	                $element.find('#' + $scope.id).triggerHandler('change');
	            });
	            $scope.openEdit = false;
	        };
	        $scope.saveEdit = function () {
	            $scope.openEdit = false;
	        };
	        $scope.submit = function (form) {
	            if (!form.$invalid) {
	                if ($scope.model.isValid()) {
	                    $scope.saveModel();
	                }
	            }
	        };
	        $scope.update = function (selected) {
	            $scope.property = selected;
	        };
	        $scope.saveModel = function () {
	            $scope.apiService.save($scope.model).then(function (savedModel) {
	                $scope.saveEdit();
	            }, function (error) {
	            });
	        };
	    }
	    return directive;
	}
	module.exports = inlineEditingSelectEnumDirective;


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingSelectRefDefDirective = __webpack_require__(305);
	module.exports = angular.module("crm.inlineEditingSelectOptionItem", [])
	    .directive("crmInlineEditingSelectRefDef", inlineEditingSelectRefDefDirective);


/***/ },
/* 305 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingSelectRefDefDirective.$inject = [
	    '$timeout',
	    'GuidService',
	    'ContactApiService',
	    'DataApiSettings'
	];
	function inlineEditingSelectRefDefDirective($timeout, GuidService, ContactApiService, DataApiSettings) {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            apiService: "=",
	            entity: "=",
	            // TODO: Temp solution for disable inline edit when cross site
	            disableEditCrossSite: '=',
	            fieldHeading: "@",
	            refDef: "=",
	            refDefList: "=",
	            validation: "=",
	            invalidMessage: "@"
	        },
	        templateUrl: "app/ui/inlineEditing/fields/selectRefDef/inlineEditingSelectRefDefTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes) {
	        $timeout(function () {
	            $scope.id = GuidService.generate();
	            $scope.id = GuidService.generate();
	            if ($scope.refDefList && $scope.refDef) {
	                for (var i in $scope.refDefList) {
	                    if ($scope.refDefList[i].value === $scope.refDef.value) {
	                        $scope.refDef.text = $scope.refDefList[i].text;
	                    }
	                }
	            }
	        });
	        $scope.openEdit = false;
	        $scope.edit = function () {
	            $scope.originalRefDef = $scope.refDef;
	            $scope.openEdit = true;
	        };
	        $scope.cancelEdit = function () {
	            $scope.refDef = $scope.originalRefDef;
	            $timeout(function () {
	                $element.find('#' + $scope.id).val($scope.refDef.value);
	                $element.find('#' + $scope.id).triggerHandler('change');
	            });
	            $scope.openEdit = false;
	        };
	        $scope.saveEdit = function () {
	            $scope.openEdit = false;
	        };
	        $scope.submit = function (form) {
	            if (!form.$invalid) {
	                if ($scope.entity.isValid()) {
	                    $scope.saveEntity();
	                }
	            }
	        };
	        $scope.update = function (selected) {
	            $scope.refDef = selected;
	        };
	        $scope.saveEntity = function () {
	            if (!$scope.entity.dealershipId) {
	                $scope.entity.dealershipId = DataApiSettings.getSiteId();
	            }
	            ContactApiService.updateOrganizationViaApi($scope.entity).then(function (savedEntity) {
	                $scope.saveEdit();
	            }, function (error) {
	            });
	        };
	    }
	    return directive;
	}
	module.exports = inlineEditingSelectRefDefDirective;


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingSelectContactTypesDirective = __webpack_require__(307);
	module.exports = angular.module("crm.inlineEditingSelectContactTypes", [])
	    .directive("crmInlineEditingSelectContactTypes", inlineEditingSelectContactTypesDirective);


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var inlineEditDirective = __webpack_require__(269);
	var InlineEditingSelectContactTypesController = __webpack_require__(308);
	function inlineEditingSelectContactTypesDirective() {
	    var directive = inlineEditDirective();
	    directive.templateUrl = "app/ui/inlineEditing/fields/selectContactTypes/inlineEditingSelectContactTypesTemplate.html";
	    directive.scope["contact"] = "=";
	    directive.controller = InlineEditingSelectContactTypesController;
	    return directive;
	}
	module.exports = inlineEditingSelectContactTypesDirective;


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var inlineEditController = __webpack_require__(270);
	var InlineEditingSelectContactTypesController = (function (_super) {
	    __extends(InlineEditingSelectContactTypesController, _super);
	    function InlineEditingSelectContactTypesController($scope, $q, $translate, modalService, inlineEditingService, serviceWrapper, refDefService) {
	        _super.call(this, $scope, inlineEditingService, modalService, $translate, $q);
	        this.serviceWrapper = serviceWrapper;
	        this.refDefService = refDefService;
	    }
	    InlineEditingSelectContactTypesController.prototype.openInlineEdit = function () {
	        var _this = this;
	        this.facade.model.contactType = this.contact.contactType;
	        this.getSubTypeRefDefs(this.contact.contactType)
	            .then(function () {
	            _super.prototype.openInlineEdit.call(_this);
	        });
	    };
	    InlineEditingSelectContactTypesController.prototype.onTypeChanged = function () {
	        this.getSubTypeRefDefs(this.facade.model.contactType, true);
	    };
	    InlineEditingSelectContactTypesController.prototype.getSubTypeRefDefs = function (type, setToFirstItem) {
	        var _this = this;
	        if (this.contact.isOrganization()) {
	            return this.refDefService.getSubRefDef('company.type', type.value)
	                .then(function (refDefs) {
	                _this.setSubTypeRefDefs(refDefs, setToFirstItem);
	            });
	        }
	        else {
	            return this.refDefService.getSubRefDef('individual.type', type.value)
	                .then(function (refDefs) {
	                _this.setSubTypeRefDefs(refDefs, setToFirstItem);
	            });
	        }
	    };
	    InlineEditingSelectContactTypesController.prototype.setSubTypeRefDefs = function (refDefs, setToFirstItem) {
	        this.resetSubType();
	        this.facade.fields[1].fieldValues = refDefs;
	        if (setToFirstItem) {
	            if (refDefs && refDefs[0]) {
	                this.facade.model.contactSubType = refDefs[0];
	            }
	        }
	        else {
	            this.setSubTypeToRefDefValue(refDefs);
	        }
	    };
	    InlineEditingSelectContactTypesController.prototype.resetSubType = function () {
	        this.facade.model.contactSubType = this.contact.contactSubType;
	    };
	    InlineEditingSelectContactTypesController.prototype.setSubTypeToRefDefValue = function (refDefs) {
	        var contact = this.facade.model;
	        contact.contactSubType = _.find(refDefs, function (refDef) {
	            if (!refDef || !contact || !contact.contactSubType) {
	                return false;
	            }
	            return refDef.text === contact.contactSubType.text;
	        }) || contact.contactSubType;
	    };
	    InlineEditingSelectContactTypesController.$inject = [
	        "$scope",
	        "$q",
	        "$translate",
	        "modalService",
	        "inlineEditingService",
	        "ServiceWrapper",
	        'RefDefService',
	    ];
	    return InlineEditingSelectContactTypesController;
	}(inlineEditController));
	module.exports = InlineEditingSelectContactTypesController;


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingSelectUserDirective = __webpack_require__(310);
	module.exports = angular.module("crm.inlineEditingSelectUser", [])
	    .directive("crmInlineEditingSelectUser", inlineEditingSelectUserDirective);


/***/ },
/* 310 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingSelectUserDirective.$inject = [
	    '$rootScope',
	    '$timeout',
	    'GuidService',
	    'userService',
	    'eventManagerService',
	    'UserFactory',
	    'Constants'
	];
	function inlineEditingSelectUserDirective($timeout, GuidService, userService, eventManagerService, UserFactory, Constants) {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            apiService: "=",
	            model: "=",
	            fieldHeading: "@",
	            user: "=",
	            allowEmpty: "@",
	            validation: "=",
	            invalidMessage: "@"
	        },
	        templateUrl: "app/ui/inlineEditing/fields/selectUser/inlineEditingSelectUserTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes) {
	        $timeout(function () {
	            $scope.id = GuidService.generate();
	        });
	        $scope.openEdit = false;
	        $scope.edit = function () {
	            $scope.originalUser = $scope.user;
	            $scope.openEdit = true;
	        };
	        $scope.cancelEdit = function () {
	            $scope.user = $scope.originalUser;
	            $timeout(function () {
	                $element.find('#' + $scope.id).val($scope.user.id);
	                $element.find('#' + $scope.id).triggerHandler('change');
	            });
	            $scope.openEdit = false;
	        };
	        $scope.saveEdit = function () {
	            $scope.openEdit = false;
	        };
	        $scope.submit = function (form) {
	            if (!form.$invalid) {
	                if ($scope.model.isValid()) {
	                    $scope.saveModel();
	                }
	            }
	        };
	        $scope.update = function (selected) {
	            $timeout(function () {
	                $scope.user = selected;
	            });
	        };
	        $scope.saveModel = function () {
	            $scope.apiService.save($scope.model).then(function (savedModel) {
	                $scope.saveEdit();
	            }, function (error) {
	            });
	        };
	        var userListLoaded;
	        var setUserList = function () {
	            $scope.users = userService.getAllUsers();
	            if ($scope.allowEmpty) {
	                $scope.users.unshift(UserFactory.create());
	            }
	            eventManagerService.unSubscribe(Constants.USER_SERVICE_LOADED, userListLoaded);
	        };
	        if (userService.list.length == 0) {
	            userListLoaded = eventManagerService.subscribe(Constants.USER_SERVICE_LOADED, setUserList);
	        }
	        else {
	            setUserList();
	        }
	    }
	    return directive;
	}
	module.exports = inlineEditingSelectUserDirective;


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingDriversLicense = __webpack_require__(312);
	module.exports = angular.module("crm.inlineEditingDriversLicense", [])
	    .directive("crmInlineEditingDriversLicense", inlineEditingDriversLicense);


/***/ },
/* 312 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditingDriversLicenseDirective.$inject = [
	    '$timeout',
	    'eventManagerService',
	    'validationWrapperService',
	    'Constants',
	    'ServiceWrapper',
	];
	function inlineEditingDriversLicenseDirective($timeout, eventManagerService, validationWrapperService, Constants, ServiceWrapper) {
	    var directive = {
	        restrict: "E",
	        require: '?ngModel',
	        scope: {
	            apiService: "=",
	            entity: "=",
	            fieldHeading: "@",
	            binded: "=ngModel",
	            validation: "=",
	            invalidMessage: "@",
	            contactType: "@",
	            maxlength: "@"
	        },
	        templateUrl: "app/ui/inlineEditing/fields/driversLicense/inlineEditingDriversLicenseTemplate.html",
	        link: link
	    };
	    function link($scope, $element, $attributes, ngModel) {
	        $scope.openEdit = false;
	        $scope.omitHeading = typeof $attributes.omitHeading != 'undefined';
	        if ($attributes.addHeading) {
	            $scope.addHeading = $attributes.addHeading;
	        }
	        $timeout(function () {
	            $scope.field = ngModel;
	        });
	        $scope.$watch("field.$viewValue", function (newVal, oldVal) {
	            if (newVal != oldVal) {
	                ngModel.$setViewValue(newVal);
	            }
	        });
	        $scope.edit = function () {
	            $scope.original = $scope.binded;
	            $scope.openEdit = true;
	        };
	        $scope.cancelEdit = function () {
	            ngModel.$setViewValue($scope.original);
	            $scope.openEdit = false;
	            setIsContactValid(true);
	        };
	        $scope.saveEdit = function () {
	            $scope.openEdit = false;
	        };
	        $scope.submit = function (form) {
	            eventManagerService.publish(Constants.ALERT_EVENT_SAVE_BUTTON_PRESS);
	            if (formIsValid(form)) {
	                $scope.saveEntity();
	            }
	            updateAlert(form);
	        };
	        function updateAlert(form) {
	            setIsContactValid(formIsValid(form));
	        }
	        function setIsContactValid(value) {
	            validationWrapperService.validateContactType(value, $scope.contact, $scope.contactType);
	        }
	        function formIsValid(form) {
	            return (form.$valid && $scope.entity.isValid());
	        }
	        $scope.saveEntity = function () {
	            ServiceWrapper.save($scope.apiService, $scope.entity).then(function (savedEntity) {
	                $scope.saveEdit();
	            }, function (error) {
	            });
	        };
	    }
	    return directive;
	}
	module.exports = inlineEditingDriversLicenseDirective;


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditIndividualCompanyDirective = __webpack_require__(314);
	module.exports = angular.module("crm.inlineEditingIndividualCompany", [])
	    .directive("crmInlineEditIndividualCompany", inlineEditIndividualCompanyDirective);


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(315);
	function inlineEditIndividualCompanyDirective() {
	    var directive = {
	        restrict: "E",
	        scope: {
	            facade: '=',
	            hasValue: '='
	        },
	        transclude: true,
	        templateUrl: 'app/ui/inlineEditing/fields/individualCompany/inlineEditingIndividualCompanyTemplate.html',
	        controller: controller,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        link: function (scope, element, attrs, controller) {
	            var unbind = scope.$watch('ctrl.facade', function (facade) {
	                if (facade) {
	                    if (facade.then != undefined) {
	                        facade.then(function (realFacade) {
	                            controller.setElement(element, realFacade);
	                        });
	                    }
	                    else {
	                        controller.setElement(element, facade);
	                    }
	                    unbind();
	                }
	            });
	        }
	    };
	    return directive;
	}
	module.exports = inlineEditIndividualCompanyDirective;


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var InlineEditController = __webpack_require__(270);
	var inlineEditingIndividualCompanyController = (function (_super) {
	    __extends(inlineEditingIndividualCompanyController, _super);
	    function inlineEditingIndividualCompanyController($scope, inlineEditingService, modalService, $translate, $q, messageBus, ContactService) {
	        _super.call(this, $scope, inlineEditingService, modalService, $translate, $q);
	        this.messageBus = messageBus;
	        this.ContactService = ContactService;
	    }
	    inlineEditingIndividualCompanyController.prototype.openSearchModal = function () {
	        var self = this;
	        self.messageBus.ask(top, {
	            from: 'crm',
	            to: 'shell',
	            task: 'modal.open',
	            timeout: 480000,
	            data: {
	                targetAppId: 'search',
	                targetAppRoute: 'customerSearch/company'
	            }
	        }, function (data) {
	            var companyId = data.data.result;
	            self.ContactService.get({
	                contactId: companyId,
	                summaryOnly: true
	            }).then(function (resolution) {
	                self.facade.model.employer = resolution.fullName;
	                self.facade.model.companyId = companyId;
	                self.inlineEditForm.$setDirty();
	            });
	        });
	    };
	    inlineEditingIndividualCompanyController.prototype.unlinkCompany = function () {
	        this.facade.model.companyId = '0';
	        this.facade.model.employer = '';
	        this.inlineEditForm.$setDirty();
	    };
	    inlineEditingIndividualCompanyController.prototype.savePrimaryCompany = function (form) {
	        _super.prototype.submit.call(this, form);
	        this.inlineEditForm.$setPristine();
	    };
	    inlineEditingIndividualCompanyController.prototype.isCompanyLinked = function () {
	        return this.facade.model.companyId && this.facade.model.companyId != '0';
	    };
	    inlineEditingIndividualCompanyController.$inject = [
	        '$scope',
	        'inlineEditingService',
	        'modalService',
	        '$translate',
	        '$q',
	        'messageBus',
	        'ContactService'
	    ];
	    return inlineEditingIndividualCompanyController;
	}(InlineEditController));
	module.exports = inlineEditingIndividualCompanyController;


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var inlineEditInternationalPhoneDirective = __webpack_require__(317);
	module.exports = angular.module("crm.inlineEditInternationalPhone", [])
	    .directive("crmInlineEditInternationalPhone", inlineEditInternationalPhoneDirective);


/***/ },
/* 317 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	inlineEditInternationalPhoneDirective.$inject = [
	    '$timeout',
	    'GuidService',
	    'localeService'
	];
	function inlineEditInternationalPhoneDirective($timeout, GuidService, localeService) {
	    var directive = {
	        restrict: "E",
	        scope: {
	            model: '='
	        },
	        templateUrl: "app/ui/inlineEditing/fields/internationalPhone/inlineEditInternationalPhoneTemplate.html",
	        link: link
	    };
	    function link(scope, element, attrs) {
	        $timeout(function () {
	            scope.id = GuidService.generate();
	        });
	        $timeout(function () {
	            initPhoneInput();
	        });
	        function initPhoneInput() {
	            if (!(attrs['disableValidation'] == 'true')) {
	                var country = localeService.getCountryCodeFromCurrentLocale().toLowerCase();
	                element.find('#' + scope.id).intlTelInput({
	                    nationalMode: true,
	                    autoHideDialCode: true,
	                    allowExtensions: true,
	                    onlyCountries: [country]
	                });
	            }
	            element.find('.flag-dropdown .selected-flag')
	                .attr('tabindex', -1);
	        }
	    }
	    return directive;
	}
	module.exports = inlineEditInternationalPhoneDirective;


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var inlineEditTradeInspectedByDirective = __webpack_require__(319);
	module.exports = angular.module("crm.inlineEdit.fields.tradeInspectedBy", [])
	    .directive("crmInlineEditTradeInspectedBy", inlineEditTradeInspectedByDirective);


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var baseDirective = __webpack_require__(269);
	function inlineEditTradeInspectedByDirective() {
	    var directive = baseDirective();
	    directive.templateUrl = "app/ui/inlineEditing/fields/tradeInspectedBy/inlineEditTradeInspectedByTemplate.html";
	    return directive;
	}
	module.exports = inlineEditTradeInspectedByDirective;


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var inlineEditTradeYearMakeModelVinDirective = __webpack_require__(321);
	module.exports = angular.module("crm.inlineEdit.fields.tradeYearMakeModelVin", [])
	    .directive("crmInlineEditTradeYearMakeModelVin", inlineEditTradeYearMakeModelVinDirective);


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(322);
	function inlineEditTradeYearMakeModelVinDirective() {
	    return {
	        restrict: "E",
	        scope: {
	            facade: "=",
	            inline: "=",
	            tradeEvent: "=",
	            dealershipId: "@",
	            permissions: "=",
	            hasValue: "="
	        },
	        transclude: true,
	        templateUrl: "app/ui/inlineEditing/fields/tradeYearMakeModelVin/inlineEditTradeYearMakeModelVinTemplate.html",
	        controller: controller,
	        controllerAs: "ctrl",
	        bindToController: true,
	        link: function (scope, element, attrs, controller) {
	            var unbind = scope.$watch("ctrl.facade", function (facade) {
	                if (facade) {
	                    if (facade.then != undefined) {
	                        facade.then(function (realFacade) {
	                            controller.setElement(element, realFacade);
	                        });
	                    }
	                    else {
	                        controller.setElement(element, facade);
	                    }
	                    unbind();
	                }
	            });
	        }
	    };
	}
	module.exports = inlineEditTradeYearMakeModelVinDirective;


/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var InlineEditController = __webpack_require__(270);
	var InlineEditTradeYearMakeModelVinController = (function (_super) {
	    __extends(InlineEditTradeYearMakeModelVinController, _super);
	    function InlineEditTradeYearMakeModelVinController($scope, inlineEditingService, salesOpportunityTradesService, translationCache, modalService, $translate, $q) {
	        var _this = this;
	        _super.call(this, $scope, inlineEditingService, modalService, $translate, $q);
	        this.salesOpportunityTradesService = salesOpportunityTradesService;
	        this.translationCache = translationCache;
	        this.setIsLoading = function (isLoading) {
	        };
	        this._enterVehicleManuallyText = this.translationCache.get("crm.salesOpportunity.trades.ENTER_VEHICLE_MANUALLY_SHORT");
	        this._useDropDownsText = this.translationCache.get("crm.salesOpportunity.trades.USE_DROPDOWNS_TO_ENTER_VEHICLE_SHORT");
	        this.addVehicleText = this._enterVehicleManuallyText;
	        this.initialize();
	        var unWatchYear = $scope.$watch("ctrl.facade.model.year", function () {
	            _this.validateForm();
	        });
	        var unWatchMake = $scope.$watch("ctrl.facade.model.make.text", function () {
	            _this.validateForm();
	        });
	        var unWatchModel = $scope.$watch("ctrl.facade.model.model.text", function () {
	            _this.validateForm();
	        });
	        var unWatchVin = $scope.$watch("ctrl.facade.model.vin", function () {
	            _this.vinError = 0;
	        });
	        $scope.$on("$destroy", function () {
	            unWatchYear();
	            unWatchMake();
	            unWatchModel();
	            unWatchVin();
	        });
	    }
	    InlineEditTradeYearMakeModelVinController.prototype.initialize = function () {
	        this.vinError = 0;
	        this.isSubmitted = false;
	    };
	    InlineEditTradeYearMakeModelVinController.prototype.doVinLookup = function () {
	        var _this = this;
	        this.salesOpportunityTradesService.performVinLookup(this.tradeEvent, this.facade.model, this.dealershipId)
	            .then(function (vinLookupResult) {
	            _this.vinError = vinLookupResult.error;
	        });
	    };
	    InlineEditTradeYearMakeModelVinController.prototype.clearVinError = function () {
	        this.vinError = 0;
	    };
	    InlineEditTradeYearMakeModelVinController.prototype.onYearChanged = function () {
	        this.salesOpportunityTradesService.onYearChanged(this.tradeEvent, this.facade.model, this.setIsLoading);
	    };
	    InlineEditTradeYearMakeModelVinController.prototype.onMakeChanged = function () {
	        this.salesOpportunityTradesService.onMakeChanged(this.tradeEvent, this.facade.model, this.setIsLoading);
	    };
	    InlineEditTradeYearMakeModelVinController.prototype.onModelChanged = function () {
	        this.salesOpportunityTradesService.onModelChanged(this.tradeEvent, this.facade.model, this.setIsLoading);
	    };
	    InlineEditTradeYearMakeModelVinController.prototype.toggleFreeText = function () {
	        this.facade.model.isFreeText = !this.facade.model.isFreeText;
	        this.addVehicleText = (this.facade.model.isFreeText) ? this._useDropDownsText : this._enterVehicleManuallyText;
	    };
	    InlineEditTradeYearMakeModelVinController.prototype.updateFreeTextField = function (refDef) {
	        refDef.value = "";
	    };
	    InlineEditTradeYearMakeModelVinController.prototype.saveTrade = function (form) {
	        this.isSubmitted = true;
	        this.validateForm();
	        if (this.validationResult.isValid) {
	            _super.prototype.submit.call(this, form);
	        }
	    };
	    InlineEditTradeYearMakeModelVinController.prototype.validateForm = function () {
	        if (this.isSubmitted)
	            this.validationResult = this.salesOpportunityTradesService.validateTrade(this.facade.model);
	    };
	    InlineEditTradeYearMakeModelVinController.prototype.stringToNumber = function (year) {
	        return parseInt(year);
	    };
	    InlineEditTradeYearMakeModelVinController.$inject = [
	        '$scope',
	        'inlineEditingService',
	        'salesOpportunityTradesService',
	        'TranslationCache',
	        'modalService',
	        '$translate',
	        '$q'
	    ];
	    return InlineEditTradeYearMakeModelVinController;
	}(InlineEditController));
	module.exports = InlineEditTradeYearMakeModelVinController;


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var directive = __webpack_require__(324);
	module.exports = angular.module("crm.ui.inlineEditing.connectionRelationship", [])
	    .directive("crmInlineEditConnectionRelationship", directive);


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(325);
	var inlineEditDirective = __webpack_require__(269);
	function inlineEditConnectionRelationshipDirective() {
	    var directive = inlineEditDirective();
	    directive.templateUrl = "app/ui/inlineEditing/fields/connectionRelationship/inlineEditingConnectionRelationshipTemplate.html";
	    directive.controller = controller;
	    directive.scope['refDefs'] = "=";
	    return directive;
	}
	module.exports = inlineEditConnectionRelationshipDirective;


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var inlineEditController = __webpack_require__(270);
	var InlineEditConnectionRelationshipController = (function (_super) {
	    __extends(InlineEditConnectionRelationshipController, _super);
	    function InlineEditConnectionRelationshipController() {
	        _super.apply(this, arguments);
	    }
	    InlineEditConnectionRelationshipController.prototype.updateRefDefs = function () {
	        this.facade.fields[1].fieldValues = this.refDefs.subtypes[this.facade.model.primary.value];
	        this.facade.model.secondary = this.facade.fields[1].fieldValues[0];
	    };
	    return InlineEditConnectionRelationshipController;
	}(inlineEditController));
	module.exports = InlineEditConnectionRelationshipController;


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var inlineEditingIndividualEmailDirective = __webpack_require__(327);
	module.exports = angular.module("crm.inlineEditingIndividualEmail", [])
	    .directive("crmInlineEditingIndividualEmail", inlineEditingIndividualEmailDirective);


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var Controller = __webpack_require__(270);
	inlineEditingIndividualEmailDirective.$inject = [];
	function inlineEditingIndividualEmailDirective() {
	    return {
	        restrict: "E",
	        scope: {
	            facade: "=",
	            inline: "=",
	            contact: "=",
	            hasValue: "="
	        },
	        transclude: true,
	        templateUrl: "app/ui/inlineEditing/fields/individualEmail/inlineEditingIndividualEmailTemplate.html",
	        controller: Controller,
	        controllerAs: "ctrl",
	        bindToController: true,
	        link: function (scope, element, attrs, controller) {
	            var unbind = scope.$watch("ctrl.facade", function (facade) {
	                if (facade) {
	                    if (facade.then != undefined) {
	                        facade.then(function (realFacade) {
	                            controller.setElement(element, realFacade);
	                        });
	                    }
	                    else {
	                        controller.setElement(element, facade);
	                    }
	                    unbind();
	                }
	            });
	        }
	    };
	}
	module.exports = inlineEditingIndividualEmailDirective;


/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var Directive = __webpack_require__(329);
	module.exports = angular.module("crm.inlineEditOrganizationPrimaryContact", [])
	    .directive("crmInlineEditOrganizationPrimaryContact", Directive);


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var Controller = __webpack_require__(330);
	function Directive() {
	    var directive = {
	        restrict: "E",
	        scope: {
	            facade: '=',
	            hasValue: '=',
	            // TODO: Temp solution for disable inline edit when cross site
	            disableEditCrossSite: '='
	        },
	        transclude: true,
	        templateUrl: 'app/ui/inlineEditing/fields/organizationPrimaryContact/template.html',
	        controller: Controller,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        link: function (scope, element, attrs, controller) {
	            var unbind = scope.$watch('ctrl.facade', function (facade) {
	                if (facade) {
	                    if (facade.then != undefined) {
	                        facade.then(function (realFacade) {
	                            controller.setElement(element, realFacade);
	                        });
	                    }
	                    else {
	                        controller.setElement(element, facade);
	                    }
	                    unbind();
	                }
	            });
	        }
	    };
	    return directive;
	}
	module.exports = Directive;


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var InlineEditController = __webpack_require__(270);
	var Controller = (function (_super) {
	    __extends(Controller, _super);
	    function Controller($scope, inlineEditingService, modalService, $translate, $q, messageBus, ContactService, eventManagerService, CrmConstants) {
	        _super.call(this, $scope, inlineEditingService, modalService, $translate, $q);
	        this.messageBus = messageBus;
	        this.ContactService = ContactService;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        var self = this;
	        var unlinkPrimaryEvent = eventManagerService.subscribe(CrmConstants.CONTACT.ORGANIZATION_PRIMARY_CONTACT_UNLINKED, function () {
	            if (self.facade.model) {
	                self.unlinkContact();
	            }
	        });
	        $scope.$on('$destroy', function () {
	            eventManagerService.unSubscribe(CrmConstants.CONTACT.ORGANIZATION_PRIMARY_CONTACT_UNLINKED, unlinkPrimaryEvent);
	        });
	    }
	    Controller.prototype.openSearchModal = function () {
	        var self = this;
	        self.messageBus.ask(top, {
	            from: 'crm',
	            to: 'shell',
	            task: 'modal.open',
	            timeout: 480000,
	            data: {
	                targetAppId: 'search',
	                targetAppRoute: 'customerSearch/individual'
	            }
	        }, function (data) {
	            var contactId = data.data.result;
	            self.ContactService.get({
	                contactId: contactId,
	                summaryOnly: true
	            }).then(function (resolution) {
	                var model = self.facade.model;
	                model.primaryContactId = contactId;
	                model.First = resolution.firstName;
	                model.Middle = '';
	                model.Last = resolution.lastName;
	                model.Friendly = '';
	                self.inlineEditForm.$setDirty();
	            });
	        });
	    };
	    Controller.prototype.unlinkContact = function () {
	        var model = this.facade.model;
	        model.primaryContactId = '0';
	        model.First = '';
	        model.Middle = '';
	        model.Last = '';
	        model.Friendly = '';
	        this.inlineEditForm.$setDirty();
	    };
	    Controller.prototype.isLinked = function () {
	        return this.facade.model.primaryContactId && this.facade.model.primaryContactId != '0';
	    };
	    Controller.prototype.savePrimaryContact = function (form) {
	        _super.prototype.submit.call(this, form);
	        this.inlineEditForm.$setPristine();
	    };
	    Controller.$inject = [
	        '$scope',
	        'inlineEditingService',
	        'modalService',
	        '$translate',
	        '$q',
	        'messageBus',
	        'ContactService',
	        'eventManagerService',
	        'CrmConstants'
	    ];
	    return Controller;
	}(InlineEditController));
	module.exports = Controller;


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var socialMediaContactDirective_1 = __webpack_require__(332);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.socialMediaContact", [])
	    .directive("crmSocialMediaContact", socialMediaContactDirective_1.socialMediaContactDirective);


/***/ },
/* 332 */
/***/ function(module, exports) {

	"use strict";
	function socialMediaContactDirective($rootScope, $window) {
	    return {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            isOrganization: '@'
	        },
	        templateUrl: "app/ui/socialMediaContact/socialMediaTemplate.html",
	        controllerAs: 'ctrl',
	        bindToController: true,
	        controller: SocialMediaContactController
	    };
	    function SocialMediaContactController() {
	        var ctrl = this;
	        ctrl.openWebsite = function (websiteUrl) {
	            $window.open(websiteUrl);
	        };
	        ctrl.openFacebook = function (facebook) {
	            $window.open("https://www.facebook.com/" + facebook);
	        };
	        ctrl.openTwitter = function (twitter) {
	            $window.open("https://www.twitter.com/" + twitter);
	        };
	    }
	}
	exports.socialMediaContactDirective = socialMediaContactDirective;
	socialMediaContactDirective.$inject = ['$rootScope', '$window'];


/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var intlPhoneDirective_1 = __webpack_require__(334);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.intlPhone", [])
	    .directive("crmIntlPhone", intlPhoneDirective_1.intlPhoneDirective);


/***/ },
/* 334 */
/***/ function(module, exports) {

	"use strict";
	function intlPhoneDirective($rootScope, GuidService, $timeout, $compile) {
	    return {
	        restrict: "E",
	        scope: {
	            contact: "=",
	            model: "@",
	            form: "=",
	            isValid: "&?"
	        },
	        link: function (scope, element, attrs) {
	            $timeout(function () {
	                scope.id = GuidService.generate();
	            });
	            $timeout(function () {
	                initPhoneInput();
	                addSpanForValidation();
	            });
	            function getSpanForValidation() {
	                return '<span ng-if="form.$submitted && !contact.contactPoints.isValid()" class="form-invalid-message" name="pointOfContactEmailError">{{ ::\'crm.contact.headers.ONE_POINT_OF_CONTACT\' | translate}}</span>';
	            }
	            function addSpanForValidation() {
	                $("#" + scope.id).after($compile(getSpanForValidation())(scope));
	            }
	            function onFocus(textField) {
	                var targetString = ' ext. ';
	                if (textField.val) {
	                    var value = textField.val();
	                    if (value.length >= targetString.length &&
	                        value.slice(-targetString.length) === targetString) {
	                        textField.val(value.replace(targetString, ''));
	                    }
	                }
	            }
	            function initPhoneInput() {
	                var textField = element.find('#' + scope.id);
	                textField.intlTelInput({
	                    nationalMode: true,
	                    autoHideDialCode: true,
	                    allowExtensions: true,
	                    onlyCountries: ["us"]
	                });
	                textField.on('focus', onFocus);
	                scope.$on('$destroy', function () {
	                    textField.off('focus', onFocus);
	                });
	                element.find('.flag-dropdown .selected-flag')
	                    .attr('tabindex', -1);
	            }
	        },
	        templateUrl: "app/ui/intlPhone/intlPhoneTemplate.html"
	    };
	}
	exports.intlPhoneDirective = intlPhoneDirective;
	intlPhoneDirective.$inject = ['$rootScope', 'GuidService', '$timeout', '$compile'];


/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var alertDirective = __webpack_require__(336);
	var alertMessageDirective = __webpack_require__(338);
	module.exports = angular.module("crm.ui.alert", [])
	    .directive("crmAlert", alertDirective)
	    .directive("crmAlertMessage", alertMessageDirective);


/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var alertController = __webpack_require__(337);
	function alertDirective() {
	    var directive = {
	        restrict: 'E',
	        templateUrl: 'app/ui/alert/alertTemplate.html',
	        scope: {
	            alertNames: '=',
	            closeAlertNames: '=',
	            displaySeconds: '='
	        },
	        controller: alertController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = alertDirective;


/***/ },
/* 337 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var Alert = (function () {
	    function Alert(name, message, alertType) {
	        if (message === void 0) { message = ''; }
	        if (alertType === void 0) { alertType = ''; }
	        this.stateClass = '';
	        this.name = name;
	        this.message = message;
	        this.alertType = alertType;
	    }
	    return Alert;
	}());
	var alertController = (function () {
	    function alertController($scope, $timeout, eventManagerService) {
	        this.$scope = $scope;
	        this.$timeout = $timeout;
	        this.eventManagerService = eventManagerService;
	        this.subscriptions = [];
	        this.displayStatusChangeEvents = [];
	        this.init();
	    }
	    alertController.prototype.init = function () {
	        var _this = this;
	        var self = this;
	        _.each(this.alertNames, function (name) {
	            var event = self.eventManagerService.subscribe(name, function (info) {
	                alertController.displayStatusChange(self, info);
	            });
	            self.displayStatusChangeEvents[name] = event;
	        });
	        _.each(this.closeAlertNames, function (name) {
	            var event = self.eventManagerService.subscribe(name, function (info) {
	                var alert = alertController.getAlertByName(self, info.closingAlertName);
	                alert.alertType = info.alertType;
	                self.closeAlert(alert);
	            });
	            self.displayStatusChangeEvents[name] = event;
	        });
	        this.$scope.$on('$destroy', function () { _this.destroy(); });
	    };
	    alertController.prototype.destroy = function () {
	        var self = this;
	        _.each(self.alertNames, function (name) {
	            self.eventManagerService.unSubscribe(name, self.displayStatusChangeEvents[name]);
	        });
	    };
	    alertController.displayStatusChange = function (controller, info) {
	        var alert = alertController.getAlertByName(controller, info.alertName);
	        alert.alertType = info.alertType;
	        alert.alertCallback = info.alertCallback;
	        if (controller.displaySeconds && controller.displaySeconds > 0) {
	            controller.$timeout(function () {
	                controller.closeAlert(alert);
	            }, controller.displaySeconds * 1000);
	        }
	        if (info.closeAlert) {
	            controller.closeAlert(alert);
	        }
	        else if (alert.stateClass == 'open') {
	            alert.message = info.message;
	            alert.messageTransitionClass = '';
	        }
	        else {
	            alert.message = info.message;
	            controller.$timeout(function () {
	                alert.stateClass = 'open';
	            });
	        }
	    };
	    alertController.getAlertByName = function (controller, alertName) {
	        for (var i in controller.subscriptions) {
	            if (controller.subscriptions[i].name === alertName)
	                return controller.subscriptions[i];
	        }
	        var alert = new Alert(alertName);
	        controller.subscriptions.push(alert);
	        return alert;
	    };
	    alertController.prototype.closeAlert = function (alert) {
	        for (var i = 0; i < this.subscriptions.length; ++i) {
	            if (this.subscriptions[i] === alert) {
	                alert.stateClass = "";
	            }
	        }
	    };
	    alertController.$inject = [
	        '$scope',
	        '$timeout',
	        'eventManagerService'
	    ];
	    return alertController;
	}());
	module.exports = alertController;


/***/ },
/* 338 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	alertMessageDirective.$inject = ['$compile'];
	function alertMessageDirective($compile) {
	    return {
	        restrict: "E",
	        scope: {
	            message: '=',
	            alertCallback: '&'
	        },
	        link: link
	    };
	    function link($scope, element) {
	        var _message = $scope.message;
	        element.html(_message).show();
	        $compile(element.contents())($scope);
	        Object.defineProperty($scope, 'message', {
	            get: function () {
	                return _message;
	            },
	            set: function (newValue) {
	                _message = newValue;
	                element.html(_message).show();
	                $compile(element.contents())($scope);
	            },
	            enumerable: true,
	            configurable: true
	        });
	    }
	}
	module.exports = alertMessageDirective;


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var tabValidDirective_1 = __webpack_require__(340);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.tabValid", [])
	    .directive("crmTabValid", tabValidDirective_1.tabValidDirective);


/***/ },
/* 340 */
/***/ function(module, exports) {

	"use strict";
	function tabValidDirective() {
	    return {
	        restrict: 'A',
	        link: {
	            post: function ($scope, element, attributes) {
	                var invalidClassName = 'invalid';
	                attributes.$observe("crmTabValid", onTabValidChange);
	                function onTabValidChange(newValue) {
	                    var wasInvalid = element.hasClass(invalidClassName);
	                    var isInvalid = (newValue != "true");
	                    if (wasInvalid && !isInvalid) {
	                        element.removeClass(invalidClassName);
	                    }
	                    else if (!wasInvalid && isInvalid) {
	                        element.addClass(invalidClassName);
	                    }
	                }
	            }
	        }
	    };
	}
	exports.tabValidDirective = tabValidDirective;
	;


/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var ssnInputDirective = __webpack_require__(342);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.ssnInput", [])
	    .directive("crmSsnInput", ssnInputDirective);


/***/ },
/* 342 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	function ssnInputDirective() {
	    var directive = {
	        restrict: "E",
	        scope: {
	            model: "="
	        },
	        templateUrl: 'app/ui/ssnInput/ssnInputTemplate.html'
	    };
	    return directive;
	}
	module.exports = ssnInputDirective;


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var cardDirective = __webpack_require__(344);
	var cardItemDirective = __webpack_require__(346);
	var cardMainContentDirective = __webpack_require__(347);
	var cardSecondaryContentDirective = __webpack_require__(348);
	var badgeCardDirective = __webpack_require__(349);
	var vehicleCardDirective = __webpack_require__(350);
	var vehicleServiceCardDirective = __webpack_require__(351);
	var csiCardDirective = __webpack_require__(352);
	module.exports = angular.module("crm.ui.card", [])
	    .directive("crmCard", cardDirective)
	    .directive("crmCardItem", cardItemDirective)
	    .directive("crmCardMainContent", cardMainContentDirective)
	    .directive("crmCardSecondaryContent", cardSecondaryContentDirective)
	    .directive("crmBadgeCard", badgeCardDirective)
	    .directive("crmVehicleCard", vehicleCardDirective)
	    .directive("crmVehicleServiceCard", vehicleServiceCardDirective)
	    .directive("crmCsiCard", csiCardDirective);


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var baseCardController = __webpack_require__(345);
	function cardDirective() {
	    var directive = {
	        restrict: 'E',
	        templateUrl: 'app/ui/card/card/cardTemplate.html',
	        scope: {
	            facade: '='
	        },
	        controller: baseCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = cardDirective;


/***/ },
/* 345 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var baseCardController = (function () {
	    function baseCardController() {
	    }
	    baseCardController.prototype.cardClickAction = function () {
	        if (!this._suppressCardCallback) {
	            if (this.clickOverride) {
	                this.clickOverride();
	            }
	            else {
	                this.facade.cardClickCallback();
	            }
	        }
	        else {
	            this._suppressCardCallback = false;
	        }
	    };
	    baseCardController.prototype.actionItemCallback = function (index) {
	        this._suppressCardCallback = true;
	        if (this.facade.actionItems[index].callback) {
	            this.facade.actionItems[index].callback();
	        }
	    };
	    baseCardController.prototype.getCardCssClasses = function () {
	        if (this.facade.isActive()) {
	            return ['ws-status-ribbon', 'ws-status-warning'];
	        }
	        if (this.facade.isInactive()) {
	            return ['ws-status-ribbon', 'ws-status-bad'];
	        }
	        if (this.facade.isComplete()) {
	            return ['ws-status-ribbon', 'ws-status-good'];
	        }
	        return [];
	    };
	    baseCardController.prototype.getIconBadgeStatus = function () {
	        if (this.facade.isActive()) {
	            return 'open';
	        }
	        if (this.facade.isInactive()) {
	            return 'overdue';
	        }
	        if (this.facade.isComplete()) {
	            return 'complete';
	        }
	    };
	    return baseCardController;
	}());
	module.exports = baseCardController;


/***/ },
/* 346 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	function cardItemDirective() {
	    var directive = {
	        restrict: 'E',
	        templateUrl: 'app/ui/card/cardItem/cardItemTemplate.html',
	        scope: true
	    };
	    return directive;
	}
	module.exports = cardItemDirective;


/***/ },
/* 347 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	function cardMainContentDirective() {
	    var directive = {
	        restrict: 'E',
	        templateUrl: 'app/ui/card/cardMainContent/cardMainContentTemplate.html',
	        scope: true
	    };
	    return directive;
	}
	module.exports = cardMainContentDirective;


/***/ },
/* 348 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	function cardSideContentDirective() {
	    var directive = {
	        restrict: 'E',
	        templateUrl: 'app/ui/card/cardSecondaryContent/cardSecondaryContentTemplate.html',
	        scope: true
	    };
	    return directive;
	}
	module.exports = cardSideContentDirective;


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var baseCardController = __webpack_require__(345);
	function badgeCardDirective() {
	    var directive = {
	        restrict: 'E',
	        templateUrl: 'app/ui/card/badgeCard/badgeCardTemplate.html',
	        scope: {
	            facade: '='
	        },
	        controller: baseCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = badgeCardDirective;


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var baseCardController = __webpack_require__(345);
	function vehicleCardDirective() {
	    var directive = {
	        restrict: 'E',
	        templateUrl: 'app/ui/card/vehicleCard/vehicleCardTemplate.html',
	        scope: {
	            facade: '=',
	            clickOverride: "&?",
	        },
	        controller: baseCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = vehicleCardDirective;


/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var baseCardController = __webpack_require__(345);
	function vehicleServiceCardDirective() {
	    var directive = {
	        restrict: 'E',
	        templateUrl: 'app/ui/card/vehicleServiceCard/vehicleServiceCardTemplate.html',
	        scope: {
	            facade: '='
	        },
	        controller: baseCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = vehicleServiceCardDirective;


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var CSICardController = __webpack_require__(353);
	function CSICardDirective() {
	    var directive = {
	        restrict: 'E',
	        templateUrl: 'app/ui/card/csiCard/csiCardTemplate.html',
	        scope: {
	            facade: '='
	        },
	        controller: CSICardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = CSICardDirective;


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var moment = __webpack_require__(19);
	var BaseCardController = __webpack_require__(345);
	var CSICardController = (function (_super) {
	    __extends(CSICardController, _super);
	    function CSICardController(ServiceWrapper, $stateParams, modalService, $state, CrmConstants, TranslationCache, $scope, CsiEventRefDefService, eventManagerService) {
	        var _this = this;
	        _super.call(this);
	        this.ServiceWrapper = ServiceWrapper;
	        this.$stateParams = $stateParams;
	        this.modalService = modalService;
	        this.$state = $state;
	        this.CrmConstants = CrmConstants;
	        this.TranslationCache = TranslationCache;
	        this.$scope = $scope;
	        this.CsiEventRefDefService = CsiEventRefDefService;
	        this.eventManagerService = eventManagerService;
	        this.templateUrl = "app/csi/sharedTemplates/statusModal.html";
	        this.completionDate = moment().format("MM/DD/YYYY");
	        this.statuses = [];
	        this.title = "Status";
	        this.CsiEventRefDefService = CsiEventRefDefService;
	        this.csiEvent = this.facade.getCSIEvent();
	        if (this.csiEvent) {
	            this.initializeStatusList();
	        }
	        var eventSubscription = eventManagerService.subscribe(CrmConstants.CSI_EVENT.CSI_LOADED, function (csiEvent) {
	            _this.csiEvent = csiEvent;
	            _this.initializeStatusList();
	        });
	    }
	    CSICardController.prototype.initializeStatusList = function () {
	        var self = this;
	        this.ServiceWrapper.get(this.CsiEventRefDefService, this.$stateParams.contactId).then(function (response) {
	            self.statuses = response.Statuses;
	            var elementPos = self.statuses.map(function (x) { return x.value; }).indexOf(self.csiEvent.status.value);
	            self.selectedStatus = self.statuses[elementPos];
	            //self.selectedStatus = self.csiEvent.status;
	        });
	    };
	    ;
	    CSICardController.prototype.getCardClass = function () {
	        if (this.facade.isInactive && this.facade.isInactive()) {
	            return 'overdue';
	        }
	        else if (this.facade.isComplete && this.facade.isComplete()) {
	            return 'complete';
	        }
	        return 'open';
	    };
	    CSICardController.prototype.showStatusModal = function () {
	        this.modalManager = this.modalService.openModalViaTemplateUrl(this.templateUrl, this, true);
	        this.selectedStatus = this.csiEvent.status;
	    };
	    CSICardController.prototype.statusModalSave = function () {
	        this.csiEvent.status = this.selectedStatus;
	        this.modalManager.cancel();
	    };
	    CSICardController.prototype.cancel = function () {
	        this.modalManager.cancel();
	    };
	    CSICardController.prototype.closeModal = function () {
	        this.modalManager.cancel();
	    };
	    CSICardController.prototype.onStatusChange = function (changedStatus) {
	        if (changedStatus.selected && !this.statuses.some(function (s) { return s != changedStatus && s.selected; })) {
	            for (var i = 0; i < this.statuses.length; ++i) {
	                var status = this.statuses[i];
	                status.selected = true;
	                if (status == changedStatus) {
	                    break;
	                }
	            }
	        }
	    };
	    CSICardController.$inject = [
	        'ServiceWrapper',
	        '$stateParams',
	        'modalService',
	        '$state',
	        'CrmConstants',
	        'TranslationCache',
	        '$scope',
	        'CsiEventRefDefService',
	        'eventManagerService'
	    ];
	    return CSICardController;
	}(BaseCardController));
	module.exports = CSICardController;


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var PhoneNumberViewDirective = __webpack_require__(355);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.ui.phoneNumberView", [])
	    .directive('crmPhoneNumberView', PhoneNumberViewDirective);


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var phoneNumberViewController = __webpack_require__(356);
	function phoneNumberViewDirective() {
	    var directive = {
	        restrict: 'E',
	        templateUrl: 'app/ui/phoneNumberView/phoneNumberViewTemplate.html',
	        scope: {
	            phoneNumber: '=',
	            letterOnly: '&',
	            doNotCall: '='
	        },
	        controllerAs: 'ctrl',
	        bindToController: true,
	        controller: phoneNumberViewController
	    };
	    return directive;
	}
	module.exports = phoneNumberViewDirective;


/***/ },
/* 356 */
/***/ function(module, exports) {

	"use strict";
	var PhoneNumberViewController = (function () {
	    function PhoneNumberViewController(PhoneNumberLabelService) {
	        this.PhoneNumberLabelService = PhoneNumberLabelService;
	        this.initialized = false;
	        this.initialized = true;
	        this.updateLabel();
	        this.type = this.phoneNumber.phoneType == 'mobile' ? 'mobile' : 'default';
	    }
	    Object.defineProperty(PhoneNumberViewController.prototype, "phoneNumber", {
	        get: function () {
	            return this._phoneNumber;
	        },
	        set: function (value) {
	            this._phoneNumber = value;
	            if (this.initialized) {
	                this.updateLabel();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PhoneNumberViewController.prototype.doNotCallCheck = function () {
	        return this.doNotCall;
	    };
	    PhoneNumberViewController.prototype.updateLabel = function () {
	        this.label = this.PhoneNumberLabelService.getLabel(this.phoneNumber, !!this.letterOnly);
	    };
	    PhoneNumberViewController.$inject = [
	        'PhoneNumberLabelService'
	    ];
	    return PhoneNumberViewController;
	}());
	module.exports = PhoneNumberViewController;


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts" />
	var masterDetailExpanderDirective = __webpack_require__(358);
	var angular = __webpack_require__(2);
	module.exports = angular.module("co.masterDetailExpander", [])
	    .directive(masterDetailExpanderDirective.directiveName, masterDetailExpanderDirective);


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts" />
	var masterDetailExpanderController = __webpack_require__(359);
	var masterDetailExpanderDirective = function () {
	    return {
	        restrict: 'E',
	        controller: masterDetailExpanderController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/ui/masterDetailExpander/masterDetailExpanderTemplate.html',
	        scope: {
	            headerTitle: '@',
	            tristate: '=',
	            expanded: '=',
	            getHeaderButtons: '&'
	        }
	    };
	};
	masterDetailExpanderDirective.directiveName = "coMasterDetailExpander";
	module.exports = masterDetailExpanderDirective;


/***/ },
/* 359 */
/***/ function(module, exports) {

	"use strict";
	var MasterDetailExpanderController = (function () {
	    function MasterDetailExpanderController() {
	        this.tristate = true;
	        this.collapsed = false;
	        if (!this.headerTitle) {
	            this.headerButtons = this.getHeaderButtons().buttons;
	        }
	        else {
	            this.headerButtons = [];
	        }
	    }
	    MasterDetailExpanderController.prototype.collapse = function () {
	        this.collapsed = !this.expanded;
	        this.expanded = false;
	    };
	    MasterDetailExpanderController.prototype.expand = function () {
	        if (this.tristate) {
	            this.expanded = !this.collapsed;
	        }
	        this.collapsed = false;
	    };
	    MasterDetailExpanderController.$inject = [];
	    return MasterDetailExpanderController;
	}());
	module.exports = MasterDetailExpanderController;


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var TwoButtonDirective = __webpack_require__(361);
	module.exports = angular.module("crm.ui.twoButton", [])
	    .directive('crmTwoButton', TwoButtonDirective);


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var TwoButtonController = __webpack_require__(362);
	function TwoButtonDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            primaryButtonText: '@',
	            primaryButtonCallback: '=',
	            secondaryButtonText: '@',
	            secondaryButtonCallback: '='
	        },
	        templateUrl: 'app/ui/twoButton/template.html',
	        controller: TwoButtonController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = TwoButtonDirective;


/***/ },
/* 362 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var TwoButtonController = (function () {
	    function TwoButtonController() {
	    }
	    TwoButtonController.$inject = [];
	    return TwoButtonController;
	}());
	module.exports = TwoButtonController;


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var dynamicTranslationDirective = __webpack_require__(364);
	var angular = __webpack_require__(2);
	module.exports = angular.module("crm.dynamicTranslation", [])
	    .directive("crmDynamicTranslation", dynamicTranslationDirective);


/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(2);
	var grabKeysRegex = /{([^}]+)}/gm;
	var everythingButKeysRegex = /([^{}]*?)(?:{{[^{]*}})([^{}]*)?/gm;
	dynamicTranslationDirective.$inject = [
	    'TranslationCache',
	    '$compile'
	];
	function dynamicTranslationDirective(TranslationCache, $compile) {
	    return {
	        restrict: 'E',
	        scope: {
	            model: '=',
	            translationkey: '@'
	        },
	        template: createTemplate
	    };
	    function htmlEncode(rawText) {
	        return angular.element('<div/>').text(rawText).html();
	    }
	    function createTemplate(element, attrs) {
	        var translation = TranslationCache.get(attrs['translationkey']);
	        var template = translation.replace(grabKeysRegex, '{{model.$1}}');
	        template = template.replace(everythingButKeysRegex, function (match) { return htmlEncode(match); });
	        return template;
	    }
	}
	module.exports = dynamicTranslationDirective;


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var radioButtonDirective = __webpack_require__(366);
	var angular = __webpack_require__(2);
	module.exports = angular.module("co.ui.radiobutton", [])
	    .directive('coRadioButton', radioButtonDirective);


/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var RadioButtonController = __webpack_require__(367);
	radioButtonDirective.$inject = [
	    '$timeout'
	];
	function radioButtonDirective($timeout) {
	    return {
	        restrict: 'E',
	        controller: RadioButtonController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/ui/radioButton/template.html',
	        link: onLink,
	        scope: {
	            label: '@',
	            inline: '=?',
	            checked: '=?',
	            group: '@',
	            optionName: '@',
	            callback: '&?'
	        }
	    };
	    function onLink(scope, element, attrs) {
	        var ctrl = scope.ctrl;
	        var input = element.find('input');
	        if (scope.ctrl.checked) {
	            $timeout(function () {
	                input.prop("checked", true);
	            });
	        }
	        input.click(function () {
	            $timeout(function () {
	                ctrl.checked = input.is(':checked');
	            });
	        });
	    }
	}
	module.exports = radioButtonDirective;


/***/ },
/* 367 */
/***/ function(module, exports) {

	"use strict";
	var RadioButtonController = (function () {
	    function RadioButtonController() {
	        this.id = this.group + '_' + this.optionName;
	        this.initCheckedProperty();
	        if (!this.callback) {
	            this.callback = function () { };
	        }
	    }
	    RadioButtonController.prototype.initCheckedProperty = function () {
	        var _this = this;
	        var currentGroup = this.getCurrentGroup();
	        currentGroup[this.id] = this.checked;
	        Object.defineProperty(this, "checked", {
	            get: function () {
	                return currentGroup[_this.id];
	            },
	            set: function (value) {
	                if (value) {
	                    for (var key in currentGroup) {
	                        currentGroup[key] = false;
	                    }
	                }
	                currentGroup[_this.id] = value;
	                _this.callback();
	            },
	            enumerable: true,
	            configurable: true
	        });
	    };
	    RadioButtonController.prototype.getCurrentGroup = function () {
	        if (this.group) {
	            if (!RadioButtonController.groups.hasOwnProperty(this.group)) {
	                RadioButtonController.groups[this.group] = {};
	            }
	            return RadioButtonController.groups[this.group];
	        }
	        throw "you can't get the current group before the group is set";
	    };
	    RadioButtonController.groups = {};
	    RadioButtonController.$inject = [];
	    return RadioButtonController;
	}());
	module.exports = RadioButtonController;


/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var checklistItemDirective = __webpack_require__(369);
	var angular = __webpack_require__(2);
	module.exports = angular.module("co.ui.checklistItem", [])
	    .directive('coChecklistItem', checklistItemDirective);


/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ChecklistItemController = __webpack_require__(370);
	function checklistItemDirective() {
	    return {
	        restrict: 'E',
	        controller: ChecklistItemController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/ui/checklistItem/template.html',
	        scope: {
	            checked: '=',
	            inline: '=?'
	        },
	        transclude: true
	    };
	}
	module.exports = checklistItemDirective;


/***/ },
/* 370 */
/***/ function(module, exports) {

	"use strict";
	var ChecklistItemController = (function () {
	    function ChecklistItemController() {
	        if (this.inline == null) {
	            this.inline = true;
	        }
	    }
	    return ChecklistItemController;
	}());
	module.exports = ChecklistItemController;


/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var VerticalExpanderDirective = __webpack_require__(372);
	var ExpandableDirective = __webpack_require__(375);
	module.exports = angular.module("common.ui.verticalExpander", [])
	    .directive('coVerticalExpander', VerticalExpanderDirective)
	    .directive('coExpandable', ExpandableDirective);


/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var VerticalExpanderController = __webpack_require__(373);
	VerticalExpanderDirective.$inject = [
	    '$timeout'
	];
	function VerticalExpanderDirective($timeout) {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            coExpandedText: '@?',
	            coCollapsedText: '@?',
	            coCompact: '=?',
	            coExpanded: '=?'
	        },
	        transclude: true,
	        templateUrl: 'app/ui/verticalExpander/template.html',
	        controller: VerticalExpanderController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        link: link
	    };
	    function link(scope, element, attrs, controller, transcludeFn) {
	        var expanderSection = element.find('.ws-expand-section');
	        controller.updateCanExpand = function () {
	            $timeout(function () {
	                var expandablesFound = element.find('.ws-expandable').length > 0;
	                var scrollHeight = expanderSection[0].scrollHeight;
	                var innerHeight = expanderSection.innerHeight();
	                var isOverflown = scrollHeight > innerHeight;
	                controller.canExpand = controller.coCanExpand &&
	                    (isOverflown || expandablesFound);
	            });
	        };
	        controller.updateCanExpand();
	    }
	    return directive;
	}
	module.exports = VerticalExpanderDirective;


/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var EventHandler = __webpack_require__(374);
	var VerticalExpanderDirective = (function () {
	    function VerticalExpanderDirective() {
	        this.expandedChanged = new EventHandler();
	        this._coCanExpand = true;
	        this.setButtonText();
	    }
	    Object.defineProperty(VerticalExpanderDirective.prototype, "coExpanded", {
	        get: function () {
	            return this._coExpanded;
	        },
	        set: function (value) {
	            this._coExpanded = value;
	            if (this.expandedChanged) {
	                this.expandedChanged.fire(value);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VerticalExpanderDirective.prototype, "coCanExpand", {
	        get: function () {
	            return this._coCanExpand;
	        },
	        set: function (value) {
	            this._coCanExpand = value;
	            if (this.updateCanExpand) {
	                this.updateCanExpand();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    VerticalExpanderDirective.prototype.toggleExpand = function () {
	        this.coExpanded = !this.coExpanded;
	        this.setButtonText();
	    };
	    VerticalExpanderDirective.prototype.setButtonText = function () {
	        if (this.coExpanded) {
	            this.buttonText = this.coExpandedText;
	        }
	        else {
	            this.buttonText = this.coCollapsedText;
	        }
	    };
	    VerticalExpanderDirective.$inject = [];
	    return VerticalExpanderDirective;
	}());
	module.exports = VerticalExpanderDirective;


/***/ },
/* 374 */
/***/ function(module, exports) {

	"use strict";
	var EventHandler = (function () {
	    function EventHandler() {
	        this.callbacks = [];
	    }
	    EventHandler.prototype.subscribe = function (callback) {
	        var _this = this;
	        var index = this.callbacks.indexOf(callback);
	        if (index < 0) {
	            this.callbacks.push(callback);
	        }
	        return function () {
	            _this.unsubscribe(callback);
	        };
	    };
	    EventHandler.prototype.unsubscribe = function (callback) {
	        var index = this.callbacks.indexOf(callback);
	        while (index > -1) {
	            this.callbacks.splice(index, 1);
	            index = this.callbacks.indexOf(callback);
	        }
	    };
	    EventHandler.prototype.fire = function (args) {
	        for (var i = 0; i < this.callbacks.length; ++i) {
	            this.callbacks[i](args);
	        }
	    };
	    return EventHandler;
	}());
	module.exports = EventHandler;


/***/ },
/* 375 */
/***/ function(module, exports) {

	"use strict";
	ExpandableDirective.$inject = ['$timeout', '$compile'];
	function ExpandableDirective($timeout, $compile) {
	    var directive = {
	        restrict: 'A',
	        require: '^coVerticalExpander',
	        link: function ($scope, $element, $attr, ctrl) {
	            var isExpandable = $scope.$eval($attr.coExpandable);
	            if (isExpandable) {
	                $element.addClass('ws-expandable');
	                var unsubscribe = ctrl.expandedChanged.subscribe(function (value) {
	                    $timeout(function () {
	                        $scope.isParentExpanded = value;
	                    });
	                });
	                $scope.$on("$destroy", function () {
	                    unsubscribe();
	                });
	            }
	        }
	    };
	    var isParentExpanded = 'isParentExpanded';
	    return directive;
	}
	module.exports = ExpandableDirective;


/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path="../../../typings/index.d.ts" />
	var DuplicateContactWarningBannerDirective = __webpack_require__(377);
	module.exports = angular.module('crm.ui.duplicateBanner', [])
	    .directive('duplicateContactBanner', DuplicateContactWarningBannerDirective);


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../../typings/index.d.ts" />
	"use strict";
	var DuplicateContactWarningBannerController = __webpack_require__(378);
	function DuplicateContactWarningBannerDirective() {
	    return {
	        restrict: 'E',
	        templateUrl: 'app/ui/duplicateBanner/duplicateContactWarningBannerTemplate.html',
	        controller: DuplicateContactWarningBannerController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        scope: {
	            contact: '=',
	            onSelect: '&?'
	        }
	    };
	}
	module.exports = DuplicateContactWarningBannerDirective;


/***/ },
/* 378 */
/***/ function(module, exports) {

	/// <reference path="../../../typings/index.d.ts" />
	"use strict";
	var DuplicateContactWarningBannerController = (function () {
	    function DuplicateContactWarningBannerController($scope, DuplicateContactSearchService, modalService, permissionService) {
	        this.$scope = $scope;
	        this.DuplicateContactSearchService = DuplicateContactSearchService;
	        this.modalService = modalService;
	        this.permissionService = permissionService;
	        this.templateUrl = 'app/ui/duplicateBanner/templates/duplicateContactModal.html';
	        var self = this;
	        permissionService.getPermission('CDAllowDuplicate').then(function (permission) {
	            self.canAddDuplicate = permission.add;
	        });
	        var deregister = $scope.$watchGroup([
	            'ctrl.contact.firstName',
	            'ctrl.contact.lastName',
	            'ctrl.contact.address',
	            'ctrl.contact.contactPoints.email',
	            'ctrl.contact.contactPoints.mobile',
	            'ctrl.contact.contactPoints.work',
	            'ctrl.contact.contactPoints.other',
	            'ctrl.contact.contactPoints.email.value',
	            'ctrl.contact.contactPoints.mobile.value',
	            'ctrl.contact.contactPoints.work.value',
	            'ctrl.contact.contactPoints.other.value'
	        ], function (vals) {
	            if (vals) {
	                //NOTE: the last 4 values watched are to mimic a deep watch without killing performance.
	                //These should not be removed even though they are not explicitly used.
	                var phones = [];
	                if (vals[4]) {
	                    phones.push(vals[4]);
	                }
	                if (vals[5]) {
	                    phones.push(vals[5]);
	                }
	                if (vals[6]) {
	                    phones.push(vals[6]);
	                }
	                var searchSettings = {
	                    searchEndpoint: 'Contact',
	                    firstName: vals[0] ? vals[0] : '',
	                    lastName: vals[1] ? vals[1] : '',
	                    address: vals[2] ? vals[2] : { address1: '' },
	                    email: vals[3] && vals[3].value ? vals[3].value : '',
	                    phoneNumbers: phones
	                };
	                var shouldRunSearch = searchSettings.firstName.length > 2 ||
	                    searchSettings.lastName.length > 2 ||
	                    searchSettings.address.address1.length > 2 ||
	                    searchSettings.email.length > 2 ||
	                    (searchSettings.phoneNumbers &&
	                        _.some(searchSettings.phoneNumbers, function (phone) {
	                            return phone.value.length > 2;
	                        }));
	                if (shouldRunSearch) {
	                    self.searchForDuplicates(searchSettings);
	                }
	                else {
	                    self.resetDuplicates();
	                }
	            }
	        });
	        $scope.$on('$destroy', function () {
	            deregister();
	        });
	    }
	    DuplicateContactWarningBannerController.prototype.searchForDuplicates = function (contact) {
	        var self = this;
	        var search = this.DuplicateContactSearchService.search(contact);
	        if (search) {
	            search.then(function (results) {
	                if (!results.error) {
	                    self.getDuplicatesFromResults(results);
	                }
	            });
	        }
	        else {
	            this.resetDuplicates();
	        }
	    };
	    DuplicateContactWarningBannerController.prototype.resetDuplicates = function () {
	        this.duplicatesCount = 0;
	        this.duplicates = [];
	    };
	    DuplicateContactWarningBannerController.prototype.getDuplicatesFromResults = function (results) {
	        this.duplicates = _.chain(results.results)
	            .pluck('model')
	            .filter(function (result) {
	            return !result.isOrganization();
	        })
	            .value();
	        this.duplicates.sort(function (a, b) {
	            var aName = a.fullName;
	            var bName = b.fullName;
	            return aName > bName ? 1 : 0;
	        });
	        this.duplicatesCount = this.duplicates.length;
	    };
	    DuplicateContactWarningBannerController.prototype.showModal = function () {
	        this.modalManager = this.modalService.openModalViaTemplateUrl(this.templateUrl, this);
	    };
	    DuplicateContactWarningBannerController.prototype.closeModal = function () {
	        this.modalManager.cancel();
	    };
	    DuplicateContactWarningBannerController.prototype.onDuplicateCustomerSelect = function (customer) {
	        this.modalManager.accept();
	        if (this.onSelect) {
	            this.onSelect({ contact: customer });
	        }
	    };
	    DuplicateContactWarningBannerController.$inject = ['$scope', 'DuplicateContactSearchService', 'modalService', 'permissionService'];
	    return DuplicateContactWarningBannerController;
	}());
	module.exports = DuplicateContactWarningBannerController;


/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path="../../../typings/index.d.ts" />
	var currencyFormatterDirective_1 = __webpack_require__(380);
	var invertedValueFormatterDirective_1 = __webpack_require__(381);
	var phoneNumberFilter_1 = __webpack_require__(382);
	module.exports = angular.module('crm.ui.formatters', [])
	    .directive('crmCurrencyFormatter', currencyFormatterDirective_1.CurrencyFormatterDirective)
	    .directive('crmInvertedFormatter', invertedValueFormatterDirective_1.InvertedValueFormatterDirective)
	    .filter('crmPhone', phoneNumberFilter_1.phoneNumberFilter);


/***/ },
/* 380 */
/***/ function(module, exports) {

	/// <reference path="../../../typings/index.d.ts" />
	"use strict";
	function CurrencyFormatterDirective() {
	    var link = function ($scope, $element, $attrs, modelCtrl) {
	        modelCtrl.$options = {
	            updateOn: 'blur',
	            updateOnDefault: true,
	            debounce: {
	                'blur': 0,
	                'default': 1000
	            }
	        };
	        modelCtrl.$parsers.push(function (val) {
	            val = val.trim();
	            var existingFormat = val.indexOf('$');
	            if (existingFormat != -1) {
	                if (existingFormat != 0) {
	                    modelCtrl.$setValidity('FormatError', false);
	                    return val;
	                }
	                val = val.substring(1);
	            }
	            if (val == '') {
	                val = '0';
	            }
	            try {
	                var amount = parseFloat(val).toFixed(2);
	                if (isNaN(Number(amount))) {
	                    throw "invalid input";
	                }
	            }
	            catch (e) {
	                modelCtrl.$setValidity('FormatError', false);
	                return '$0.00';
	            }
	            var transformed = '$' + amount;
	            if (transformed != val) {
	                modelCtrl.$setViewValue(transformed);
	                modelCtrl.$setValidity('FormatError', true);
	                modelCtrl.$render();
	            }
	            return transformed;
	        });
	    };
	    var directive = {
	        restrict: 'A',
	        require: 'ngModel',
	        link: link
	    };
	    return directive;
	}
	exports.CurrencyFormatterDirective = CurrencyFormatterDirective;


/***/ },
/* 381 */
/***/ function(module, exports) {

	/// <reference path="../../../typings/index.d.ts" />
	"use strict";
	function InvertedValueFormatterDirective() {
	    return {
	        require: 'ngModel',
	        link: function (scope, element, attrs, ngModel) {
	            ngModel.$parsers.push(function (val) {
	                return !val;
	            });
	            ngModel.$formatters.push(function (val) {
	                return !val;
	            });
	        }
	    };
	}
	exports.InvertedValueFormatterDirective = InvertedValueFormatterDirective;


/***/ },
/* 382 */
/***/ function(module, exports) {

	"use strict";
	var PHONE_TYPE_DEFAULT = 'default';
	var PHONE_TYPE_MOBILE = 'mobile';
	phoneNumberFilter.$inject = ['localeService'];
	function phoneNumberFilter(localeService) {
	    return function (phoneNumber, phoneType) {
	        phoneType = phoneType || PHONE_TYPE_DEFAULT;
	        var country = localeService.getCountryCodeFromCurrentLocale();
	        switch (country.toLowerCase()) {
	            case "au":
	            case "nz":
	                return getSouthwestPacificFormat(phoneNumber, phoneType);
	            case "us":
	            default:
	                return getNorthAmericaFormat(phoneNumber, phoneType);
	        }
	    };
	}
	exports.phoneNumberFilter = phoneNumberFilter;
	function getSouthwestPacificFormat(phoneNumber, phoneType) {
	    var defaultRegex = /(?:\+?61)?(\d{2})(\d{4})(\d{4})(\d+)?/;
	    var mobileRegex = /(?:\+?61)?(\d{4})(\d{3})(\d{3})(\d+)?/;
	    var regex = phoneType == PHONE_TYPE_MOBILE ? mobileRegex : defaultRegex;
	    var match = regex.exec(phoneNumber);
	    if (!match) {
	        return phoneNumber;
	    }
	    var result = "(" + match[1] + ") " + match[2] + " " + match[3];
	    if (match[4]) {
	        result += " ext. " + match[4];
	    }
	    return result;
	}
	function getNorthAmericaFormat(phoneNumber, phoneType) {
	    var regex = /\+?(1)?(\d{3})(\d{3})(\d{4})(\d+)?/;
	    var match = regex.exec(phoneNumber);
	    if (!match) {
	        return phoneNumber;
	    }
	    var result = (match[1] || '') + "(" + match[2] + ") " + match[3] + "-" + match[4];
	    if (match[5]) {
	        result += " ext. " + match[5];
	    }
	    return result;
	}


/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var pingCollectionModalComponent_1 = __webpack_require__(384);
	module.exports = angular.module('crm.ping.collection.modal', [])
	    .component('crmPingCollectionModal', new pingCollectionModalComponent_1.PingCollectionModalComponent());


/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var pingCollectionModalController_1 = __webpack_require__(385);
	var PingCollectionModalComponent = (function () {
	    function PingCollectionModalComponent() {
	        this.bindings = {
	            contactId: '<',
	            fullName: '<',
	            onClose: "&"
	        };
	        this.controller = pingCollectionModalController_1.PingCollectionModalController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/ui/pingCollectionModal/pingCollectionModalTemplate.html';
	    }
	    return PingCollectionModalComponent;
	}());
	exports.PingCollectionModalComponent = PingCollectionModalComponent;


/***/ },
/* 385 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var CLASSIC_WINDOW_URL = '/MarketingDashBoard/BuyersAlertDetails.aspx';
	var PingCollectionModalController = (function () {
	    function PingCollectionModalController($q, PingCollectionApiService, ContactVehicleApiService, classicWindowService, permissionService) {
	        var _this = this;
	        this.$q = $q;
	        this.PingCollectionApiService = PingCollectionApiService;
	        this.ContactVehicleApiService = ContactVehicleApiService;
	        this.classicWindowService = classicWindowService;
	        this.permissionService = permissionService;
	        this.openDetails = function (customerPing, $event) {
	            $event.stopPropagation();
	            _this.classicWindowService.open(CLASSIC_WINDOW_URL, {
	                siteId: _this.pingCollection.siteIdHash,
	                autoListDataId: customerPing.autoListDataIdHash,
	                userName: _this.pingCollection.userNameHash
	            });
	        };
	        this.init();
	    }
	    PingCollectionModalController.prototype.init = function () {
	        var _this = this;
	        var self = this;
	        self.isPingLoaded = false;
	        self.isVehicleLoaded = false;
	        var pingCollectionPromise = self.PingCollectionApiService.get(self.contactId);
	        var contactVehiclePromise = self.ContactVehicleApiService.get(self.contactId);
	        this.permissionService.getPermission('RevenueRadar-AlertDetailsIcon')
	            .then(function (permission) {
	            _this.revRadarPermission = permission;
	        });
	        pingCollectionPromise.then(function (pingCollection) {
	            self.pingCollection = pingCollection;
	            self.pingAmount = pingCollection.pingVehicles.reduce(function (prevSum, currVehicle) {
	                return prevSum + currVehicle.customerPings.length;
	            }, 0);
	            self.isPingLoaded = true;
	        });
	        self.$q.all([pingCollectionPromise, contactVehiclePromise]).then(function (resolutions) {
	            self.vehicles = [];
	            resolutions[0].pingVehicles.forEach(function (pingVehicle) {
	                var foundVehicle = _.find(resolutions[1], function (vehicle) {
	                    return vehicle.id === pingVehicle.vehicleId;
	                });
	                if (foundVehicle) {
	                    self.vehicles.push(foundVehicle);
	                }
	            });
	            self.isVehicleLoaded = true;
	        });
	    };
	    PingCollectionModalController.prototype.disableAllPings = function () {
	        this.pingCollection.selectedPingPreferences = [];
	    };
	    PingCollectionModalController.prototype.enableAllPings = function () {
	        this.pingCollection.selectedPingPreferences = angular.copy(this.pingCollection.pingPreferenceOptions);
	    };
	    PingCollectionModalController.prototype.savePreferences = function () {
	        this.PingCollectionApiService.setPingPreferences(this.contactId, this.pingCollection.selectedPingPreferences);
	    };
	    PingCollectionModalController.$inject = [
	        '$q',
	        'PingCollectionApiService',
	        'ContactVehicleApiService',
	        'classicWindowService',
	        'permissionService'
	    ];
	    return PingCollectionModalController;
	}());
	exports.PingCollectionModalController = PingCollectionModalController;


/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(2);
	var runningManComponent_1 = __webpack_require__(387);
	module.exports = angular.module('co.runningMan', [])
	    .component(runningManComponent_1.RunningManComponent.componentName, new runningManComponent_1.RunningManComponent());


/***/ },
/* 387 */
/***/ function(module, exports) {

	"use strict";
	var RunningManComponent = (function () {
	    function RunningManComponent() {
	        this.bindings = {
	            percentage: "="
	        };
	        this.templateUrl = "app/ui/runningMan/runningManTemplate.html";
	        this.controller = RunningManController;
	        this.controllerAs = "ctrl";
	    }
	    RunningManComponent.componentName = "coRunningMan";
	    return RunningManComponent;
	}());
	exports.RunningManComponent = RunningManComponent;
	var RunningManController = (function () {
	    function RunningManController() {
	    }
	    Object.defineProperty(RunningManController.prototype, "percentage", {
	        get: function () {
	            return this._percentage || 0;
	        },
	        set: function (value) {
	            if (typeof value === "number") {
	                value = Math.max(0, Math.min(100, value));
	                this._percentage = value;
	                this.setStyle();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RunningManController.prototype.isInProgress = function () {
	        return this.percentage > 0 && this.percentage < 100;
	    };
	    RunningManController.prototype.isComplete = function () {
	        return this._percentage == 100;
	    };
	    RunningManController.prototype.setStyle = function () {
	        this.style = {
	            width: this._percentage + "%"
	        };
	    };
	    return RunningManController;
	}());


/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(2);
	var date_component_1 = __webpack_require__(389);
	exports.DateModule = angular.module('ds.components.date', [])
	    .component(date_component_1.DateComponent.componentName, new date_component_1.DateComponent());


/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var moment = __webpack_require__(19);
	var DateComponent = (function () {
	    function DateComponent() {
	        this.bindings = {
	            input: '<dateTime',
	            mode: '@',
	            extend: '@'
	        };
	        this.controller = DateComponentController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/ui/date/date.component.html';
	    }
	    DateComponent.componentName = 'crmDate';
	    return DateComponent;
	}());
	exports.DateComponent = DateComponent;
	var MODE_NUMERIC = 'dateNumeric';
	var MODE_WORDY = 'dateWordy';
	var MODE_AGO = 'dateAgo';
	var DateComponentController = (function () {
	    function DateComponentController($locale, dateTimeHelper) {
	        this.$locale = $locale;
	        this.dateTimeHelper = dateTimeHelper;
	    }
	    DateComponentController.prototype.$onInit = function () {
	        if (this.input) {
	            this.initializeDate();
	            this.updateText();
	        }
	    };
	    DateComponentController.prototype.$onChanges = function (changes) {
	        if (changes.input && changes.input.currentValue) {
	            this.initializeDate();
	            this.updateText();
	        }
	    };
	    DateComponentController.prototype.initializeDate = function () {
	        this.date = moment(new Date(this.input));
	        this.date.locale(this.$locale.id);
	    };
	    DateComponentController.prototype.isExtended = function () {
	        return this.extend === 'true';
	    };
	    DateComponentController.prototype.updateText = function () {
	        switch (this.mode) {
	            case MODE_NUMERIC:
	                this.updateNumericText();
	                break;
	            case MODE_WORDY:
	                this.updateWordyText();
	                break;
	            case MODE_AGO:
	                this.updateAgoText();
	                break;
	        }
	    };
	    DateComponentController.prototype.updateNumericText = function () {
	        if (this.isExtended()) {
	            this.text = this.date.format('L, LT');
	        }
	        else {
	            this.text = this.date.format('L');
	        }
	    };
	    DateComponentController.prototype.updateWordyText = function () {
	        if (this.isExtended()) {
	            this.text = this.date.format('LL, LT');
	        }
	        else {
	            this.text = this.date.format('LL');
	        }
	    };
	    DateComponentController.prototype.updateAgoText = function () {
	        this.text = this.dateTimeHelper.timeAgo(this.date);
	    };
	    DateComponentController.$inject = [
	        '$locale',
	        'DateTimeHelper'
	    ];
	    return DateComponentController;
	}());


/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var ErrorServices = __webpack_require__(391);
	module.exports = angular.module("crm.error", [
	    ErrorServices.name
	]);


/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var NotFoundErrorService = __webpack_require__(392);
	module.exports = angular.module("crm.error.services", [])
	    .service("NotFoundErrorService", NotFoundErrorService);


/***/ },
/* 392 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var NotFoundErrorService = (function () {
	    function NotFoundErrorService($state) {
	        this.$state = $state;
	    }
	    NotFoundErrorService.prototype.redirectTo404 = function () {
	        this.$state.go('error404');
	    };
	    NotFoundErrorService.$inject = ['$state'];
	    return NotFoundErrorService;
	}());
	module.exports = NotFoundErrorService;


/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var SalesOpportunitySalesPanelModule = __webpack_require__(394);
	var SalesOpportunityCSIModule = __webpack_require__(399);
	var AddSalesOpportunity = __webpack_require__(406);
	var SalesOpportunityDetailViewModule = __webpack_require__(413);
	var SalesOpportunityTradeModule = __webpack_require__(424);
	var SalesOpportunityInlineEditingModule = __webpack_require__(462);
	var RecapModule = __webpack_require__(464);
	var QuickSearchModule = __webpack_require__(467);
	var SalesOpportunityChecklistModule = __webpack_require__(470);
	module.exports = angular.module('crm.sales', [
	    SalesOpportunitySalesPanelModule.name,
	    SalesOpportunityCSIModule.name,
	    AddSalesOpportunity.name,
	    SalesOpportunityDetailViewModule.name,
	    SalesOpportunityTradeModule.name,
	    SalesOpportunityInlineEditingModule.name,
	    RecapModule.name,
	    QuickSearchModule.name,
	    SalesOpportunityChecklistModule.name
	]);


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunitySalesPanelDirective = __webpack_require__(395);
	var SalesOpportunitySalesCardDirective = __webpack_require__(397);
	module.exports = angular.module("crm.sales.salesPanel", [])
	    .directive("crmSalesOpportunitySalesPanel", SalesOpportunitySalesPanelDirective)
	    .directive("crmSalesOpportunitySalesCard", SalesOpportunitySalesCardDirective);


/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunitySalesPanelController = __webpack_require__(396);
	function SalesOpportunitySalesPanelDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            contact: '=',
	            salesCounts: '='
	        },
	        templateUrl: 'app/salesOpportunity/salesOpportunitySalesPanel/SalesOpportunitySalesPanelTemplate.html',
	        controller: SalesOpportunitySalesPanelController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = SalesOpportunitySalesPanelDirective;


/***/ },
/* 396 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunitySalesPanelController = (function () {
	    function SalesOpportunitySalesPanelController($scope, $q, SalesOpportunityApiService, SalesOpportunityPermissionApiService, SalesOpportunityMergeService, EventManagerService, Constants, CrmConstants, ServiceWrapper, ODataServiceObjectFactory, ODataServiceHelpers, $translate, ModalService, DateTimeHelper, TranslationCache, StringHelper, CurrencyService, $state, $stateParams, permissionService, SalesOpportunityRefDefService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$q = $q;
	        this.SalesOpportunityApiService = SalesOpportunityApiService;
	        this.SalesOpportunityPermissionApiService = SalesOpportunityPermissionApiService;
	        this.SalesOpportunityMergeService = SalesOpportunityMergeService;
	        this.EventManagerService = EventManagerService;
	        this.Constants = Constants;
	        this.CrmConstants = CrmConstants;
	        this.ServiceWrapper = ServiceWrapper;
	        this.ODataServiceObjectFactory = ODataServiceObjectFactory;
	        this.ODataServiceHelpers = ODataServiceHelpers;
	        this.$translate = $translate;
	        this.ModalService = ModalService;
	        this.DateTimeHelper = DateTimeHelper;
	        this.TranslationCache = TranslationCache;
	        this.StringHelper = StringHelper;
	        this.CurrencyService = CurrencyService;
	        this.$state = $state;
	        this.$stateParams = $stateParams;
	        this.permissionService = permissionService;
	        this.SalesOpportunityRefDefService = SalesOpportunityRefDefService;
	        this._salesOpportunitySummaryModalTemplate = 'app/salesOpportunity/salesOpportunitySalesPanel/salesOpportunitySalesPanelModalTemplate.html';
	        this.selectedFilters = [];
	        this.selectedSort = {
	            name: '',
	            value: ''
	        };
	        this.sortOptions = [];
	        this.salesOpportunitieStatusAggregations = null;
	        this.loadingSalesOpportunities = false;
	        this.deleteModalText = {
	            title: '',
	            promptA: '',
	            forText: '',
	            promptB: '',
	            acceptButton: '',
	            cancelButton: ''
	        };
	        this.onTabSelected = function (tabName) {
	            if (tabName === _this.CrmConstants.SALES_OPPORTUNITY.SALES_TAB.NAME) {
	                _this.selectedFilters = [];
	                _this.sortOptions = [];
	                _this.loadAndSortSalesOpportunities();
	            }
	        };
	        this.onDeleteSalesOpportunity = function (salesOpportunity) {
	            if (_this.salesPermission.delete) {
	                var prompt = _this.getDeleteModalPrompt(salesOpportunity);
	                _this.ModalService.openModal(prompt, _this.deleteModalText.title, _this.deleteModalText.acceptButton, _this.deleteModalText.cancelButton)
	                    .then(function (modalInstance) {
	                    _this.SalesOpportunityApiService.delete({
	                        salesOpportunity: salesOpportunity,
	                        contact: _this.contact
	                    })
	                        .then(function () {
	                        modalInstance.close();
	                        _this.loadAndSortSalesOpportunities();
	                    }, function (error) {
	                        modalInstance.close();
	                        throw error;
	                    });
	                }, function (modalInstance) {
	                    modalInstance.dismiss();
	                });
	            }
	        };
	        this.onMergeSalesOpportunity = function (salesOpportunity) {
	            _this.initializeMergeData(salesOpportunity);
	            var self = _this;
	            _this.ModalService.openModalViaTemplateUrlPromise(_this._salesOpportunitySummaryModalTemplate, _this, function (obj) {
	                self.mergeSalesOpportunityService(obj);
	            }).then(function () {
	                throw "SalesOpportunitySummaryCardController - Modal Promise 'Accept' was called and it should NEVER be called!!!";
	            }, function (obj) {
	                obj.modalInstance.close();
	            });
	        };
	        this.setSelectedSort = function (value) {
	            _this.selectedSort.value = value;
	            _this.selectedSort.name = _this.TranslationCache.get('crm.salesOpportunity.tabs.' + value);
	            _this.loadAndSortSalesOpportunities();
	        };
	        this.setSelectedFilters = function () {
	            _this.loadAndSortSalesOpportunities();
	        };
	        this.loadAndSortSalesOpportunities = function () {
	            if (!_this.contact || !_this.contact.id || _this.loadingSalesOpportunities) {
	                return;
	            }
	            _this.preLoadAndSortSalesOpportunities();
	            var promises = [_this.getSalesOpportunities().catch(function (error) {
	                    console.log(error);
	                })];
	            _this.$q.all(promises).then(function (data) {
	                if (data[0] && data[0].data) {
	                    _this.salesOpportunities = data[0].data;
	                }
	                else {
	                    _this.salesOpportunities = [];
	                }
	                if (data[0] && data[0].aggregations) {
	                    _this.salesOpportunitieStatusAggregations = data[0].aggregations;
	                }
	                _this.countOpenClosedSalesOpportunities();
	                _this.loadingSalesOpportunities = false;
	            });
	        };
	        var tabSelectedEvent = this.EventManagerService.subscribe(this.Constants.SALES_OPPORTUNITY_TAB_SELECTED, this.onTabSelected);
	        var salesOpportunityDeletedEvent = this.EventManagerService.subscribe(this.CrmConstants.SALES_OPPORTUNITY.SALES_TAB.OPPORTUNITY_DELETED, this.onDeleteSalesOpportunity);
	        var salesOpportunityUpdateEvent = this.EventManagerService.subscribe(this.CrmConstants.SALES_OPPORTUNITY.SALES_TAB.MERGED, this.onMergeSalesOpportunity);
	        this.$scope.$on('$destroy', function () {
	            _this.EventManagerService.unSubscribe(_this.Constants.SALES_OPPORTUNITY_TAB_SELECTED, tabSelectedEvent);
	            _this.EventManagerService.unSubscribe(_this.CrmConstants.SALES_OPPORTUNITY.SALES_TAB.OPPORTUNITY_DELETED, salesOpportunityDeletedEvent);
	            _this.EventManagerService.unSubscribe(_this.CrmConstants.SALES_OPPORTUNITY.SALES_TAB.MERGED, salesOpportunityUpdateEvent);
	        });
	        var deregister = this.$scope.$watch('ctrl.contact', function (contact) {
	            if (contact) {
	                _this.loadAndSortSalesOpportunities();
	                deregister();
	            }
	        });
	        this.setSelectedSort(this.CrmConstants.DATE_ADDED_NEWEST);
	        this.sortOptions = [
	            this.CrmConstants.DATE_ADDED_NEWEST,
	            this.CrmConstants.DATE_ADDED_OLDEST,
	            this.CrmConstants.LAST_UPDATED_NEWEST,
	            this.CrmConstants.LAST_UPDATED_OLDEST,
	        ];
	        this.loadTranslations();
	        this.getPermissions();
	    }
	    SalesOpportunitySalesPanelController.prototype.canAddSalesOpportunity = function () {
	        if (!this.salesPermission || !this.salesOpportunities) {
	            return false;
	        }
	        if (!this.multipleEventPermission.restricted || this.salesOpportunities.length == 0) {
	            return true;
	        }
	        var statuses = _.map(this.salesOpportunities, function (salesOpportunity) {
	            if (!salesOpportunity || !salesOpportunity.status || !salesOpportunity.status.id) {
	                return null;
	            }
	            return salesOpportunity.status.id.toString();
	        });
	        var matchingStatuses = _.intersection(statuses, this.multipleEventPermission.enabledValues);
	        return matchingStatuses.length == 0;
	    };
	    SalesOpportunitySalesPanelController.prototype.getPermissions = function () {
	        var _this = this;
	        this.permissionService.getPermission('Sales')
	            .then(function (permission) {
	            _this.salesPermission = permission;
	        });
	        this.permissionService.getPermission('InsertRestriction:MultipleEvents')
	            .then(function (permission) {
	            _this.multipleEventPermission = permission;
	        });
	    };
	    SalesOpportunitySalesPanelController.prototype.initializeMergeData = function (salesOpportunity) {
	        var primarySalesOpp = _.find(this.salesOpportunities, function (salesOpp) {
	            return salesOpp.id === salesOpportunity.id;
	        });
	        var secondarySalesOpps = _.filter(this.salesOpportunities, function (salesOpp) {
	            return salesOpp.id !== salesOpportunity.id;
	        });
	        this.mergeData = {
	            primaryOpportunity: primarySalesOpp,
	            secondaryOpportunities: secondarySalesOpps,
	            selectedIdToMerge: null,
	            mergePending: false
	        };
	    };
	    SalesOpportunitySalesPanelController.prototype.mergeSalesOpportunityService = function (modalManager) {
	        var _this = this;
	        var data = {
	            entityId: this.contact.id,
	            primaryEventId: this.mergeData.primaryOpportunity.id,
	            secondaryEventId: this.mergeData.selectedIdToMerge
	        };
	        this.mergeData.mergePending = true;
	        return this.ServiceWrapper.post(this.SalesOpportunityMergeService, data).then(function (response) {
	            if (response.statusCode == 200) {
	                _this.loadAndSortSalesOpportunities();
	                modalManager.modalInstance.close();
	            }
	            else if (response.statusCode == 501) {
	                _this.EventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.SALES_TAB.MERGE_FAILED, {
	                    alertType: 'error',
	                    message: _this.TranslationCache.get('crm.salesOpportunity.sales.mergeModal.MERGE_FAILED_45_DAYS')
	                });
	            }
	            else if (response.statusCode == 502) {
	                _this.EventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.SALES_TAB.MERGE_FAILED, {
	                    alertType: 'error',
	                    message: _this.TranslationCache.get('crm.salesOpportunity.sales.mergeModal.MERGE_FAILED_DIFFERENT_OEM')
	                });
	            }
	            _this.mergeData.mergePending = false;
	        }, function (error) {
	            _this.mergeData.mergePending = false;
	            modalManager.modalInstance.close();
	        });
	    };
	    SalesOpportunitySalesPanelController.prototype.preLoadAndSortSalesOpportunities = function () {
	        this.salesOpportunities = [];
	        this.loadingSalesOpportunities = true;
	    };
	    SalesOpportunitySalesPanelController.prototype.getODataObject = function () {
	        var odataObject = this.ODataServiceObjectFactory.create();
	        odataObject = this.ODataServiceHelpers.setupOrderByByDateAndLastUpdated(odataObject, this.selectedSort.value);
	        odataObject = this.ODataServiceHelpers.setupCountByStatus(odataObject);
	        odataObject = this.ODataServiceHelpers.setupFilterStatus(odataObject, this.selectedFilters);
	        odataObject.params = [this.contact.id];
	        return odataObject;
	    };
	    SalesOpportunitySalesPanelController.prototype.getSalesOpportunities = function () {
	        var oDataParams = this.getODataObject();
	        return this.SalesOpportunityApiService.getOData(oDataParams);
	    };
	    SalesOpportunitySalesPanelController.prototype.countOpenClosedSalesOpportunities = function () {
	        var counts = {
	            open: 0,
	            sold: 0
	        };
	        for (var status in this.salesOpportunitieStatusAggregations) {
	            if (this.salesOpportunitieStatusAggregations[status].value != this.Constants.SALES_OPPORTUNITY_STATUS_NOT_IN_MARKET &&
	                this.salesOpportunitieStatusAggregations[status].value != this.Constants.SALES_OPPORTUNITY_STATUS_COMPLETED) {
	                counts.open += this.salesOpportunitieStatusAggregations[status].count;
	            }
	            else if (this.salesOpportunitieStatusAggregations[status].value == this.Constants.SALES_OPPORTUNITY_STATUS_COMPLETED) {
	                counts.sold += this.salesOpportunitieStatusAggregations[status].count;
	            }
	        }
	        this.EventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.SALES_TAB.UPDATED, counts);
	    };
	    SalesOpportunitySalesPanelController.prototype.loadTranslations = function () {
	        this.deleteModalText.title = this.TranslationCache.get('crm.salesOpportunity.sales.deleteModal.TITLE');
	        this.deleteModalText.promptA = this.TranslationCache.get('crm.salesOpportunity.sales.deleteModal.PROMPT_A');
	        this.deleteModalText.forText = this.TranslationCache.get('crm.salesOpportunity.sales.deleteModal.FOR');
	        this.deleteModalText.promptB = this.TranslationCache.get('crm.salesOpportunity.sales.deleteModal.PROMPT_B');
	        this.deleteModalText.acceptButton = this.TranslationCache.get('crm.salesOpportunity.sales.deleteModal.ACCEPT_BUTTON');
	        this.deleteModalText.cancelButton = this.TranslationCache.get('crm.salesOpportunity.sales.deleteModal.CANCEL_BUTTON');
	    };
	    SalesOpportunitySalesPanelController.prototype.getDeleteModalPrompt = function (salesOpportunity) {
	        var id = '<strong>#' + salesOpportunity.id + '</strong>';
	        var name = '<strong>' + this.contact.getFullName() + '</strong>';
	        return this.deleteModalText.promptA + id + this.deleteModalText.forText + name + this.deleteModalText.promptB;
	    };
	    SalesOpportunitySalesPanelController.prototype.addNewSalesOpportunity = function () {
	        if (this.salesPermission.add) {
	            this.$state.go('sales.add', { 'contactId': this.contact.id });
	        }
	    };
	    SalesOpportunitySalesPanelController.prototype.selectVehicleCard = function (id) {
	        if (id) {
	            this.mergeData.selectedIdToMerge = id;
	        }
	    };
	    SalesOpportunitySalesPanelController.$inject = [
	        '$scope',
	        '$q',
	        'SalesOpportunityApiService',
	        'SalesOpportunityPermissionApiService',
	        'SalesOpportunityMergeService',
	        'eventManagerService',
	        'Constants',
	        'CrmConstants',
	        'ServiceWrapper',
	        'ODataServiceObjectFactory',
	        'ODataServiceHelpers',
	        '$translate',
	        'modalService',
	        'DateTimeHelper',
	        'TranslationCache',
	        'StringHelper',
	        'CurrencyService',
	        '$state',
	        '$stateParams',
	        'permissionService',
	        'SalesOpportunityRefDefService'
	    ];
	    return SalesOpportunitySalesPanelController;
	}());
	module.exports = SalesOpportunitySalesPanelController;


/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path="../../../typings/index.d.ts" />
	var SalesOpportunityCardController = __webpack_require__(398);
	function SalesOpportunityCardDirective() {
	    return {
	        restrict: 'E',
	        templateUrl: 'app/salesOpportunity/salesOpportunitySalesPanel/salesOpportunitySalesCardTemplate.html',
	        controller: SalesOpportunityCardController,
	        bindToController: true,
	        controllerAs: 'ctrl',
	        scope: {
	            "salesOpportunity": "=",
	            "permissions": "=",
	            "totalSalesOpportunities": "=",
	            'enableCardActions': "=",
	            'clickOverride': '&?'
	        },
	        compile: function ($element, $attrs) {
	            if (!$attrs['totalSalesOpportunities']) {
	                $attrs['totalSalesOpportunities'] = '0';
	            }
	            if (!$attrs['enableCardActions']) {
	                $attrs['enableCardActions'] = 'true';
	            }
	            return {};
	        }
	    };
	}
	module.exports = SalesOpportunityCardDirective;


/***/ },
/* 398 */
/***/ function(module, exports) {

	/// <reference path="../../../typings/index.d.ts" />
	"use strict";
	var SalesOpportunityCardController = (function () {
	    function SalesOpportunityCardController($state, $stateParams, TranslationCache, DateTimeHelper, EventManagerService, CrmConstants, permissionService) {
	        var _this = this;
	        this.$state = $state;
	        this.$stateParams = $stateParams;
	        this.TranslationCache = TranslationCache;
	        this.DateTimeHelper = DateTimeHelper;
	        this.EventManagerService = EventManagerService;
	        this.permissionService = permissionService;
	        this._defaultVehicleImageUrl = 'https://i.imgur.com/xny7HIb.png';
	        this.statusTextKey = 'crm.salesOpportunity.statusText.';
	        this.permissionService.getPermission('Sales')
	            .then(function (permission) {
	            _this.salesPermission = permission;
	        });
	        this.cardTitle = this.getTitle();
	        this.vehicleImageUrl = this.getVehicleImageUrl();
	        this.status = this.getCardStatus();
	        this.mergeEvent = CrmConstants.SALES_OPPORTUNITY.SALES_TAB.MERGED;
	        this.deleteEvent = CrmConstants.SALES_OPPORTUNITY.SALES_TAB.OPPORTUNITY_DELETED;
	    }
	    SalesOpportunityCardController.prototype.getTitle = function () {
	        var voi = this.getPrimaryVehicleOfInterest();
	        if (voi && voi.id != "0") {
	            return voi.condition + ' ' + voi.year + ' ' + voi.make + ' ' + voi.model;
	        }
	        else {
	            return this.TranslationCache.get('crm.salesOpportunity.NO_PRIMARY_VEHICLE');
	        }
	    };
	    SalesOpportunityCardController.prototype.actionsMenuClick = function ($event) {
	        $event.stopPropagation();
	    };
	    SalesOpportunityCardController.prototype.getOpportunityStatus = function () {
	        var translation = this.TranslationCache.get(this.statusTextKey + this.salesOpportunity.status.statusName);
	        if (translation !== (this.statusTextKey + this.salesOpportunity.status.statusName)) {
	            return translation;
	        }
	        var statusRegex = /(?!\d+\s?\-\s?)(\b\w+.*)/;
	        var customStatus = this.salesOpportunity.status.statusName.match(statusRegex)[0];
	        return customStatus;
	    };
	    SalesOpportunityCardController.prototype.getCardStatus = function () {
	        if (this.salesOpportunity.status.id == this.salesOpportunity.statusList.sold.id) {
	            return 'complete';
	        }
	        else if (this.salesOpportunity.status.id == this.salesOpportunity.statusList.lost.id) {
	            return 'overdue';
	        }
	        else {
	            return 'open';
	        }
	    };
	    SalesOpportunityCardController.prototype.mergeSalesOpportunity = function () {
	        this.EventManagerService.publish(this.mergeEvent, this.salesOpportunity);
	    };
	    SalesOpportunityCardController.prototype.deleteSalesOpportunity = function () {
	        this.EventManagerService.publish(this.deleteEvent, this.salesOpportunity);
	    };
	    SalesOpportunityCardController.prototype.getPrimaryVehicleOfInterest = function () {
	        if (!this.salesOpportunity || !this.salesOpportunity.vehiclesOfInterest) {
	            return undefined;
	        }
	        var voi = _.find(this.salesOpportunity.vehiclesOfInterest, function (vehicle) {
	            return vehicle.preferred;
	        });
	        if (!voi && this.salesOpportunity.vehiclesOfInterest.length > 0) {
	            voi = this.salesOpportunity.vehiclesOfInterest[0];
	        }
	        return voi ? voi : undefined;
	    };
	    SalesOpportunityCardController.prototype.getVehicleImageUrl = function () {
	        var primaryVoi = this.getPrimaryVehicleOfInterest();
	        if (primaryVoi && primaryVoi.imageUrls && primaryVoi.imageUrls[0]) {
	            return primaryVoi.imageUrls[0];
	        }
	        return this._defaultVehicleImageUrl;
	    };
	    SalesOpportunityCardController.prototype.getLastUpdated = function () {
	        return this.DateTimeHelper.timeAgo(this.salesOpportunity.lastUpdatedOrSoldDate);
	    };
	    SalesOpportunityCardController.prototype.onCardClick = function () {
	        if (this.clickOverride) {
	            this.clickOverride();
	        }
	        else {
	            this.$state.go('sales.view', {
	                salesOpportunityId: this.salesOpportunity.id,
	                contactId: this.$stateParams.contactId
	            });
	        }
	    };
	    SalesOpportunityCardController.$inject = ['$state', '$stateParams', 'TranslationCache', 'DateTimeHelper', "eventManagerService", "CrmConstants", "permissionService"];
	    return SalesOpportunityCardController;
	}());
	module.exports = SalesOpportunityCardController;


/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var SalesOpportunityCSISurveyCardDirective = __webpack_require__(400);
	var SalesOpportunityCSIQACardDirective = __webpack_require__(402);
	var SalesOpportunityCSIPanelDirective = __webpack_require__(404);
	module.exports = angular.module("crm.sales.csi", [])
	    .directive('crmSalesOpportunityCsiSurveyCard', SalesOpportunityCSISurveyCardDirective)
	    .directive('crmSalesOpportunityCsiQaCard', SalesOpportunityCSIQACardDirective)
	    .directive('crmSalesOpportunityCsiPanel', SalesOpportunityCSIPanelDirective);


/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunityCSISurveyCardController = __webpack_require__(401);
	function SalesOpportunityCSISurveyCardDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            csiEvent: "="
	        },
	        templateUrl: 'app/salesOpportunity/salesOpportunityCSI/card/survey/salesOpportunityCSISurveyCardTemplate.html',
	        controller: SalesOpportunityCSISurveyCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = SalesOpportunityCSISurveyCardDirective;


/***/ },
/* 401 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunityCSISurveyCardController = (function () {
	    function SalesOpportunityCSISurveyCardController($scope, ModelConstants, modalService, translationCache, dateTimeHelper) {
	        var _this = this;
	        this.$scope = $scope;
	        this.ModelConstants = ModelConstants;
	        this.modalService = modalService;
	        this.translationCache = translationCache;
	        this.dateTimeHelper = dateTimeHelper;
	        var csiEventWatcher = this.$scope.$watch("ctrl.csiEvent", function (event) {
	            _this.eventTitle = event.surveyType + " "
	                + _this.translationCache.get("crm.salesOpportunity.csi.SURVEY_HEADER");
	            _this.badgeText = event.score + "%";
	            _this.responseDate = event.surveyDate;
	            _this.lastUpdatedMessage = _this.translationCache.get("crm.salesOpportunity.csi.RESPONDED") + " "
	                + _this.dateTimeHelper.timeAgo(event.surveyDate);
	            _this.seeResultsMessage = _this.translationCache.get("crm.salesOpportunity.csi.SEE_SURVEY_RESULTS");
	            _this.surveyType = event.surveyType === _this.ModelConstants.ContactSurveyTypeSales ?
	                _this.translationCache.get('crm.salesOpportunity.csi.SALES_OPPORTUNITY') :
	                _this.translationCache.get('crm.salesOpportunity.csi.SERVICE_OPPORTUNITY');
	            if (event.score >= SalesOpportunityCSISurveyCardController._surveyScorePositive) {
	                _this.cssClasses = ['ws-status-ribbon', 'ws-status-good'];
	                _this.badgeIcon = SalesOpportunityCSISurveyCardController._badgeClassSuccess;
	                _this.status = "complete";
	            }
	            else if (event.score >= SalesOpportunityCSISurveyCardController._surveyScoreNeutral) {
	                _this.cssClasses = ['ws-status-ribbon', 'ws-status-warning'];
	                _this.badgeIcon = SalesOpportunityCSISurveyCardController._badgeClassSuccess;
	                _this.status = "open";
	            }
	            else {
	                _this.cssClasses = ['ws-status-ribbon', 'ws-status-bad'];
	                _this.badgeIcon = SalesOpportunityCSISurveyCardController._badgeClassFailure;
	                _this.status = "overdue";
	            }
	            csiEventWatcher();
	        });
	    }
	    SalesOpportunityCSISurveyCardController.prototype.openViewSurveyResultsModal = function () {
	        this.modal = this.modalService.openModalViaTemplateUrl(SalesOpportunityCSISurveyCardController.modalTemplate, this);
	    };
	    SalesOpportunityCSISurveyCardController._surveyScorePositive = 80.0;
	    SalesOpportunityCSISurveyCardController._surveyScoreNeutral = 70.0;
	    SalesOpportunityCSISurveyCardController._badgeClassSuccess = 'fa-thumbs-up';
	    SalesOpportunityCSISurveyCardController._badgeClassFailure = 'fa-thumbs-down';
	    SalesOpportunityCSISurveyCardController.modalTemplate = 'app/salesOpportunity/salesOpportunityCSI/salesOpportunitySurveyModalTemplate.html';
	    SalesOpportunityCSISurveyCardController.$inject = [
	        "$scope",
	        "ModelConstants",
	        "modalService",
	        "TranslationCache",
	        "DateTimeHelper"
	    ];
	    return SalesOpportunityCSISurveyCardController;
	}());
	module.exports = SalesOpportunityCSISurveyCardController;


/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunityCSICardController = __webpack_require__(403);
	function SalesOpportunityCSIQACardDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            csiEvent: "=",
	            contact: "=",
	            mergeCallback: "&",
	            deleteCallback: "&",
	            permissions: "="
	        },
	        templateUrl: 'app/salesOpportunity/salesOpportunityCSI/card/qa/salesOpportunityCSIQACardTemplate.html',
	        controller: SalesOpportunityCSICardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = SalesOpportunityCSIQACardDirective;


/***/ },
/* 403 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunityCSIQACardController = (function () {
	    function SalesOpportunityCSIQACardController($scope, $state, $stateParams, DealershipApiService, translationCache, modalService, dateTimeHelper, permissionService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$state = $state;
	        this.$stateParams = $stateParams;
	        this.DealershipApiService = DealershipApiService;
	        this.translationCache = translationCache;
	        this.modalService = modalService;
	        this.dateTimeHelper = dateTimeHelper;
	        this.permissionService = permissionService;
	        this.hasEditQAPermission = false;
	        this.hasDeleteQAPermission = false;
	        this.permissionService.getPermission('QA')
	            .then(function (permission) {
	            _this.hasDeleteQAPermission = permission.delete;
	            _this.hasEditQAPermission = permission.edit;
	        });
	        var csiEventWatcher = this.$scope.$watch("ctrl.csiEvent", function (event) {
	            _this.eventTitle = event.type.text + " "
	                + _this.translationCache.get('crm.salesOpportunity.csi.QA');
	            _this.badgeIcon = SalesOpportunityCSIQACardController._badgeIcon;
	            _this.status = event.getStatus();
	            _this.assignedTo = event.assignTo.text;
	            _this.eventSubtype = event.subType.text;
	            _this.lastUpdatedMessage = _this.dateTimeHelper.timeAgo(event.lastUpdate);
	            _this.DealershipApiService.getSelectedDealershipFromCache()
	                .then(function (dealership) {
	                _this.selectedDealership = dealership;
	            });
	            if (event.isOpen()) {
	                _this.cssClasses = ['ws-status-ribbon', 'ws-status-warning'];
	                _this.badgeStatus = 'open';
	            }
	            else if (event.isFallOut()) {
	                _this.cssClasses = ['ws-status-ribbon', 'ws-status-bad'];
	                _this.badgeStatus = 'overdue';
	            }
	            else if (event.isResolved()) {
	                _this.cssClasses = ['ws-status-ribbon', 'ws-status-good'];
	                _this.badgeStatus = 'complete';
	            }
	            if (event.resolutionCode1 && event.resolutionCode1.text) {
	                _this.resolutionMessage = event.resolutionCode1.text;
	                if (event.resolutionCode2 && event.resolutionCode2.text) {
	                    _this.resolutionMessage += " (" + event.resolutionCode2.text + ")";
	                }
	            }
	            csiEventWatcher();
	        });
	    }
	    SalesOpportunityCSIQACardController.prototype.onMerge = function () {
	        this.mergeCallback({
	            qaEvent: this.csiEvent
	        });
	    };
	    SalesOpportunityCSIQACardController.prototype.openDeleteModal = function () {
	        this.modal = this.modalService.openModalViaTemplateUrl(SalesOpportunityCSIQACardController._deleteQaEventModalTemplate, this);
	    };
	    SalesOpportunityCSIQACardController.prototype.deleteEvent = function () {
	        this.deleteCallback({
	            contactId: this.contact.id,
	            eventId: this.csiEvent.id
	        });
	        this.modal.accept();
	    };
	    SalesOpportunityCSIQACardController.prototype.updateCsiAction = function () {
	        if (this.$stateParams.contactId) {
	            this.$state.go('csiUpdate', { 'contactId': this.$stateParams.contactId, 'csiId': this.csiEvent.id });
	        }
	        else {
	            console.warn("contactId parameter is required.");
	        }
	    };
	    SalesOpportunityCSIQACardController._badgeIcon = "fa-fire-extinguisher";
	    SalesOpportunityCSIQACardController._deleteQaEventModalTemplate = 'app/salesOpportunity/salesOpportunityCSI/actionMenu/qaDeleteEventModalTemplate.html';
	    SalesOpportunityCSIQACardController.$inject = [
	        "$scope",
	        "$state",
	        '$stateParams',
	        "DealershipApiService",
	        "TranslationCache",
	        "modalService",
	        "DateTimeHelper",
	        "permissionService"
	    ];
	    return SalesOpportunityCSIQACardController;
	}());
	module.exports = SalesOpportunityCSIQACardController;


/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunityCSIPanelController = __webpack_require__(405);
	function SalesOpportunityCSIPanelDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            contact: '='
	        },
	        templateUrl: 'app/salesOpportunity/salesOpportunityCSI/panel/salesOpportunityCSIPanelTemplate.html',
	        controller: SalesOpportunityCSIPanelController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = SalesOpportunityCSIPanelDirective;


/***/ },
/* 405 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunityCSIPanelController = (function () {
	    function SalesOpportunityCSIPanelController($scope, $q, $state, ContactQAEventApiService, ContactSurveyApiService, Constants, CrmConstants, EventManagerService, DateTimeHelper, TranslationCache, ModelConstants, DealershipApiService, modalService, ContactQaEventPermissionApiService, ContactQaEventMergeService, ServiceWrapper, permissionService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$q = $q;
	        this.$state = $state;
	        this.ContactQAEventApiService = ContactQAEventApiService;
	        this.ContactSurveyApiService = ContactSurveyApiService;
	        this.Constants = Constants;
	        this.CrmConstants = CrmConstants;
	        this.EventManagerService = EventManagerService;
	        this.DateTimeHelper = DateTimeHelper;
	        this.TranslationCache = TranslationCache;
	        this.ModelConstants = ModelConstants;
	        this.DealershipApiService = DealershipApiService;
	        this.modalService = modalService;
	        this.ContactQaEventPermissionApiService = ContactQaEventPermissionApiService;
	        this.ContactQaEventMergeService = ContactQaEventMergeService;
	        this.ServiceWrapper = ServiceWrapper;
	        this.permissionService = permissionService;
	        this._mergeQaEventModalTemplate = 'app/salesOpportunity/salesOpportunityCSI/salesOpportunityCsiCardMergeQaEventModalTemplate.html';
	        this.hasAddQAPermission = false;
	        this.selectedSort = {
	            name: '',
	            value: ''
	        };
	        this.onTabSelected = function (tabName) {
	            if (tabName === _this.CrmConstants.SALES_OPPORTUNITY.CSI_TAB.NAME) {
	                _this.loadData();
	            }
	        };
	        this.init();
	    }
	    SalesOpportunityCSIPanelController.prototype.init = function () {
	        var _this = this;
	        this.getPermissions()
	            .then(function () {
	            _this.setupScope();
	            _this.loadData();
	        });
	    };
	    SalesOpportunityCSIPanelController.prototype.getPermissions = function () {
	        var _this = this;
	        var qaPermissionPromise = this.permissionService.getPermission('QA')
	            .then(function (permission) {
	            _this.hasAddQAPermission = permission.add;
	        });
	        var surveyPermissionPromise = this.permissionService.getPermission('Survey')
	            .then(function (permission) {
	            _this.surveyPermission = permission;
	        });
	        return this.$q.all([qaPermissionPromise, surveyPermissionPromise]);
	    };
	    SalesOpportunityCSIPanelController.prototype.setupScope = function () {
	        var _this = this;
	        var self = this;
	        var tabSelectedEvent = this.EventManagerService.subscribe(this.Constants.SALES_OPPORTUNITY_TAB_SELECTED, this.onTabSelected);
	        this.$scope.$on('$destroy', function () {
	            _this.EventManagerService.unSubscribe(_this.Constants.SALES_OPPORTUNITY_TAB_SELECTED, tabSelectedEvent);
	        });
	        var deregister = this.$scope.$watch('ctrl.contact', function (newVal, oldVal) {
	            if (newVal != oldVal) {
	                self.loadData();
	                deregister();
	            }
	        });
	    };
	    SalesOpportunityCSIPanelController.prototype.loadData = function () {
	        var _this = this;
	        if (this.contact) {
	            this.loading = true;
	            var promises = [this.loadQAEvents(), this.loadSurveys(), this.loadPermissions()];
	            this.$q.all(promises).then(function (data) {
	                _this.permissions = data[2];
	                _this.qaEvents = data[0];
	                _this.surveys = data[1];
	                _this.updateCSITabHeader(_this.qaEvents);
	                _this.createCsiEvents();
	                _this.loading = false;
	                _this.setSelectedSort(_this.CrmConstants.LAST_UPDATED_NEWEST);
	            });
	        }
	    };
	    SalesOpportunityCSIPanelController.prototype.createCsiEvents = function () {
	        var _this = this;
	        this.csiEvents = [].concat(this.qaEvents).concat(this.surveys);
	        this.csiEvents.sort(function (a, b) {
	            var aDate = _this.getDate(a);
	            var bDate = _this.getDate(b);
	            if (aDate > bDate)
	                return -1;
	            return aDate < bDate ? 1 : 0;
	        });
	    };
	    SalesOpportunityCSIPanelController.prototype.getDate = function (event) {
	        return new Date(!!event.lastUpdate ? event.lastUpdate : event.surveyDate);
	    };
	    SalesOpportunityCSIPanelController.prototype.loadQAEvents = function () {
	        this.qaEvents = [];
	        return this.ContactQAEventApiService.get(this.contact.id);
	    };
	    SalesOpportunityCSIPanelController.prototype.loadSurveys = function () {
	        this.surveys = [];
	        return this.ContactSurveyApiService.get(this.contact.id);
	    };
	    SalesOpportunityCSIPanelController.prototype.loadPermissions = function () {
	        return this.ContactQaEventPermissionApiService.get(this.contact.id);
	    };
	    SalesOpportunityCSIPanelController.prototype.updateCSITabHeader = function (QAEvents) {
	        var openQAEvents = _.filter(QAEvents, function (QAEvent) {
	            return QAEvent.isOpen();
	        }).length;
	        var resolvedQAEvents = _.filter(QAEvents, function (QAEvent) {
	            return QAEvent.isResolved();
	        }).length;
	        this.EventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.CSI_TAB.UPDATED, {
	            open: openQAEvents,
	            resolved: resolvedQAEvents
	        });
	    };
	    ;
	    SalesOpportunityCSIPanelController.prototype.onMergeQaEvent = function (qaEvent) {
	        this.initializeMergeData(qaEvent);
	        var self = this;
	        this.modalService.openModalViaTemplateUrlPromise(this._mergeQaEventModalTemplate, this, function (obj) {
	            self.mergeQaEventService(obj);
	        }).then(function () {
	            throw "SalesOpportunityCSICardController - Modal Promise 'Accept' was called and it should NEVER be called!!!";
	        }, function (obj) {
	            obj.modalInstance.close();
	        });
	    };
	    ;
	    SalesOpportunityCSIPanelController.prototype.initializeMergeData = function (qaEvent) {
	        var secondaryEvents = [];
	        _.each(this.qaEvents, function (event) {
	            if (event.id !== qaEvent.id) {
	                secondaryEvents.push(event);
	            }
	        });
	        this.mergeData = {
	            primaryEvent: _.clone(qaEvent),
	            secondaryEvents: _.map(secondaryEvents, function (event) { return _.clone(event); }),
	            selectedIdToMerge: null,
	            mergePending: false
	        };
	    };
	    SalesOpportunityCSIPanelController.prototype.mergeQaEventService = function (modalManager) {
	        var _this = this;
	        var data = {
	            entityId: this.contact.id,
	            primaryEventId: this.mergeData.primaryEvent.id,
	            secondaryEventId: this.mergeData.selectedIdToMerge
	        };
	        this.mergeData.mergePending = true;
	        return this.ServiceWrapper.post(this.ContactQaEventMergeService, data).then(function (response) {
	            _this.loadData();
	            _this.mergeData.mergePending = false;
	            modalManager.modalInstance.close();
	        });
	    };
	    SalesOpportunityCSIPanelController.prototype.setSelectedSort = function (value) {
	        this.selectedSort.value = value;
	        this.selectedSort.name = this.TranslationCache.get('crm.salesOpportunity.tabs.' + value);
	        this.sortEvents();
	    };
	    ;
	    SalesOpportunityCSIPanelController.prototype.sortEvents = function () {
	        var _this = this;
	        if (this.selectedSort.value == this.CrmConstants.LAST_UPDATED_OLDEST) {
	            this.csiEvents.sort(function (a, b) {
	                var aDate = _this.getDate(a);
	                var bDate = _this.getDate(b);
	                if (aDate > bDate)
	                    return 1;
	                return aDate < bDate ? -1 : 0;
	            });
	        }
	        else {
	            this.csiEvents.sort(function (a, b) {
	                var aDate = _this.getDate(a);
	                var bDate = _this.getDate(b);
	                if (aDate > bDate)
	                    return -1;
	                return aDate < bDate ? 1 : 0;
	            });
	        }
	    };
	    SalesOpportunityCSIPanelController.prototype.addNewCsiCase = function () {
	        if (this.contact.id) {
	            this.$state.go('csiAdd', { 'contactId': this.contact.id });
	        }
	        else {
	            console.warn("contact.ID parameter is required.");
	        }
	    };
	    SalesOpportunityCSIPanelController.prototype.deleteEvent = function (contactId, eventId) {
	        var _this = this;
	        var data = {
	            contactId: contactId,
	            eventId: eventId
	        };
	        this.ContactQAEventApiService.delete(data)
	            .then(function () {
	            _this.loadData();
	        });
	    };
	    SalesOpportunityCSIPanelController.$inject = [
	        '$scope',
	        '$q',
	        '$state',
	        'ContactQAEventApiService',
	        'ContactSurveyApiService',
	        'Constants',
	        'CrmConstants',
	        'eventManagerService',
	        'DateTimeHelper',
	        'TranslationCache',
	        'ModelConstants',
	        'DealershipApiService',
	        'modalService',
	        'ContactQaEventPermissionApiService',
	        'ContactQaEventMergeService',
	        'ServiceWrapper',
	        'permissionService'
	    ];
	    return SalesOpportunityCSIPanelController;
	}());
	module.exports = SalesOpportunityCSIPanelController;


/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	//modules
	var AddSalesOpportunityDetails = __webpack_require__(407);
	var AddSalesOpportunityDirective = __webpack_require__(410);
	module.exports = angular.module("crm.sales.add", [
	    AddSalesOpportunityDetails.name,
	])
	    .directive('crmAddSalesOpportunity', AddSalesOpportunityDirective);


/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var AddSalesOpportunityDetailInfoDirective = __webpack_require__(408);
	module.exports = angular.module("crm.sales.add.details", [])
	    .directive('crmAddSalesOpportunityDetails', AddSalesOpportunityDetailInfoDirective);


/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var AddSalesOpportunityDetailsController = __webpack_require__(409);
	function SalesOpportunityCSICardDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            salesOpportunity: '=',
	            invalid: '=',
	            form: '=',
	        },
	        templateUrl: 'app/salesOpportunity/add/details/template.html',
	        controller: AddSalesOpportunityDetailsController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = SalesOpportunityCSICardDirective;


/***/ },
/* 409 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var AddSalesOpportunityDetailsController = (function () {
	    function AddSalesOpportunityDetailsController($q, ServiceWrapper, $stateParams, CurrentUserApiService, SalesOpportunityRefDefSelectedService, permissionService, RefDefService, SalesOpportunityService) {
	        var _this = this;
	        this.$q = $q;
	        this.ServiceWrapper = ServiceWrapper;
	        this.$stateParams = $stateParams;
	        this.CurrentUserApiService = CurrentUserApiService;
	        this.SalesOpportunityRefDefSelectedService = SalesOpportunityRefDefSelectedService;
	        this.permissionService = permissionService;
	        this.RefDefService = RefDefService;
	        this.SalesOpportunityService = SalesOpportunityService;
	        this.expanded = false;
	        this.isLoading = false;
	        this.setAssignedToCurrentUser = function () {
	            var self = _this;
	            _this.ServiceWrapper.get(_this.CurrentUserApiService).then(function (response) {
	                var assignedRefDef = _.findWhere(self.users, { text: response });
	                if (!assignedRefDef) {
	                    assignedRefDef = self.users[0];
	                }
	                self.salesOpportunity.primaryAssigned = assignedRefDef;
	            });
	        };
	        this.setDefaultRefDefs = function () {
	            var self = _this;
	            _this.ServiceWrapper.get(_this.SalesOpportunityRefDefSelectedService, _this.$stateParams.contactId).then(function (response) {
	                self.salesOpportunity.type = response.data.Type;
	                self.salesOpportunity.purchaseType = response.data.PurchaseType;
	                self.salesOpportunity.trackingCode = response.data.TrackingCode;
	                self.salesOpportunity.ranking = response.data.Ranking;
	                self.salesOpportunity.closeDate = response.data.CloseDate;
	                self.salesOpportunity.franchise = response.data.Franchise;
	                self.isLoading = false;
	            });
	        };
	        this.init();
	    }
	    AddSalesOpportunityDetailsController.prototype.init = function () {
	        var self = this;
	        self.isLoading = true;
	        var salesOppSourceRestrictionPromise = self.permissionService.getPermission('InsertRestriction:SalesSource');
	        self.getRefDefs();
	        self.$q.all([salesOppSourceRestrictionPromise]).then(function (resolutions) {
	            var isRefDefRestricted = resolutions.restricted;
	            if (isRefDefRestricted) {
	                var enabledRefDefValues = resolutions[1].enabledValues;
	                self.salesRefDefs['sales.source'] = self.salesRefDefs['sales.source'].filter(function (refDef) {
	                    return enabledRefDefValues.indexOf(refDef.value) >= 0;
	                });
	            }
	            self.getUsers().then(function () {
	                self.setAssignedToCurrentUser();
	            });
	            self.getFranchises();
	            self.setDefaultRefDefs();
	        });
	    };
	    ;
	    AddSalesOpportunityDetailsController.prototype.getRefDefs = function () {
	        var _this = this;
	        this.RefDefService.getRefDefs(['sales.type',
	            'sales.subtype',
	            'sales.rank',
	            'sales.source',
	            'sales.status',
	            'sales.forecast',
	            'sales.code1',
	            'sales.code2',
	            'sales.code3',
	            'sales.trackingCode'])
	            .then(function (refDefs) {
	            _this.salesRefDefs = refDefs;
	        });
	    };
	    AddSalesOpportunityDetailsController.prototype.getUsers = function () {
	        var _this = this;
	        return this.SalesOpportunityService.getEmployeeNames().then(function (users) {
	            return _this.users = users;
	        });
	    };
	    AddSalesOpportunityDetailsController.prototype.getFranchises = function () {
	        var _this = this;
	        return this.SalesOpportunityService.getFranchises().then(function (franchises) {
	            return _this.franchises = franchises;
	        });
	    };
	    AddSalesOpportunityDetailsController.$inject = [
	        '$q',
	        'ServiceWrapper',
	        '$stateParams',
	        'CurrentUserApiService',
	        'SalesOpportunityRefDefSelectedService',
	        'permissionService',
	        'RefDefService',
	        'salesOpportunityService'
	    ];
	    return AddSalesOpportunityDetailsController;
	}());
	module.exports = AddSalesOpportunityDetailsController;


/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var AddSalesOpportunityController = __webpack_require__(411);
	function AddSalesOpportunityDirective() {
	    var directive = {
	        restrict: 'E',
	        templateUrl: 'app/salesOpportunity/add/template.html',
	        controller: AddSalesOpportunityController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = AddSalesOpportunityDirective;


/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var AddSalesOpportunityController = (function () {
	    function AddSalesOpportunityController($stateParams, $q, ContactService, SalesOpportunityFactory, eventManagerService, CrmConstants, TranslationCache, $state, $scope, modalService, dirtyFormWarningService, omniSearchService, VehicleOfInterestFactory, salesOpportunityService, WorkNoteService, workNoteFactory, TimelineItemFactory) {
	        var _this = this;
	        this.$stateParams = $stateParams;
	        this.$q = $q;
	        this.ContactService = ContactService;
	        this.SalesOpportunityFactory = SalesOpportunityFactory;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.TranslationCache = TranslationCache;
	        this.$state = $state;
	        this.$scope = $scope;
	        this.modalService = modalService;
	        this.dirtyFormWarningService = dirtyFormWarningService;
	        this.omniSearchService = omniSearchService;
	        this.VehicleOfInterestFactory = VehicleOfInterestFactory;
	        this.salesOpportunityService = salesOpportunityService;
	        this.WorkNoteService = WorkNoteService;
	        this.workNoteFactory = workNoteFactory;
	        this.TimelineItemFactory = TimelineItemFactory;
	        this.searchSettings = {
	            searchEndpoint: 'InventoryVehicle',
	            searchFields: ["NewUsedCpo", "Make", "Model", "Year", "StockNumber", "Vin", "Prices.Sales", "Trim"],
	            highlightFields: ["NewUsedCpo", "Make", "Model", "Year", "StockNumber", "Vin", "Trim"],
	            includeSearchResults: true,
	            paging: {
	                page: 0,
	                resultsPerPage: 20
	            }
	        };
	        this.addVOISearchSettings = {
	            searchEndpoint: 'InventoryVehicle',
	            searchFields: ["StockNumber"],
	            includeSearchResults: true,
	            paging: {
	                page: 0,
	                resultsPerPage: 1
	            }
	        };
	        this.isLoading = false;
	        this.isLoadingVoi = false;
	        this.isSaving = false;
	        this.ActivityButton = activityEnums_1.ActivityButton;
	        this.OpportunityEventType = activityEnums_1.OpportunityEventType;
	        this._workNoteModalUrl = "app/salesOpportunity/add/workNoteModalTemplate.html";
	        this._activityModalUrl = "app/salesOpportunity/add/activityModalTemplate.html";
	        this._modalInstance = null;
	        this.createActivity = function (type) {
	            if (type == null) {
	                return;
	            }
	            _this.selectedActivityType = type;
	            _this._modalInstance.accept();
	        };
	        this.init();
	    }
	    AddSalesOpportunityController.prototype.init = function () {
	        var _this = this;
	        this.loadContact();
	        this.salesOpportunity = this.SalesOpportunityFactory.create();
	        var self = this;
	        this.dirtyFormWarningService.register(function () {
	            return self.addSalesOpportunityForm.$dirty;
	        });
	        var showManualEntryVehicleOfInterestEvent = this.eventManagerService.subscribe(this.CrmConstants.SALES_OPPORTUNITY.VEHICLE_OF_INTEREST.SHOW_MANUAL_ENTRY_MODAL, function (vehicleOfInterest) {
	            _this.showManualVehicleOfInterestModal(angular.copy(vehicleOfInterest));
	        });
	        this.$scope.$on('$destroy', function () {
	            self.dirtyFormWarningService.deregister();
	            _this.eventManagerService.unSubscribe(_this.CrmConstants.SALES_OPPORTUNITY.VEHICLE_OF_INTEREST.SHOW_MANUAL_ENTRY_MODAL, showManualEntryVehicleOfInterestEvent);
	        });
	    };
	    AddSalesOpportunityController.prototype.loadContact = function () {
	        this.isLoading = true;
	        var self = this;
	        this.ContactService.get(this.$stateParams.contactId)
	            .then(function (contact) {
	            self.contact = contact;
	            self.isLoading = false;
	        });
	    };
	    AddSalesOpportunityController.prototype.submit = function (form) {
	        var _this = this;
	        this.isSaving = true;
	        form.$setSubmitted();
	        if (this.isInvalid()) {
	            this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.CREATE.INVALID, {
	                alertType: 'error',
	                message: this.TranslationCache.get('crm.salesOpportunity.INVALID_SALES_OPPORTUNITY')
	            });
	            this.isSaving = false;
	            return;
	        }
	        else {
	            var self = this;
	            self.isLoading = true;
	            this.saveSalesOpportunity()
	                .then(function () {
	                self.isLoading = false;
	                self.showPostSaveModal()
	                    .finally(function () {
	                    if (!_this.workNote) {
	                        self.viewSalesOpportunity(_this.salesOpportunity.id);
	                        return;
	                    }
	                    _this.saveWorkNote().finally(function () {
	                        self.viewSalesOpportunity(_this.salesOpportunity.id);
	                    });
	                });
	            })
	                .catch(function (error) {
	                self.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.CREATE.INVALID, {
	                    alertType: 'error',
	                    message: self.TranslationCache.get('crm.salesOpportunity.INVALID_SALES_OPPORTUNITY')
	                });
	                self.isSaving = false;
	            });
	        }
	    };
	    AddSalesOpportunityController.prototype.saveSalesOpportunity = function () {
	        var _this = this;
	        this.dirtyFormWarningService.deregister();
	        return this.salesOpportunityService.saveNew(this.salesOpportunity, this.contact.id)
	            .then(function (salesOppResult) {
	            if (salesOppResult) {
	                var voi = _this.salesOpportunity.vehiclesOfInterest && _this.salesOpportunity.vehiclesOfInterest.length > 0 ? _this.salesOpportunity.vehiclesOfInterest[0] : undefined;
	                var eventId = salesOppResult.eventId;
	                _this.salesOpportunity.id = eventId;
	                _this.salesOpportunity.buyer.id = _this.contact.id;
	                if (voi) {
	                    _this.salesOpportunity.vehiclesOfInterest = [voi];
	                    return _this.getSaveVehicleOfInterestPromise()
	                        .then(function () {
	                        return _this.salesOpportunity;
	                    })
	                        .finally(function () {
	                        _this.saveTrades(eventId);
	                    });
	                }
	                else {
	                    _this.saveTrades(eventId);
	                }
	                return _this.$q.resolve(_this.salesOpportunity);
	            }
	        });
	    };
	    AddSalesOpportunityController.prototype.getSaveVehicleOfInterestPromise = function () {
	        if (this.salesOpportunity.vehiclesOfInterest[0].stockNumber) {
	            return this.salesOpportunityService.setPrimaryVehicleOfInterest(this.salesOpportunity, this.salesOpportunity.vehiclesOfInterest[0].id);
	        }
	        return this.salesOpportunityService.addManualVehicleOfInterest(this.salesOpportunity, this.salesOpportunity.vehiclesOfInterest[0]);
	    };
	    AddSalesOpportunityController.prototype.saveTrades = function (id) {
	        this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.TRADES.SAVE_TRADES_WITH_ID, {
	            id: id,
	            callback: function () {
	            }
	        });
	    };
	    AddSalesOpportunityController.prototype.viewSalesOpportunity = function (id) {
	        this.isLoading = false;
	        this.$state.go("sales.view", {
	            contactId: this.$stateParams.contactId,
	            salesOpportunityId: id,
	            initialActivityType: this.selectedActivityType
	        });
	    };
	    AddSalesOpportunityController.prototype.isPhoneUp = function () {
	        return this.salesOpportunity.source && +this.salesOpportunity.source.value === activityEnums_1.SalesSource.phoneUp;
	    };
	    AddSalesOpportunityController.prototype.isFreshUp = function () {
	        return this.salesOpportunity.source && +this.salesOpportunity.source.value === activityEnums_1.SalesSource.freshUp;
	    };
	    AddSalesOpportunityController.prototype.showPostSaveModal = function () {
	        if (this.isPhoneUp() || this.isFreshUp()) {
	            var buttonType = this.isPhoneUp() ? activityEnums_1.ActivityButton.phoneCall : activityEnums_1.ActivityButton.storeVisit;
	            this.activityTimelineItem = this.TimelineItemFactory.createActivityTimelineItem(buttonType, +this.contact.id, +this.salesOpportunity.id, activityEnums_1.OpportunityEventType.sales);
	            this._modalInstance = this.modalService.openModalViaTemplateUrl(this._activityModalUrl, this, true);
	        }
	        else {
	            this._modalInstance = this.modalService.openModalViaTemplateUrl(this._workNoteModalUrl, this, true);
	        }
	        return this._modalInstance.result;
	    };
	    AddSalesOpportunityController.prototype.closeActionModal = function () {
	        this.selectedActivityType = null;
	        this._modalInstance.cancel();
	    };
	    AddSalesOpportunityController.prototype.submitActionModal = function () {
	        this.selectedActivityType = null;
	        this._modalInstance.accept();
	    };
	    AddSalesOpportunityController.prototype.isInvalid = function () {
	        this.invalid =
	            (!this.salesOpportunity.source || !this.salesOpportunity.source.text || !this.salesOpportunity.source.value)
	                || (!this.salesOpportunity.primaryAssigned || !this.salesOpportunity.primaryAssigned.text || !this.salesOpportunity.primaryAssigned.value);
	        return this.invalid;
	    };
	    AddSalesOpportunityController.prototype.onSelect = function (inventory) {
	        var _this = this;
	        if (!inventory) {
	            return;
	        }
	        this.isLoadingVoi = true;
	        var stockNumber = inventory.hasOwnProperty('stockNumber') ? inventory.stockNumber : inventory;
	        if (!stockNumber) {
	            throw new Error('Stock Number is not on returned inventory object');
	        }
	        this.getVOI(stockNumber)
	            .then(function (voi) {
	            voi.preferred = true;
	            _this.salesOpportunity.vehiclesOfInterest = [voi];
	        })
	            .finally(function () {
	            _this.isLoadingVoi = false;
	        })
	            .catch(function (error) {
	            _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.VEHICLE_OF_INTEREST.LOADING_EVENT_KEY, {
	                alertType: 'error',
	                message: _this.TranslationCache.get('crm.salesOpportunity.errors.VOI_ADD_ERROR')
	            });
	        });
	    };
	    AddSalesOpportunityController.prototype.getVOI = function (stockNumber) {
	        return this.salesOpportunityService.getVehicleOfInterestByStockNumber(stockNumber)
	            .then(function (vehicleOfInterest) {
	            if (!vehicleOfInterest) {
	                var errMsg = 'Unable to retrieve vehicle of interest by stock number';
	                throw new Error(errMsg);
	            }
	            return vehicleOfInterest;
	        });
	    };
	    AddSalesOpportunityController.prototype.addManualVehicleOfInterest = function () {
	        var manualVehicleOfInterest = this.VehicleOfInterestFactory.create();
	        this.showManualVehicleOfInterestModal(manualVehicleOfInterest);
	    };
	    AddSalesOpportunityController.prototype.saveManualVehicleOfInterest = function () {
	        this.manualVehicleOfInterest.preferred = true;
	        this.salesOpportunity.vehiclesOfInterest = [this.manualVehicleOfInterest];
	    };
	    AddSalesOpportunityController.prototype.showManualVehicleOfInterestModal = function (vehicleOfInterest) {
	        this.manualVehicleOfInterest = vehicleOfInterest;
	        this.modalService.openModalViaTemplateUrlPromise(AddSalesOpportunityController.manualVehicleOfInterestTemplateModal, this, function () {
	        })
	            .catch(function (result) {
	            result.modalInstance.close();
	        });
	    };
	    AddSalesOpportunityController.prototype.saveWorkNote = function () {
	        var newWorkNote = this.workNoteFactory.create();
	        newWorkNote.eventId = this.salesOpportunity.id;
	        newWorkNote.entityId = this.contact.id;
	        newWorkNote.note = this.workNote;
	        return this.WorkNoteService.saveWorkNotes(newWorkNote);
	    };
	    AddSalesOpportunityController.manualVehicleOfInterestTemplateModal = "app/vehicleOfInterest/manualEntry/manualEntryVehicleOfInterestModalTemplate.html";
	    AddSalesOpportunityController.$inject = [
	        '$stateParams',
	        '$q',
	        'ContactService',
	        'SalesOpportunityFactory',
	        'eventManagerService',
	        'CrmConstants',
	        'TranslationCache',
	        '$state',
	        '$scope',
	        'modalService',
	        'dirtyFormWarningService',
	        'omniSearchService',
	        'VehicleOfInterestFactory',
	        'salesOpportunityService',
	        'WorkNoteService',
	        'WorkNoteFactory',
	        'TimelineItemFactory'
	    ];
	    return AddSalesOpportunityController;
	}());
	module.exports = AddSalesOpportunityController;


/***/ },
/* 412 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	(function (ActivityActionType) {
	    ActivityActionType[ActivityActionType["default"] = 1] = "default";
	    ActivityActionType[ActivityActionType["confirmAppointment"] = 2] = "confirmAppointment";
	    ActivityActionType[ActivityActionType["completed"] = 3] = "completed";
	    ActivityActionType[ActivityActionType["logAppointment"] = 4] = "logAppointment";
	    ActivityActionType[ActivityActionType["logOther"] = 5] = "logOther";
	    ActivityActionType[ActivityActionType["logPhoneCall"] = 6] = "logPhoneCall";
	    ActivityActionType[ActivityActionType["logStoreVisit"] = 7] = "logStoreVisit";
	    ActivityActionType[ActivityActionType["setAppointment"] = 8] = "setAppointment";
	    ActivityActionType[ActivityActionType["webLead"] = 9] = "webLead";
	    ActivityActionType[ActivityActionType["setReminder"] = 10] = "setReminder";
	})(exports.ActivityActionType || (exports.ActivityActionType = {}));
	var ActivityActionType = exports.ActivityActionType;
	(function (ActivityButton) {
	    ActivityButton[ActivityButton["appointment"] = 1] = "appointment";
	    ActivityButton[ActivityButton["other"] = 2] = "other";
	    ActivityButton[ActivityButton["phoneCall"] = 3] = "phoneCall";
	    ActivityButton[ActivityButton["reminder"] = 4] = "reminder";
	    ActivityButton[ActivityButton["sendEmail"] = 5] = "sendEmail";
	    ActivityButton[ActivityButton["storeVisit"] = 6] = "storeVisit";
	    ActivityButton[ActivityButton["textMessage"] = 7] = "textMessage";
	    ActivityButton[ActivityButton["phoneCallReminder"] = 8] = "phoneCallReminder";
	})(exports.ActivityButton || (exports.ActivityButton = {}));
	var ActivityButton = exports.ActivityButton;
	(function (ActivityRank) {
	    ActivityRank[ActivityRank["low"] = 100060] = "low";
	    ActivityRank[ActivityRank["medium"] = 100061] = "medium";
	    ActivityRank[ActivityRank["high"] = 100062] = "high";
	})(exports.ActivityRank || (exports.ActivityRank = {}));
	var ActivityRank = exports.ActivityRank;
	(function (ActivityStatus) {
	    ActivityStatus[ActivityStatus["badNumber"] = 100076] = "badNumber";
	    ActivityStatus[ActivityStatus["cancelled"] = 100079] = "cancelled";
	    ActivityStatus[ActivityStatus["completed"] = 100072] = "completed";
	    ActivityStatus[ActivityStatus["confirmed"] = 100071] = "confirmed";
	    ActivityStatus[ActivityStatus["incomplete"] = 100081] = "incomplete";
	    ActivityStatus[ActivityStatus["leftMessage"] = 100074] = "leftMessage";
	    ActivityStatus[ActivityStatus["noAnswer"] = 100075] = "noAnswer";
	    ActivityStatus[ActivityStatus["noResponse"] = 100078] = "noResponse";
	    ActivityStatus[ActivityStatus["noShow"] = 100073] = "noShow";
	    ActivityStatus[ActivityStatus["notInMarket"] = 200366] = "notInMarket";
	    ActivityStatus[ActivityStatus["open"] = 100070] = "open";
	    ActivityStatus[ActivityStatus["skipped"] = 100082] = "skipped";
	    ActivityStatus[ActivityStatus["unreportedShow"] = 100080] = "unreportedShow";
	})(exports.ActivityStatus || (exports.ActivityStatus = {}));
	var ActivityStatus = exports.ActivityStatus;
	(function (OpenActivityStatus) {
	    OpenActivityStatus[OpenActivityStatus["confirmed"] = 100071] = "confirmed";
	    OpenActivityStatus[OpenActivityStatus["noAnswer"] = 100075] = "noAnswer";
	    OpenActivityStatus[OpenActivityStatus["open"] = 100070] = "open";
	})(exports.OpenActivityStatus || (exports.OpenActivityStatus = {}));
	var OpenActivityStatus = exports.OpenActivityStatus;
	// Unfortinately this is not a complete list of activity types and should not be used to compare if an activity type
	// is valid. Use !NonOtherActivityType instead.
	(function (ActivityType) {
	    ActivityType[ActivityType["appointment"] = 100123] = "appointment";
	    ActivityType[ActivityType["confirmAppointment"] = 200348] = "confirmAppointment";
	    ActivityType[ActivityType["ebrochureRequest"] = 1003541] = "ebrochureRequest";
	    ActivityType[ActivityType["emailReceived"] = 200000] = "emailReceived";
	    ActivityType[ActivityType["escalated"] = 100122] = "escalated";
	    ActivityType[ActivityType["inboundCall"] = 200002] = "inboundCall";
	    ActivityType[ActivityType["inventorySearch"] = 100127] = "inventorySearch";
	    ActivityType[ActivityType["noAppointmentFollowup"] = 200350] = "noAppointmentFollowup";
	    ActivityType[ActivityType["oneOnOne"] = 200059] = "oneOnOne";
	    ActivityType[ActivityType["other"] = 100121] = "other";
	    ActivityType[ActivityType["outboundCall"] = 100120] = "outboundCall";
	    ActivityType[ActivityType["priceAlert"] = 200004] = "priceAlert";
	    ActivityType[ActivityType["readWorkNotes"] = 111126] = "readWorkNotes";
	    ActivityType[ActivityType["runCredit"] = 100125] = "runCredit";
	    ActivityType[ActivityType["sendEmail"] = 111127] = "sendEmail";
	    ActivityType[ActivityType["serviceCommitment"] = 1003552] = "serviceCommitment";
	    ActivityType[ActivityType["skateAlert"] = 1004516] = "skateAlert";
	    ActivityType[ActivityType["survey"] = 100124] = "survey";
	    ActivityType[ActivityType["unsoldTraffic"] = 200349] = "unsoldTraffic";
	    ActivityType[ActivityType["updateYourEvent"] = 100126] = "updateYourEvent";
	    ActivityType[ActivityType["webLead"] = 200001] = "webLead";
	})(exports.ActivityType || (exports.ActivityType = {}));
	var ActivityType = exports.ActivityType;
	(function (NonOtherActivityType) {
	    NonOtherActivityType[NonOtherActivityType["appointment"] = 100123] = "appointment";
	    NonOtherActivityType[NonOtherActivityType["emailReceived"] = 200000] = "emailReceived";
	    NonOtherActivityType[NonOtherActivityType["inboundCall"] = 200002] = "inboundCall";
	    NonOtherActivityType[NonOtherActivityType["outboundCall"] = 100120] = "outboundCall";
	    NonOtherActivityType[NonOtherActivityType["webLead"] = 200001] = "webLead";
	})(exports.NonOtherActivityType || (exports.NonOtherActivityType = {}));
	var NonOtherActivityType = exports.NonOtherActivityType;
	(function (TimelineItemType) {
	    TimelineItemType[TimelineItemType["activity"] = 1] = "activity";
	    TimelineItemType[TimelineItemType["eventStatusLogGroup"] = 2] = "eventStatusLogGroup";
	    TimelineItemType[TimelineItemType["worknote"] = 3] = "worknote";
	})(exports.TimelineItemType || (exports.TimelineItemType = {}));
	var TimelineItemType = exports.TimelineItemType;
	(function (SalesStatus) {
	    SalesStatus[SalesStatus["unqualified"] = 220] = "unqualified";
	    SalesStatus[SalesStatus["contacted"] = 221] = "contacted";
	    SalesStatus[SalesStatus["demo"] = 222] = "demo";
	    SalesStatus[SalesStatus["writeUp"] = 223] = "writeUp";
	    SalesStatus[SalesStatus["fAndI"] = 224] = "fAndI";
	    SalesStatus[SalesStatus["sold"] = 225] = "sold";
	    SalesStatus[SalesStatus["lost"] = 226] = "lost";
	    SalesStatus[SalesStatus["storeVisit"] = 227] = "storeVisit";
	})(exports.SalesStatus || (exports.SalesStatus = {}));
	var SalesStatus = exports.SalesStatus;
	(function (SalesSource) {
	    SalesSource[SalesSource["freshUp"] = 240] = "freshUp";
	    SalesSource[SalesSource["phoneUp"] = 241] = "phoneUp";
	})(exports.SalesSource || (exports.SalesSource = {}));
	var SalesSource = exports.SalesSource;
	(function (OpportunityEventType) {
	    OpportunityEventType[OpportunityEventType["sales"] = 1] = "sales";
	    OpportunityEventType[OpportunityEventType["service"] = 2] = "service";
	    OpportunityEventType[OpportunityEventType["qa"] = 3] = "qa";
	})(exports.OpportunityEventType || (exports.OpportunityEventType = {}));
	var OpportunityEventType = exports.OpportunityEventType;


/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var SalesOpportunityDetailViewDirective = __webpack_require__(414);
	var SalesOpportunityDetailPanelDirective = __webpack_require__(416);
	var AddCobuyerDirective = __webpack_require__(418);
	var statusPanelComponent_1 = __webpack_require__(420);
	var RecapBannerModule = __webpack_require__(421);
	module.exports = angular.module("crm.sales.detail", [RecapBannerModule.name])
	    .directive('crmSalesOpportunityDetailView', SalesOpportunityDetailViewDirective)
	    .directive('crmSalesOpportunityDetailPanel', SalesOpportunityDetailPanelDirective)
	    .directive('crmAddCobuyer', AddCobuyerDirective)
	    .component(statusPanelComponent_1.StatusPanelComponent.componentName, new statusPanelComponent_1.StatusPanelComponent());


/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunityDetailViewController = __webpack_require__(415);
	function SalesOpportunityDetailViewDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            options: '='
	        },
	        templateUrl: 'app/salesOpportunity/details/view/detailViewTemplate.html',
	        controller: SalesOpportunityDetailViewController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = SalesOpportunityDetailViewDirective;


/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var PrintService = __webpack_require__(177);
	var SalesOpportunityDetailViewController = (function () {
	    function SalesOpportunityDetailViewController($document, $scope, $state, $stateParams, $q, $window, $timeout, ServiceWrapper, ContactService, SalesOpportunityApiService, NotFoundErrorService, eventManagerService, CrmConstants, translationCache, salesOpportunityDmsApiService, modalService, salesOpportunityService, printFormsApiService, AuditLogApiService, SurveyApiService, SalesOpportunitySalesChecklistApiService, SalesOpportunityCobuyerApiService, creditApplicationApiService, $compile, convertOpportunityTypeService, permissionService, AppSettings, PrintService, Constants, DataApiSettings, DocumentManagerService) {
	        this.$document = $document;
	        this.$scope = $scope;
	        this.$state = $state;
	        this.$stateParams = $stateParams;
	        this.$q = $q;
	        this.$window = $window;
	        this.$timeout = $timeout;
	        this.ServiceWrapper = ServiceWrapper;
	        this.ContactService = ContactService;
	        this.SalesOpportunityApiService = SalesOpportunityApiService;
	        this.NotFoundErrorService = NotFoundErrorService;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.translationCache = translationCache;
	        this.salesOpportunityDmsApiService = salesOpportunityDmsApiService;
	        this.modalService = modalService;
	        this.salesOpportunityService = salesOpportunityService;
	        this.printFormsApiService = printFormsApiService;
	        this.AuditLogApiService = AuditLogApiService;
	        this.SurveyApiService = SurveyApiService;
	        this.SalesOpportunitySalesChecklistApiService = SalesOpportunitySalesChecklistApiService;
	        this.SalesOpportunityCobuyerApiService = SalesOpportunityCobuyerApiService;
	        this.creditApplicationApiService = creditApplicationApiService;
	        this.$compile = $compile;
	        this.convertOpportunityTypeService = convertOpportunityTypeService;
	        this.permissionService = permissionService;
	        this.AppSettings = AppSettings;
	        this.PrintService = PrintService;
	        this.Constants = Constants;
	        this.DataApiSettings = DataApiSettings;
	        this.DocumentManagerService = DocumentManagerService;
	        this.numberItemsStillLoading = 0;
	        this.retrievedAuditLogs = false;
	        this.canViewSurveys = false;
	        this.canSaveChecklist = false;
	        this.canViewConvert = false;
	        this.canViewAudit = false;
	        this.areAllChecklistItemsSelected = true;
	        this.init();
	    }
	    SalesOpportunityDetailViewController.prototype.init = function () {
	        var _this = this;
	        var self = this;
	        this.getPermissions()
	            .then(function () {
	            var contactId = '';
	            var salesOpportunityId = '';
	            var dealershipId = '';
	            _this.showChildrenDuringLoading = false;
	            if (self.options && self.options.contactId && self.options.opportunityId) {
	                contactId = self.options.contactId;
	                salesOpportunityId = self.options.opportunityId;
	                dealershipId = self.options.dealershipId;
	                self.options.onChange = function (updatedOptions) {
	                    _this.numberItemsStillLoading = 0;
	                    self.initContact(updatedOptions.contactId, updatedOptions.opportunityId, dealershipId);
	                };
	            }
	            else {
	                contactId = self.$stateParams.contactId;
	                salesOpportunityId = self.$stateParams.salesOpportunityId;
	            }
	            _this.auditLogs = new Array();
	            self.initContact(contactId, salesOpportunityId, dealershipId);
	            self.initSurveys(contactId, salesOpportunityId);
	            self.initSalesChecklist(contactId, salesOpportunityId);
	        });
	    };
	    SalesOpportunityDetailViewController.prototype.getPermissions = function () {
	        var _this = this;
	        var self = this;
	        this.numberItemsStillLoading++;
	        var salesChecklistPermissionPromise = this.permissionService.getPermission('SalesChecklist')
	            .then(function (permission) {
	            _this.salesChecklistPermission = permission;
	        })
	            .finally(function () {
	            _this.numberItemsStillLoading--;
	        });
	        var contactId = '';
	        var salesOpportunityId = '';
	        this.showChildrenDuringLoading = false;
	        if (self.options && self.options.contactId && self.options.opportunityId) {
	            contactId = self.options.contactId;
	            salesOpportunityId = self.options.opportunityId;
	            self.options.onChange = function (updatedOptions) {
	                self.numberItemsStillLoading = 0;
	                self.initContact(updatedOptions.contactId, updatedOptions.opportunityId);
	            };
	        }
	        else {
	            contactId = self.$stateParams.contactId;
	            salesOpportunityId = self.$stateParams.salesOpportunityId;
	        }
	        this.auditLogs = new Array();
	        var surveyPermissionPromise = this.permissionService.getPermission('Survey')
	            .then(function (permission) {
	            _this.surveyPermission = permission;
	        });
	        var eventConversionPermissionPromise = this.permissionService.getPermission('EventConversion')
	            .then(function (permission) {
	            _this.eventConversionPermission = permission;
	        });
	        var eventHistoryPermissionPromise = this.permissionService.getPermission('EvtHistory')
	            .then(function (permission) {
	            _this.eventHistoryPermission = permission;
	        });
	        return this.$q.all([salesChecklistPermissionPromise, surveyPermissionPromise, eventConversionPermissionPromise, eventHistoryPermissionPromise]);
	    };
	    SalesOpportunityDetailViewController.prototype.initContact = function (contactId, salesOpportunityId, dealershipId) {
	        var _this = this;
	        if (contactId) {
	            this.numberItemsStillLoading++;
	            var idObject = { contactId: contactId };
	            if (dealershipId) {
	                idObject.dealershipId = dealershipId;
	            }
	            this.ServiceWrapper.get(this.ContactService, idObject).then(function (data) {
	                if (!data.error) {
	                    _this.contact = data;
	                }
	            })
	                .finally(function () {
	                _this.numberItemsStillLoading--;
	            });
	            this.initSalesOpportunity(contactId, salesOpportunityId, dealershipId);
	            this.getCreditApplicationUrl(contactId, salesOpportunityId);
	        }
	        else {
	            this.numberItemsStillLoading++;
	            this.ContactService.getLastContact().then(function (contact) {
	                if (!contact || !contact.id || contact.id === '0') {
	                    _this.$state.go('add.individual', {});
	                }
	                else {
	                    _this.$state.go('view.contact', { 'contactId': contact.id });
	                }
	            })
	                .finally(function () {
	                _this.numberItemsStillLoading--;
	            });
	        }
	    };
	    ;
	    SalesOpportunityDetailViewController.prototype.initSurveys = function (contactId, salesOpportunityId) {
	        var _this = this;
	        if (salesOpportunityId && this.surveyPermission.view) {
	            this.numberItemsStillLoading++;
	            this.SurveyApiService.get({
	                surveyType: this.Constants.SURVEYS.SALES_OPPORTUNITY,
	                entityId: contactId,
	                eventId: salesOpportunityId
	            })
	                .then(function (data) {
	                _this.surveyLinks = data;
	            })
	                .catch(function (error) {
	                _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.SURVEYS.LOAD_ERROR, {
	                    alertType: 'error',
	                    message: _this.translationCache.get('crm.salesOpportunity.surveys.LOAD_ERROR')
	                });
	            })
	                .finally(function () {
	                _this.numberItemsStillLoading--;
	            });
	        }
	    };
	    SalesOpportunityDetailViewController.prototype.initSalesChecklist = function (contactId, salesOpportunityId) {
	        var _this = this;
	        if (contactId) {
	            this.numberItemsStillLoading++;
	            this.SalesOpportunitySalesChecklistApiService.get({
	                contactId: contactId,
	                eventId: salesOpportunityId
	            })
	                .then(function (response) {
	                _this.salesOpportunityChecklist = response;
	                _this.updateSalesChecklistCounts();
	            })
	                .catch(function (error) {
	                _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.CHECKLIST.LOAD_ERROR, {
	                    alertType: 'error',
	                    message: _this.translationCache.get('crm.salesOpportunity.checklist.LOAD_ERROR')
	                });
	            })
	                .finally(function () {
	                _this.numberItemsStillLoading--;
	            });
	        }
	    };
	    SalesOpportunityDetailViewController.prototype.updateSalesChecklistCounts = function () {
	        if (this.salesOpportunityChecklist) {
	            this.checklistTotalItems = this.salesOpportunityChecklist.length;
	            this.checklistCompletedItems = _.filter(this.salesOpportunityChecklist, function (item) {
	                return item.completed;
	            }).length;
	            this.areAllChecklistItemsSelected = this.checklistCompletedItems == this.salesOpportunityChecklist.length;
	        }
	    };
	    SalesOpportunityDetailViewController.prototype.initSalesOpportunity = function (contactId, salesOpportunityId, dealershipId) {
	        var _this = this;
	        if (salesOpportunityId) {
	            this.numberItemsStillLoading++;
	            this.salesOpportunityService.get(contactId, salesOpportunityId, dealershipId).then(function (salesOpportunity) {
	                _this.salesOpportunity = salesOpportunity;
	                // TODO: Temp solution for disable inline edit when cross site
	                if (_this.salesOpportunity && _this.salesOpportunity.dealershipId) {
	                    _this.disableEditCrossSite = _this.salesOpportunity.dealershipId != _this.DataApiSettings.getSiteId();
	                }
	                _this.getPrintFormBody(contactId);
	            }).finally(function () {
	                _this.numberItemsStillLoading--;
	            });
	        }
	        else {
	            this.$state.go('view.contact', { 'contactId': contactId });
	        }
	    };
	    SalesOpportunityDetailViewController.prototype.onPostToDms = function () {
	        var _this = this;
	        if (this.salesOpportunity.dmsNumber) {
	            this.modalService.openModal(this.getConfirmationModalPrompt(), this.translationCache.get("crm.salesOpportunity.dms.modal.TITLE"), this.translationCache.get("crm.salesOpportunity.dms.modal.YES"), this.translationCache.get("crm.salesOpportunity.dms.modal.NO"))
	                .then(function (modalInstance) {
	                _this.postToDms();
	                modalInstance.dismiss();
	            }, function (modalInstance) {
	                modalInstance.dismiss();
	            });
	        }
	        else {
	            this.postToDms();
	        }
	    };
	    SalesOpportunityDetailViewController.prototype.getConfirmationModalPrompt = function () {
	        return this.translationCache.get("crm.salesOpportunity.dms.modal.PROMPT") + "<br/><br/>" +
	            this.translationCache.get("crm.salesOpportunity.dms.modal.DO_YOU_WANT_TO_CONTINUE");
	    };
	    SalesOpportunityDetailViewController.prototype.postToDms = function () {
	        var _this = this;
	        this.showChildrenDuringLoading = true;
	        this.numberItemsStillLoading++;
	        this.salesOpportunityDmsApiService.postToDms(this.contact.id, this.salesOpportunity.id)
	            .then(function (result) {
	            _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.POST_TO_DMS_RESULT, {
	                alertType: _this.getNotificationTypeFromMessageType(result.messageType),
	                message: result.message
	            });
	            if (result.messageType === "success") {
	                _this.salesOpportunity.dmsNumber = result.dmsNumber;
	            }
	            _this.showChildrenDuringLoading = false;
	        })
	            .finally(function () {
	            _this.numberItemsStillLoading--;
	        });
	    };
	    SalesOpportunityDetailViewController.prototype.getNotificationTypeFromMessageType = function (messageType) {
	        switch (messageType) {
	            case "success":
	                return "notification";
	            case "warning":
	                return "warning";
	            default:
	                return "error";
	        }
	    };
	    SalesOpportunityDetailViewController.prototype.openPrintForms = function () {
	        this.$window.open(this.printFormsUrl, "popup_window", SalesOpportunityDetailViewController.printFormsWindowParams);
	    };
	    SalesOpportunityDetailViewController.prototype.getPrintFormBody = function (contactId) {
	        var _this = this;
	        this.printFormsApiService.get({
	            contactId: contactId,
	            eventId: this.salesOpportunity.id
	        })
	            .then(function (response) {
	            _this.printFormsUrl = response.data;
	        });
	    };
	    SalesOpportunityDetailViewController.prototype.openSurveyModal = function () {
	        this.modal = this.modalService.openModalViaTemplateUrl(SalesOpportunityDetailViewController.surveyModalTemplateUrl, this);
	    };
	    SalesOpportunityDetailViewController.prototype.openSurvey = function (url) {
	        this.$window.open(url, "_blank", 'location=0,scrollbars=yes');
	    };
	    SalesOpportunityDetailViewController.prototype.openSalesChecklist = function () {
	        this.modal = this.modalService.openModalViaTemplateUrl(SalesOpportunityDetailViewController.salesChecklistModalTemplateUrl, this);
	    };
	    SalesOpportunityDetailViewController.prototype.saveChecklist = function () {
	        var _this = this;
	        this.SalesOpportunitySalesChecklistApiService.post({
	            checklistItems: this.salesOpportunityChecklist,
	            contactId: this.contact.id,
	            eventId: this.salesOpportunity.id
	        })
	            .then(function (response) {
	            _this.salesOpportunityChecklist = response;
	            _this.updateSalesChecklistCounts();
	            _this.modal.cancel();
	        })
	            .catch(function (error) {
	            _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.CHECKLIST.SAVE_ERROR, {
	                alertType: 'error',
	                message: _this.translationCache.get('crm.salesOpportunity.checklist.SAVE_ERROR')
	            });
	        });
	    };
	    SalesOpportunityDetailViewController.prototype.printChecklist = function () {
	        var _this = this;
	        var template = "\n        <div>\n        <div class=\"ws-sales-checklist\">\n            <div ng-repeat=\"checklistItem in ctrl.salesOpportunityChecklist\">\n                <crm-sales-opportunity-checklist checklist-item=\"checklistItem\" is-even=\"ctrl.getIsEven(checklistItem)\"></crm-sales-opportunity-checklist>\n            </div>\n        </div>\n        </div>";
	        var printableBody = this.$compile(template)(this.$scope);
	        var metaContent = '<meta http-equiv="X-UA-Compatible" content="IE=edge">';
	        var printWindow = this.PrintService.getPrintWindow();
	        var doc = printWindow.document;
	        angular.element(doc.head).append(metaContent);
	        this.$timeout(function () {
	            angular.element(doc.body).append(printableBody.clone().html());
	            _this.PrintService.showPrintWindow(printWindow);
	        });
	    };
	    SalesOpportunityDetailViewController.prototype.toggleSelectAll = function () {
	        var _this = this;
	        _.forEach(this.salesOpportunityChecklist, function (item) {
	            item.completed = _this.areAllChecklistItemsSelected;
	        });
	    };
	    SalesOpportunityDetailViewController.prototype.getIsEven = function (checklistItem) {
	        return (this.salesOpportunityChecklist.indexOf(checklistItem) + 1) % 2 == 0;
	    };
	    SalesOpportunityDetailViewController.prototype.openAuditLogs = function () {
	        var _this = this;
	        var data = {
	            logType: this.Constants.AUDIT_LOGS.SALES_OPPORTUNITY,
	            entityId: this.contact.id,
	            eventId: this.salesOpportunity.id
	        };
	        this.AuditLogApiService.get(data)
	            .then(function (response) {
	            _this.retrievedAuditLogs = true;
	            _this.auditLogs = response;
	            _this.modal = _this.modalService.openModalViaTemplateUrl(SalesOpportunityDetailViewController.auditLogModalTemplateUrl, _this);
	        })
	            .catch(function (error) {
	            _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.AUDIT_LOG.LOAD_ERROR, {
	                alertType: 'error',
	                message: _this.translationCache.get("crm.salesOpportunity.auditLog.LOAD_ERROR")
	            });
	        });
	    };
	    SalesOpportunityDetailViewController.prototype.showFlipCobyerConfirmationModal = function () {
	        this.modal = this.modalService.openModalViaTemplateUrl(SalesOpportunityDetailViewController.flipCobuyerModalTemplateUrl, this);
	    };
	    SalesOpportunityDetailViewController.prototype.flipCobuyer = function () {
	        var _this = this;
	        this.numberItemsStillLoading++;
	        var salesOpp = this.salesOpportunity;
	        if (!salesOpp.id || !salesOpp.buyer.id || !salesOpp.cobuyer.id) {
	            return;
	        }
	        this.SalesOpportunityCobuyerApiService.flipBuyerCobuyer(salesOpp.id, salesOpp.buyer.id, salesOpp.cobuyer.id).then(function (flipResponse) {
	            _this.closeModal();
	            _this.numberItemsStillLoading--;
	            _this.$state.go('view.contact', { contactId: flipResponse });
	        });
	    };
	    SalesOpportunityDetailViewController.prototype.closeModal = function () {
	        this.modal.cancel();
	    };
	    SalesOpportunityDetailViewController.prototype.openCreditApplication = function () {
	        this.$window.open(this.creditApplicationUrl, "_blank", this.getCreditApplicationWindowParams());
	    };
	    SalesOpportunityDetailViewController.prototype.convertOpportunityType = function () {
	        var _this = this;
	        var originalShowChildrenDuringLoading = this.showChildrenDuringLoading;
	        this.showChildrenDuringLoading = true;
	        var assignedTo = (this.salesOpportunity.primaryAssigned && this.salesOpportunity.primaryAssigned.value) ?
	            this.salesOpportunity.primaryAssigned.value :
	            null;
	        this.numberItemsStillLoading++;
	        this.convertOpportunityTypeService.convertOpportunityType(this.contact.id, this.salesOpportunity.id, SalesOpportunityDetailViewController.opportunityType, assignedTo)
	            .finally(function () {
	            _this.numberItemsStillLoading--;
	            _this.showChildrenDuringLoading = originalShowChildrenDuringLoading;
	        });
	    };
	    SalesOpportunityDetailViewController.prototype.getCreditApplicationUrl = function (contactId, salesOpportunityId) {
	        var _this = this;
	        this.creditApplicationApiService.get(contactId, salesOpportunityId)
	            .then(function (response) {
	            _this.creditApplicationUrl = response.data;
	            if (_this.creditApplicationUrl) {
	                _this.creditApplicationUrl += (_this.creditApplicationUrl.indexOf("?") >= 0) ? "&" : "?";
	                _this.creditApplicationUrl += "openCreditApplication=true&openInNewWindow=true";
	            }
	        });
	    };
	    SalesOpportunityDetailViewController.prototype.getCreditApplicationWindowParams = function () {
	        return [
	            "width" + screen.width,
	            "height" + screen.height
	        ].join(",");
	    };
	    SalesOpportunityDetailViewController.prototype.openDocumentForAction = function (forEmail) {
	        var docType = forEmail ? 0 : 1;
	        this.DocumentManagerService.openDocumentEvent(docType, 1, this.contact.id, this.salesOpportunity.id);
	    };
	    SalesOpportunityDetailViewController.printFormsModalTemplateUrl = 'app/salesOpportunity/details/view/printFormsModalTemplate.html';
	    SalesOpportunityDetailViewController.auditLogModalTemplateUrl = 'app/auditLog/updateAuditLogModalTemplate.html';
	    SalesOpportunityDetailViewController.surveyModalTemplateUrl = 'app/surveys/surveysModalTemplate.html';
	    SalesOpportunityDetailViewController.salesChecklistModalTemplateUrl = 'app/salesOpportunity/details/view/salesChecklistModalTemplate.html';
	    SalesOpportunityDetailViewController.flipCobuyerModalTemplateUrl = 'app/salesOpportunity/details/view/flipCobuyerConfirmationModalTemplate.html';
	    SalesOpportunityDetailViewController.printFormsWindowParams = "width=768,height=716";
	    SalesOpportunityDetailViewController.opportunityType = "Sales";
	    SalesOpportunityDetailViewController.$inject = [
	        '$document',
	        '$scope',
	        '$state',
	        '$stateParams',
	        '$q',
	        '$window',
	        '$timeout',
	        'ServiceWrapper',
	        'ContactService',
	        'SalesOpportunityApiService',
	        'NotFoundErrorService',
	        'eventManagerService',
	        'CrmConstants',
	        'TranslationCache',
	        'salesOpportunityDmsApiService',
	        'modalService',
	        'salesOpportunityService',
	        'printFormApiService',
	        'AuditLogApiService',
	        'SurveyApiService',
	        'SalesOpportunityChecklistApiService',
	        'SalesOpportunityCobuyerApiService',
	        'creditApplicationApiService',
	        '$compile',
	        'convertOpportunityTypeService',
	        'permissionService',
	        'AppSettings',
	        PrintService.serviceName,
	        'Constants',
	        'DataApiSettings',
	        'DocumentManagerService'
	    ];
	    return SalesOpportunityDetailViewController;
	}());
	module.exports = SalesOpportunityDetailViewController;


/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunityDetailPanelController = __webpack_require__(417);
	function SalesOpportunityDetailPanelDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            contact: "=",
	            salesOpportunity: "="
	        },
	        templateUrl: 'app/salesOpportunity/details/panel/detailPanelTemplate.html',
	        controller: SalesOpportunityDetailPanelController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = SalesOpportunityDetailPanelDirective;


/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var E_BROCHURE_WINDOW_PARAMS = 'toolbar=no,location=no,directories=no,scrollbars=yes,status=no,menubar=no,resizable=no,width=1070px,height=711px';
	var SalesOpportunityDetailPanelController = (function () {
	    function SalesOpportunityDetailPanelController($scope, $q, $window, ConnectionApiService, CrmConstants, eventManagerService, TranslationCache, ServiceWrapper, eBrochureApiService, omniSearchService, messageBus, constants, salesOpportunityService, modalService, vehicleOfInterestFactory, ActivityService, permissionService, RefDefService, 
	        //TODO: Temp solution for disable inline edit when cross site
	        DataApiSettings) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$q = $q;
	        this.$window = $window;
	        this.ConnectionApiService = ConnectionApiService;
	        this.CrmConstants = CrmConstants;
	        this.eventManagerService = eventManagerService;
	        this.TranslationCache = TranslationCache;
	        this.ServiceWrapper = ServiceWrapper;
	        this.eBrochureApiService = eBrochureApiService;
	        this.omniSearchService = omniSearchService;
	        this.messageBus = messageBus;
	        this.constants = constants;
	        this.salesOpportunityService = salesOpportunityService;
	        this.modalService = modalService;
	        this.vehicleOfInterestFactory = vehicleOfInterestFactory;
	        this.ActivityService = ActivityService;
	        this.permissionService = permissionService;
	        this.RefDefService = RefDefService;
	        this.DataApiSettings = DataApiSettings;
	        this.activeTrades = [];
	        this.OpportunityEventType = activityEnums_1.OpportunityEventType;
	        this.vehicleOfInterestOptions = {
	            selectVehicleOfInterest: function (vehicleOfInterest) {
	                _this.eventManagerService.publish(_this.constants.VEHICLE_OF_INTEREST_LOADING_KEY, true);
	                var searchFields = ["StockNumber"];
	                var highlightFields = [];
	                var voiSearchSettings = _this.createSearchSettings(vehicleOfInterest.stockNumber, searchFields, highlightFields);
	                _this.makeOmniSearchRequest(voiSearchSettings, false)
	                    .then(function (searchResults) {
	                    return searchResults[0].vehicle.id;
	                })
	                    .then(function (vehicleId) {
	                    return _this.salesOpportunityService.setPrimaryVehicleOfInterest(_this.salesOpportunity, vehicleId);
	                })
	                    .then(function (response) {
	                    if (response) {
	                        _this.salesOpportunity.vehiclesOfInterest = response;
	                    }
	                })
	                    .catch(function (error) {
	                    if (console) {
	                        console.error(error);
	                    }
	                }).finally(function () {
	                    _this.eventManagerService.publish(_this.constants.VEHICLE_OF_INTEREST_LOADING_KEY, false);
	                });
	            }
	        };
	        this.tradesOptions = {
	            updateTradesInformation: function (data) {
	                _this.tradesCount = data.count;
	                _this.tradesTotal = data.total;
	            }
	        };
	        this.searching = false;
	        this.initialHeight = 10;
	        this.searchSettings = {
	            searchEndpoint: 'InventoryVehicle',
	            searchFields: ["NewUsedCpo", "Make", "Model", "Year", "StockNumber", "Vin", "Prices.Sales", "Trim"],
	            highlightFields: ["NewUsedCpo", "Make", "Model", "Year", "StockNumber", "Vin", "Trim"],
	            includeSearchResults: true,
	            paging: {
	                page: 0,
	                resultsPerPage: 20
	            }
	        };
	        this.init();
	        var self = this;
	        // TODO: Temp solution for disable inline edit when cross site
	        if (this.salesOpportunity && this.salesOpportunity.dealershipId) {
	            self.disableEditCrossSite = this.salesOpportunity.dealershipId != self.DataApiSettings.getSiteId();
	        }
	        var openEBrochureEvent = this.eventManagerService.subscribe(this.CrmConstants.SALES_OPPORTUNITY.VEHICLE_OF_INTEREST.OPEN_E_BROCHURE, function (data) {
	            self.openEBrochure(data.stockNumber);
	        });
	        var connectionsCountChangeEvent = this.eventManagerService.subscribe(this.CrmConstants.CONNECTIONS.COUNT_UPDATED, function (count) {
	            _this.connectionsCount = count;
	        });
	        var showManualEntryVehicleOfInterestEvent = this.eventManagerService.subscribe(this.CrmConstants.SALES_OPPORTUNITY.VEHICLE_OF_INTEREST.SHOW_MANUAL_ENTRY_MODAL, function (vehicleOfInterest) {
	            _this.showManualVehicleOfInterestModal(angular.copy(vehicleOfInterest));
	        });
	        this.$scope.$on('$destroy', function () {
	            _this.eventManagerService.unSubscribe(_this.CrmConstants.SALES_OPPORTUNITY.VEHICLE_OF_INTEREST.OPEN_E_BROCHURE, openEBrochureEvent);
	            _this.eventManagerService.unSubscribe(_this.CrmConstants.CONNECTIONS.COUNT_UPDATED, connectionsCountChangeEvent);
	            _this.eventManagerService.unSubscribe(_this.CrmConstants.SALES_OPPORTUNITY.VEHICLE_OF_INTEREST.SHOW_MANUAL_ENTRY_MODAL, showManualEntryVehicleOfInterestEvent);
	        });
	        $scope.$watch("ctrl.salesOpportunity.cobuyer", function (newValue) {
	            if (newValue) {
	                _this.coBuyerConnection = {
	                    contact: _this.salesOpportunity.cobuyer
	                };
	            }
	        });
	    }
	    SalesOpportunityDetailPanelController.prototype.init = function () {
	        var _this = this;
	        this.permissionService.getPermission('EvtContact')
	            .then(function (permission) {
	            _this.connectionPermission = permission;
	        });
	        var self = this;
	        if (typeof self.contact.name == "string") {
	            self.isOrganization = true;
	        }
	        var tradesLoadedEvent = self.eventManagerService.subscribe(self.CrmConstants.SALES_OPPORTUNITY.TABS.TRADES_TAB_LOADED, function (data) {
	            self.tradesCount = data.count;
	            self.tradesTotal = data.total;
	            self.activeTrades = data.activeTrades;
	        });
	        this.$scope.$on("$destroy", function () {
	            self.eventManagerService.unSubscribe(self.CrmConstants.SALES_OPPORTUNITY.TABS.TRADES_TAB_LOADED, tradesLoadedEvent);
	        });
	        var salesOpPromise = this.$q.defer();
	        var unbindSalesOppWatch = this.$scope.$watch('ctrl.salesOpportunity', function (salesOpp) {
	            if (salesOpp) {
	                //TODO: Temp solution for disable inline edit when cross site
	                if (salesOpp.dealershipId && salesOpp.dealershipId != self.DataApiSettings.getSiteId()) {
	                    self.disableEditCrossSite = true;
	                }
	                unbindSalesOppWatch();
	                salesOpPromise.resolve(salesOpp);
	            }
	        });
	        this.getRefDefs();
	    };
	    SalesOpportunityDetailPanelController.prototype.getRefDefs = function () {
	        var _this = this;
	        return this.RefDefService.getRefDefs(['sales.type',
	            'sales.subtype',
	            'sales.rank',
	            'sales.source',
	            'sales.status',
	            'sales.forecast',
	            'sales.code1',
	            'sales.code2',
	            'sales.code3',
	            'sales.trackingCode'])
	            .then(function (refDefs) {
	            return _this.salesOpportunityRefDefs = refDefs;
	        });
	    };
	    SalesOpportunityDetailPanelController.prototype.getRefDefSubtypes = function (resCode) {
	        var _this = this;
	        return this.RefDefService.getSubRefDef('sales.code1', resCode)
	            .then(function (refDef) {
	            return _this.subTypeRefDefs = refDef;
	        });
	    };
	    SalesOpportunityDetailPanelController.prototype.onInMarketSwitchClick = function () {
	        var _this = this;
	        this.ActivityService.cancelActiveActivity().finally(function () {
	            _this.toggleSalesOpportunityActive();
	        });
	    };
	    SalesOpportunityDetailPanelController.prototype.toggleSalesOpportunityActive = function () {
	        if (this.salesOpportunity.lost) {
	            this.activateSalesOpportunity();
	        }
	        else {
	            this.deactivateSalesOpportunity();
	        }
	    };
	    SalesOpportunityDetailPanelController.prototype.activateSalesOpportunity = function () {
	        if (this.salesOpportunity.lost) {
	            this.salesOpportunityService.activateOpportunity(this.contact.id, this.salesOpportunity.id);
	        }
	    };
	    SalesOpportunityDetailPanelController.prototype.deactivateSalesOpportunity = function () {
	        var _this = this;
	        var self = this;
	        if (!this.salesOpportunity.lost) {
	            this.showNotInMarketModal()
	                .then(function (response) {
	                var resolutionCode1 = _.find(_this.salesOpportunityRefDefs['sales.code1'], function (refDef) {
	                    return refDef.text === response.primarySelect;
	                });
	                _this.getRefDefSubtypes(resolutionCode1.value).then(function (refdefs) {
	                    self.resolutionCode2 = _.find(refdefs, function (refDef) {
	                        return refDef.text === response.optionalSelect;
	                    });
	                }).then(function () {
	                    _this.eventManagerService.publish(_this.constants.SELECT_SAVE_MODAL_DEFAULT_LOADING_KEY, true);
	                    _this.salesOpportunityService.deactivateOpportunity(_this.contact.id, _this.salesOpportunity.id, resolutionCode1, self.resolutionCode2)
	                        .finally(function () {
	                        _this.eventManagerService.publish(_this.constants.SELECT_SAVE_MODAL_DEFAULT_LOADING_KEY, false);
	                        response.modalInstance.close();
	                    });
	                });
	            })
	                .catch(function (modalInstance) {
	                modalInstance.close();
	            });
	        }
	    };
	    SalesOpportunityDetailPanelController.prototype.showNotInMarketModal = function () {
	        var options = this.mapResolutionCodesToOptions();
	        var modal = this.modalService.openSelectSaveModal(options, this.TranslationCache.get('crm.salesOpportunity.status.modal.TITLE'), this.TranslationCache.get('crm.salesOpportunity.status.modal.ACCEPT'), this.TranslationCache.get('crm.salesOpportunity.status.modal.SELECT_LABEL'), this.TranslationCache.get('crm.salesOpportunity.status.modal.SELECT_SUB_LABEL'), null);
	        return modal;
	    };
	    SalesOpportunityDetailPanelController.prototype.mapResolutionCodesToOptions = function () {
	        var _this = this;
	        if (!this.salesOpportunityRefDefs) {
	            return;
	        }
	        var options = [];
	        _.each(this.salesOpportunityRefDefs['sales.code1'], function (resCode) {
	            var subOptions = [];
	            _this.getRefDefSubtypes(resCode.value).then(function (refdefs) {
	                _.each(refdefs, function (resCode2) {
	                    subOptions.push({
	                        itemValueId: resCode2.text
	                    });
	                });
	            });
	            options.push({
	                itemValueId: resCode.text,
	                options: subOptions
	            });
	        });
	        return options;
	    };
	    SalesOpportunityDetailPanelController.prototype.onTabSelected = function (tabName) {
	        this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.TABS.TRADES_TAB_SELECTED, tabName);
	    };
	    SalesOpportunityDetailPanelController.prototype.getVehicleOfInterestCount = function () {
	        if (this.salesOpportunity && this.salesOpportunity.vehiclesOfInterest && this.salesOpportunity.vehiclesOfInterest.length > 0) {
	            if (this.salesOpportunity.vehiclesOfInterest[0].make ||
	                this.salesOpportunity.vehiclesOfInterest[0].model ||
	                this.salesOpportunity.vehiclesOfInterest[0].year) {
	                return this.salesOpportunity.vehiclesOfInterest.length;
	            }
	            return this.salesOpportunity.vehiclesOfInterest.length - 1;
	        }
	        return 0;
	    };
	    SalesOpportunityDetailPanelController.prototype.getVehicleOfInterestTitle = function () {
	        var voi = _.find(this.salesOpportunity.vehiclesOfInterest, function (vehicle) {
	            return vehicle.preferred;
	        });
	        return voi.condition + ' ' + voi.year + ' ' + voi.make + ' ' + voi.model;
	    };
	    SalesOpportunityDetailPanelController.prototype.getTradeDescriptionInfo = function () {
	        if (this.activeTrades.length > 0 && this.activeTrades[0].year) {
	            var trade = this.activeTrades[0];
	            return trade.year + " " + trade.make.text + " " + trade.model.text;
	        }
	        return null;
	    };
	    SalesOpportunityDetailPanelController.prototype.removeCoBuyer = function () {
	        this.salesOpportunity.cobuyer = null;
	        this.salesOpportunityService.save(this.contact.id, this.salesOpportunity.id, [], false);
	    };
	    SalesOpportunityDetailPanelController.prototype.onAddCobuyerClick = function () {
	        if (!this.salesOpportunity.sold) {
	            this.addingCobuyer = true;
	            var self = this;
	            var subscription = this.eventManagerService.subscribe(this.CrmConstants.SALES_OPPORTUNITY.COBUYER.COBUYER_ADDED, function () {
	                self.addingCobuyer = false;
	                self.eventManagerService.unSubscribe(self.CrmConstants.SALES_OPPORTUNITY.COBUYER.COBUYER_ADDED, subscription);
	            });
	        }
	    };
	    SalesOpportunityDetailPanelController.prototype.openEBrochure = function (stockNumber) {
	        var _this = this;
	        stockNumber = encodeURIComponent(stockNumber);
	        var data = {
	            entityId: this.contact.id,
	            eventId: this.salesOpportunity.id,
	            stockNumber: stockNumber
	        };
	        this.eBrochureApiService.get(data)
	            .then(function (response) {
	            _this.$window.open(response.data, '_blank', E_BROCHURE_WINDOW_PARAMS);
	        });
	    };
	    SalesOpportunityDetailPanelController.prototype.createSearchSettings = function (searchTerm, searchFields, highlightFields) {
	        return {
	            searchTerm: searchTerm,
	            searchEndpoint: 'InventoryVehicle',
	            searchFields: searchFields,
	            highlightFields: highlightFields,
	            includeSearchResults: true,
	            paging: {
	                page: 0,
	                resultsPerPage: 20
	            }
	        };
	    };
	    SalesOpportunityDetailPanelController.prototype.makeOmniSearchRequest = function (searchSettings, searchingInventory) {
	        var _this = this;
	        this.searching = true;
	        return this.omniSearchService.search(searchSettings)
	            .then(function (searchResult) {
	            if (!searchResult) {
	                var errMsg = 'detailPanelController:omniSearchService.searchForTerm returned invalid data!';
	                if (console) {
	                    console.error(errMsg);
	                }
	                throw new Error(errMsg);
	            }
	            if (searchingInventory) {
	                _this.totalResults = searchResult.totalResults;
	            }
	            var searchResults = [];
	            _.each(searchResult.results, function (result) {
	                searchResults.push(result.model);
	            });
	            _this.searching = false;
	            return searchResults;
	        })
	            .catch(function (error) {
	            if (console) {
	                console.error(error);
	            }
	            return error;
	        });
	    };
	    SalesOpportunityDetailPanelController.prototype.onSelect = function (inventory) {
	        var _this = this;
	        if (!inventory) {
	            return;
	        }
	        this.eventManagerService.publish(this.constants.VEHICLE_OF_INTEREST_LOADING_KEY, true);
	        var self = this;
	        var id = parseInt(inventory.id) ? inventory.id :
	            inventory.vehicle ? inventory.vehicle.id : null;
	        if (!id)
	            return;
	        this.salesOpportunityService.setPrimaryVehicleOfInterest(this.salesOpportunity, id).then(function (response) {
	            self.salesOpportunity.vehiclesOfInterest = response;
	        }).finally(function () {
	            _this.eventManagerService.publish(_this.constants.VEHICLE_OF_INTEREST_LOADING_KEY, false);
	        });
	    };
	    SalesOpportunityDetailPanelController.prototype.addManualVehicleOfInterest = function () {
	        var manualVehicleOfInterest = this.vehicleOfInterestFactory.create();
	        this.showManualVehicleOfInterestModal(manualVehicleOfInterest);
	    };
	    SalesOpportunityDetailPanelController.prototype.saveManualVehicleOfInterest = function () {
	        var _this = this;
	        this.eventManagerService.publish(this.constants.VEHICLE_OF_INTEREST_LOADING_KEY, true);
	        this.salesOpportunityService.addManualVehicleOfInterest(this.salesOpportunity, this.manualVehicleOfInterest)
	            .then(function (vehiclesOfInterest) {
	            _this.salesOpportunity.vehiclesOfInterest = vehiclesOfInterest;
	        })
	            .catch(function (error) {
	            console.log(error);
	        })
	            .finally(function () {
	            _this.eventManagerService.publish(_this.constants.VEHICLE_OF_INTEREST_LOADING_KEY, false);
	        });
	    };
	    SalesOpportunityDetailPanelController.prototype.showManualVehicleOfInterestModal = function (vehicleOfInterest) {
	        this.manualVehicleOfInterest = vehicleOfInterest;
	        this.modalService.openModalViaTemplateUrlPromise(SalesOpportunityDetailPanelController.manualVehicleOfInterestTemplateModal, this, function () {
	        })
	            .catch(function (result) {
	            result.modalInstance.close();
	        });
	    };
	    SalesOpportunityDetailPanelController.prototype.isCobuyerAddable = function () {
	        return !(this.salesOpportunityService.isSalesOpportunitySold(this.salesOpportunity));
	    };
	    SalesOpportunityDetailPanelController.manualVehicleOfInterestTemplateModal = "app/vehicleOfInterest/manualEntry/manualEntryVehicleOfInterestModalTemplate.html";
	    SalesOpportunityDetailPanelController.$inject = [
	        '$scope',
	        '$q',
	        '$window',
	        'ConnectionApiService',
	        'CrmConstants',
	        'eventManagerService',
	        'TranslationCache',
	        'ServiceWrapper',
	        'eBrochureApiService',
	        'omniSearchService',
	        'messageBus',
	        'Constants',
	        'salesOpportunityService',
	        'modalService',
	        'VehicleOfInterestFactory',
	        'ActivityService',
	        'permissionService',
	        'RefDefService',
	        //TODO: Temp solution for disable inline edit when cross site
	        'DataApiSettings'
	    ];
	    return SalesOpportunityDetailPanelController;
	}());
	module.exports = SalesOpportunityDetailPanelController;


/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../../typings/index.d.ts"/>
	var addCobuyerController = __webpack_require__(419);
	function AddCobuyerDirective() {
	    var directive = {
	        scope: {
	            salesOpportunity: '='
	        },
	        templateUrl: 'app/salesOpportunity/details/cobuyer/addCobuyerTemplate.html',
	        controller: addCobuyerController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	    };
	    return directive;
	}
	module.exports = AddCobuyerDirective;


/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AddContactController = __webpack_require__(112);
	var DuplicateSelectionModalController = __webpack_require__(222);
	var DuplicateSelectionResult = __webpack_require__(221);
	var AddCobuyerController = (function (_super) {
	    __extends(AddCobuyerController, _super);
	    function AddCobuyerController(IndividualFactory, $scope, $state, eventManagerService, ServiceWrapper, ContactService, SalesOpportunityCobuyerApiService, contactValidationAlertService, organizationValidationAlertService, $http, Constants, ModelConstants, ConnectionRefDefService, CrmConstants, EventManagerService, ContactApiDuplicatesService, modalService, permissionService, messageBus, refDefService) {
	        var _this = this;
	        _super.call(this, $state, eventManagerService, ServiceWrapper, ContactService, Constants, ModelConstants);
	        this.IndividualFactory = IndividualFactory;
	        this.$scope = $scope;
	        this.ServiceWrapper = ServiceWrapper;
	        this.ContactService = ContactService;
	        this.SalesOpportunityCobuyerApiService = SalesOpportunityCobuyerApiService;
	        this.contactValidationAlertService = contactValidationAlertService;
	        this.organizationValidationAlertService = organizationValidationAlertService;
	        this.$http = $http;
	        this.ConnectionRefDefService = ConnectionRefDefService;
	        this.CrmConstants = CrmConstants;
	        this.EventManagerService = EventManagerService;
	        this.ContactApiDuplicatesService = ContactApiDuplicatesService;
	        this.modalService = modalService;
	        this.permissionService = permissionService;
	        this.messageBus = messageBus;
	        this.refDefService = refDefService;
	        this.isLoading = false;
	        this.selectContactTemplateUrl = 'app/contact/duplicates/duplicateSelectionModalTemplate.html';
	        this.isSaveButtonDisabled = false;
	        this.destroy = function () {
	            _this.eventManagerService.unSubscribe(_this.Constants.ALERT_EVENT_SAVE_BUTTON_PRESS, _this.saveButtonEventSubscription);
	            _this.isLoading = false;
	        };
	        this.setFormSubmitted = function () {
	            if (_this.addCobuyerForm) {
	                _this.addCobuyerForm.$setSubmitted();
	            }
	        };
	        this.contact = IndividualFactory.create();
	        this.connectionType = '199';
	        this.saveButtonEventSubscription = this.eventManagerService.subscribe(this.Constants.ALERT_EVENT_SAVE_BUTTON_PRESS, this.setFormSubmitted);
	        $scope.$on("$destroy", this.destroy);
	        this.updateRefDefs();
	        contactValidationAlertService.reset();
	        var self = this;
	        $scope.$watch('ctrl.contact.contactType', function (oldVal, newVal) {
	            if (oldVal != newVal) {
	                self.updateRefDefs();
	            }
	        });
	    }
	    AddCobuyerController.prototype.updateRefDefs = function () {
	        var _this = this;
	        var ctrl = this;
	        this.refDefService.getRefDefs([
	            'individual.salutation',
	            'pref.languages',
	            'individual.type',
	            'individual.source'
	        ]).then(function (refDefs) {
	            _this.individualRefDefs = refDefs;
	        });
	        this.refDefService.getRefDefs([
	            'contact.type'
	        ])
	            .then(function (refDefs) {
	            _this.connectionRefDefs = refDefs;
	            return _this.refDefService.getAllSubRefDefsByParent('contact.type');
	        })
	            .then(function (subTypeRefDefs) {
	            _this.connectionSubTypes = subTypeRefDefs;
	        });
	    };
	    AddCobuyerController.prototype.isCobuyerSavable = function () {
	        return !this.isSaveButtonDisabled && this.addCobuyerForm.$valid;
	    };
	    AddCobuyerController.prototype.setIsContactValid = function (isValid) {
	        if (this.contact.isEmpty()) {
	            this.contactValidationAlertService.isIndividualValid = true;
	        }
	        else {
	            this.contactValidationAlertService.isIndividualValid = isValid;
	        }
	    };
	    AddCobuyerController.prototype.openSearchModal = function () {
	        var self = this;
	        self.messageBus.ask(top, {
	            from: 'crm',
	            to: 'shell',
	            task: 'modal.open',
	            timeout: 480000,
	            data: {
	                targetAppId: 'search',
	                targetAppRoute: 'customerSearch/connections'
	            }
	        }, function (data) {
	            var contactId = data.data.result;
	            self.ContactService.get({
	                contactId: contactId,
	                summaryOnly: true
	            })
	                .then(function (resolution) {
	                if (resolution.id)
	                    self.saveCobuyer();
	                self.sendSaveRequest(resolution);
	            });
	        });
	    };
	    AddCobuyerController.prototype.saveCobuyer = function () {
	        var _this = this;
	        this.eventManagerService.publish(this.Constants.ALERT_EVENT_SAVE_BUTTON_PRESS);
	        if (this.isCobuyerSavable()) {
	            this.isLoading = true;
	        }
	        this.checkForDuplicates()
	            .finally(function () {
	            _this.isSaveButtonDisabled = false;
	        });
	    };
	    AddCobuyerController.prototype.sendSaveRequest = function (contact) {
	        var self = this;
	        if (!contact) {
	            this.ServiceWrapper.save(this.ContactService, this.contact)
	                .then(function (cobuyer) {
	                if (cobuyer.id) {
	                    return self.saveSalesOpportunity(cobuyer);
	                }
	            });
	        }
	        else {
	            this.saveSalesOpportunity(contact);
	        }
	    };
	    AddCobuyerController.prototype.saveSalesOpportunity = function (cobuyer) {
	        var self = this;
	        this.isLoading = true;
	        this.ServiceWrapper.post(this.SalesOpportunityCobuyerApiService, {
	            salesOpportunity: this.salesOpportunity,
	            cobuyer: cobuyer,
	            cobuyerType: this.connectionSubType || this.connectionSubTypes[this.connectionType][0].value
	        })
	            .then(function (response) {
	            if (!response.error) {
	                self.salesOpportunity.cobuyer = cobuyer;
	                self.EventManagerService.publish(self.CrmConstants.SALES_OPPORTUNITY.COBUYER.COBUYER_ADDED);
	            }
	        });
	    };
	    AddCobuyerController.prototype.checkForDuplicates = function () {
	        var _this = this;
	        return this.ContactApiDuplicatesService.duplicateContactCheck(this.contact)
	            .then(function (duplicates) {
	            if (duplicates && duplicates.length > 0) {
	                _this.modalService.open(_this.selectContactTemplateUrl, new DuplicateSelectionModalController(duplicates, 'newContact', _this.permissionService))
	                    .then(function (result) {
	                    switch (result.value) {
	                        case DuplicateSelectionResult.addAnyways:
	                            _this.sendSaveRequest();
	                            break;
	                        case DuplicateSelectionResult.selectedExisting:
	                            _this.sendSaveRequest(result.selectedContact);
	                            break;
	                        default:
	                            break;
	                    }
	                });
	            }
	            else {
	                _this.sendSaveRequest();
	            }
	        });
	    };
	    AddCobuyerController.$inject = [
	        'IndividualFactory',
	        '$scope',
	        '$state',
	        'eventManagerService',
	        'ServiceWrapper',
	        'ContactService',
	        'SalesOpportunityCobuyerApiService',
	        'contactValidationAlertService',
	        'organizationValidationAlertService',
	        '$http',
	        'Constants',
	        'ModelConstants',
	        'ConnectionRefDefService',
	        'CrmConstants',
	        'eventManagerService',
	        'ContactApiDuplicatesService',
	        'modalService',
	        'permissionService',
	        'messageBus',
	        'RefDefService',
	    ];
	    return AddCobuyerController;
	}(AddContactController));
	module.exports = AddCobuyerController;


/***/ },
/* 420 */
/***/ function(module, exports) {

	"use strict";
	var StatusPanelComponent = (function () {
	    function StatusPanelComponent() {
	        this.bindings = {
	            salesOpportunity: '<'
	        };
	        this.controller = StatusPanelController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/salesOpportunity/details/statusPanel/statusPanelTemplate.html';
	    }
	    StatusPanelComponent.componentName = 'crmSalesOpportunityStatusPanel';
	    return StatusPanelComponent;
	}());
	exports.StatusPanelComponent = StatusPanelComponent;
	var StatusPanelController = (function () {
	    function StatusPanelController($scope, $q, modalService, SalesOpportunityInlineEditFactory, salesOpportunityRecapApiService, eventManagerService, coWindowResizeService, ContactSurveyApiService, SalesOpportunityService, dealershipApiService, permissionService, CrmConstants, TranslationCache, RefDefService, DataApiSettings) {
	        this.$scope = $scope;
	        this.$q = $q;
	        this.modalService = modalService;
	        this.SalesOpportunityInlineEditFactory = SalesOpportunityInlineEditFactory;
	        this.salesOpportunityRecapApiService = salesOpportunityRecapApiService;
	        this.eventManagerService = eventManagerService;
	        this.coWindowResizeService = coWindowResizeService;
	        this.ContactSurveyApiService = ContactSurveyApiService;
	        this.SalesOpportunityService = SalesOpportunityService;
	        this.dealershipApiService = dealershipApiService;
	        this.permissionService = permissionService;
	        this.CrmConstants = CrmConstants;
	        this.TranslationCache = TranslationCache;
	        this.RefDefService = RefDefService;
	        this.DataApiSettings = DataApiSettings;
	        this.isExpanded = false;
	        this.inlineEditFacades = {};
	        this.leadingIntegerRegex = /\d+ ?- ?(.+)/;
	        this.surveyModalTemplate = 'app/salesOpportunity/salesOpportunityCSI/salesOpportunitySurveyModalTemplate.html';
	        this.savingStatus = false;
	    }
	    StatusPanelController.prototype.$onInit = function () {
	        var _this = this;
	        if (this.salesOpportunity && this.salesOpportunity.dealershipId) {
	            this.disableEditCrossSite = this.DataApiSettings.getSiteId() !== this.salesOpportunity.dealershipId;
	        }
	        this.watchGreaterThanLargeScreenSize();
	        this.salesOpportunityStatusPercentage = this.getSalesOpportunityStatusPercentage();
	        var unWatch = this.$scope.$watch('ctrl.salesOpportunity.status.statusName', function (newStatusName, oldStatusName) {
	            if (!_this.savingStatus && newStatusName !== oldStatusName) {
	                _this.updateRunningMan();
	            }
	        });
	        var permissionPromise = this.getPermissions();
	        this.getRefDefs().then(function () {
	            _this.$q.all([permissionPromise]).then(function (resolutions) {
	                var isRefDefRestricted = resolutions.restricted;
	                if (isRefDefRestricted) {
	                    var enabledRefDefValues = resolutions[1].enabledValues;
	                    _this.salesRefDefs['sales.source'] = _this.salesRefDefs['sales.source'].filter(function (refDef) {
	                        return enabledRefDefValues.indexOf(refDef.value) >= 0;
	                    });
	                }
	                var getUsersPromise = _this.getUsers();
	                var getFranchisesPromise = _this.getFranchises();
	                return _this.$q.all([getUsersPromise, getFranchisesPromise]);
	            }).then(function () {
	                _this.initEditFacades();
	            });
	        });
	        this.$scope.$on('$destroy', function () {
	            unWatch();
	        });
	    };
	    StatusPanelController.prototype.$onChanges = function () {
	        this.initDealership();
	        this.initSurveys();
	        this.checkOverflow();
	    };
	    StatusPanelController.prototype.$onDestroy = function () {
	        this.eventManagerService.unSubscribe("windowResizeService", this._windowResizeEventHandle);
	        this.csiEvent = undefined;
	    };
	    StatusPanelController.prototype.getRefDefs = function () {
	        var _this = this;
	        return this.RefDefService.getRefDefs(['sales.type',
	            'sales.subtype',
	            'sales.rank',
	            'sales.source',
	            'sales.status',
	            'sales.forecast',
	            'sales.code1',
	            'sales.code2',
	            'sales.code3',
	            'sales.trackingCode'])
	            .then(function (refDefs) {
	            return _this.salesRefDefs = refDefs;
	        });
	    };
	    StatusPanelController.prototype.watchGreaterThanLargeScreenSize = function () {
	        var _this = this;
	        var responsiveValue = 'gt-lg';
	        this._windowResizeEventHandle = this.eventManagerService.subscribe("windowResizeService", function () {
	            _this._isScreenWidthGreaterThanLarge = _this.coWindowResizeService.isInRange(responsiveValue);
	        });
	        this.eventManagerService.publish("windowResizeListenerCreated");
	    };
	    StatusPanelController.prototype.getPermissions = function () {
	        var _this = this;
	        var salesSoldChangeStatusPromise = this.permissionService.getPermission('SalesSoldChangeStatus')
	            .then(function (permission) {
	            _this.changeStatusFromSoldPermission = permission;
	        });
	        var salesSoldPromise = this.permissionService.getPermission('SalesSold')
	            .then(function (permission) {
	            _this.changeStatusToSoldPermission = permission;
	        });
	        var recapDealPromise = this.permissionService.getPermission('RecapDeal')
	            .then(function (permission) {
	            _this.dealRecapPermission = permission;
	        });
	        var evtBDCAssignPromise = this.permissionService.getPermission('EvtBDCAssign')
	            .then(function (permission) {
	            _this.bdcPermission = permission;
	        });
	        var evtAssignPrimaryPromise = this.permissionService.getPermission('EvtAssignPrimary')
	            .then(function (permission) {
	            _this.primaryAssignPermission = permission;
	        });
	        var eventSourcePromise = this.permissionService.getPermission('EventSource')
	            .then(function (permission) {
	            _this.eventSourcePermission = permission;
	        });
	        var eventTrackingCodePromise = this.permissionService.getPermission('EventTrackingCode')
	            .then(function (permission) {
	            _this.eventTrackingCodePermission = permission;
	        });
	        var salesSourcePromise = this.permissionService.getPermission('InsertRestriction:SalesSource')
	            .then(function (permission) {
	            _this.insertRestrictionPermission = permission;
	        });
	        return this.$q.all([
	            salesSoldChangeStatusPromise,
	            salesSoldPromise,
	            recapDealPromise,
	            evtBDCAssignPromise,
	            evtAssignPrimaryPromise,
	            eventSourcePromise,
	            eventTrackingCodePromise,
	            salesSourcePromise
	        ]);
	    };
	    StatusPanelController.prototype.initDealership = function () {
	        var _this = this;
	        this.dealershipApiService.getSelectedDealershipFromCache()
	            .then(function (selectedDealership) {
	            _this.selectedDealership = selectedDealership;
	        });
	    };
	    StatusPanelController.prototype.initEditFacades = function () {
	        // TODO: Temp solution for disable inline edit when cross site
	        this.inlineEditFacades.type = this.SalesOpportunityInlineEditFactory.getTypeFacade(this.salesOpportunity, this.salesRefDefs, this.inlineEditSave('type'), this.disableEditCrossSite);
	        this.inlineEditFacades.trackingCode = this.SalesOpportunityInlineEditFactory.getTrackingCodeFacade(this.salesOpportunity, this.salesRefDefs, this.inlineEditSave('trackingCode'), !this.eventTrackingCodePermission.edit || this.disableEditCrossSite);
	        this.inlineEditFacades.purchaseType = this.SalesOpportunityInlineEditFactory.getPurchaseTypeFacade(this.salesOpportunity, this.salesRefDefs, this.inlineEditSave('purchaseType'), this.disableEditCrossSite);
	        this.inlineEditFacades.source = this.SalesOpportunityInlineEditFactory.getSalesSourceFacade(this.salesOpportunity, this.salesRefDefs, this.inlineEditSave('source'), !this.eventSourcePermission.edit || this.disableEditCrossSite);
	        this.inlineEditFacades.ranking = this.SalesOpportunityInlineEditFactory.getRankingFacade(this.salesOpportunity, this.salesRefDefs, this.inlineEditSave('ranking'), this.disableEditCrossSite);
	        this.inlineEditFacades.closeDate = this.SalesOpportunityInlineEditFactory.getCloseDateFacade(this.salesOpportunity, this.salesRefDefs, this.inlineEditSave('closeDate'), this.disableEditCrossSite);
	        this.inlineEditFacades.primaryAssigned = this.SalesOpportunityInlineEditFactory.getPrimaryAssignedFacade(this.salesOpportunity, this.users, this.inlineEditSave('primaryAssigned'), !this.primaryAssignPermission.view || this.disableEditCrossSite);
	        this.inlineEditFacades.secondaryAssigned = this.SalesOpportunityInlineEditFactory.getSecondaryAssignedFacade(this.salesOpportunity, this.users, this.inlineEditSave('secondaryAssigned'), this.disableEditCrossSite);
	        this.inlineEditFacades.bdcAssigned = this.SalesOpportunityInlineEditFactory.getBdcAssignedFacade(this.salesOpportunity, this.users, this.inlineEditSave('bdcAssigned'), !this.bdcPermission.view || this.disableEditCrossSite);
	        this.inlineEditFacades.description = this.SalesOpportunityInlineEditFactory.getDescriptionFacade(this.salesOpportunity, this.salesRefDefs, this.inlineEditSave('description'), this.disableEditCrossSite);
	        this.inlineEditFacades.franchise = this.SalesOpportunityInlineEditFactory.getFranchiseFacade(this.salesOpportunity, this.franchises, this.inlineEditSave('franchise'), this.disableEditCrossSite);
	        this.inlineEditFacades.status = this.SalesOpportunityInlineEditFactory.getStatusFacade(this.salesOpportunity, this.statusOnSave(), this.disableEditCrossSite);
	        this.disableSoldStatus(this.inlineEditFacades.status);
	    };
	    StatusPanelController.prototype.statusOnSave = function () {
	        var self = this;
	        return function (inlineReturnObj) {
	            self.savingStatus = true;
	            return self.inlineEditSave('status')(inlineReturnObj).then(function () {
	                self.savingStatus = false;
	                self.updateRunningMan();
	            });
	        };
	    };
	    StatusPanelController.prototype.updateRunningMan = function () {
	        this.inlineEditFacades.status.model.status = this.salesOpportunity.status;
	        var newStatusName = this.salesOpportunity.status.statusName;
	        this.inlineEditFacades.status.model.status.text = this.TranslationCache.get('crm.salesOpportunity.statusText.' + newStatusName) || newStatusName;
	        this.salesOpportunityStatusPercentage = this.getSalesOpportunityStatusPercentage();
	    };
	    StatusPanelController.prototype.disableSoldStatus = function (facade) {
	        var _this = this;
	        _.each(facade.fields[0].fieldValues, function (value, index) {
	            if ((value.text == 'Sold' || value.text == 'Deal') && !_this.changeStatusToSoldPermission.edit) {
	                facade.fields[0].fieldValues.splice(index, 1);
	            }
	        });
	        if ((facade.model.status.text == 'Sold' || facade.model.status.text == 'Deal') && !this.changeStatusFromSoldPermission.edit) {
	            this.inlineEditFacades.status = this.SalesOpportunityInlineEditFactory.getStatusFacade(this.salesOpportunity, this.inlineEditSave('status'), true);
	        }
	    };
	    StatusPanelController.prototype.initSurveys = function () {
	        var _this = this;
	        this.ContactSurveyApiService.get(this.salesOpportunity.buyer.id)
	            .then(function (surveys) {
	            var salesEventSurveys = _.filter(surveys, function (currentSurvey) {
	                return currentSurvey.salesEventId === _this.salesOpportunity.id;
	            });
	            _this.csiEvent = _.last(_.sortBy(salesEventSurveys, function (survey) {
	                return survey.surveyDate;
	            }));
	        });
	    };
	    StatusPanelController.prototype.shouldShowSalesRecapBanner = function () {
	        return this.salesOpportunity.status.id == this.salesOpportunity.statusList.sold.id && this.dealRecapPermission && this.dealRecapPermission.view;
	    };
	    StatusPanelController.prototype.trimLeadingInteger = function (text) {
	        var matches = this.leadingIntegerRegex.exec(text);
	        if (matches && matches.length > 1) {
	            return matches[1];
	        }
	        else
	            return text;
	    };
	    StatusPanelController.prototype.getRanking = function () {
	        if (this.salesOpportunity && this.salesOpportunity.ranking && this.salesOpportunity.ranking.text) {
	            return this.trimLeadingInteger(this.salesOpportunity.ranking.text);
	        }
	        return '';
	    };
	    StatusPanelController.prototype.getCssClasses = function () {
	        if (this.salesOpportunity && this.salesOpportunity.ranking && this.salesOpportunity.ranking.text) {
	            return ["ws-pill", "ws-pill-" + this.trimLeadingInteger(this.salesOpportunity.ranking.text).toLowerCase()];
	        }
	        return [];
	    };
	    StatusPanelController.prototype.getSalesOpportunityStatusPercentage = function () {
	        if (this.salesOpportunity) {
	            var stepNumber = this.salesOpportunity.status.order;
	            if (stepNumber === StatusPanelController.LOST_STATUS) {
	                return 0;
	            }
	            else {
	                return Math.ceil((stepNumber / StatusPanelController.COMPLETE_STATUS) * 100);
	            }
	        }
	        else {
	            return 0;
	        }
	    };
	    StatusPanelController.prototype.closeModal = function () {
	        this.modal.cancel();
	    };
	    StatusPanelController.prototype.isDisplayMoreShown = function () {
	        return !this._isScreenWidthGreaterThanLarge || this.isExpanded || this.checkOverflow();
	    };
	    StatusPanelController.prototype.checkOverflow = function () {
	        var overflowElements = $(".ws-overflow-text");
	        var isOverflow = false;
	        angular.forEach(overflowElements, function (element) {
	            if ($(element).width() < element.scrollWidth) {
	                isOverflow = true;
	            }
	        });
	        return isOverflow;
	    };
	    StatusPanelController.prototype.toggleExpanded = function () {
	        var _this = this;
	        this.isExpanded = !this.isExpanded;
	        //If collapsing, keep checking until overflow
	        if (!this.isExpanded && this._isScreenWidthGreaterThanLarge) {
	            var check = function () {
	                if (!_this.checkOverflow()) {
	                    setTimeout(check, 20);
	                }
	                else {
	                    _this.$scope.$digest();
	                }
	            };
	            check();
	        }
	    };
	    StatusPanelController.prototype.isValueNull = function (modelObject) {
	        return !!modelObject && modelObject.hasOwnProperty("value") && modelObject.value === null;
	    };
	    StatusPanelController.prototype.inlineEditSave = function (fieldName) {
	        var _this = this;
	        return function (inlineReturnObj) {
	            var statuses = [];
	            if (!!inlineReturnObj.model.status) {
	                statuses.push(inlineReturnObj.model.status);
	            }
	            var originalValue = _this.salesOpportunity[fieldName];
	            if (_this.isValueNull(inlineReturnObj.model[fieldName])) {
	                _this.salesOpportunity[fieldName] = null;
	            }
	            else {
	                _this.salesOpportunity[fieldName] = inlineReturnObj.model[fieldName];
	            }
	            return _this.SalesOpportunityService.save(_this.salesOpportunity.buyer.id, _this.salesOpportunity.id, statuses, true)
	                .then(function (updatedSalesOpportunity) {
	                return true;
	            })
	                .catch(function (error) {
	                if (fieldName) {
	                    _this.salesOpportunity[fieldName] = originalValue;
	                }
	                if (error === _this.CrmConstants.SALES_OPPORTUNITY.SAVE.CONCURRENT_EDIT_ERROR) {
	                    _this.eventManagerService.publish(error, {
	                        alertType: 'error',
	                        message: _this.TranslationCache.get('crm.salesOpportunity.errors.CONCURRENT_EDIT_ERROR')
	                    });
	                }
	                else if (error === _this.CrmConstants.SALES_OPPORTUNITY.SAVE.VOI_ERROR) {
	                    _this.eventManagerService.publish(error, {
	                        alertType: 'error',
	                        message: _this.TranslationCache.get('crm.salesOpportunity.errors.VIN_REQUIRED_ERROR')
	                    });
	                }
	                else {
	                    _this.eventManagerService.publish(error, {
	                        alertType: 'error',
	                        message: _this.TranslationCache.get('crm.salesOpportunity.errors.GENERIC_SAVE_ERROR')
	                    });
	                }
	            });
	        };
	    };
	    StatusPanelController.prototype.getStatusTextClass = function () {
	        if (this.salesOpportunity.status.id == this.salesOpportunity.statusList.sold.id) {
	            return 'text-complete';
	        }
	        else if (this.salesOpportunity.status.id == this.salesOpportunity.statusList.lost.id) {
	            return 'text-overdue';
	        }
	        else {
	            return 'text-open';
	        }
	    };
	    StatusPanelController.prototype.showSurveyModal = function () {
	        this.modal = this.modalService.openModalViaTemplateUrl(this.surveyModalTemplate, this);
	    };
	    StatusPanelController.prototype.getSurveyIcon = function () {
	        if (this.csiEvent) {
	            return this.csiEvent.score > StatusPanelController.SurveyIconThreshold ? StatusPanelController.SurveyIconPositive : StatusPanelController.SurveyIconNegative;
	        }
	        return StatusPanelController.SurveyIconPositive;
	    };
	    StatusPanelController.prototype.getUsers = function () {
	        var _this = this;
	        return this.SalesOpportunityService.getEmployeeNames().then(function (users) {
	            return _this.users = users;
	        });
	    };
	    StatusPanelController.prototype.getFranchises = function () {
	        var _this = this;
	        return this.SalesOpportunityService.getFranchises().then(function (franchises) {
	            return _this.franchises = franchises;
	        });
	    };
	    StatusPanelController.LOST_STATUS = 7;
	    StatusPanelController.COMPLETE_STATUS = 6;
	    StatusPanelController.SurveyIconPositive = 'fa-thumbs-up';
	    StatusPanelController.SurveyIconNegative = 'fa-thumbs-down';
	    StatusPanelController.SurveyIconThreshold = 80;
	    StatusPanelController.$inject = [
	        '$scope',
	        '$q',
	        'modalService',
	        'SalesOpportunityInlineEditFactory',
	        'salesOpportunityRecapApiService',
	        'eventManagerService',
	        'coWindowResizeService',
	        'ContactSurveyApiService',
	        'salesOpportunityService',
	        'DealershipApiService',
	        'permissionService',
	        'CrmConstants',
	        'TranslationCache',
	        'RefDefService',
	        'DataApiSettings'
	    ];
	    return StatusPanelController;
	}());


/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var salesRecapBannerDirective = __webpack_require__(422);
	module.exports = angular.module("crm.ui.card.salesRecapBanner", [])
	    .directive("crmSalesRecapBanner", salesRecapBannerDirective);


/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var SalesRecapBannerController = __webpack_require__(423);
	function SalesRecapBannerDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            salesOpportunity: '='
	        },
	        templateUrl: 'app/salesOpportunity/details/salesRecapBanner/salesRecapBannerTemplate.html',
	        controller: SalesRecapBannerController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = SalesRecapBannerDirective;


/***/ },
/* 423 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var SalesRecapBannerController = (function () {
	    function SalesRecapBannerController(salesRecapModalService) {
	        this.salesRecapModalService = salesRecapModalService;
	    }
	    SalesRecapBannerController.prototype.openSalesRecap = function () {
	        this.salesRecapModalService.openSalesRecapModal(this.salesOpportunity.buyer.id, this.salesOpportunity.id);
	    };
	    SalesRecapBannerController.$inject = [
	        'salesRecapModalService'
	    ];
	    return SalesRecapBannerController;
	}());
	module.exports = SalesRecapBannerController;


/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var carFaxButtonModule = __webpack_require__(425);
	var existingTradeVehicleCardModeule = __webpack_require__(428);
	var salesOpportunityAddTradeModule = __webpack_require__(431);
	var salesOpportunityTradeModule = __webpack_require__(434);
	var salesOpportunityTradesPanelModule = __webpack_require__(438);
	var bookValuationModalModule = __webpack_require__(441);
	var pushThirdPartyModule = __webpack_require__(444);
	var requiredFieldsModule = __webpack_require__(459);
	module.exports = angular.module("crm.salesOpportunity.trades", [
	    carFaxButtonModule.name,
	    existingTradeVehicleCardModeule.name,
	    salesOpportunityAddTradeModule.name,
	    salesOpportunityTradeModule.name,
	    salesOpportunityTradesPanelModule.name,
	    bookValuationModalModule.name,
	    pushThirdPartyModule.name,
	    requiredFieldsModule.name
	]);


/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var carFaxButtonDirective = __webpack_require__(426);
	module.exports = angular.module("crm.salesOpportunity.trades.carFaxButton", [])
	    .directive("crmCarfaxButton", carFaxButtonDirective);


/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(427);
	function carFaxButtonDirective() {
	    return {
	        restrict: "E",
	        templateUrl: "app/salesOpportunity/trades/carFaxButton/carFaxButtonTemplate.html",
	        scope: {
	            contact: "=",
	            salesOpportunity: "=",
	            tradeEvent: "=",
	            trade: "=",
	            setIsLoading: "="
	        },
	        controller: controller,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = carFaxButtonDirective;


/***/ },
/* 427 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var CarFaxButtonController = (function () {
	    function CarFaxButtonController(eventManagerService, translationCache, tradeIntegrationsService, CrmConstants) {
	        this.eventManagerService = eventManagerService;
	        this.translationCache = translationCache;
	        this.tradeIntegrationsService = tradeIntegrationsService;
	        this.CrmConstants = CrmConstants;
	        this.vehicleOfInterestRequiredMessage = "A vehicle of interest is required.";
	        this.carFaxIntegration = _.find(this.tradeEvent.integrations, function (integration) {
	            return integration.text == "CarFax";
	        });
	    }
	    CarFaxButtonController.prototype.generateReport = function () {
	        if (this.tradeIntegrationsService.hasRequiredFields(this.contact, this.trade)) {
	            this.generateCarFaxReport();
	        }
	        else {
	            this.showCarFaxModal();
	        }
	    };
	    CarFaxButtonController.prototype.showCarFaxModal = function () {
	        var _this = this;
	        this.tradeIntegrationsService.showRequiredFieldsModal(this.contact, this.trade, [this.carFaxIntegration])
	            .then(function () {
	            _this.generateCarFaxReport();
	        })
	            .catch(function (error) {
	            if (error) {
	                _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.TRADES.ALERT, {
	                    alertType: "error",
	                    message: error
	                });
	            }
	        });
	    };
	    CarFaxButtonController.prototype.generateCarFaxReport = function () {
	        var _this = this;
	        this.setIsLoading(true);
	        this.tradeIntegrationsService.generateCarFaxReport(this.tradeEvent, this.trade, this.salesOpportunity.dealershipId)
	            .catch(function (error) {
	            _this.setIsLoading(false);
	            var message = (error === _this.vehicleOfInterestRequiredMessage) ?
	                _this.translationCache.get("crm.salesOpportunity.trades.VEHICLE_OF_INTEREST_REQUIRED") :
	                error;
	            _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.TRADES.ALERT, {
	                alertType: "error",
	                message: message
	            });
	        })
	            .finally(function () {
	            _this.setIsLoading(false);
	        });
	    };
	    CarFaxButtonController.$inject = [
	        "eventManagerService",
	        "TranslationCache",
	        "tradeIntegrationsService",
	        "CrmConstants"
	    ];
	    return CarFaxButtonController;
	}());
	module.exports = CarFaxButtonController;


/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var directive = __webpack_require__(429);
	module.exports = angular.module("crm.salesOpportunity.trades.existingVehicle", [])
	    .directive("crmExistingTradeVehicleCard", directive);


/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(430);
	function existingTradeVehicleCardDirective() {
	    return {
	        restrict: "E",
	        templateUrl: "app/salesOpportunity/trades/existingTradeVehicleCard/existingTradeVehicleCardTemplate.html",
	        scope: {
	            vehicle: "=",
	            callback: "&"
	        },
	        controller: controller,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = existingTradeVehicleCardDirective;


/***/ },
/* 430 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var ExistingTradeVehicleCardController = (function () {
	    function ExistingTradeVehicleCardController($filter, translationCache) {
	        this.$filter = $filter;
	        this.translationCache = translationCache;
	        this.initializeItems();
	        this.status = this.vehicle.isCustomerOwned ? "good" : "bad";
	        this.tradeBtnDisabled = false;
	    }
	    ExistingTradeVehicleCardController.prototype.initializeItems = function () {
	        this.items = [];
	        if (this.vehicle.odometer)
	            this.items.push(this.$filter("number")(this.vehicle.odometer, 0) + " " +
	                this.translationCache.get("crm.vehicle.ODOMETER_UNIT"));
	        if (this.vehicle.vin)
	            this.items.push(this.vehicle.vin);
	        if (this.vehicle.stockNumber)
	            this.items.push(this.translationCache.get("crm.salesOpportunity.trades.existingVehicle.STOCK_NUMBER") +
	                this.vehicle.stockNumber);
	    };
	    ExistingTradeVehicleCardController.prototype.onTradeBtnClick = function () {
	        this.tradeBtnDisabled = true;
	        this.callback({ vehicle: this.vehicle });
	        this.callback = undefined;
	    };
	    ExistingTradeVehicleCardController.$inject = [
	        "$filter",
	        "TranslationCache"
	    ];
	    return ExistingTradeVehicleCardController;
	}());
	module.exports = ExistingTradeVehicleCardController;


/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var salesOpportunityAddTradeDirective = __webpack_require__(432);
	module.exports = angular.module("crm.salesOpportunity.trades.add", [])
	    .directive("crmSalesOpportunityAddTrade", salesOpportunityAddTradeDirective);


/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var salesOpportunityAddTradeController = __webpack_require__(433);
	function SalesOpportunityAddTradeDirective() {
	    return {
	        restrict: "E",
	        templateUrl: "app/salesOpportunity/trades/add/salesOpportunityAddTradeTemplate.html",
	        scope: {
	            salesOpportunity: "=",
	            tradeEvent: "=",
	            trade: "=",
	            permissions: "="
	        },
	        controller: salesOpportunityAddTradeController,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = SalesOpportunityAddTradeDirective;


/***/ },
/* 433 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunityAddTradeController = (function () {
	    function SalesOpportunityAddTradeController($scope, salesOpportunityTradesService, salesOpportunityTradeVehiclesApiService, modalService, translationCache, CrmConstants, eventManagerService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.salesOpportunityTradesService = salesOpportunityTradesService;
	        this.salesOpportunityTradeVehiclesApiService = salesOpportunityTradeVehiclesApiService;
	        this.modalService = modalService;
	        this.translationCache = translationCache;
	        this.CrmConstants = CrmConstants;
	        this.eventManagerService = eventManagerService;
	        this.setIsLoading = function (isLoading) {
	            _this.isLoading = isLoading;
	        };
	        this._enterVehicleManuallyText = this.translationCache.get("crm.salesOpportunity.trades.ENTER_VEHICLE_MANUALLY");
	        this._useDropDownsText = this.translationCache.get("crm.salesOpportunity.trades.USE_DROPDOWNS_TO_ENTER_VEHICLE");
	        this.addVehicleText = this._enterVehicleManuallyText;
	        this.initialize();
	        var addTradeEvent = eventManagerService.subscribe(CrmConstants.SALES_OPPORTUNITY.TRADES.ADD_TRADE_ACTIVE, function () {
	            _this.initialize();
	        });
	        var unWatchYear = $scope.$watch("ctrl.trade.year", function () { _this.validateForm(); });
	        var unWatchMake = $scope.$watch("ctrl.trade.make.text", function () { _this.validateForm(); });
	        var unWatchModel = $scope.$watch("ctrl.trade.model.text", function () { _this.validateForm(); });
	        $scope.$on("$destroy", function () {
	            _this.eventManagerService.unSubscribe(CrmConstants.SALES_OPPORTUNITY.TABS.ADD_TRADE_ACTIVE, addTradeEvent);
	            unWatchYear();
	            unWatchMake();
	            unWatchModel();
	        });
	        this.tradeBtnDisabled = false;
	    }
	    SalesOpportunityAddTradeController.prototype.initialize = function () {
	        this.vinError = 0;
	        this.isSubmitted = false;
	        this.isLoading = false;
	        this.setIsCancelButtonVisible();
	    };
	    SalesOpportunityAddTradeController.prototype.doVinLookup = function () {
	        var _this = this;
	        this.salesOpportunityTradesService.showVinLookupConfirmationModal(this.trade, true)
	            .then(function () {
	            _this.isLoading = true;
	            return _this.salesOpportunityTradesService.performVinLookup(_this.tradeEvent, _this.trade, _this.salesOpportunity.dealershipId);
	        })
	            .then(function (vinLookupResult) {
	            _this.isLoading = false;
	            _this.vinError = vinLookupResult.error;
	        });
	    };
	    SalesOpportunityAddTradeController.prototype.clearVinError = function () {
	        this.vinError = 0;
	    };
	    SalesOpportunityAddTradeController.prototype.onYearChanged = function () {
	        this.salesOpportunityTradesService.onYearChanged(this.tradeEvent, this.trade, this.setIsLoading);
	    };
	    SalesOpportunityAddTradeController.prototype.onMakeChanged = function () {
	        this.salesOpportunityTradesService.onMakeChanged(this.tradeEvent, this.trade, this.setIsLoading);
	    };
	    SalesOpportunityAddTradeController.prototype.onModelChanged = function () {
	        this.salesOpportunityTradesService.onModelChanged(this.tradeEvent, this.trade, this.setIsLoading);
	    };
	    SalesOpportunityAddTradeController.prototype.toggleFreeText = function () {
	        this.trade.isFreeText = !this.trade.isFreeText;
	        this.addVehicleText = (this.trade.isFreeText) ? this._useDropDownsText : this._enterVehicleManuallyText;
	    };
	    SalesOpportunityAddTradeController.prototype.updateFreeTextField = function (refDef) {
	        refDef.value = "";
	    };
	    SalesOpportunityAddTradeController.prototype.cancelTrade = function () {
	        this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.TRADES.ADD_TRADE_INACTIVE);
	    };
	    SalesOpportunityAddTradeController.prototype.saveTrade = function () {
	        var _this = this;
	        this.tradeBtnDisabled = true;
	        this.isSubmitted = true;
	        this.validateForm();
	        if (this.validationResult.isValid) {
	            this.isLoading = true;
	            this.salesOpportunityTradesService.saveTrades(this.tradeEvent, this.salesOpportunity.id, this.salesOpportunity.dealershipId)
	                .then(function () {
	                _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.TRADES.ADD_TRADE_INACTIVE);
	            })
	                .catch(function (error) {
	                _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.TRADES.ALERT, {
	                    alertType: "error",
	                    message: error
	                });
	            })
	                .finally(function () {
	                _this.isLoading = false;
	                _this.tradeBtnDisabled = false;
	            });
	        }
	        else {
	            this.tradeBtnDisabled = false;
	        }
	    };
	    SalesOpportunityAddTradeController.prototype.setIsCancelButtonVisible = function () {
	        this.isCancelButtonVisible = this.tradeEvent.trades.filter(function (trade) {
	            return trade.id > 0;
	        }).length > 0;
	    };
	    SalesOpportunityAddTradeController.prototype.validateForm = function () {
	        if (this.isSubmitted)
	            this.validationResult = this.salesOpportunityTradesService.validateTrade(this.trade);
	    };
	    SalesOpportunityAddTradeController.prototype.stringToNumber = function (year) {
	        return parseInt(year);
	    };
	    SalesOpportunityAddTradeController.$inject = [
	        "$scope",
	        "salesOpportunityTradesService",
	        "salesOpportunityTradeVehiclesApiService",
	        "modalService",
	        "TranslationCache",
	        "CrmConstants",
	        "eventManagerService",
	    ];
	    return SalesOpportunityAddTradeController;
	}());
	module.exports = SalesOpportunityAddTradeController;


/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var salesOpportunityTradeDirective = __webpack_require__(435);
	module.exports = angular.module("crm.salesOpportunity.trades.card", [])
	    .directive("crmSalesOpportunityTrade", salesOpportunityTradeDirective);


/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var salesOpportunityTradeController = __webpack_require__(436);
	function SalesOpportunityTradeDirective() {
	    return {
	        restrict: "E",
	        templateUrl: "app/salesOpportunity/trades/card/salesOpportunityTradeTemplate.html",
	        scope: {
	            contact: "=",
	            salesOpportunity: "=",
	            tradeEvent: "=",
	            trade: "=",
	            canPush: "=",
	            setIsLoading: "=",
	            tradesPanelOptions: "="
	        },
	        controller: salesOpportunityTradeController,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = SalesOpportunityTradeDirective;


/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunityTradeInlineEditConfig = __webpack_require__(437);
	var SalesOpportunityTradeController = (function () {
	    function SalesOpportunityTradeController($scope, eventManagerService, CrmConstants, TranslationCache, salesOpportunityTradesService, tradeIntegrationsService, reconditionItemFactory, modalService, InlineEditFacadeFactory, permissionService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.TranslationCache = TranslationCache;
	        this.salesOpportunityTradesService = salesOpportunityTradesService;
	        this.tradeIntegrationsService = tradeIntegrationsService;
	        this.reconditionItemFactory = reconditionItemFactory;
	        this.modalService = modalService;
	        this.InlineEditFacadeFactory = InlineEditFacadeFactory;
	        this.permissionService = permissionService;
	        this._classicSuccessString = "Success";
	        this._reconditionItemsModalTemplate = "app/salesOpportunity/trades/card/salesOpportunityTradeReconditionItemsModalTemplate.html";
	        this._valuationModalTemplate = "app/salesOpportunity/trades/card/salesOpportunityTradeValuationModalTemplate.html";
	        this.canViewAmount = false;
	        this.canViewAcv = false;
	        this.canViewPayoff = false;
	        this.onInlineEditSave = function (facade) {
	            var original = angular.copy(_this.trade);
	            facade.fields.forEach(function (field) {
	                _this.trade[field.fieldName] = facade.model[field.fieldName];
	            });
	            return _this.saveTrades()
	                .then(function (data) {
	                if (data.title == _this._classicSuccessString) {
	                    _this.tradesPanelOptions.updateTradesInformation();
	                    _this.setNetTrade();
	                    return true;
	                }
	                else {
	                    _this.trade = original;
	                    _this.publishError(data);
	                }
	            });
	        };
	        this.setReconditionAmount();
	        this.setNetTrade();
	        this.setBookName();
	        this.setActionItems();
	        this.initializeFacades();
	        this.dealTradesPermission = false;
	        this.tradeValuationPermission = false;
	        this.permissionService.getPermission('DealTrades')
	            .then(function (permission) {
	            if (permission.view) {
	                _this.dealTradesPermission = true;
	            }
	        });
	        this.permissionService.getPermission('TradeValuation')
	            .then(function (permission) {
	            if (permission.view) {
	                _this.tradeValuationPermission = true;
	            }
	        });
	        this.permissionService.getPermission('Amount')
	            .then(function (permission) {
	            if (permission.view) {
	                _this.canViewAmount = true;
	            }
	        });
	        this.permissionService.getPermission('CustomerTrade-ACV')
	            .then(function (permission) {
	            if (permission.view) {
	                _this.canViewAcv = true;
	            }
	        });
	        this.permissionService.getPermission('CustomerTrade-Payoff')
	            .then(function (permission) {
	            if (permission.view) {
	                _this.canViewPayoff = true;
	            }
	        });
	    }
	    SalesOpportunityTradeController.prototype.showReconditionItemsModal = function () {
	        var _this = this;
	        this.setReconditionItemSelections();
	        this.modalService.openModalViaTemplateUrlPromise(this._reconditionItemsModalTemplate, this, function (obj) {
	            _this.saveReconditionItems(obj.modalInstance);
	        }).then(function () {
	        }, function (obj) {
	            obj.modalInstance.close();
	        });
	    };
	    SalesOpportunityTradeController.prototype.addCustomReconditionItem = function () {
	        this.customReconditionItemSelections.push({
	            reconditionItem: this.reconditionItemFactory.create(),
	            isSelected: true
	        });
	    };
	    SalesOpportunityTradeController.prototype.showValuationModal = function () {
	        if (!this.trade.isFreeText) {
	            this.modalManager = this.modalService.openModalViaTemplateUrl(this._valuationModalTemplate, this);
	        }
	    };
	    SalesOpportunityTradeController.prototype.pushTrade = function () {
	        this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.TRADES.PUSH_SELECTION);
	    };
	    SalesOpportunityTradeController.prototype.setReconditionSelectionsAmount = function () {
	        var _this = this;
	        this.reconditionSelectionsAmount = 0;
	        _.each(this.reconditionItemSelections, function (selection) {
	            if (selection.isSelected)
	                _this.reconditionSelectionsAmount += selection.reconditionItem.amount;
	        });
	        _.each(this.customReconditionItemSelections, function (selection) {
	            if (selection.isSelected)
	                _this.reconditionSelectionsAmount += selection.reconditionItem.amount;
	        });
	    };
	    SalesOpportunityTradeController.prototype.saveTrades = function () {
	        return this.salesOpportunityTradesService.saveTrades(this.tradeEvent, this.salesOpportunity.id, this.salesOpportunity.dealershipId);
	    };
	    SalesOpportunityTradeController.prototype.saveReconditionItems = function (modalInstance) {
	        var _this = this;
	        this.trade.reconditionItems = [];
	        _.each(this.reconditionItemSelections, function (reconditionItemSelection) {
	            if (reconditionItemSelection.isSelected) {
	                reconditionItemSelection.reconditionItem.tradeId = _this.trade.id;
	                _this.trade.reconditionItems.push(reconditionItemSelection.reconditionItem);
	            }
	        });
	        _.each(this.customReconditionItemSelections, function (reconditionItemSelection) {
	            if (reconditionItemSelection.isSelected) {
	                reconditionItemSelection.reconditionItem.tradeId = _this.trade.id;
	                _this.trade.reconditionItems.push(reconditionItemSelection.reconditionItem);
	            }
	        });
	        this.saveTrades()
	            .then(function (data) {
	            if (data.title == _this._classicSuccessString) {
	                _this.setReconditionAmount();
	                modalInstance.close();
	            }
	            else {
	                _this.publishError(data);
	            }
	        });
	    };
	    SalesOpportunityTradeController.prototype.sortReconditionItemSelections = function () {
	        this.reconditionItemSelections = _.sortBy(this.reconditionItemSelections, function (selection) {
	            return selection.reconditionItem.description;
	        });
	    };
	    SalesOpportunityTradeController.prototype.setActionItems = function () {
	        var _this = this;
	        this.actionItems = [
	            {
	                text: this.TranslationCache.get("crm.salesOpportunity.trades.popover.DELETE_TRADE"),
	                callback: function () {
	                    _this.showRemoveConfirmationModal();
	                },
	                isDisabled: function () {
	                    return false;
	                },
	                isVisible: function () {
	                    return true;
	                }
	            }
	        ];
	    };
	    SalesOpportunityTradeController.prototype.setReconditionAmount = function () {
	        var _this = this;
	        this.reconditionAmount = 0;
	        _.each(this.trade.reconditionItems, function (reconditionItem) {
	            _this.reconditionAmount += reconditionItem.amount;
	        });
	    };
	    SalesOpportunityTradeController.prototype.setReconditionItemSelections = function () {
	        var _this = this;
	        this.customReconditionItemSelections = [];
	        this.reconditionItemSelections = _.map(this.trade.reconditionItems, function (reconditionItem) {
	            return {
	                reconditionItem: _.clone(reconditionItem),
	                isSelected: true
	            };
	        });
	        _.each(this.tradeEvent.reconditionItems, function (reconditionItem) {
	            var existingSelection = _.find(_this.reconditionItemSelections, function (selection) {
	                return selection.reconditionItem.description == reconditionItem.description;
	            });
	            if (typeof existingSelection === "undefined") {
	                _this.reconditionItemSelections.push({
	                    reconditionItem: _.clone(reconditionItem),
	                    isSelected: false
	                });
	            }
	        });
	        this.sortReconditionItemSelections();
	        this.reconditionSelectionsAmount = this.reconditionAmount;
	    };
	    SalesOpportunityTradeController.prototype.setNetTrade = function () {
	        this.netTrade = this.trade.tradeAmount - this.trade.payoffAmount;
	    };
	    SalesOpportunityTradeController.prototype.setBookName = function () {
	        var _this = this;
	        var book = _.find(this.tradeEvent.booksLookup, function (book) {
	            return book.value == _this.trade.book.value;
	        });
	        this.trade.book.text = (book && book.text) ? book.text : "";
	    };
	    SalesOpportunityTradeController.prototype.initializeFacades = function () {
	        var config = new SalesOpportunityTradeInlineEditConfig(this.InlineEditFacadeFactory, this.TranslationCache);
	        this.facades = {
	            yearMakeModelVin: config.getYearMakeModelVinFacade(this.trade, this.onInlineEditSave),
	            odometer: config.getOdometerFacade(this.trade, this.onInlineEditSave),
	            exteriorColor: config.getExteriorColorFacade(this.trade, this.onInlineEditSave),
	            cylinders: config.getCylindersFacade(this.trade, this.onInlineEditSave),
	            existingVsc: config.getExistingVscFacade(this.trade, this.onInlineEditSave),
	            inspectedBy: config.getInspectedByFacade(this.trade, this.onInlineEditSave),
	            acv: config.getAcvFacade(this.trade, this.onInlineEditSave),
	            tradeAmount: config.getTradeAmountFacade(this.trade, this.onInlineEditSave),
	            payoff: config.getPayoffFacade(this.trade, this.onInlineEditSave)
	        };
	    };
	    SalesOpportunityTradeController.prototype.removeTrade = function () {
	        var _this = this;
	        this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.TRADES.SET_PANEL_LOADING, true);
	        this.salesOpportunityTradesService.removeTrade(this.trade);
	        this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.TRADES.UPDATE_ACTIVE_TRADES);
	        this.saveTrades()
	            .then(function (data) {
	            if (data.title == _this._classicSuccessString) {
	                _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.TRADES.TRADE_REMOVED);
	                _this.tradesPanelOptions.updateTradesInformation();
	            }
	            else {
	                _this.publishError(data);
	            }
	            _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.TRADES.SET_PANEL_LOADING, false);
	        });
	    };
	    SalesOpportunityTradeController.prototype.showRemoveConfirmationModal = function () {
	        var _this = this;
	        var title = this.TranslationCache.get("crm.salesOpportunity.trades.deleteModal.TITLE");
	        var prompt = this.TranslationCache.get("crm.salesOpportunity.trades.deleteModal.PROMPT_PREFIX") +
	            "<b>" + this.getTradeFullName() + "</b>" +
	            this.TranslationCache.get("crm.salesOpportunity.trades.deleteModal.PROMPT_SUFFIX") + "<br />" +
	            this.TranslationCache.get("crm.salesOpportunity.trades.deleteModal.PROMPT_CONFIRMATION");
	        var acceptButton = this.TranslationCache.get("crm.salesOpportunity.trades.deleteModal.ACCEPT_BUTTON");
	        var cancelButton = this.TranslationCache.get("crm.salesOpportunity.trades.deleteModal.CANCEL_BUTTON");
	        this.modalService.openModal(prompt, title, acceptButton, cancelButton)
	            .then(function (modalInstance) {
	            modalInstance.close();
	            _this.removeTrade();
	        })
	            .catch(function (modalInstance) {
	            modalInstance.dismiss();
	        });
	    };
	    SalesOpportunityTradeController.prototype.publishError = function (error) {
	        this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.TRADES.ALERT, {
	            alertType: "error",
	            message: error
	        });
	    };
	    SalesOpportunityTradeController.prototype.getTradeFullName = function () {
	        var name = "";
	        if (this.trade.year) {
	            name += this.trade.year + " ";
	            if (this.trade.make && this.trade.make.text) {
	                name += this.trade.make.text + " ";
	            }
	            if (this.trade.model && this.trade.model.text) {
	                name += this.trade.model.text + " ";
	            }
	        }
	        return name;
	    };
	    SalesOpportunityTradeController.$inject = [
	        "$scope",
	        "eventManagerService",
	        "CrmConstants",
	        "TranslationCache",
	        "salesOpportunityTradesService",
	        "tradeIntegrationsService",
	        "reconditionItemFactory",
	        "modalService",
	        "InlineEditFacadeFactory",
	        "permissionService"
	    ];
	    return SalesOpportunityTradeController;
	}());
	module.exports = SalesOpportunityTradeController;


/***/ },
/* 437 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunityTradeInlineEditConfig = (function () {
	    function SalesOpportunityTradeInlineEditConfig(InlineEditFacadeFactory, translationCache) {
	        this.InlineEditFacadeFactory = InlineEditFacadeFactory;
	        this.translationCache = translationCache;
	    }
	    SalesOpportunityTradeInlineEditConfig.prototype.getYearMakeModelVinFacade = function (trade, onSave) {
	        var fields = [
	            {
	                fieldName: "year",
	                type: "number",
	                htmlAttributeName: "yearInlineEdit"
	            },
	            {
	                fieldName: "make",
	                type: "select",
	                htmlAttributeName: "makeInlineEdit"
	            },
	            {
	                fieldName: "model",
	                type: "select",
	                htmlAttributeName: "modelInlineEdit"
	            },
	            {
	                fieldName: "vin",
	                type: "text",
	                htmlAttributeName: "vinInlineEdit"
	            }
	        ];
	        var tradeCopy = angular.copy(trade);
	        tradeCopy.isFreeText = false;
	        tradeCopy.makesLookup = [tradeCopy.make];
	        tradeCopy.modelsLookup = [tradeCopy.model];
	        return this.InlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.salesOpportunity.trades.YEAR") + ", " +
	            this.translationCache.get("crm.salesOpportunity.trades.MAKE") + ", " +
	            this.translationCache.get("crm.salesOpportunity.trades.MODEL") + ", " +
	            this.translationCache.get("crm.salesOpportunity.trades.VIN"), tradeCopy, fields, onSave);
	    };
	    SalesOpportunityTradeInlineEditConfig.prototype.getOdometerFacade = function (trade, onSave) {
	        var fields = [
	            {
	                fieldName: "odometer",
	                type: "number",
	                htmlAttributeName: "odometerInlineEdit"
	            }
	        ];
	        return this.InlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.salesOpportunity.trades.ODOMETER"), trade, fields, onSave);
	    };
	    SalesOpportunityTradeInlineEditConfig.prototype.getExteriorColorFacade = function (trade, onSave) {
	        var fields = [
	            {
	                fieldName: "exteriorColor",
	                type: "text",
	                placeholder: this.translationCache.get("crm.salesOpportunity.trades.EXTERIOR_COLOR_PLACEHOLDER"),
	                htmlAttributeName: "exteriorColorInlineEdit"
	            }
	        ];
	        return this.InlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.salesOpportunity.trades.EXTERIOR_COLOR"), trade, fields, onSave);
	    };
	    SalesOpportunityTradeInlineEditConfig.prototype.getCylindersFacade = function (trade, onSave) {
	        var fields = [
	            {
	                fieldName: "cylinders",
	                type: "number",
	                htmlAttributeName: "cylindersInlineEdit"
	            }
	        ];
	        return this.InlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.salesOpportunity.trades.NUMBER_OF_CYLINDERS"), trade, fields, onSave);
	    };
	    SalesOpportunityTradeInlineEditConfig.prototype.getExistingVscFacade = function (trade, onSave) {
	        var fields = [
	            {
	                fieldName: "hasExistingVsc",
	                type: "radio",
	                htmlAttributeName: "existingVscInlineEdit",
	                fieldValues: [
	                    {
	                        key: this.translationCache.get("crm.salesOpportunity.trades.YES"),
	                        value: true,
	                    },
	                    {
	                        key: this.translationCache.get("crm.salesOpportunity.trades.NO"),
	                        value: false,
	                    }
	                ]
	            }
	        ];
	        return this.InlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.salesOpportunity.trades.EXISTING_VSC"), trade, fields, onSave);
	    };
	    SalesOpportunityTradeInlineEditConfig.prototype.getInspectedByFacade = function (trade, onSave) {
	        var fields = [
	            {
	                fieldName: "inspectedBy",
	                type: "select",
	                htmlAttributeName: "inspectedByInlineEdit",
	                fieldValues: trade.usersLookup
	            }
	        ];
	        return this.InlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.salesOpportunity.trades.INSPECTED_BY"), trade, fields, onSave);
	    };
	    SalesOpportunityTradeInlineEditConfig.prototype.getAcvFacade = function (trade, onSave) {
	        var fields = [
	            {
	                fieldName: "actualCashValueAmount",
	                type: "number",
	                htmlAttributeName: "acvInlineEdit"
	            }
	        ];
	        return this.InlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.salesOpportunity.trades.ACV"), trade, fields, onSave);
	    };
	    SalesOpportunityTradeInlineEditConfig.prototype.getTradeAmountFacade = function (trade, onSave) {
	        var fields = [
	            {
	                fieldName: "tradeAmount",
	                type: "number",
	                htmlAttributeName: "tradeAmountInlineEdit"
	            }
	        ];
	        return this.InlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.salesOpportunity.trades.TRADE_AMOUNT"), trade, fields, onSave);
	    };
	    SalesOpportunityTradeInlineEditConfig.prototype.getPayoffFacade = function (trade, onSave) {
	        var fields = [
	            {
	                fieldName: "payoffAmount",
	                type: "number",
	                htmlAttributeName: "payoffAmountInlineEdit"
	            }
	        ];
	        return this.InlineEditFacadeFactory.createGeneralFacade(this.translationCache.get("crm.salesOpportunity.trades.PAYOFF"), trade, fields, onSave);
	    };
	    return SalesOpportunityTradeInlineEditConfig;
	}());
	module.exports = SalesOpportunityTradeInlineEditConfig;


/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var salesOpportunityTradesPanelDirective = __webpack_require__(439);
	module.exports = angular.module("crm.salesOpportunity.trades.panel", [])
	    .directive("crmSalesOpportunityTradesPanel", salesOpportunityTradesPanelDirective);


/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var salesOpportunityTradesPanelController = __webpack_require__(440);
	function SalesOpportunityTradesPanelDirective() {
	    return {
	        restrict: "E",
	        templateUrl: "app/salesOpportunity/trades/panel/salesOpportunityTradesPanelTemplate.html",
	        scope: {
	            contact: "=",
	            salesOpportunity: "=",
	            tradesOptions: "="
	        },
	        controller: salesOpportunityTradesPanelController,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = SalesOpportunityTradesPanelDirective;


/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var Option = __webpack_require__(224);
	var SalesOpportunityTradesPanelController = (function () {
	    function SalesOpportunityTradesPanelController($scope, $q, salesOpportunityTradesApiService, salesOpportunityTradesService, contactVehicleApiService, CrmConstants, eventManagerService, translationCache, modalService, permissionService, DataApiSettings) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$q = $q;
	        this.salesOpportunityTradesApiService = salesOpportunityTradesApiService;
	        this.salesOpportunityTradesService = salesOpportunityTradesService;
	        this.contactVehicleApiService = contactVehicleApiService;
	        this.CrmConstants = CrmConstants;
	        this.eventManagerService = eventManagerService;
	        this.translationCache = translationCache;
	        this.modalService = modalService;
	        this.permissionService = permissionService;
	        this.DataApiSettings = DataApiSettings;
	        this.modalTemplate = "app/salesOpportunity/trades/existingTradeVehicleCard/existingTradeVehicleCardModalTemplate.html";
	        this.initialHeightValue = 34.5;
	        this.isPushingThirdParty = false;
	        this.canViewAmount = false;
	        this.tradesPanelOptions = {
	            updateTradesInformation: function () {
	                _this.tradesOptions.updateTradesInformation(_this.getTradeUpdateData());
	            }
	        };
	        this.onTabSelected = function (tabName) {
	            if (tabName === _this.CrmConstants.SALES_OPPORTUNITY.TRADES.NAME) {
	                _this.loadTradesAndPermissions();
	            }
	        };
	        this.onAddTradeInactive = function () {
	            _this.isAdding = false;
	            _this.loadTradesAndPermissions();
	        };
	        this.onTradeRemoved = function () {
	            _this.loadTradesAndPermissions(true);
	        };
	        this.onSaveTradesWithId = function (data) {
	            if (_this.tradeEvent && _this.tradeEvent.trades && _this.tradeEvent.trades[0] && _this.tradeEvent.trades[0].year > 0) {
	                _this.tradeEvent.contactId = _this.contact.id;
	                _this.salesOpportunityTradesService.saveTrades(_this.tradeEvent, data.id, _this.salesOpportunity.dealershipId)
	                    .then(function () {
	                    data.callback();
	                });
	            }
	            else {
	                data.callback();
	            }
	        };
	        this.setIsLoading = function (isLoading) {
	            if (isLoading) {
	                _this.showChildrenDuringLoading = true;
	                _this.initialHeight = null;
	                _this.isLoading = true;
	            }
	            else {
	                _this.showChildrenDuringLoading = null;
	                _this.initialHeight = _this.initialHeightValue;
	                _this.isLoading = false;
	            }
	        };
	        this.initialHeight = this.initialHeightValue;
	        var tabSelectedEvent = eventManagerService.subscribe(CrmConstants.SALES_OPPORTUNITY.TABS.TRADES_TAB_SELECTED, this.onTabSelected);
	        var addTradeInactiveEvent = eventManagerService.subscribe(CrmConstants.SALES_OPPORTUNITY.TRADES.ADD_TRADE_INACTIVE, this.onAddTradeInactive);
	        var saveTradesWithIdEvent = eventManagerService.subscribe(CrmConstants.SALES_OPPORTUNITY.TRADES.SAVE_TRADES_WITH_ID, function (data) { _this.onSaveTradesWithId(data); });
	        var updateActiveTradesEvent = eventManagerService.subscribe(CrmConstants.SALES_OPPORTUNITY.TRADES.UPDATE_ACTIVE_TRADES, function () { _this.filterTrades(_this.tradeEvent.trades); });
	        var cancelPushSelectionEvent = eventManagerService.subscribe(CrmConstants.SALES_OPPORTUNITY.TRADES.CANCEL_PUSH_SELECTION, function () { _this.isPushingThirdParty = false; });
	        var tradeRemovedEvent = eventManagerService.subscribe(CrmConstants.SALES_OPPORTUNITY.TRADES.TRADE_REMOVED, this.onTradeRemoved);
	        var setLoadingEvent = eventManagerService.subscribe(CrmConstants.SALES_OPPORTUNITY.TRADES.SET_PANEL_LOADING, function (isLoading) { _this.isLoading = isLoading; });
	        $scope.$on("$destroy", function () {
	            eventManagerService.unSubscribe(CrmConstants.SALES_OPPORTUNITY.TABS.TRADES_TAB_SELECTED, tabSelectedEvent);
	            eventManagerService.unSubscribe(CrmConstants.SALES_OPPORTUNITY.TRADES.ADD_TRADE_INACTIVE, addTradeInactiveEvent);
	            eventManagerService.unSubscribe(CrmConstants.SALES_OPPORTUNITY.TRADES.SAVE_TRADES_WITH_ID, saveTradesWithIdEvent);
	            eventManagerService.unSubscribe(CrmConstants.SALES_OPPORTUNITY.TRADES.UPDATE_ACTIVE_TRADES, updateActiveTradesEvent);
	            eventManagerService.unSubscribe(CrmConstants.SALES_OPPORTUNITY.TRADES.CANCEL_PUSH_SELECTION, cancelPushSelectionEvent);
	            eventManagerService.unSubscribe(CrmConstants.SALES_OPPORTUNITY.TRADES.TRADE_REMOVED, tradeRemovedEvent);
	            eventManagerService.unSubscribe(CrmConstants.SALES_OPPORTUNITY.TRADES.SET_PANEL_LOADING, setLoadingEvent);
	        });
	        this.salesOpportunityTradesService.clearCache();
	        this.loadTradesAndPermissions();
	        this.permissionService.getPermission('Amount')
	            .then(function (permission) {
	            if (permission.view) {
	                _this.canViewAmount = true;
	            }
	        });
	    }
	    SalesOpportunityTradesPanelController.prototype.addNewTrade = function () {
	        this.isAdding = true;
	        this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.TRADES.ADD_TRADE_ACTIVE);
	    };
	    SalesOpportunityTradesPanelController.prototype.showAddExistingVehicleModal = function () {
	        this.existingVehicleData.modal = this.modalService.openModalViaTemplateUrl(this.modalTemplate, this);
	    };
	    SalesOpportunityTradesPanelController.prototype.addExistingVehicleAsTrade = function (vehicle) {
	        var self = this;
	        this.salesOpportunityTradesService.addExistingVehicleAsTrade(this.tradeEvent, this.addTrade, vehicle, this.salesOpportunity.id, this.salesOpportunity.dealershipId)
	            .then(function () {
	            self.existingVehicleData.modal.accept();
	            self.loadTradesAndPermissions();
	        });
	    };
	    SalesOpportunityTradesPanelController.prototype.pushTrades = function () {
	        this.isPushingThirdParty = true;
	    };
	    SalesOpportunityTradesPanelController.prototype.loadTradesAndPermissions = function (skipIsLoadingCheck) {
	        var _this = this;
	        if (!skipIsLoadingCheck && this.isLoading) {
	            return;
	        }
	        this.isLoading = true;
	        this.activeTrades = [];
	        this.inactiveTrades = [];
	        var promises = [
	            this.loadTrades(),
	            this.loadExistingVehicles(),
	        ];
	        this.$q.all(promises).then(function (data) {
	            _this.tradeEvent = data[0];
	            _this.filterTrades(_this.tradeEvent.trades);
	            _this.setupExistingVehicles(data[1]);
	            _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.TABS.TRADES_TAB_LOADED, _this.getTradeUpdateData());
	            _this.setupAddTrade();
	            _this.setupIntegrations();
	            _this.isLoading = false;
	        });
	    };
	    SalesOpportunityTradesPanelController.prototype.loadTrades = function () {
	        return this.salesOpportunityTradesService.loadTrades(this.contact.id, this.salesOpportunity.id, this.salesOpportunity.dealershipId);
	    };
	    SalesOpportunityTradesPanelController.prototype.loadExistingVehicles = function () {
	        return this.contactVehicleApiService.get(this.contact.id);
	    };
	    SalesOpportunityTradesPanelController.prototype.getTradesTotal = function () {
	        if (this.canViewAmount) {
	            var total = 0;
	            _.each(this.activeTrades, function (trade) {
	                total += trade.tradeAmount - trade.payoffAmount;
	            });
	            return Option.Create(total);
	        }
	        else {
	            return Option.None();
	        }
	    };
	    SalesOpportunityTradesPanelController.prototype.filterTrades = function (trades) {
	        this.activeTrades = [];
	        this.inactiveTrades = [];
	        for (var i = 0; i < trades.length; i++) {
	            if (trades[i].year > 0)
	                this.activeTrades.push(trades[i]);
	            else
	                this.inactiveTrades.push(trades[i]);
	        }
	    };
	    SalesOpportunityTradesPanelController.prototype.filterExistingVehicles = function (vehicles) {
	        this.existingVehicles = [];
	        for (var i = 0; i < vehicles.length; i++) {
	            if (vehicles[i].id && !_.find(this.activeTrades, function (trade) { return trade.vin === vehicles[i].vin; })) {
	                this.existingVehicles.push(vehicles[i]);
	            }
	        }
	    };
	    SalesOpportunityTradesPanelController.prototype.setupExistingVehicles = function (vehicles) {
	        this.filterExistingVehicles(vehicles);
	        this.existingVehicleData = {
	            count: this.existingVehicles.length,
	            vehicleText: (this.existingVehicles.length > 1) ?
	                this.translationCache.get("crm.salesOpportunity.trades.VEHICLE_PLURAL") :
	                this.translationCache.get("crm.salesOpportunity.trades.VEHICLE_SINGULAR"),
	            modal: null
	        };
	    };
	    SalesOpportunityTradesPanelController.prototype.setupAddTrade = function () {
	        this.addTrade = (this.inactiveTrades.length > 0) ? this.inactiveTrades[0] : null;
	        if (this.addTrade) {
	            this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.TRADES.ADD_TRADE_ACTIVE);
	        }
	    };
	    SalesOpportunityTradesPanelController.prototype.setupIntegrations = function () {
	        this.nonCarFaxIntegrations = this.salesOpportunityTradesService.getNonCarFaxIntegrations(this.tradeEvent);
	    };
	    SalesOpportunityTradesPanelController.prototype.getTradeUpdateData = function () {
	        return {
	            count: this.activeTrades.length,
	            total: this.getTradesTotal(),
	            activeTrades: this.activeTrades
	        };
	    };
	    SalesOpportunityTradesPanelController.$inject = [
	        "$scope",
	        "$q",
	        "salesOpportunityTradesApiService",
	        "salesOpportunityTradesService",
	        "ContactVehicleApiService",
	        "CrmConstants",
	        "eventManagerService",
	        "TranslationCache",
	        "modalService",
	        "permissionService",
	        "DataApiSettings"
	    ];
	    return SalesOpportunityTradesPanelController;
	}());
	module.exports = SalesOpportunityTradesPanelController;


/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var bookValuationModalDirective = __webpack_require__(442);
	module.exports = angular.module("crm.salesOpportunity.trades.bookValuation", [])
	    .directive("crmTradeBookValuationModal", bookValuationModalDirective);


/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var BookValuationModalController = __webpack_require__(443);
	function bookValuationModalDirective() {
	    return {
	        restrict: "E",
	        templateUrl: "app/salesOpportunity/trades/bookValuationModal/bookValuationModalTemplate.html",
	        scope: {
	            tradeEvent: "=",
	            trade: "=",
	            salesOpportunity: "=",
	            cancel: "&"
	        },
	        controller: BookValuationModalController,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = bookValuationModalDirective;


/***/ },
/* 443 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var BookValuationModalController = (function () {
	    function BookValuationModalController(translationCache, salesOpportunityTradesService, eventManagerService, CrmConstants, permissionService) {
	        this.translationCache = translationCache;
	        this.salesOpportunityTradesService = salesOpportunityTradesService;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.permissionService = permissionService;
	        this.priceTypeLookup = [];
	        this.isLoading = false;
	        this.vinError = 0;
	        this.isVinDecoded = false;
	        this.bookList = [];
	        this.kbbName = "Kelley Blue Book";
	        this.nadaName = "N.A.D.A.";
	        this.bbName = "Black Book";
	        if (this.trade.model.value) {
	            this.modelCode = this.trade.model.value;
	        }
	        this.bookList = [];
	        this.getBookPermissions();
	        this.onBookChanged();
	    }
	    BookValuationModalController.prototype.getBookPermissions = function () {
	        var self = this;
	        this.permissionService.getPermission('KBBAppraisal')
	            .then(function (permission) {
	            if (permission.view) {
	                var result = $.grep(self.tradeEvent.booksLookup, function (e) {
	                    return e.text === self.kbbName;
	                });
	                if (result.length > 0) {
	                    self.bookList.push(result[0]);
	                }
	            }
	        });
	        this.permissionService.getPermission('BBAppraisal')
	            .then(function (permission) {
	            if (permission.view) {
	                var result = $.grep(self.tradeEvent.booksLookup, function (e) {
	                    return e.text === self.bbName;
	                });
	                if (result.length > 0) {
	                    self.bookList.push(result[0]);
	                }
	            }
	        });
	        this.permissionService.getPermission('NADAAppraisal')
	            .then(function (permission) {
	            if (permission.view) {
	                var result = $.grep(self.tradeEvent.booksLookup, function (e) {
	                    return e.text === self.nadaName;
	                });
	                if (result.length > 0) {
	                    self.bookList.push(result[0]);
	                }
	            }
	        });
	    };
	    BookValuationModalController.prototype.onBookChanged = function () {
	        var _this = this;
	        this.initPriceType();
	        if (this.trade.vin) {
	            this.isLoading = true;
	            this.getVinLookupResult()
	                .then(function () {
	                _this.restoreModel();
	                if (!_this.vinError && _this.trade.year && _this.trade.make.value && _this.trade.model.value) {
	                    _this.isLoading = true;
	                    return _this.getModelOptions();
	                }
	            })
	                .then(function () {
	                _this.isLoading = false;
	            });
	        }
	    };
	    BookValuationModalController.prototype.initPriceType = function () {
	        switch (this.trade.book.value) {
	            case "kbb":
	                this.priceTypeLookup = this.tradeEvent.priceTypeKbb;
	                break;
	            case "nada":
	                this.priceTypeLookup = this.tradeEvent.priceTypeNada;
	                break;
	            case "bb":
	                this.priceTypeLookup = this.tradeEvent.conditionBb;
	                break;
	        }
	        this.setDefaultPriceType();
	    };
	    BookValuationModalController.prototype.setDefaultPriceType = function () {
	        if (this.priceTypeLookup.length) {
	            this.trade.appraisal.priceType = this.priceTypeLookup[0].value;
	        }
	    };
	    BookValuationModalController.prototype.isBlackBook = function () {
	        return this.trade.book.value === "bb";
	    };
	    BookValuationModalController.prototype.isKelleyBlueBook = function () {
	        return this.trade.book.value === "kbb";
	    };
	    BookValuationModalController.prototype.isSingleModel = function () {
	        return this.trade.modelsLookup.length < 2;
	    };
	    BookValuationModalController.prototype.doVinLookup = function (isModalShown) {
	        var _this = this;
	        if (isModalShown === void 0) { isModalShown = true; }
	        if (isModalShown) {
	            this.salesOpportunityTradesService.showVinLookupConfirmationModal(this.trade, true).then(function () {
	                _this.getVinLookupResult();
	            });
	        }
	        else {
	            this.getVinLookupResult();
	        }
	    };
	    BookValuationModalController.prototype.updateEquipmentRelationships = function (equipment) {
	        var _this = this;
	        _.each(this.trade.appraisal.equipmentRelationships, function (relationship) {
	            if (relationship.equipmentCode == equipment.code) {
	                if (relationship.conflictsWithCode) {
	                    _this.setEquipmentSelected(relationship.conflictsWithCode, false);
	                }
	                if (relationship.reliesOnCode) {
	                    _this.setEquipmentSelected(relationship.reliesOnCode, false);
	                }
	            }
	        });
	    };
	    BookValuationModalController.prototype.calculate = function () {
	        this.form.$setSubmitted();
	        if (this.checkIfVinDecoded() && this.isFormValid()) {
	            this.getTradeValuation();
	        }
	    };
	    BookValuationModalController.prototype.onModelChanged = function () {
	        var _this = this;
	        if (this.trade.model && this.trade.model.value) {
	            this.isLoading = true;
	            this.getModelOptions().then(function () { _this.isLoading = false; });
	        }
	    };
	    BookValuationModalController.prototype.getVinLookupResult = function () {
	        var _this = this;
	        this.isLoading = true;
	        return this.salesOpportunityTradesService.performVinLookup(this.tradeEvent, this.trade, this.salesOpportunity.dealershipId)
	            .then(function (vinLookupResult) {
	            _this.hideErrorAlert();
	            _this.isLoading = false;
	            _this.vinError = vinLookupResult.error;
	            _this.isVinDecoded = (_this.vinError == 0);
	        });
	    };
	    BookValuationModalController.prototype.setEquipmentSelected = function (equipmentCode, isSelected) {
	        var equipment = _.findWhere(this.trade.appraisal.equipment, { code: equipmentCode });
	        if (equipment) {
	            equipment.isSelected = isSelected;
	            if (isSelected) {
	                this.updateEquipmentRelationships(equipment);
	            }
	        }
	    };
	    BookValuationModalController.prototype.getModelOptions = function () {
	        var _this = this;
	        return this.salesOpportunityTradesService.getModelOptions(this.tradeEvent, this.trade)
	            .then(function () {
	            if (_this.trade.enginesLookup.length) {
	                _this.trade.appraisal.engineCode = _this.trade.enginesLookup[0].value;
	            }
	            if (_this.trade.transmissionsLookup.length) {
	                _this.trade.appraisal.transmissionCode = _this.trade.transmissionsLookup[0].value;
	            }
	            if (_this.trade.drivesLookup.length) {
	                _this.trade.appraisal.driveCode = _this.trade.drivesLookup[0].value;
	            }
	        });
	    };
	    BookValuationModalController.prototype.isFormValid = function () {
	        var isValid = this.trade.vin &&
	            this.trade.model.text &&
	            this.trade.odometer;
	        if (isValid && this.isKelleyBlueBook()) {
	            isValid = this.trade.appraisal.engineCode &&
	                this.trade.appraisal.transmissionCode &&
	                this.trade.appraisal.driveCode;
	        }
	        return isValid;
	    };
	    BookValuationModalController.prototype.showErrorAlert = function (message) {
	        this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.TRADES.VALUATION_MODAL.ALERT, {
	            alertType: "error",
	            alertName: this.CrmConstants.SALES_OPPORTUNITY.TRADES.VALUATION_MODAL.ALERT,
	            message: message
	        });
	    };
	    BookValuationModalController.prototype.hideErrorAlert = function () {
	        this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.TRADES.VALUATION_MODAL.CLOSE_ALERT, {
	            alertType: "error",
	            closingAlertName: this.CrmConstants.SALES_OPPORTUNITY.TRADES.VALUATION_MODAL.ALERT
	        });
	    };
	    BookValuationModalController.prototype.clearVinDecoded = function () {
	        this.isVinDecoded = false;
	    };
	    BookValuationModalController.prototype.checkIfVinDecoded = function () {
	        if (!this.isVinDecoded) {
	            this.showErrorAlert(this.translationCache.get("crm.salesOpportunity.trades.valuationModal.VIN_DECODED_ERROR"));
	            return false;
	        }
	        return true;
	    };
	    BookValuationModalController.prototype.getTradeValuation = function () {
	        var _this = this;
	        this.isLoading = true;
	        this.salesOpportunityTradesService.getTradeValuation(this.tradeEvent, this.trade)
	            .then(function (appraisal) {
	            _this.trade.appraisal = appraisal;
	            _this.trade.actualCashValueAmount = _this.trade.appraisal.appraisalValue;
	            _this.trade.tradeAmount = _this.trade.appraisal.appraisalValue;
	            return _this.salesOpportunityTradesService.saveTrades(_this.tradeEvent, _this.salesOpportunity.id, _this.salesOpportunity.dealershipId);
	        })
	            .then(function (tradeResult) {
	            _this.getTradeAppraisalId(tradeResult.trades);
	        })
	            .catch(function (error) {
	            _this.showErrorAlert(error);
	        })
	            .finally(function () {
	            _this.isLoading = false;
	        });
	    };
	    BookValuationModalController.prototype.getTradeAppraisalId = function (trades) {
	        var _this = this;
	        var trade = _.findWhere(trades, function (tradeItem) {
	            return tradeItem.id == _this.trade.id;
	        });
	        if (trade) {
	            this.trade.appraisal.id = trade.appraisal.id;
	        }
	    };
	    BookValuationModalController.prototype.restoreModel = function () {
	        var _this = this;
	        if (this.modelCode) {
	            this.trade.model = _.findWhere(this.trade.modelsLookup, function (modelLookup) {
	                return modelLookup.value == _this.modelCode;
	            });
	        }
	    };
	    BookValuationModalController.$inject = [
	        "TranslationCache",
	        "salesOpportunityTradesService",
	        "eventManagerService",
	        "CrmConstants",
	        "permissionService"
	    ];
	    return BookValuationModalController;
	}());
	module.exports = BookValuationModalController;


/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var cardModule = __webpack_require__(445);
	var panelModule = __webpack_require__(448);
	var selectionCardModule = __webpack_require__(453);
	var successCardModule = __webpack_require__(456);
	module.exports = angular.module("crm.salesOpportunity.trades.pushThirdParty", [
	    cardModule.name,
	    panelModule.name,
	    selectionCardModule.name,
	    successCardModule.name
	]);


/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var directive = __webpack_require__(446);
	module.exports = angular.module("crm.salesOpportunity.trades.pushThirdParty.card", [])
	    .directive("crmTradePushThirdPartyCard", directive);


/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(447);
	function tradePushThirdPartyCardDirective() {
	    return {
	        restrict: "E",
	        templateUrl: "app/salesOpportunity/trades/pushThirdParty/card/tradePushThirdPartyCardTemplate.html",
	        scope: {
	            integrationResults: "=",
	            index: "="
	        },
	        controller: controller,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = tradePushThirdPartyCardDirective;


/***/ },
/* 447 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var TradePushThirdPartyCardController = (function () {
	    function TradePushThirdPartyCardController() {
	        this.integrationResult = this.integrationResults[this.index];
	    }
	    return TradePushThirdPartyCardController;
	}());
	module.exports = TradePushThirdPartyCardController;


/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var directive = __webpack_require__(449);
	module.exports = angular.module("crm.salesOpportunity.trades.pushThirdParty.panel", [])
	    .directive("crmTradePushThirdPartyPanel", directive);


/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(450);
	function tradePushThirdPartyPanelDirective() {
	    return {
	        restrict: "E",
	        templateUrl: "app/salesOpportunity/trades/pushThirdParty/panel/tradePushThirdPartyPanelTemplate.html",
	        scope: {
	            contact: "=",
	            tradeEvent: "=",
	            trade: "=",
	            salesOpportunity: "="
	        },
	        controller: controller,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = tradePushThirdPartyPanelDirective;


/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var TradePushThirdPartyResult = __webpack_require__(451);
	var TradePushThirdPartyStatus = __webpack_require__(452);
	var TradePushThirdPartyPanelController = (function () {
	    function TradePushThirdPartyPanelController(contactService, salesOpportunityTradesService, tradeIntegrationsService, eventManagerService, CrmConstants) {
	        this.contactService = contactService;
	        this.salesOpportunityTradesService = salesOpportunityTradesService;
	        this.tradeIntegrationsService = tradeIntegrationsService;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.integrationResults = [];
	        this.tradePushThirdPartyStatus = TradePushThirdPartyStatus;
	        this.initializeIntegrations();
	    }
	    TradePushThirdPartyPanelController.prototype.startIntegrationPush = function (selectedIntegrations) {
	        if (this.tradeIntegrationsService.hasRequiredFields(this.contact, this.trade)) {
	            this.pushSelectedIntegrations(selectedIntegrations);
	        }
	        else {
	            this.showRequiredFieldsModal(selectedIntegrations);
	        }
	    };
	    TradePushThirdPartyPanelController.prototype.removeIntegrationResult = function (integrationResult) {
	        this.integrationResults = _.without(this.integrationResults, integrationResult);
	        if (this.integrationResults.length == 0) {
	            this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.TRADES.CANCEL_PUSH_SELECTION);
	        }
	    };
	    TradePushThirdPartyPanelController.prototype.initializeIntegrations = function () {
	        this.integrations = this.salesOpportunityTradesService.getNonCarFaxIntegrations(this.tradeEvent);
	        if (this.integrations.length == 1) {
	            this.startIntegrationPush(this.integrations);
	        }
	    };
	    TradePushThirdPartyPanelController.prototype.showRequiredFieldsModal = function (selectedIntegrations) {
	        var _this = this;
	        this.tradeIntegrationsService.showRequiredFieldsModal(this.contact, this.trade, selectedIntegrations)
	            .then(function () {
	            return _this.salesOpportunityTradesService.saveTrades(_this.tradeEvent, _this.trade.eventId.toString(), _this.salesOpportunity.dealershipId);
	        })
	            .then(function () {
	            _this.pushSelectedIntegrations(selectedIntegrations);
	        })
	            .catch(function (error) {
	            if (error) {
	                _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.TRADES.ALERT, {
	                    alertType: "error",
	                    message: error
	                });
	            }
	        });
	    };
	    TradePushThirdPartyPanelController.prototype.pushSelectedIntegrations = function (selectedIntegrations) {
	        var _this = this;
	        this.integrationResults = [];
	        _.each(selectedIntegrations, function (selectedIntegration) {
	            var integrationResult = new TradePushThirdPartyResult(selectedIntegration);
	            _this.integrationResults.push(integrationResult);
	            _this.pushIntegrationToThirdParty(integrationResult);
	        });
	    };
	    TradePushThirdPartyPanelController.prototype.pushIntegrationToThirdParty = function (integrationResult) {
	        this.tradeIntegrationsService.pushToThirdParty(this.tradeEvent, this.trade, integrationResult.integration, this.salesOpportunity)
	            .then(function () {
	            integrationResult.status = TradePushThirdPartyStatus.Completed;
	        })
	            .catch(function (error) {
	            integrationResult.status = TradePushThirdPartyStatus.Failed;
	            integrationResult.message = error;
	        });
	    };
	    TradePushThirdPartyPanelController.$inject = [
	        "ContactService",
	        "salesOpportunityTradesService",
	        "tradeIntegrationsService",
	        "eventManagerService",
	        "CrmConstants"
	    ];
	    return TradePushThirdPartyPanelController;
	}());
	module.exports = TradePushThirdPartyPanelController;


/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var TradePushThirdPartyStatus = __webpack_require__(452);
	var TradePushThirdPartyResult = (function () {
	    function TradePushThirdPartyResult(integration) {
	        this.integration = integration;
	        this.status = TradePushThirdPartyStatus.InProgress;
	        this.message = "";
	    }
	    return TradePushThirdPartyResult;
	}());
	module.exports = TradePushThirdPartyResult;


/***/ },
/* 452 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var TradePushThirdPartyStatus;
	(function (TradePushThirdPartyStatus) {
	    TradePushThirdPartyStatus[TradePushThirdPartyStatus["InProgress"] = 0] = "InProgress";
	    TradePushThirdPartyStatus[TradePushThirdPartyStatus["Completed"] = 1] = "Completed";
	    TradePushThirdPartyStatus[TradePushThirdPartyStatus["Failed"] = 2] = "Failed";
	})(TradePushThirdPartyStatus || (TradePushThirdPartyStatus = {}));
	module.exports = TradePushThirdPartyStatus;


/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var directive = __webpack_require__(454);
	module.exports = angular.module("crm.salesOpportunity.trades.pushThirdParty.selectionCard", [])
	    .directive("crmTradePushThirdPartySelectionCard", directive);


/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(455);
	function tradePushThirdPartySelectionCardDirective() {
	    return {
	        restrict: "E",
	        templateUrl: "app/salesOpportunity/trades/pushThirdParty/selectionCard/tradePushThirdPartySelectionCardTemplate.html",
	        scope: {
	            integrations: "=",
	            onPush: "&"
	        },
	        controller: controller,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = tradePushThirdPartySelectionCardDirective;


/***/ },
/* 455 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var TradePushThirdPartySelectionCardController = (function () {
	    function TradePushThirdPartySelectionCardController(eventManagerService, CrmConstants) {
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.selectableIntegrations = _.map(this.integrations, function (integration) {
	            return {
	                refDef: integration,
	                isSelected: false
	            };
	        });
	        this.selectedCount = 0;
	    }
	    TradePushThirdPartySelectionCardController.prototype.updateSelectedCount = function (selectableIntegration) {
	        if (selectableIntegration.isSelected) {
	            this.selectedCount++;
	        }
	        else {
	            this.selectedCount--;
	        }
	    };
	    TradePushThirdPartySelectionCardController.prototype.cancel = function () {
	        this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.TRADES.CANCEL_PUSH_SELECTION);
	    };
	    TradePushThirdPartySelectionCardController.prototype.push = function () {
	        this.onPush({
	            selectedIntegrations: this.getSelectedIntegrations()
	        });
	    };
	    TradePushThirdPartySelectionCardController.prototype.getSelectedIntegrations = function () {
	        var selected = _.filter(this.selectableIntegrations, function (selectableIntegration) {
	            return selectableIntegration.isSelected;
	        });
	        return _.map(selected, function (selectableIntegration) {
	            return selectableIntegration.refDef;
	        });
	    };
	    TradePushThirdPartySelectionCardController.$inject = [
	        "eventManagerService",
	        "CrmConstants"
	    ];
	    return TradePushThirdPartySelectionCardController;
	}());
	module.exports = TradePushThirdPartySelectionCardController;


/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var directive = __webpack_require__(457);
	module.exports = angular.module("crm.salesOpportunity.trades.pushThirdParty.successCard", [])
	    .directive("crmTradePushThirdPartyResultCard", directive);


/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(458);
	function tradePushThirdPartyResultCardDirective() {
	    return {
	        restrict: "E",
	        templateUrl: "app/salesOpportunity/trades/pushThirdParty/resultCard/tradePushThirdPartyResultCardTemplate.html",
	        scope: {
	            integrationResult: "=",
	            onClose: "&"
	        },
	        controller: controller,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = tradePushThirdPartyResultCardDirective;


/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var TradePushThirdPartyStatus = __webpack_require__(452);
	var TradePushThirdPartyResultCardController = (function () {
	    function TradePushThirdPartyResultCardController($timeout) {
	        this.$timeout = $timeout;
	        this.timeoutDuration = 10000;
	        this.isSuccess = this.integrationResult.status == TradePushThirdPartyStatus.Completed;
	        this.setTimeout();
	    }
	    TradePushThirdPartyResultCardController.prototype.close = function () {
	        this.$timeout.cancel(this.timeoutPromise);
	        this.onClose({ integrationResult: this.integrationResult });
	    };
	    TradePushThirdPartyResultCardController.prototype.setTimeout = function () {
	        var _this = this;
	        this.timeoutPromise = this.$timeout(function () {
	            _this.onClose({ integrationResult: _this.integrationResult });
	        }, this.timeoutDuration);
	    };
	    TradePushThirdPartyResultCardController.$inject = [
	        "$timeout"
	    ];
	    return TradePushThirdPartyResultCardController;
	}());
	module.exports = TradePushThirdPartyResultCardController;


/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var directive = __webpack_require__(460);
	module.exports = angular.module("crm.salesOpportunity.trades.requiredFieldsModal", [])
	    .directive("crmTradeRequiredFieldsModal", directive);


/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(461);
	function tradeRequiredFieldsModalDirective() {
	    return {
	        restrict: "E",
	        templateUrl: "app/salesOpportunity/trades/requiredFieldsModal/tradeRequiredFieldsModalTemplate.html",
	        scope: {
	            contact: "=",
	            trade: "=",
	            integrations: "=",
	            accept: "&",
	            cancel: "&"
	        },
	        controller: controller,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = tradeRequiredFieldsModalDirective;


/***/ },
/* 461 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var TradeRequiredFieldsModalController = (function () {
	    function TradeRequiredFieldsModalController(ContactService, translationCache, countries) {
	        this.ContactService = ContactService;
	        this.translationCache = translationCache;
	        this.countries = countries;
	        this.pushTrade = _.clone(this.trade);
	        this.pushContact = {
	            address: _.clone(this.contact.address),
	            contactPoints: angular.copy(this.contact.contactPoints)
	        };
	        _.extend(this, this.countries[this.contact.address.country]);
	        this.initializeIntegrationText();
	        this.initializeButtonText();
	    }
	    TradeRequiredFieldsModalController.prototype.isVinValid = function () {
	        return !this.isEmptyOrWhitespace(this.pushTrade.vin);
	    };
	    TradeRequiredFieldsModalController.prototype.isFieldValid = function (field) {
	        if (!this.fields[field].required)
	            return true;
	        return !this.isEmptyOrWhitespace(this.pushContact.address[field]);
	    };
	    TradeRequiredFieldsModalController.prototype.isPhoneValid = function () {
	        var phone = this.pushContact.contactPoints.getPhoneNumber();
	        return phone && phone.isValid();
	    };
	    TradeRequiredFieldsModalController.prototype.isFormValid = function () {
	        return this.pushTrade.vin && this.pushContact.address.isValid() && this.isPhoneValid();
	    };
	    TradeRequiredFieldsModalController.prototype.submit = function () {
	        this.trade.vin = this.pushTrade.vin;
	        this.contact.address = this.pushContact.address;
	        this.contact.contactPoints = this.pushContact.contactPoints;
	        this.accept();
	    };
	    TradeRequiredFieldsModalController.prototype.isCarFax = function () {
	        return this.integrations.length == 1 && this.integrations[0].text == "CarFax";
	    };
	    TradeRequiredFieldsModalController.prototype.initializeButtonText = function () {
	        this.buttonText = this.isCarFax() ?
	            this.translationCache.get("crm.salesOpportunity.trades.pushModal.CARFAX_SUBMIT") :
	            this.translationCache.get("crm.salesOpportunity.trades.pushModal.SUBMIT");
	    };
	    TradeRequiredFieldsModalController.prototype.initializeIntegrationText = function () {
	        var length = this.integrations.length;
	        if (length == 1) {
	            this.integrationText = this.integrations[0].text + " " +
	                this.translationCache.get("crm.salesOpportunity.trades.pushModal.NEED_PLURAL");
	        }
	        else if (length == 2) {
	            this.integrationText = this.integrations[0].text + " " +
	                this.translationCache.get("crm.salesOpportunity.trades.pushModal.AND") + " " +
	                this.integrations[1].text + " " +
	                this.translationCache.get("crm.salesOpportunity.trades.pushModal.NEED_SINGULAR");
	        }
	        else {
	            this.integrationText = "";
	            for (var i = 0; i < length - 1; i++) {
	                this.integrationText += this.integrations[i].text + ", ";
	            }
	            this.integrationText += this.translationCache.get("crm.salesOpportunity.trades.pushModal.AND") + " " +
	                this.integrations[length - 1].text + " " +
	                this.translationCache.get("crm.salesOpportunity.trades.pushModal.NEED_SINGULAR");
	        }
	    };
	    TradeRequiredFieldsModalController.prototype.isEmptyOrWhitespace = function (value) {
	        if (!value)
	            return true;
	        return value.trim().length === 0;
	    };
	    TradeRequiredFieldsModalController.$inject = [
	        "ContactService",
	        "TranslationCache",
	        "countries"
	    ];
	    return TradeRequiredFieldsModalController;
	}());
	module.exports = TradeRequiredFieldsModalController;


/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var SalesOpportunityInlineEditFactory = __webpack_require__(463);
	module.exports = angular.module("crm.sales.inlineEditing", [])
	    .service('SalesOpportunityInlineEditFactory', SalesOpportunityInlineEditFactory);


/***/ },
/* 463 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunityInlineEditFactory = (function () {
	    function SalesOpportunityInlineEditFactory(InlineEditFacadeFactory, TranslationCache) {
	        this.InlineEditFacadeFactory = InlineEditFacadeFactory;
	        this.TranslationCache = TranslationCache;
	        this.nullObject = { text: this.TranslationCache.get('crm.salesOpportunity.inlineEdit.SELECT'), value: null };
	    }
	    // TODO: Temp solution for disable inline edit when cross site
	    SalesOpportunityInlineEditFactory.prototype.getTypeFacade = function (salesOpportunity, salesOpportunityRefDefs, onSave, disableEditCrossSite) {
	        var inlineTypeModel = {
	            type: _.find(salesOpportunityRefDefs['sales.type'], function (refdef) { return refdef.value == salesOpportunity.type.value; })
	        };
	        var fields = [
	            {
	                fieldName: 'type',
	                type: 'select',
	                placeholder: this.TranslationCache.get('crm.salesOpportunity.inlineEdit.placeholders.TYPE'),
	                fieldValues: salesOpportunityRefDefs['sales.type']
	            }
	        ];
	        // TODO: Temp solution for disable inline edit when cross site
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade(this.TranslationCache.get('crm.salesOpportunity.inlineEdit.TYPE'), inlineTypeModel, fields, onSave, disableEditCrossSite);
	        return facade;
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    SalesOpportunityInlineEditFactory.prototype.getPurchaseTypeFacade = function (salesOpportunity, salesOpportunityRefDefs, onSave, disableEditCrossSite) {
	        var inlineTypeModel = {
	            purchaseType: _.find(salesOpportunityRefDefs['sales.subtype'], function (refdef) { return refdef.value == salesOpportunity.purchaseType.value; })
	        };
	        var fields = [
	            {
	                fieldName: 'purchaseType',
	                type: 'select',
	                fieldValues: salesOpportunityRefDefs['sales.subtype']
	            }
	        ];
	        // TODO: Temp solution for disable inline edit when cross site
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade(this.TranslationCache.get('crm.salesOpportunity.inlineEdit.PURCHASE_TYPE'), inlineTypeModel, fields, onSave, disableEditCrossSite);
	        return facade;
	    };
	    SalesOpportunityInlineEditFactory.prototype.getSalesSourceFacade = function (salesOpportunity, salesOpportunityRefDefs, onSave, disableEdit) {
	        if (disableEdit === void 0) { disableEdit = false; }
	        var inlineTypeModel = {
	            source: _.find(salesOpportunityRefDefs['sales.source'], function (refdef) { return refdef.value == salesOpportunity.source.value; })
	        };
	        var fields = [
	            {
	                fieldName: 'source',
	                type: 'select',
	                fieldValues: salesOpportunityRefDefs['sales.source']
	            }
	        ];
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade(this.TranslationCache.get('crm.salesOpportunity.inlineEdit.SOURCE'), inlineTypeModel, fields, onSave, disableEdit);
	        return facade;
	    };
	    SalesOpportunityInlineEditFactory.prototype.getTrackingCodeFacade = function (salesOpportunity, salesOpportunityRefDefs, onSave, disableEdit) {
	        if (disableEdit === void 0) { disableEdit = false; }
	        if (!_.find(salesOpportunityRefDefs['sales.trackingCode'], function (refdef) { return refdef.value == salesOpportunity.trackingCode.value; })) {
	            salesOpportunityRefDefs['sales.trackingCode'].unshift(salesOpportunity.trackingCode);
	        }
	        var inlineTypeModel = {
	            trackingCode: _.find(salesOpportunityRefDefs['sales.trackingCode'], function (refdef) { return refdef.value == salesOpportunity.trackingCode.value; })
	        };
	        var fields = [
	            {
	                fieldName: 'trackingCode',
	                type: 'select',
	                fieldValues: [this.nullObject].concat(salesOpportunityRefDefs['sales.trackingCode'])
	            }
	        ];
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade(this.TranslationCache.get('crm.salesOpportunity.inlineEdit.TRACKING_CODE'), inlineTypeModel, fields, onSave, disableEdit);
	        this.assignNullObjectIfBlank(facade, fields[0].fieldName);
	        return facade;
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    SalesOpportunityInlineEditFactory.prototype.getRankingFacade = function (salesOpportunity, salesOpportunityRefDefs, onSave, disableEditCrossSite) {
	        var inlineTypeModel = {
	            ranking: _.find(salesOpportunityRefDefs['sales.rank'], function (refdef) { return refdef.value == salesOpportunity.ranking.value; })
	        };
	        var fields = [
	            {
	                fieldName: 'ranking',
	                type: 'select',
	                fieldValues: salesOpportunityRefDefs['sales.rank']
	            }
	        ];
	        // TODO: Temp solution for disable inline edit when cross site
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade(this.TranslationCache.get('crm.salesOpportunity.inlineEdit.RANKING'), inlineTypeModel, fields, onSave, disableEditCrossSite);
	        return facade;
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    SalesOpportunityInlineEditFactory.prototype.getCloseDateFacade = function (salesOpportunity, salesOpportunityRefDefs, onSave, disableEditCrossSite) {
	        var inlineTypeModel = {
	            closeDate: _.find(salesOpportunityRefDefs['sales.forecast'], function (refdef) { return refdef.value == salesOpportunity.closeDate.value; })
	        };
	        var fields = [
	            {
	                fieldName: 'closeDate',
	                type: 'select',
	                placeholder: this.TranslationCache.get('crm.salesOpportunity.inlineEdit.placeholders.CLOSE_DATE'),
	                fieldValues: salesOpportunityRefDefs['sales.forecast']
	            }
	        ];
	        // TODO: Temp solution for disable inline edit when cross site
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade(this.TranslationCache.get('crm.salesOpportunity.inlineEdit.CLOSE_DATE'), inlineTypeModel, fields, onSave, disableEditCrossSite);
	        return facade;
	    };
	    SalesOpportunityInlineEditFactory.prototype.getPrimaryAssignedFacade = function (salesOpportunity, users, onSave, disableEdit) {
	        if (disableEdit === void 0) { disableEdit = false; }
	        var inlineTypeModel = {
	            primaryAssigned: _.find(users, function (refdef) { return refdef.value == salesOpportunity.primaryAssigned.value; })
	        };
	        var fields = [
	            {
	                fieldName: 'primaryAssigned',
	                type: 'select',
	                fieldValues: users
	            }
	        ];
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade(this.TranslationCache.get('crm.salesOpportunity.inlineEdit.PRIMARY_ASSIGNED'), inlineTypeModel, fields, onSave, disableEdit);
	        return facade;
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    SalesOpportunityInlineEditFactory.prototype.getSecondaryAssignedFacade = function (salesOpportunity, users, onSave, disableEditCrossSite) {
	        var inlineTypeModel = {
	            secondaryAssigned: _.find(users, function (refdef) { return refdef.value == salesOpportunity.secondaryAssigned.value; })
	        };
	        var fields = [
	            {
	                fieldName: 'secondaryAssigned',
	                type: 'select',
	                fieldValues: [this.nullObject].concat(users)
	            }
	        ];
	        // TODO: Temp solution for disable inline edit when cross site
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade(this.TranslationCache.get('crm.salesOpportunity.inlineEdit.SECONDARY_ASSIGNED'), inlineTypeModel, fields, onSave, disableEditCrossSite);
	        this.assignNullObjectIfBlank(facade, fields[0].fieldName);
	        return facade;
	    };
	    SalesOpportunityInlineEditFactory.prototype.getBdcAssignedFacade = function (salesOpportunity, users, onSave, disableEdit) {
	        if (disableEdit === void 0) { disableEdit = false; }
	        var inlineTypeModel = {
	            bdcAssigned: _.find(users, function (refdef) { return refdef.value == salesOpportunity.bdcAssigned.value; })
	        };
	        var fields = [
	            {
	                fieldName: 'bdcAssigned',
	                type: 'select',
	                fieldValues: [this.nullObject].concat(users)
	            }
	        ];
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade(this.TranslationCache.get('crm.salesOpportunity.inlineEdit.BDC_ASSIGNED'), inlineTypeModel, fields, onSave, disableEdit);
	        this.assignNullObjectIfBlank(facade, fields[0].fieldName);
	        return facade;
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    SalesOpportunityInlineEditFactory.prototype.getDescriptionFacade = function (salesOpportunity, salesOpportunityRefDefs, onSave, disableEditCrossSite) {
	        var inlineTypeModel = {
	            description: salesOpportunity.description
	        };
	        var fields = [
	            {
	                fieldName: 'description',
	                type: 'textarea',
	                placeholder: this.TranslationCache.get('crm.salesOpportunity.inlineEdit.placeholders.DESCRIPTION')
	            }
	        ];
	        // TODO: Temp solution for disable inline edit when cross site
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade(this.TranslationCache.get('crm.salesOpportunity.inlineEdit.DESCRIPTION'), inlineTypeModel, fields, onSave, disableEditCrossSite);
	        return facade;
	    };
	    // TODO: Temp solution for disable inline edit when cross site
	    SalesOpportunityInlineEditFactory.prototype.getFranchiseFacade = function (salesOpportunity, franchises, onSave, disableEditCrossSite) {
	        var inlineTypeModel = {
	            franchise: _.find(franchises, function (refdef) { return refdef.value == salesOpportunity.franchise.value; })
	        };
	        var fields = [
	            {
	                fieldName: 'franchise',
	                type: 'select',
	                fieldValues: franchises
	            }
	        ];
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade(this.TranslationCache.get('crm.salesOpportunity.inlineEdit.FRANCHISE'), inlineTypeModel, fields, onSave, disableEditCrossSite);
	        facade.disableEdit = franchises.length < 2;
	        return facade;
	    };
	    SalesOpportunityInlineEditFactory.prototype.getStatusFacade = function (salesOpportunity, onSave, disableEdit) {
	        if (disableEdit === void 0) { disableEdit = false; }
	        var statusListValues = this.getStatusListValues(salesOpportunity);
	        var fields = [
	            {
	                fieldName: 'status',
	                type: 'select',
	                fieldValues: statusListValues
	            }
	        ];
	        salesOpportunity.status = _.find(statusListValues, function (status) {
	            if (!status || !status.statusName) {
	                return false;
	            }
	            return status.statusName === salesOpportunity.status.statusName;
	        }) || salesOpportunity.status;
	        var inlineTypeModel = {
	            status: salesOpportunity.status
	        };
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade(this.TranslationCache.get('crm.salesOpportunity.inlineEdit.STATUS'), inlineTypeModel, fields, onSave, disableEdit);
	        return facade;
	    };
	    SalesOpportunityInlineEditFactory.prototype.getStatusListValues = function (salesOpportunity) {
	        var _this = this;
	        var statuses = [];
	        _.each(salesOpportunity.statusList.values, function (status) {
	            var copy = angular.copy(status);
	            copy['text'] = _this.TranslationCache.get('crm.salesOpportunity.statusText.' + status.statusName) || status.statusName;
	            if (copy.id == salesOpportunity.statusList.sold.id) {
	                //TODO check permission after it's story is complete
	                statuses.push(copy);
	            }
	            else if (copy.id != salesOpportunity.statusList.lost.id) {
	                statuses.push(copy);
	            }
	        });
	        return statuses;
	    };
	    //Should only be called for non-required fields
	    SalesOpportunityInlineEditFactory.prototype.assignNullObjectIfBlank = function (facade, field) {
	        if (facade.model[field] == null) {
	            facade.model[field] = this.nullObject;
	        }
	    };
	    SalesOpportunityInlineEditFactory.$inject = [
	        'InlineEditFacadeFactory',
	        'TranslationCache'
	    ];
	    return SalesOpportunityInlineEditFactory;
	}());
	module.exports = SalesOpportunityInlineEditFactory;


/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var salesRecapDirective = __webpack_require__(465);
	module.exports = angular.module("crm.sales.saleRecap", [])
	    .directive('crmSaleRecap', salesRecapDirective);


/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var SoldSalesRecapController = __webpack_require__(466);
	function SoldSalesRecapDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            eventId: "@",
	            entityId: "@"
	        },
	        templateUrl: 'app/salesOpportunity/recap/salesRecapTemplate.html',
	        controller: SoldSalesRecapController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = SoldSalesRecapDirective;


/***/ },
/* 466 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var DEAL_RECAP_TAB_INDEX = 0;
	var GROSS_RECAP_TAB_INDEX = 1;
	var SoldSalesRecapController = (function () {
	    function SoldSalesRecapController($http, salesOpportunityRecapApiService, eventManagerService, CrmConstants, TranslationCache, permissionService) {
	        this.$http = $http;
	        this.salesOpportunityRecapApiService = salesOpportunityRecapApiService;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.TranslationCache = TranslationCache;
	        this.permissionService = permissionService;
	        this.isLoading = false;
	        this.hasFailedLoadingRecap = false;
	        this.isEditMode = false;
	        this.activeTabIndex = 0;
	        if (!this.entityId || !this.eventId) {
	            throw "Invalid entityId or eventId. entityId: " + this.entityId + " eventId: " + this.eventId;
	        }
	        else {
	            this.init();
	        }
	    }
	    SoldSalesRecapController.prototype.init = function () {
	        var _this = this;
	        this.permissionService.getPermission('RecapGross')
	            .then(function (permission) {
	            _this.grossRecapPermission = permission;
	        });
	        this.permissionService.getPermission('RecapDeal')
	            .then(function (permission) {
	            _this.salesRecapPermission = permission;
	        });
	        this.loadRefDefs();
	    };
	    SoldSalesRecapController.prototype.loadRefDefs = function () {
	        var self = this;
	        self.isLoading = true;
	        self.hasFailedLoadingRecap = false;
	        self.salesOpportunityRecapApiService.get(self.getApiMetadaData())
	            .then(function (salesRecap) {
	            self.masterCopySalesRecap = salesRecap;
	            self.updateSalesRecapCopyWithMaster();
	            return self.salesOpportunityRecapApiService.getSalesRecapRefDefs(self.getApiMetadaData());
	        })
	            .then(function (salesRecapRefDefs) {
	            self.salesRecapRefDefs = salesRecapRefDefs;
	        })
	            .catch(function (error) {
	            self.hasFailedLoadingRecap = true;
	        }).finally(function () {
	            self.isLoading = false;
	        });
	    };
	    SoldSalesRecapController.prototype.getApiMetadaData = function () {
	        return {
	            entityId: this.entityId,
	            eventId: this.eventId,
	            salesRecap: this.salesRecap
	        };
	    };
	    SoldSalesRecapController.prototype.setEditMode = function (isEditMode) {
	        this.isEditMode = isEditMode;
	        if (!isEditMode) {
	            this.updateSalesRecapCopyWithMaster();
	        }
	    };
	    SoldSalesRecapController.prototype.updateSalesRecapCopyWithMaster = function () {
	        this.salesRecap = angular.copy(this.masterCopySalesRecap);
	    };
	    SoldSalesRecapController.prototype.displaySaveError = function () {
	        this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.RECAP.SAVE_SALES_RECAP_ERROR, {
	            alertType: "error",
	            message: this.TranslationCache.get('crm.salesOpportunity.recap.CANT_SAVE_SALES_RECAP_ERROR_MESSAGE_DESCRIPTION')
	        });
	    };
	    SoldSalesRecapController.prototype.canEdit = function () {
	        if (this.activeTabIndex == GROSS_RECAP_TAB_INDEX && !this.grossRecapPermission.edit) {
	            this.isEditMode = false;
	            return false;
	        }
	        else if (this.activeTabIndex == DEAL_RECAP_TAB_INDEX && !this.salesRecapPermission.edit) {
	            this.isEditMode = false;
	            return false;
	        }
	        else {
	            return true;
	        }
	    };
	    SoldSalesRecapController.prototype.saveSalesRecap = function () {
	        var _this = this;
	        this.isLoading = true;
	        this.salesOpportunityRecapApiService.post(this.getApiMetadaData())
	            .then(function (updatedSalesRecap) {
	            _this.masterCopySalesRecap = updatedSalesRecap;
	        })
	            .catch(function (error) {
	            _this.displaySaveError();
	        })
	            .finally(function () {
	            _this.isLoading = false;
	            _this.setEditMode(false);
	        });
	    };
	    SoldSalesRecapController.$inject = [
	        '$http',
	        'salesOpportunityRecapApiService',
	        'eventManagerService',
	        'CrmConstants',
	        'TranslationCache',
	        'permissionService'
	    ];
	    return SoldSalesRecapController;
	}());
	module.exports = SoldSalesRecapController;


/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var quickInventorySearchDirective = __webpack_require__(468);
	module.exports = angular.module("crm.sales.quickSearch", [])
	    .directive(quickInventorySearchDirective.directiveName, quickInventorySearchDirective);


/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var QuickInventorySearchController = __webpack_require__(469);
	var quickInventorySearchDirective = function () {
	    return {
	        restrict: 'E',
	        scope: {
	            onSelect: '&'
	        },
	        templateUrl: 'app/salesOpportunity/quickInventorySearch/quickInventorySearchTemplate.html',
	        controller: QuickInventorySearchController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	};
	quickInventorySearchDirective.directiveName = 'crmQuickInventorySearch';
	module.exports = quickInventorySearchDirective;


/***/ },
/* 469 */
/***/ function(module, exports) {

	"use strict";
	var QuickSearchController = (function () {
	    function QuickSearchController(messageBus, omniSearchService, eventManagerService, CrmConstants, TranslationCache, WindowResizeService) {
	        this.messageBus = messageBus;
	        this.omniSearchService = omniSearchService;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.TranslationCache = TranslationCache;
	        this.WindowResizeService = WindowResizeService;
	        this.searching = false;
	        this._responsiveSizeSwitch = -1;
	        this.resetSearch();
	    }
	    QuickSearchController.prototype.search = function () {
	        this.clearResults();
	        this.getSearchResults(true);
	    };
	    QuickSearchController.prototype.resetSearch = function () {
	        this.clearResults();
	        this.clearSearch();
	    };
	    QuickSearchController.prototype.clearResults = function () {
	        this.searchResults = [];
	        this.totalResults = 0;
	    };
	    QuickSearchController.prototype.clearSearch = function () {
	        this.searchTerm = '';
	    };
	    QuickSearchController.prototype.getSearchResults = function (reset) {
	        var _this = this;
	        if (this.searchTerm) {
	            var searchFields = ["NewUsedCpo", "Make", "Model", "Year", "StockNumber", "Vin", "Prices.Sales", "Trim"];
	            var highlightFields = ["NewUsedCpo", "Make", "Model", "Year", "StockNumber", "Vin", "Trim"];
	            var searchSettings = this.createSearchSettings(this.searchTerm, searchFields, highlightFields);
	            this.makeOmniSearchRequest(searchSettings, true)
	                .then(function (searchResults) {
	                _this.searchResults = searchResults;
	            })
	                .catch(function (error) {
	                if (console) {
	                    console.error(error);
	                }
	            });
	        }
	    };
	    QuickSearchController.prototype.createSearchSettings = function (searchTerm, searchFields, highlightFields) {
	        return {
	            searchTerm: searchTerm,
	            searchEndpoint: 'InventoryVehicle',
	            searchFields: searchFields,
	            highlightFields: highlightFields,
	            includeSearchResults: true,
	            paging: {
	                page: 0,
	                resultsPerPage: 20
	            }
	        };
	    };
	    QuickSearchController.prototype.makeOmniSearchRequest = function (searchSettings, searchingInventory) {
	        var _this = this;
	        this.searching = true;
	        return this.omniSearchService.search(searchSettings)
	            .then(function (searchResult) {
	            if (!searchResult) {
	                var errMsg = 'detailPanelController:omniSearchService.searchForTerm returned invalid data!';
	                if (console) {
	                    console.error(errMsg);
	                }
	                throw new Error(errMsg);
	            }
	            if (searchingInventory) {
	                _this.totalResults = searchResult.totalResults;
	            }
	            var searchResults = [];
	            _.each(searchResult.results, function (result) {
	                searchResults.push(result.model);
	            });
	            _this.searching = false;
	            return searchResults;
	        })
	            .catch(function (error) {
	            if (console) {
	                console.error(error);
	            }
	            return error;
	        });
	    };
	    QuickSearchController.prototype.openSearchModal = function () {
	        if (this._responsiveSizeSwitch < 0) {
	            this._responsiveSizeSwitch = _.filter(this.WindowResizeService.responsiveRanges, function (range) {
	                return range.name == 'md';
	            })[0].max;
	        }
	        if (this.WindowResizeService.windowWidth <= this._responsiveSizeSwitch) {
	            this.requestSearchModalToMessageBus();
	        }
	    };
	    QuickSearchController.prototype.requestSearchModalToMessageBus = function () {
	        var _this = this;
	        var message = {
	            from: 'crm',
	            to: 'shell',
	            task: 'modal.open',
	            timeout: 480000,
	            data: {
	                targetAppId: 'search',
	                targetAppRoute: 'inventorySearch',
	                additionalQueryStringParams: 'searchTerm=' + encodeURIComponent(this.searchTerm)
	            }
	        };
	        this.messageBus.ask(top, message, function (data) {
	            _this.onSelect({ inventory: data.data.result });
	            _this.resetSearch();
	        }, function (error) {
	            _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.VEHICLE_OF_INTEREST.ADD_ERROR, {
	                alertType: 'error',
	                message: _this.TranslationCache.get('crm.salesOpportunity.errors.VOI_ADD_ERROR')
	            });
	            _this.resetSearch();
	        });
	    };
	    QuickSearchController.prototype.selectInventory = function (inventory) {
	        if (!inventory) {
	            this.onSelect({ inventory: inventory });
	            this.resetSearch();
	        }
	        if (!this.omniSearchService.allowAdd) {
	            return;
	        }
	        else {
	            this.onSelect({ inventory: inventory });
	            this.resetSearch();
	        }
	    };
	    QuickSearchController.$inject = [
	        'messageBus',
	        'inventorySearchService',
	        'eventManagerService',
	        'CrmConstants',
	        'TranslationCache',
	        'coWindowResizeService'
	    ];
	    return QuickSearchController;
	}());
	module.exports = QuickSearchController;


/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var salesChecklistDirective = __webpack_require__(471);
	module.exports = angular.module("crm.salesOpportunity.checklist", [])
	    .directive("crmSalesOpportunityChecklist", salesChecklistDirective);


/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var SalesChecklistController = __webpack_require__(472);
	function SalesChecklistDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            checklistItem: "=",
	            isEven: "="
	        },
	        templateUrl: 'app/salesOpportunity/salesChecklist/salesChecklistItemTemplate.html',
	        controller: SalesChecklistController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = SalesChecklistDirective;


/***/ },
/* 472 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var count = 0;
	var SalesChecklistItemController = (function () {
	    function SalesChecklistItemController($window, modelConstants, eventManagerService, CrmConstants, TranslationCache) {
	        this.$window = $window;
	        this.modelConstants = modelConstants;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.TranslationCache = TranslationCache;
	        this.acceptedFileTypes = ".png, .jpeg, .jpg, .gif, .pdf, image/png, image/jpeg, image/gif, application/pdf";
	        this.evenOddCssClass = this.isEven ? "even" : "odd";
	        this.numberOfPictures = this.checklistItem.getPictureFiles().length;
	        this.numberOfVideos = this.checklistItem.getVideoFiles().length;
	        this.numberOfDocuments = this.checklistItem.getDocumentFiles().length;
	        this.checkboxIndex = count++;
	    }
	    Object.defineProperty(SalesChecklistItemController.prototype, "viewFiles", {
	        get: function () {
	            return !!this.fileFilter;
	        },
	        set: function (val) {
	            if (!val) {
	                this.fileFilter = '';
	            }
	            else if (this.fileFilter == '') {
	                this.fileFilter = SalesChecklistItemController.DEFAULT_FILE_TYPE;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SalesChecklistItemController.prototype.addFile = function (event) {
	        var invalidFiles = [];
	        for (var i = 0; i < event.target.files.length; i++) {
	            var file = event.target.files[i];
	            if (SalesChecklistItemController.ACCEPTABLE_MIME_TYPES.indexOf(file.type) !== -1) {
	                if (this.checklistItem.rawFiles.indexOf(file) === -1) {
	                    this.checklistItem.rawFiles.push(file);
	                }
	            }
	            else {
	                invalidFiles.push(file);
	            }
	        }
	        var fileNames = _.pluck(invalidFiles, 'name');
	        if (fileNames.length > 0) {
	            this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.CHECKLIST.FILE_TYPE_ERROR, {
	                type: 'error',
	                message: this.TranslationCache.get('crm.salesOpportunity.checklist.FILE_TYPE_ERROR').replace('{fileName}', fileNames.join(', ')).replace("{fileTypes}", ".jpg, .png, .gif, .pdf")
	            });
	        }
	    };
	    SalesChecklistItemController.prototype.onPhotoClick = function () {
	        if (this.fileFilter == this.modelConstants.SalesOpportunityChecklistFileImage) {
	            this.fileFilter = '';
	            return;
	        }
	        this.fileFilter = this.modelConstants.SalesOpportunityChecklistFileImage;
	    };
	    SalesChecklistItemController.prototype.onVideoClick = function () {
	        if (this.fileFilter == this.modelConstants.SalesOpportunityChecklistFileVideo) {
	            this.fileFilter = '';
	            return;
	        }
	        this.fileFilter = this.modelConstants.SalesOpportunityChecklistFileVideo;
	    };
	    SalesChecklistItemController.prototype.onDocumentClick = function () {
	        if (this.fileFilter == this.modelConstants.SalesOpportunityChecklistFileDocument) {
	            this.fileFilter = '';
	            return;
	        }
	        this.fileFilter = this.modelConstants.SalesOpportunityChecklistFileDocument;
	    };
	    SalesChecklistItemController.prototype.openMedia = function (url) {
	        this.$window.open(url);
	    };
	    SalesChecklistItemController.prototype.shouldShowFileList = function () {
	        if (this.viewFiles) {
	            if (this.fileFilter == this.modelConstants.SalesOpportunityChecklistFileImage) {
	                return this.checklistItem.getPictureFiles().length > 0;
	            }
	            else if (this.fileFilter == this.modelConstants.SalesOpportunityChecklistFileVideo) {
	                return this.checklistItem.getVideoFiles().length > 0;
	            }
	            else if (this.fileFilter == this.modelConstants.SalesOpportunityChecklistFileDocument) {
	                return this.checklistItem.getDocumentFiles().length > 0;
	            }
	        }
	        return false;
	    };
	    SalesChecklistItemController.DEFAULT_FILE_TYPE = 'image';
	    SalesChecklistItemController.ACCEPTABLE_MIME_TYPES = ['image/jpeg', 'image/gif', 'image/png', 'application/pdf'];
	    SalesChecklistItemController.$inject = [
	        '$window',
	        'ModelConstants',
	        'eventManagerService',
	        'CrmConstants',
	        'TranslationCache'
	    ];
	    return SalesChecklistItemController;
	}());
	module.exports = SalesChecklistItemController;


/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var crmLoyaltySummaryModule = __webpack_require__(474);
	module.exports = angular.module('crm.loyalty', [
	    crmLoyaltySummaryModule.name
	]);


/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var loyaltySummaryDirective = __webpack_require__(475);
	var summariesModule = __webpack_require__(477);
	module.exports = angular.module("crm.loyalty.loyaltySummary", [
	    summariesModule.name
	])
	    .directive("crmLoyaltySummary", loyaltySummaryDirective);


/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var loyaltySummaryController = __webpack_require__(476);
	function loyaltySummaryDirective() {
	    var directive = {
	        restrict: "E",
	        scope: {
	            contact: '=',
	            siteId: '='
	        },
	        templateUrl: 'app/loyalty/loyaltySummary/loyaltySummaryTemplate.html',
	        controller: loyaltySummaryController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = loyaltySummaryDirective;


/***/ },
/* 476 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var loyaltySummaryController = (function () {
	    function loyaltySummaryController(ServiceWrapper, LoyaltySummaryApiService, $scope) {
	        var _this = this;
	        this.ServiceWrapper = ServiceWrapper;
	        this.LoyaltySummaryApiService = LoyaltySummaryApiService;
	        this.$scope = $scope;
	        this.$scope.$watch('ctrl.contact', function (contact) {
	            _this.initLoyaltySummary(contact);
	        });
	    }
	    loyaltySummaryController.prototype.initLoyaltySummary = function (newVal) {
	        var _this = this;
	        if (newVal) {
	            this.LoyaltySummaryApiService.get(newVal.id, this.siteId).then(function (data) {
	                _this.loyaltySummary = data;
	            }).catch(function (error) {
	                console.error("Could not get the loyalty summary", error);
	            });
	        }
	    };
	    loyaltySummaryController.$inject = [
	        'ServiceWrapper',
	        'LoyaltySummaryApiService',
	        '$scope',
	    ];
	    return loyaltySummaryController;
	}());
	module.exports = loyaltySummaryController;


/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var LoyaltyCustomerSummaryModule = __webpack_require__(478);
	var LoyaltySalesModule = __webpack_require__(481);
	var LoyaltyVehiclesOwnedModule = __webpack_require__(484);
	var LoyaltyMarketingModule = __webpack_require__(487);
	var LoyaltyQaModule = __webpack_require__(490);
	var LoyaltySurveysModule = __webpack_require__(493);
	module.exports = angular.module("crm.loyalty.loyaltySummary.summaries", [
	    LoyaltyCustomerSummaryModule.name,
	    LoyaltySalesModule.name,
	    LoyaltyVehiclesOwnedModule.name,
	    LoyaltyMarketingModule.name,
	    LoyaltyQaModule.name,
	    LoyaltySurveysModule.name
	]);


/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var LoyaltyCustomerSummaryDirective = __webpack_require__(479);
	var LoyaltyCustomerSummaryController = __webpack_require__(480);
	module.exports = angular.module("crm.loyalty.loyaltySummary.customer", [])
	    .controller(LoyaltyCustomerSummaryController.controllerName, LoyaltyCustomerSummaryController)
	    .directive(LoyaltyCustomerSummaryDirective.directiveName, LoyaltyCustomerSummaryDirective);


/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var LoyaltyCustomerSummaryController = __webpack_require__(480);
	var LoyaltyCustomerSummaryDirective = (function () {
	    function LoyaltyCustomerSummaryDirective() {
	        this.restrict = 'E';
	        this.controller = LoyaltyCustomerSummaryController.controllerName;
	        this.controllerAs = 'ctrl';
	        this.bindToController = true;
	        this.templateUrl = 'app/loyalty/loyaltySummary/summaries/customer/LoyaltyCustomerSummary.html';
	        this.scope = {
	            loyaltySummary: '='
	        };
	    }
	    LoyaltyCustomerSummaryDirective.directiveName = 'crmLoyaltyCustomerSummary';
	    return LoyaltyCustomerSummaryDirective;
	}());
	var LoyaltyCustomerSummaryDirectiveFactory = function () {
	    return new LoyaltyCustomerSummaryDirective();
	};
	LoyaltyCustomerSummaryDirectiveFactory.directiveName = LoyaltyCustomerSummaryDirective.directiveName;
	module.exports = LoyaltyCustomerSummaryDirectiveFactory;


/***/ },
/* 480 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var LoyaltyCustomerSummaryController = (function () {
	    function LoyaltyCustomerSummaryController() {
	    }
	    LoyaltyCustomerSummaryController.controllerName = 'LoyaltyCustomerSummaryController';
	    return LoyaltyCustomerSummaryController;
	}());
	module.exports = LoyaltyCustomerSummaryController;


/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var LoyaltySalesDirective = __webpack_require__(482);
	var LoyaltySalesController = __webpack_require__(483);
	module.exports = angular.module("crm.loyalty.loyaltySummary.sales", [])
	    .controller(LoyaltySalesController.controllerName, LoyaltySalesController)
	    .directive(LoyaltySalesDirective.directiveName, LoyaltySalesDirective);


/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var LoyaltySalesController = __webpack_require__(483);
	var LoyaltySalesDirective = (function () {
	    function LoyaltySalesDirective() {
	        this.restrict = 'E';
	        this.controller = LoyaltySalesController.controllerName;
	        this.controllerAs = 'ctrl';
	        this.bindToController = true;
	        this.templateUrl = 'app/loyalty/loyaltySummary/summaries/sales/LoyaltySales.html';
	        this.scope = {
	            loyaltySummary: '='
	        };
	    }
	    LoyaltySalesDirective.directiveName = 'crmLoyaltySales';
	    return LoyaltySalesDirective;
	}());
	var LoyaltySalesDirectiveFactory = function () {
	    return new LoyaltySalesDirective();
	};
	LoyaltySalesDirectiveFactory.directiveName = LoyaltySalesDirective.directiveName;
	module.exports = LoyaltySalesDirectiveFactory;


/***/ },
/* 483 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var LoyaltySalesController = (function () {
	    function LoyaltySalesController() {
	    }
	    LoyaltySalesController.controllerName = 'LoyaltySalesController';
	    return LoyaltySalesController;
	}());
	module.exports = LoyaltySalesController;


/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var LoyaltyVehiclesOwnedDirective = __webpack_require__(485);
	var LoyaltyVehiclesOwnedController = __webpack_require__(486);
	module.exports = angular.module("crm.loyalty.loyaltySummary.vehiclesOwned", [])
	    .controller(LoyaltyVehiclesOwnedController.controllerName, LoyaltyVehiclesOwnedController)
	    .directive(LoyaltyVehiclesOwnedDirective.directiveName, LoyaltyVehiclesOwnedDirective);


/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var LoyaltyVehiclesOwnedController = __webpack_require__(486);
	var LoyaltyVehiclesOwnedDirective = (function () {
	    function LoyaltyVehiclesOwnedDirective() {
	        this.restrict = 'E';
	        this.controller = LoyaltyVehiclesOwnedController.controllerName;
	        this.controllerAs = 'ctrl';
	        this.bindToController = true;
	        this.templateUrl = 'app/loyalty/loyaltySummary/summaries/vehicles/LoyaltyVehiclesOwned.html';
	        this.scope = {
	            loyaltySummary: '='
	        };
	    }
	    LoyaltyVehiclesOwnedDirective.directiveName = 'crmLoyaltyVehiclesOwned';
	    return LoyaltyVehiclesOwnedDirective;
	}());
	var LoyaltyVehiclesOwnedDirectiveFactory = function () {
	    return new LoyaltyVehiclesOwnedDirective();
	};
	LoyaltyVehiclesOwnedDirectiveFactory.directiveName = LoyaltyVehiclesOwnedDirective.directiveName;
	module.exports = LoyaltyVehiclesOwnedDirectiveFactory;


/***/ },
/* 486 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var LoyaltyVehiclesOwnedController = (function () {
	    function LoyaltyVehiclesOwnedController() {
	    }
	    LoyaltyVehiclesOwnedController.controllerName = 'LoyaltyVehiclesOwnedController';
	    return LoyaltyVehiclesOwnedController;
	}());
	module.exports = LoyaltyVehiclesOwnedController;


/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var LoyaltyMarketingDirective = __webpack_require__(488);
	var LoyaltyMarketingController = __webpack_require__(489);
	module.exports = angular.module("crm.loyalty.loyaltySummary.marketing", [])
	    .controller(LoyaltyMarketingController.controllerName, LoyaltyMarketingController)
	    .directive(LoyaltyMarketingDirective.directiveName, LoyaltyMarketingDirective);


/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var LoyaltyMarketingController = __webpack_require__(489);
	var LoyaltyMarketingDirective = (function () {
	    function LoyaltyMarketingDirective() {
	        this.restrict = 'E';
	        this.controller = LoyaltyMarketingController.controllerName;
	        this.controllerAs = 'ctrl';
	        this.bindToController = true;
	        this.templateUrl = 'app/loyalty/loyaltySummary/summaries/marketing/LoyaltyMarketing.html';
	        this.scope = {
	            loyaltySummary: '='
	        };
	    }
	    LoyaltyMarketingDirective.directiveName = 'crmLoyaltyMarketing';
	    return LoyaltyMarketingDirective;
	}());
	var LoyaltyMarketingDirectiveFactory = function () {
	    return new LoyaltyMarketingDirective();
	};
	LoyaltyMarketingDirectiveFactory.directiveName = LoyaltyMarketingDirective.directiveName;
	module.exports = LoyaltyMarketingDirectiveFactory;


/***/ },
/* 489 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var LoyaltyMarketingController = (function () {
	    function LoyaltyMarketingController() {
	    }
	    LoyaltyMarketingController.controllerName = 'LoyaltyMarketingController';
	    return LoyaltyMarketingController;
	}());
	module.exports = LoyaltyMarketingController;


/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var LoyaltyQaDirective = __webpack_require__(491);
	var LoyaltyQaController = __webpack_require__(492);
	module.exports = angular.module("crm.loyalty.loyaltySummary.qa", [])
	    .controller(LoyaltyQaController.controllerName, LoyaltyQaController)
	    .directive(LoyaltyQaDirective.directiveName, LoyaltyQaDirective);


/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var LoyaltyQaController = __webpack_require__(492);
	var LoyaltyQaDirective = (function () {
	    function LoyaltyQaDirective() {
	        this.restrict = 'E';
	        this.controller = LoyaltyQaController.controllerName;
	        this.controllerAs = 'ctrl';
	        this.bindToController = true;
	        this.templateUrl = 'app/loyalty/loyaltySummary/summaries/qa/LoyaltyQa.html';
	        this.scope = {
	            loyaltySummary: '='
	        };
	    }
	    LoyaltyQaDirective.directiveName = 'crmLoyaltyQa';
	    return LoyaltyQaDirective;
	}());
	var LoyaltyQaDirectiveFactory = function () {
	    return new LoyaltyQaDirective();
	};
	LoyaltyQaDirectiveFactory.directiveName = LoyaltyQaDirective.directiveName;
	module.exports = LoyaltyQaDirectiveFactory;


/***/ },
/* 492 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var LoyaltyQaController = (function () {
	    function LoyaltyQaController() {
	    }
	    LoyaltyQaController.controllerName = 'LoyaltyQaController';
	    return LoyaltyQaController;
	}());
	module.exports = LoyaltyQaController;


/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var LoyaltySurveysDirective = __webpack_require__(494);
	var LoyaltySurveysController = __webpack_require__(495);
	module.exports = angular.module("crm.loyalty.loyaltySummary.surveys", [])
	    .controller(LoyaltySurveysController.controllerName, LoyaltySurveysController)
	    .directive(LoyaltySurveysDirective.directiveName, LoyaltySurveysDirective);


/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var LoyaltySurveysController = __webpack_require__(495);
	var LoyaltySurveysDirective = (function () {
	    function LoyaltySurveysDirective() {
	        this.restrict = 'E';
	        this.controller = LoyaltySurveysController.controllerName;
	        this.controllerAs = 'ctrl';
	        this.bindToController = true;
	        this.templateUrl = 'app/loyalty/loyaltySummary/summaries/surveys/LoyaltySurveys.html';
	        this.scope = {
	            loyaltySummary: '='
	        };
	    }
	    LoyaltySurveysDirective.directiveName = 'crmLoyaltySurveys';
	    return LoyaltySurveysDirective;
	}());
	var LoyaltySurveysDirectiveFactory = function () {
	    return new LoyaltySurveysDirective();
	};
	LoyaltySurveysDirectiveFactory.directiveName = LoyaltySurveysDirective.directiveName;
	module.exports = LoyaltySurveysDirectiveFactory;


/***/ },
/* 495 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var LoyaltySurveysController = (function () {
	    function LoyaltySurveysController() {
	    }
	    LoyaltySurveysController.controllerName = 'LoyaltySurveysController';
	    return LoyaltySurveysController;
	}());
	module.exports = LoyaltySurveysController;


/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var ConnectionsDirective = __webpack_require__(497);
	var ConnectionsController = __webpack_require__(498);
	var ConnectionCardModule = __webpack_require__(499);
	var ConnectionAddModule = __webpack_require__(502);
	module.exports = angular.module("crm.connections", [
	    ConnectionCardModule.name,
	    ConnectionAddModule.name,
	])
	    .directive(ConnectionsDirective.htmlName, ConnectionsDirective.create)
	    .controller(ConnectionsController.controllerName, ConnectionsController);


/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var ConnectionsController = __webpack_require__(498);
	var ConnectionsDirective = (function () {
	    function ConnectionsDirective() {
	        this.restrict = 'E';
	        this.controller = ConnectionsController.controllerName;
	        this.controllerAs = 'ctrl';
	        this.bindToController = true;
	        this.templateUrl = 'app/connections/connectionsTemplate.html';
	        this.scope = {
	            contact: '=',
	            onSaveCompleted: '&',
	            //TODO: Temp solution for disable inline edit when cross site
	            disableEditCrossSite: '='
	        };
	    }
	    ConnectionsDirective.create = function () {
	        return new ConnectionsDirective();
	    };
	    ConnectionsDirective.htmlName = 'crmConnections';
	    return ConnectionsDirective;
	}());
	module.exports = ConnectionsDirective;


/***/ },
/* 498 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var ConnectionsController = (function () {
	    function ConnectionsController(ConnectionApiService, eventManagerService, CrmConstants, $scope, Constants, ContactService, messageBus, ServiceWrapper, permissionService) {
	        var _this = this;
	        this.ConnectionApiService = ConnectionApiService;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.Constants = Constants;
	        this.ContactService = ContactService;
	        this.messageBus = messageBus;
	        this.ServiceWrapper = ServiceWrapper;
	        this.permissionService = permissionService;
	        this.isLoading = false;
	        this.permissionService.getPermission('EvtContact')
	            .then(function (permission) {
	            _this.connectionPermission = permission;
	        });
	        var coBuyerAddedEvent = this.eventManagerService.subscribe(this.CrmConstants.SALES_OPPORTUNITY.COBUYER.COBUYER_ADDED, function () {
	            _this.loadConnections();
	        });
	        var unwatch = $scope.$watch('ctrl.contact', function (newValue) {
	            if (newValue) {
	                _this.loadConnections();
	                unwatch();
	            }
	        });
	        $scope.$on('$destroy', function () {
	            _this.eventManagerService.unSubscribe(_this.CrmConstants.SALES_OPPORTUNITY.COBUYER.COBUYER_ADDED, coBuyerAddedEvent);
	        });
	    }
	    ConnectionsController.prototype.removeConnection = function (connection) {
	        var removingIndex = -1;
	        for (var i = 0; i < this.connections.length; i++) {
	            if (this.connections[i].contact.id === connection.contact.id) {
	                removingIndex = i;
	            }
	        }
	        if (removingIndex > -1) {
	            this.connections.splice(removingIndex, 1);
	            this.eventManagerService.publish(this.CrmConstants.CONNECTIONS.COUNT_UPDATED, this.connections.length);
	        }
	    };
	    ConnectionsController.prototype.openSearchModal = function () {
	        var self = this;
	        self.messageBus.ask(top, {
	            from: 'crm',
	            to: 'shell',
	            task: 'modal.open',
	            timeout: 480000,
	            data: {
	                targetAppId: 'search',
	                targetAppRoute: 'customerSearch/connections'
	            }
	        }, function (data) {
	            var contactId = data.data.result;
	            self.ContactService.get({
	                contactId: contactId,
	                summaryOnly: true
	            }).then(function (resolution) {
	                if (resolution.id)
	                    self.saveConnection(resolution);
	            });
	        });
	    };
	    ConnectionsController.prototype.saveConnection = function (contact, allowDuplicate) {
	        var _this = this;
	        if (allowDuplicate === void 0) { allowDuplicate = false; }
	        var self = this;
	        this.eventManagerService.publish(this.Constants.CONNECTIONS_LOADING_KEY, true);
	        contact.contactType = this.connectionType;
	        contact.contactSubType = this.connectionSubType;
	        this.ServiceWrapper.post(this.ConnectionApiService, {
	            contactId: this.contact.id,
	            connection: contact,
	            allowDuplicate: allowDuplicate
	        })
	            .then(function () {
	            _this.eventManagerService.publish(_this.Constants.CONNECTIONS_LOADING_KEY, false);
	            _this.onAddCompleted();
	        });
	    };
	    ConnectionsController.prototype.onAddIndividualClick = function () {
	        this.addingIndividual = true;
	    };
	    ConnectionsController.prototype.onAddOrganizationClick = function () {
	        this.addingOrganization = true;
	    };
	    ConnectionsController.prototype.onAddCancel = function () {
	        this.addingIndividual = false;
	        this.addingOrganization = false;
	    };
	    ConnectionsController.prototype.onAddCompleted = function () {
	        this.addingIndividual = false;
	        this.addingOrganization = false;
	        this.loadConnections();
	    };
	    ConnectionsController.prototype.loadConnections = function () {
	        var _this = this;
	        this.isLoading = true;
	        this.eventManagerService.publish(this.Constants.CONNECTIONS_LOADING_KEY, true);
	        this.ConnectionApiService.get(this.contact.id).then(function (connections) {
	            _this.isLoading = false;
	            _this.connections = connections;
	            _this.eventManagerService.publish(_this.Constants.CONNECTIONS_LOADING_KEY, false);
	            _this.eventManagerService.publish(_this.CrmConstants.CONNECTIONS.COUNT_UPDATED, _this.connections.length);
	        });
	    };
	    ConnectionsController.controllerName = 'ConnectionsController';
	    ConnectionsController.$inject = [
	        'ConnectionApiService',
	        'eventManagerService',
	        'CrmConstants',
	        '$scope',
	        'Constants',
	        'ContactService',
	        'messageBus',
	        'ServiceWrapper',
	        'permissionService'
	    ];
	    return ConnectionsController;
	}());
	module.exports = ConnectionsController;


/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var directive = __webpack_require__(500);
	module.exports = angular.module("crm.connections.card", [])
	    .directive("crmConnectionCard", directive);


/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(501);
	function connectionCardDirective() {
	    return {
	        restrict: "E",
	        templateUrl: "app/connections/card/connectionCardTemplate.html",
	        scope: {
	            contact: "=",
	            connection: "=",
	            isCobuyer: "=",
	            salesOpportunityId: "@",
	            disableEditCrossSite: "=",
	            removeConnectionCallback: "&removeConnection"
	        },
	        controller: controller,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = connectionCardDirective;


/***/ },
/* 501 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var ConnectionCardController = (function () {
	    function ConnectionCardController(guidService, modalService, translationCache, serviceWrapper, connectionApiService, salesOpportunityCobuyerApiService, contactService, permissionService, refDefService, $q) {
	        var _this = this;
	        this.guidService = guidService;
	        this.modalService = modalService;
	        this.translationCache = translationCache;
	        this.serviceWrapper = serviceWrapper;
	        this.connectionApiService = connectionApiService;
	        this.salesOpportunityCobuyerApiService = salesOpportunityCobuyerApiService;
	        this.contactService = contactService;
	        this.permissionService = permissionService;
	        this.refDefService = refDefService;
	        this.$q = $q;
	        this.onInlineEditSave = function (facade) {
	            var original = angular.copy({
	                primary: _this.connection.primary,
	                secondary: _this.connection.secondary
	            });
	            facade.fields.forEach(function (field) {
	                _this.connection[field.fieldName] = facade.model[field.fieldName];
	            });
	            var data = {
	                entityId: _this.contact.id,
	                connectionId: _this.connection.contact.id,
	                primaryId: facade.model.primary.value,
	                secondaryId: (facade.model.secondary) ? facade.model.secondary.value : "0"
	            };
	            return _this.connectionApiService.put(data).then(function () {
	                _this.connection.primary = facade.model.primary;
	                _this.connection.secondary = facade.model.secondary;
	                return true;
	            }, function () {
	                _this.connection.primary = original.primary;
	                _this.connection.secondary = original.secondary;
	            });
	        };
	        this.setupTranslations();
	        this.getPermissions();
	        this.getRefDefs()
	            .then(function (resolutions) {
	            _this.refDefs = {
	                types: _this.individualTypeRefDefs,
	                subtypes: _this.individualSubTypeRefDefDictionary
	            };
	            _this.createFacade();
	        });
	    }
	    ConnectionCardController.prototype.getPermissions = function () {
	        var _this = this;
	        this.permissionService.getPermission('EvtContact')
	            .then(function (permission) {
	            _this.connectionPermission = permission;
	        });
	    };
	    ConnectionCardController.prototype.getRefDefs = function () {
	        var _this = this;
	        var refDefPromise = this.refDefService.getRefDef('individual.type')
	            .then(function (refDefs) {
	            _this.individualTypeRefDefs = refDefs;
	        });
	        var subRefDefDictionaryPromise = this.refDefService.getAllSubRefDefsByParent('individual.type')
	            .then(function (refDefDictionary) {
	            _this.individualSubTypeRefDefDictionary = refDefDictionary;
	        });
	        if (!this.isCobuyer) {
	            return this.$q.all([refDefPromise, subRefDefDictionaryPromise]);
	        }
	        return this.$q.all([refDefPromise, []]);
	    };
	    ConnectionCardController.prototype.onRemoveConnection = function () {
	        this.showRemoveConnection();
	    };
	    ConnectionCardController.prototype.viewProfile = function () {
	        this.contactService.view(this.connection.contact);
	    };
	    ConnectionCardController.prototype.setupTranslations = function () {
	        if (this.isCobuyer) {
	            this.setupCoBuyerTranslations();
	        }
	        else {
	            this.setupConnectionTranslations();
	        }
	    };
	    ConnectionCardController.prototype.setupConnectionTranslations = function () {
	        this.translations = {
	            title: this.translationCache.get("crm.connections.modal.TITLE"),
	            prompt: this.translationCache.get("crm.connections.modal.PROMPT"),
	            acceptText: this.translationCache.get("crm.connections.modal.ACCEPT"),
	            cancelText: this.translationCache.get("crm.connections.modal.CANCEL")
	        };
	        this.translations.prompt = this.translations.prompt
	            .replace(/\{connection\}/g, this.connection.contact.getFullName())
	            .replace(/\{contact\}/, this.contact.getFullName());
	    };
	    ConnectionCardController.prototype.setupCoBuyerTranslations = function () {
	        this.translations = {
	            title: this.translationCache.get('crm.cobuyer.modal.TITLE'),
	            prompt: this.translationCache.get('crm.cobuyer.modal.PROMPT'),
	            acceptText: this.translationCache.get('crm.cobuyer.modal.ACCEPT'),
	            cancelText: this.translationCache.get('crm.cobuyer.modal.CANCEL')
	        };
	        this.translations.prompt = this.translations.prompt
	            .replace(/\{cobuyer\}/g, this.connection.contact.getFullName())
	            .replace(/\{salesOppId\}/, this.salesOpportunityId);
	    };
	    ConnectionCardController.prototype.showRemoveConnection = function () {
	        var _this = this;
	        this.setupTranslations();
	        this.modalService.openModal(this.translations.prompt, this.translations.title, this.translations.acceptText, this.translations.cancelText).then(function (modalInstance) {
	            _this.modalAccepted(modalInstance);
	        }, function (modalInstance) {
	            _this.modalCanceled(modalInstance);
	        });
	    };
	    ConnectionCardController.prototype.modalAccepted = function (modalInstance) {
	        if (this.isCobuyer) {
	            this.removeCoBuyer(modalInstance);
	        }
	        else {
	            this.removeConnection(modalInstance);
	        }
	    };
	    ConnectionCardController.prototype.removeConnection = function (modalInstance) {
	        var _this = this;
	        var data = {
	            entityId: this.contact.id,
	            deletionEntityId: this.connection.contact.id
	        };
	        this.serviceWrapper.delete(this.connectionApiService, data).then(function () {
	            _this.removeConnectionCallback({ connection: _this.connection });
	            modalInstance.close();
	        });
	    };
	    ConnectionCardController.prototype.removeCoBuyer = function (modalInstance) {
	        modalInstance.close();
	        this.removeConnectionCallback({ connection: this.connection });
	    };
	    ConnectionCardController.prototype.modalCanceled = function (modalInstance) {
	        modalInstance.dismiss();
	    };
	    ConnectionCardController.prototype.createFacade = function () {
	        var fields = [
	            {
	                fieldName: 'primary',
	                type: 'select',
	                fieldValues: this.refDefs.types
	            },
	            {
	                fieldName: 'secondary',
	                type: 'select',
	                fieldValues: this.individualSubTypeRefDefDictionary[this.connection.primary.value]
	            }
	        ];
	        this.relationshipFacade = {
	            guid: this.guidService.generate(),
	            title: this.translationCache.get("crm.connections.RELATIONSHIP"),
	            model: {
	                primary: this.connection.primary,
	                secondary: this.connection.secondary
	            },
	            fields: fields,
	            fieldDependencies: [],
	            onSave: this.onInlineEditSave,
	            disableEdit: false,
	        };
	    };
	    ConnectionCardController.$inject = [
	        "GuidService",
	        "modalService",
	        "TranslationCache",
	        "ServiceWrapper",
	        "ConnectionApiService",
	        "SalesOpportunityCobuyerApiService",
	        "ContactService",
	        'permissionService',
	        'RefDefService',
	        '$q'
	    ];
	    return ConnectionCardController;
	}());
	module.exports = ConnectionCardController;


/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var addConnectionDirective = __webpack_require__(503);
	module.exports = angular.module('crm.connections.add', [])
	    .directive('crmAddConnection', addConnectionDirective);


/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var AddConnectionController = __webpack_require__(504);
	function addConnectionDirective() {
	    return {
	        restrict: 'E',
	        templateUrl: 'app/connections/add/addConnectionTemplate.html',
	        scope: {
	            salesOpportunityContact: '=',
	            isOrganization: '=',
	            onCancel: '&',
	            onSaveCompleted: '&'
	        },
	        controller: AddConnectionController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	}
	module.exports = addConnectionDirective;


/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var emailVerifyOptions_1 = __webpack_require__(145);
	var AddConnectionController = (function () {
	    function AddConnectionController(IndividualFactory, OrganizationFactory, DuplicateService, ContactService, ServiceWrapper, ConnectionApiService, eventManagerService, Constants, dirtyFormWarningService, EmailVerifyFrontendService, refDefService) {
	        this.DuplicateService = DuplicateService;
	        this.ContactService = ContactService;
	        this.ServiceWrapper = ServiceWrapper;
	        this.ConnectionApiService = ConnectionApiService;
	        this.eventManagerService = eventManagerService;
	        this.Constants = Constants;
	        this.dirtyFormWarningService = dirtyFormWarningService;
	        this.EmailVerifyFrontendService = EmailVerifyFrontendService;
	        this.refDefService = refDefService;
	        this.isLoading = false;
	        this.contact = this.isOrganization ? OrganizationFactory.create() : IndividualFactory.create();
	        this.expanded = false;
	        this.updateRefDefs();
	        this.registerDirtyFormsWarning();
	    }
	    AddConnectionController.prototype.registerDirtyFormsWarning = function () {
	        this.dirtyFormWarningService.register(function () {
	            return true;
	        });
	    };
	    AddConnectionController.prototype.onSave = function () {
	        this.addConnectionForm.$setSubmitted();
	        if (this.addConnectionForm.$valid) {
	            this.checkForDuplicates();
	        }
	    };
	    AddConnectionController.prototype.cancelAdd = function () {
	        var _this = this;
	        if (this.addConnectionForm.$dirty) {
	            this.dirtyFormWarningService.showModal().then(function (modalInstance) {
	                modalInstance.dismiss();
	                _this.dirtyFormWarningService.deregister();
	                _this.onCancel();
	            }, function (modalInstance) {
	                modalInstance.dismiss();
	            });
	        }
	        else {
	            this.dirtyFormWarningService.deregister();
	            this.onCancel();
	        }
	    };
	    AddConnectionController.prototype.checkForDuplicates = function () {
	        var _this = this;
	        this.isLoading = true;
	        this.DuplicateService.checkForDuplicates(this.contact, "connection")
	            .then(function (result) {
	            if (result.isDefined()) {
	                _this.saveConnection(result.getValue());
	            }
	            else {
	                if (_this.isOrganization) {
	                    _this.ServiceWrapper.save(_this.ContactService, _this.contact)
	                        .then(function (contact) {
	                        _this.verifyEmail();
	                    });
	                }
	                else {
	                    _this.verifyEmail();
	                }
	            }
	        });
	    };
	    AddConnectionController.prototype.verifyEmail = function () {
	        var _this = this;
	        this.EmailVerifyFrontendService.verifyEmail(this.contact.contactPoints.email.value)
	            .then(function (emailVerifyResult) {
	            switch (emailVerifyResult) {
	                case emailVerifyOptions_1.EmailVerifyOptions.FIX_EMAIL:
	                    break;
	                case emailVerifyOptions_1.EmailVerifyOptions.REMOVE_EMAIL:
	                    _this.contact.contactPoints.email.value = '';
	                    _this.saveConnection(_this.contact, true);
	                    break;
	                case emailVerifyOptions_1.EmailVerifyOptions.SAVE_ANYWAY:
	                    _this.saveConnection(_this.contact, true);
	                    break;
	                default:
	                    _this.saveConnection(_this.contact, true);
	                    break;
	            }
	        })
	            .catch(function (error) {
	            console.error(error);
	        })
	            .finally(function () {
	            _this.isLoading = false;
	        });
	    };
	    AddConnectionController.prototype.saveConnection = function (contact, allowDuplicate) {
	        var _this = this;
	        if (allowDuplicate === void 0) { allowDuplicate = false; }
	        this.eventManagerService.publish(this.Constants.CONNECTIONS_LOADING_KEY, true);
	        contact.contactType = this.connectionType;
	        contact.contactSubType = this.connectionSubType;
	        this.ServiceWrapper.post(this.ConnectionApiService, {
	            contactId: this.salesOpportunityContact.id,
	            connection: contact,
	            allowDuplicate: allowDuplicate
	        })
	            .then(function () {
	            _this.dirtyFormWarningService.deregister();
	            _this.eventManagerService.publish(_this.Constants.CONNECTIONS_LOADING_KEY, false);
	            _this.onSaveCompleted();
	        });
	    };
	    AddConnectionController.prototype.getSubTypeConnectionRefDefs = function (connectionTypeValue) {
	        if (!connectionTypeValue) {
	            return [];
	        }
	        //TODO: Look into why the API is returning duplicate sub ref defs for this one instance
	        return _.uniq(this.connectionSubTypes[connectionTypeValue], function (subRefDef) { return subRefDef.value; });
	    };
	    AddConnectionController.prototype.updateIndividualRefDefs = function () {
	        var _this = this;
	        this.refDefService.getRefDefs([
	            'individual.salutation',
	            'pref.languages',
	            'individual.type',
	            'individual.source'
	        ]).then(function (refDefs) {
	            _this.individualRefDefs = refDefs;
	        });
	    };
	    AddConnectionController.prototype.updateCompanyRefDefs = function () {
	        var _this = this;
	        this.refDefService.getRefDefs([
	            'individual.salutation',
	            'company.source',
	            'company.type'
	        ]).then(function (refDefs) {
	            _this.companyRefDefs = refDefs;
	        });
	    };
	    AddConnectionController.prototype.updateConnectionRefDefs = function () {
	        var _this = this;
	        this.refDefService.getRefDefs([
	            'contact.type'
	        ])
	            .then(function (refDefs) {
	            _this.connectionRefDefs = refDefs;
	            return _this.refDefService.getAllSubRefDefsByParent('contact.type');
	        })
	            .then(function (subTypeRefDefs) {
	            _this.connectionSubTypes = subTypeRefDefs;
	        });
	    };
	    AddConnectionController.prototype.updateRefDefs = function () {
	        this.updateIndividualRefDefs();
	        this.updateCompanyRefDefs();
	        this.updateConnectionRefDefs();
	    };
	    AddConnectionController.$inject = [
	        'IndividualFactory',
	        'OrganizationFactory',
	        'DuplicateService',
	        'ContactService',
	        'ServiceWrapper',
	        'ConnectionApiService',
	        'eventManagerService',
	        'Constants',
	        'dirtyFormWarningService',
	        'EmailVerifyFrontendService',
	        'RefDefService'
	    ];
	    return AddConnectionController;
	}());
	module.exports = AddConnectionController;


/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var vehicleOfInterestCardModule = __webpack_require__(506);
	var vehicleOfInterestManualEntryModule = __webpack_require__(519);
	module.exports = angular.module("crm.vehicleOfInterest", [
	    vehicleOfInterestCardModule.name,
	    vehicleOfInterestManualEntryModule.name
	]);


/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var vehicleOfInterestCardContainerModule = __webpack_require__(507);
	var inStockVehicleOfInterestCardModule = __webpack_require__(510);
	var notInStockVehicleOfInterestCardModule = __webpack_require__(513);
	module.exports = angular.module("crm.vehicleOfInterest.card", [
	    vehicleOfInterestCardContainerModule.name,
	    inStockVehicleOfInterestCardModule.name,
	    notInStockVehicleOfInterestCardModule.name
	]);


/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var vehicleOfInterestCardContainerComponent_1 = __webpack_require__(508);
	module.exports = angular.module("crm.vehicleOfInterest.card.container", [])
	    .component(vehicleOfInterestCardContainerComponent_1.VehicleOfInterestCardContainerComponent.componentName, new vehicleOfInterestCardContainerComponent_1.VehicleOfInterestCardContainerComponent());


/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var vehicleOfInterestCardContainerController_1 = __webpack_require__(509);
	var VehicleOfInterestCardContainerComponent = (function () {
	    function VehicleOfInterestCardContainerComponent() {
	        this.bindings = {
	            vehicleOfInterest: "=",
	            topChoice: "=?",
	            options: "="
	        };
	        this.controller = vehicleOfInterestCardContainerController_1.VehicleOfInterestCardContainerController;
	        this.controllerAs = "ctrl";
	        this.templateUrl = "app/vehicleOfInterest/card/container/vehicleOfInterestCardContainerTemplate.html";
	    }
	    VehicleOfInterestCardContainerComponent.componentName = "crmVehicleOfInterestCardContainer";
	    return VehicleOfInterestCardContainerComponent;
	}());
	exports.VehicleOfInterestCardContainerComponent = VehicleOfInterestCardContainerComponent;


/***/ },
/* 509 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var VehicleOfInterestCardContainerController = (function () {
	    function VehicleOfInterestCardContainerController() {
	    }
	    return VehicleOfInterestCardContainerController;
	}());
	exports.VehicleOfInterestCardContainerController = VehicleOfInterestCardContainerController;


/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var inStockVehicleOfInterestCardComponent_1 = __webpack_require__(511);
	module.exports = angular.module("crm.vehicleOfInterest.card.inStock", [])
	    .component(inStockVehicleOfInterestCardComponent_1.InStockVehicleOfInterestCardComponent.componentName, new inStockVehicleOfInterestCardComponent_1.InStockVehicleOfInterestCardComponent());


/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var inStockVehicleOfInterestCardController_1 = __webpack_require__(512);
	var InStockVehicleOfInterestCardComponent = (function () {
	    function InStockVehicleOfInterestCardComponent() {
	        this.bindings = {
	            vehicleOfInterest: "=",
	            topChoice: "=?",
	            options: "="
	        };
	        this.controller = inStockVehicleOfInterestCardController_1.InStockVehicleOfInterestCardController;
	        this.controllerAs = "ctrl";
	        this.templateUrl = "app/vehicleOfInterest/card/inStock/inStockVehicleOfInterestCardTemplate.html";
	    }
	    InStockVehicleOfInterestCardComponent.componentName = "crmInStockVehicleOfInterestCard";
	    return InStockVehicleOfInterestCardComponent;
	}());
	exports.InStockVehicleOfInterestCardComponent = InStockVehicleOfInterestCardComponent;


/***/ },
/* 512 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var InStockVehicleOfInterestCardController = (function () {
	    function InStockVehicleOfInterestCardController($translate, eventManagerService, CrmConstants, salesOpportunityService, InventorySerializer, IncentiveService, modalService, permissionService, inlineEditFacadeFactory) {
	        this.$translate = $translate;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.salesOpportunityService = salesOpportunityService;
	        this.InventorySerializer = InventorySerializer;
	        this.IncentiveService = IncentiveService;
	        this.modalService = modalService;
	        this.permissionService = permissionService;
	        this.inlineEditFacadeFactory = inlineEditFacadeFactory;
	        this.initializeDeliveryDateFacade();
	        this.loadPermissions();
	    }
	    InStockVehicleOfInterestCardController.prototype.getVehicleTitle = function () {
	        if (this.vehicleOfInterest) {
	            return this.vehicleOfInterest.year + " " +
	                this.vehicleOfInterest.make + " " +
	                this.vehicleOfInterest.model + " ";
	        }
	        else {
	            return "";
	        }
	    };
	    InStockVehicleOfInterestCardController.prototype.hasVehicleImage = function () {
	        return this.getVehicleImage() !== InStockVehicleOfInterestCardController._defaultVehicleImageUrl;
	    };
	    InStockVehicleOfInterestCardController.prototype.getVehicleImage = function () {
	        if (this.vehicleOfInterest &&
	            this.vehicleOfInterest.imageUrls &&
	            this.vehicleOfInterest.imageUrls[0]) {
	            return this.vehicleOfInterest.imageUrls[0];
	        }
	        return InStockVehicleOfInterestCardController._defaultVehicleImageUrl;
	    };
	    InStockVehicleOfInterestCardController.prototype.openEBrochure = function () {
	        this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.VEHICLE_OF_INTEREST.OPEN_E_BROCHURE, this.vehicleOfInterest);
	    };
	    InStockVehicleOfInterestCardController.prototype.selectVehicleOfInterest = function () {
	        if (this.options && this.options.selectVehicleOfInterest) {
	            this.options.selectVehicleOfInterest(this.vehicleOfInterest);
	        }
	    };
	    InStockVehicleOfInterestCardController.prototype.openIncentives = function (event) {
	        var _this = this;
	        event.stopPropagation();
	        if (this.isOpeningIncentiveModal) {
	            return;
	        }
	        this.isOpeningIncentiveModal = true;
	        this.inventory = this.InventorySerializer.deserializeVehicleOfInterest(this.vehicleOfInterest);
	        this.IncentiveService.getIncentives(this.vehicleOfInterest.chromeStyleId, this.inventory.condition)
	            .then(function (incentives) {
	            _this.inventory.incentives = incentives;
	            var incentiveModalTemplate = '<co-vehicle-incentives inventory="ctrl.inventory" on-close="ctrl.onCloseIncentivesModal()"></co-vehicle-incentives>';
	            var modalInstance = _this.modalService.openModalViaTemplateAndGetHandle(incentiveModalTemplate, _this);
	            _this.onCloseIncentivesModal = function () {
	                modalInstance.close();
	                _this.isOpeningIncentiveModal = false;
	            };
	        });
	    };
	    InStockVehicleOfInterestCardController.prototype.loadPermissions = function () {
	        var _this = this;
	        this.permissionService.getPermission("VehicleIncentives")
	            .then(function (permission) {
	            _this.incentivePermission = permission;
	        });
	        this.permissionService.getPermission("Localization-SouthwestPacific")
	            .then(function (permission) {
	            _this.localizationSouthwestPacificPermission = permission;
	            _this.deliveryDateFacade.disableEdit = !permission || !permission.view;
	        });
	    };
	    InStockVehicleOfInterestCardController.prototype.onDeliveryDateInlineEditSave = function () {
	        return function (facade) { };
	    };
	    InStockVehicleOfInterestCardController.prototype.initializeDeliveryDateFacade = function () {
	        var title = this.$translate.instant("crm.salesOpportunity.vehicleOfInterest.DELIVERY_DATE");
	        var model = {
	            deliveryDate: this.vehicleOfInterest.deliveryDate
	        };
	        var fields = [
	            {
	                fieldName: "deliveryDate",
	                type: "text",
	                placeholder: title
	            }
	        ];
	        this.deliveryDateFacade = this.inlineEditFacadeFactory.createGeneralFacade(title, model, fields, this.onDeliveryDateInlineEditSave, true);
	    };
	    InStockVehicleOfInterestCardController._defaultVehicleImageUrl = "https://i.imgur.com/xny7HIb.png";
	    InStockVehicleOfInterestCardController.$inject = [
	        "$translate",
	        "eventManagerService",
	        "CrmConstants",
	        "salesOpportunityService",
	        "InventorySerializer",
	        "IncentiveService",
	        "modalService",
	        "permissionService",
	        "InlineEditFacadeFactory"
	    ];
	    return InStockVehicleOfInterestCardController;
	}());
	exports.InStockVehicleOfInterestCardController = InStockVehicleOfInterestCardController;


/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var notInStockVehicleOfInterestInlineEditModule = __webpack_require__(514);
	var notInStockVehicleOfInterestCardComponent_1 = __webpack_require__(517);
	module.exports = angular.module("crm.vehicleOfInterest.card.notInStock", [notInStockVehicleOfInterestInlineEditModule.name])
	    .component(notInStockVehicleOfInterestCardComponent_1.NotInStockVehicleOfInterestCardComponent.componentName, new notInStockVehicleOfInterestCardComponent_1.NotInStockVehicleOfInterestCardComponent());


/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var notInStockVehicleOfInterestInlineEditComponent_1 = __webpack_require__(515);
	module.exports = angular.module("crm.vehicleOfInterest.card.notInStock.inlineEdit", [])
	    .component(notInStockVehicleOfInterestInlineEditComponent_1.NotInStockVehicleOfInterestInlineEditComponent.componentName, new notInStockVehicleOfInterestInlineEditComponent_1.NotInStockVehicleOfInterestInlineEditComponent());


/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var notInStockVehicleOfInterestInlineEditController_1 = __webpack_require__(516);
	var NotInStockVehicleOfInterestInlineEditComponent = (function () {
	    function NotInStockVehicleOfInterestInlineEditComponent() {
	        this.bindings = {
	            key: "@",
	            vehicleOfInterest: "=",
	            field: "@",
	            hasValue: "&?"
	        };
	        this.controller = notInStockVehicleOfInterestInlineEditController_1.NotInStockVehicleOfInterestInlineEditController;
	        this.controllerAs = "ctrl";
	        this.templateUrl = "app/vehicleOfInterest/card/notInStock/inlineEdit/notInStockVehicleOfInterestInlineEditTemplate.html";
	        this.transclude = true;
	    }
	    NotInStockVehicleOfInterestInlineEditComponent.componentName = "crmNotInStockVehicleOfInterestInlineEdit";
	    return NotInStockVehicleOfInterestInlineEditComponent;
	}());
	exports.NotInStockVehicleOfInterestInlineEditComponent = NotInStockVehicleOfInterestInlineEditComponent;


/***/ },
/* 516 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var NotInStockVehicleOfInterestInlineEditController = (function () {
	    function NotInStockVehicleOfInterestInlineEditController(eventManagerService, CrmConstants) {
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	    }
	    NotInStockVehicleOfInterestInlineEditController.prototype.isFieldShown = function () {
	        return (this.hasValue && this.hasValue()) || this.vehicleOfInterest[this.field];
	    };
	    NotInStockVehicleOfInterestInlineEditController.prototype.showModal = function () {
	        this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.VEHICLE_OF_INTEREST.SHOW_MANUAL_ENTRY_MODAL, this.vehicleOfInterest);
	    };
	    NotInStockVehicleOfInterestInlineEditController.$inject = [
	        "eventManagerService",
	        "CrmConstants"
	    ];
	    return NotInStockVehicleOfInterestInlineEditController;
	}());
	exports.NotInStockVehicleOfInterestInlineEditController = NotInStockVehicleOfInterestInlineEditController;


/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var notInStockVehicleOfInterestCardController_1 = __webpack_require__(518);
	var NotInStockVehicleOfInterestCardComponent = (function () {
	    function NotInStockVehicleOfInterestCardComponent() {
	        this.bindings = {
	            vehicleOfInterest: "="
	        };
	        this.controller = notInStockVehicleOfInterestCardController_1.NotInStockVehicleOfInterestCardController;
	        this.controllerAs = "ctrl";
	        this.templateUrl = "app/vehicleOfInterest/card/notInStock/notInStockVehicleOfInterestCardTemplate.html";
	    }
	    NotInStockVehicleOfInterestCardComponent.componentName = "crmNotInStockVehicleOfInterestCard";
	    return NotInStockVehicleOfInterestCardComponent;
	}());
	exports.NotInStockVehicleOfInterestCardComponent = NotInStockVehicleOfInterestCardComponent;


/***/ },
/* 518 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var NotInStockVehicleOfInterestCardController = (function () {
	    function NotInStockVehicleOfInterestCardController($translate, permissionService) {
	        var _this = this;
	        this.$translate = $translate;
	        permissionService.getPermission("Localization-SouthwestPacific")
	            .then(function (permission) {
	            _this.localizationSouthwestPacificPermission = permission;
	        });
	    }
	    NotInStockVehicleOfInterestCardController.prototype.getVehicleTitle = function () {
	        if (this.vehicleOfInterest) {
	            return this.vehicleOfInterest.year + " " +
	                this.vehicleOfInterest.make + " " +
	                this.vehicleOfInterest.model + " ";
	        }
	        else {
	            return "";
	        }
	    };
	    NotInStockVehicleOfInterestCardController.prototype.getVehicleImage = function () {
	        if (this.vehicleOfInterest &&
	            this.vehicleOfInterest.imageUrls &&
	            this.vehicleOfInterest.imageUrls[0]) {
	            return this.vehicleOfInterest.imageUrls[0];
	        }
	        return NotInStockVehicleOfInterestCardController._defaultVehicleImageUrl;
	    };
	    NotInStockVehicleOfInterestCardController.prototype.isFuelEconomyEmpty = function () {
	        return (!this.vehicleOfInterest.cityFuelEfficiency ||
	            !this.vehicleOfInterest.cityFuelEfficiency.value) &&
	            (!this.vehicleOfInterest.hwyFuelEfficiency ||
	                !this.vehicleOfInterest.hwyFuelEfficiency.value);
	    };
	    NotInStockVehicleOfInterestCardController.prototype.getVehicleCondition = function () {
	        switch (this.vehicleOfInterest.condition) {
	            case "N":
	                return this.$translate.instant("crm.salesOpportunity.vehicleOfInterest.NEW");
	            case "U":
	                return this.$translate.instant("crm.salesOpportunity.vehicleOfInterest.USED");
	            case "C":
	                return this.$translate.instant("crm.salesOpportunity.vehicleOfInterest.CERTIFIED_USED");
	            default:
	                return this.vehicleOfInterest.condition;
	        }
	    };
	    NotInStockVehicleOfInterestCardController._defaultVehicleImageUrl = "https://i.imgur.com/xny7HIb.png";
	    NotInStockVehicleOfInterestCardController.$inject = [
	        "$translate",
	        "permissionService"
	    ];
	    return NotInStockVehicleOfInterestCardController;
	}());
	exports.NotInStockVehicleOfInterestCardController = NotInStockVehicleOfInterestCardController;


/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var manualEntryVehicleOfInterestDropdownModule = __webpack_require__(520);
	var manualEntryVehicleOfInterestComponent_1 = __webpack_require__(523);
	module.exports = angular.module("crm.vehicleOfInterest.manualEntry", [
	    manualEntryVehicleOfInterestDropdownModule.name
	])
	    .component(manualEntryVehicleOfInterestComponent_1.ManualEntryVehicleOfInterestComponent.componentName, new manualEntryVehicleOfInterestComponent_1.ManualEntryVehicleOfInterestComponent());


/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var manualEntryVehicleOfInterestDropdownComponent_1 = __webpack_require__(521);
	module.exports = angular.module("crm.vehicleOfInterest.manualEntry.dropdown", [])
	    .component(manualEntryVehicleOfInterestDropdownComponent_1.ManualEntryVehicleOfInterestDropdownComponent.componentName, new manualEntryVehicleOfInterestDropdownComponent_1.ManualEntryVehicleOfInterestDropdownComponent());


/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var manualEntryVehicleOfInterestDropdownController_1 = __webpack_require__(522);
	var ManualEntryVehicleOfInterestDropdownComponent = (function () {
	    function ManualEntryVehicleOfInterestDropdownComponent() {
	        this.templateUrl = "app/vehicleOfInterest/manualEntry/dropdown/manualEntryVehicleOfInterestDropdownTemplate.html";
	        this.bindings = {
	            labelKey: "@",
	            model: "=",
	            field: "@",
	            values: "=",
	            isFieldValid: "&",
	            onChange: "&"
	        };
	        this.controller = manualEntryVehicleOfInterestDropdownController_1.ManualEntryVehicleOfInterestDropdownController;
	        this.controllerAs = "ctrl";
	    }
	    ManualEntryVehicleOfInterestDropdownComponent.componentName = "crmManualEntryVehicleOfInterestDropdown";
	    return ManualEntryVehicleOfInterestDropdownComponent;
	}());
	exports.ManualEntryVehicleOfInterestDropdownComponent = ManualEntryVehicleOfInterestDropdownComponent;


/***/ },
/* 522 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var ManualEntryVehicleOfInterestDropdownController = (function () {
	    function ManualEntryVehicleOfInterestDropdownController($scope) {
	        var _this = this;
	        var unwatch = $scope.$watch("ctrl.values", function (newValue) {
	            if (newValue) {
	                if (_this.isSingleValue()) {
	                    _this.model[_this.field] = _this.values[0];
	                }
	            }
	        });
	        $scope.$on("$destroy", function () {
	            unwatch();
	        });
	    }
	    ManualEntryVehicleOfInterestDropdownController.prototype.isSingleValue = function () {
	        return this.values && this.values.length && this.values.length == 1;
	    };
	    ManualEntryVehicleOfInterestDropdownController.prototype.change = function () {
	        if (this.onChange) {
	            this.onChange();
	        }
	    };
	    ManualEntryVehicleOfInterestDropdownController.$inject = [
	        "$scope"
	    ];
	    return ManualEntryVehicleOfInterestDropdownController;
	}());
	exports.ManualEntryVehicleOfInterestDropdownController = ManualEntryVehicleOfInterestDropdownController;


/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var manualEntryVehicleOfInterestController_1 = __webpack_require__(524);
	var ManualEntryVehicleOfInterestComponent = (function () {
	    function ManualEntryVehicleOfInterestComponent() {
	        this.templateUrl = "app/vehicleOfInterest/manualEntry/manualEntryVehicleOfInterestTemplate.html";
	        this.bindings = {
	            vehicleOfInterest: "=",
	            onSave: "&",
	            onCancel: "&"
	        };
	        this.controller = manualEntryVehicleOfInterestController_1.ManualEntryVehicleOfInterestController;
	        this.controllerAs = "ctrl";
	    }
	    ManualEntryVehicleOfInterestComponent.componentName = "crmManualEntryVehicleOfInterest";
	    return ManualEntryVehicleOfInterestComponent;
	}());
	exports.ManualEntryVehicleOfInterestComponent = ManualEntryVehicleOfInterestComponent;


/***/ },
/* 524 */
/***/ function(module, exports) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	/*
	* TODO
	* There is a lot of commented code on this pull request. The reason why is because we are temporarily
	* ignoring auto complete with ChromeDB data, allowing the user to type truly free text. The ChromeDB
	* data that is commented out was being used to populate dropdown inputs and will be used in the near
	* future to implement auto complete functionality in the free text inputs.
	*/
	var ManualEntryVehicleOfInterestController = (function () {
	    function ManualEntryVehicleOfInterestController($q, $translate, chromeService, vehicleOfInterestApiService) {
	        /*this.loadFilterSet();
	        this.initializeConditions();*/
	        var _this = this;
	        this.$q = $q;
	        this.$translate = $translate;
	        this.chromeService = chromeService;
	        this.vehicleOfInterestApiService = vehicleOfInterestApiService;
	        this.primaryFields = [
	            "years",
	            "makes",
	            "models",
	            "trims"
	        ];
	        this.secondaryFields = [
	            "exterior",
	            "interior",
	            "engineSize",
	            "driveTrain",
	            "fuelEconomyCity",
	            "fuelEconomyHighway",
	            "fuelType",
	            "transmission"
	        ];
	        this.vehicleOfInterestApiService.getBodyStyleRefDefs()
	            .then(function (bodyStyles) {
	            _this.bodyStyles = bodyStyles;
	        });
	    }
	    /*public yearChanged() {
	        var primaryFieldsToUpdate = !!this.vehicleOfInterest.make ?
	            this.primaryFields.slice(2) :
	            this.primaryFields.slice(1);
	        this.primaryFieldChanged(primaryFieldsToUpdate);
	    }

	    public primaryFieldChanged(primaryFieldsToUpdate:string[]) {
	        this.isLoading = true;
	        this.clearDependentFields(primaryFieldsToUpdate);
	        this.updateFilterSet(primaryFieldsToUpdate)
	            .finally(() => {
	                this.isLoading = false;
	            });
	    }*/
	    ManualEntryVehicleOfInterestController.prototype.isFormValid = function () {
	        return this.submitted && (!!this.vehicleOfInterest.year || !!this.vehicleOfInterest.make);
	    };
	    ManualEntryVehicleOfInterestController.prototype.save = function () {
	        this.submitted = true;
	        if (this.isFormValid()) {
	            this.onSave();
	            this.closeModal();
	        }
	    };
	    ManualEntryVehicleOfInterestController.prototype.closeModal = function () {
	        this.onCancel();
	    };
	    ManualEntryVehicleOfInterestController.$inject = [
	        "$q",
	        "$translate",
	        "ChromeService",
	        "SalesOpportunityVehicleOfInterestApiService"
	    ];
	    return ManualEntryVehicleOfInterestController;
	}());
	exports.ManualEntryVehicleOfInterestController = ManualEntryVehicleOfInterestController;


/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var employeeDashboardSplitPaneDirective = __webpack_require__(526);
	var employeeDashboardViewsModule = __webpack_require__(528);
	var todoIconModule = __webpack_require__(537);
	var taskCardModule = __webpack_require__(540);
	var FilterManagerModule = __webpack_require__(547);
	var MultiSelectModule = __webpack_require__(550);
	var ReportOptionsModule = __webpack_require__(554);
	module.exports = angular.module("crm.dashboard", [
	    todoIconModule.name,
	    taskCardModule.name,
	    FilterManagerModule.name,
	    MultiSelectModule.name,
	    employeeDashboardViewsModule.name,
	    ReportOptionsModule.name
	]).directive(employeeDashboardSplitPaneDirective.directiveName, employeeDashboardSplitPaneDirective);


/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var employeeDashboardSplitPaneController = __webpack_require__(527);
	var employeeDashboardSplitPaneDirective = function () {
	    return {
	        restrict: 'E',
	        controller: employeeDashboardSplitPaneController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/employeeDashboard/employeeDashboardSplitPaneTemplate.html',
	        scope: {}
	    };
	};
	employeeDashboardSplitPaneDirective.directiveName = "crmEmployeeDashboardSplitPane";
	module.exports = employeeDashboardSplitPaneDirective;


/***/ },
/* 527 */
/***/ function(module, exports) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var EmployeeDashboardController = (function () {
	    function EmployeeDashboardController($scope, $element, $state, $translate, EmployeeDashboardService) {
	        this.$scope = $scope;
	        this.$element = $element;
	        this.$state = $state;
	        this.$translate = $translate;
	        this.EmployeeDashboardService = EmployeeDashboardService;
	        this.transitionInProgress = false;
	        this._expanded = false;
	        var self = this;
	        if (self.$state.is('employee')) {
	            $state.go('employee.list.expanded.tab', { todoType: self._selectedTab });
	        }
	        self.loading = true;
	        var todoId = $state.params['activityId'] || $state.params['opportunityId'];
	        this.EmployeeDashboardService.setStates($state.params['todoType'], todoId, $state.params['filterId'])
	            .then(function () {
	            self._selectedTab = self.EmployeeDashboardService.getSelectedTab();
	            if (self.$state.is('employee')) {
	                $state.go('employee.list.expanded.tab', { todoType: self._selectedTab });
	            }
	            self.loading = false;
	        });
	        var unregister = $scope.$on('$stateChangeSuccess', function (e, toState) {
	            if (toState.name === 'employee') {
	                self._selectedTab = self.EmployeeDashboardService.getSelectedTab();
	                self.$state.go('employee.list.expanded.tab', { todoType: self._selectedTab });
	            }
	        });
	        $element.on('transitionend', 'section.ws-master-list', function (event) {
	            self.transitionInProgress = false;
	            setTimeout(function () {
	                self.$scope.$digest();
	            }, 100);
	        });
	        $scope.$on('$destroy', function () {
	            unregister();
	        });
	    }
	    EmployeeDashboardController.prototype.getHeaderButtons = function () {
	        var _this = this;
	        var oppsText = this.$translate.instant('crm.employeeDashboard.OPPS');
	        var tasksText = this.$translate.instant('crm.employeeDashboard.TASKS');
	        return {
	            activeIndex: this.EmployeeDashboardService.getSelectedTab() === 'opportunities' ? 0 : 1,
	            buttons: [
	                {
	                    text: oppsText,
	                    onClick: function () {
	                        _this.EmployeeDashboardService.setSelectedTab('opportunities').then(function () {
	                            var selectedTodoId = _this.EmployeeDashboardService.getSelectedTodoId();
	                            _this.$state.go('employee.list.detail', { todoType: 'opportunities', todoId: selectedTodoId });
	                        });
	                    }
	                },
	                {
	                    text: tasksText,
	                    onClick: function () {
	                        _this.EmployeeDashboardService.setSelectedTab('tasks').then(function () {
	                            var selectedTodoId = _this.EmployeeDashboardService.getSelectedTodoId();
	                            _this.$state.go('employee.list.detail', { todoType: 'tasks', todoId: selectedTodoId });
	                        });
	                    }
	                }
	            ]
	        };
	    };
	    Object.defineProperty(EmployeeDashboardController.prototype, "listTitle", {
	        get: function () {
	            var tabname = this.EmployeeDashboardService.getSelectedTab();
	            if (tabname === 'opportunities') {
	                return 'crm.leftNav.TASKS_MY_OPPORTUNITIES';
	            }
	            return 'crm.leftNav.TASKS_MY_TASKS';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(EmployeeDashboardController.prototype, "isExpanded", {
	        get: function () {
	            // Back button transitions states, so this keeps back button from breaking the ui.
	            this._expanded = this.$state.is('employee.list.expanded.tab');
	            return this._expanded;
	        },
	        set: function (value) {
	            var self = this;
	            if (value !== self._expanded) {
	                if (value) {
	                    self.$state.go('employee.list.expanded.tab');
	                }
	                else {
	                    self.$state.go('employee.list');
	                }
	                self._expanded = value;
	            }
	            self.transitionInProgress = true;
	            setTimeout(function () {
	                self.transitionInProgress = false;
	            }, 3000);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    ;
	    EmployeeDashboardController.$inject = [
	        '$scope',
	        '$element',
	        '$state',
	        '$translate',
	        'EmployeeDashboardService'
	    ];
	    return EmployeeDashboardController;
	}());
	module.exports = EmployeeDashboardController;


/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	// import directives
	var employeeDashboardDetailsDirective = __webpack_require__(529);
	var employeeDashboardTodoListDirective = __webpack_require__(531);
	var employeeDashboardTabsDirective = __webpack_require__(533);
	var employeeDashboardTabsListDirective = __webpack_require__(535);
	var employeeDashboardListNoContentDirective = __webpack_require__(536);
	module.exports = angular.module("crm.employee.views", [])
	    .directive(employeeDashboardDetailsDirective.directiveName, employeeDashboardDetailsDirective)
	    .directive(employeeDashboardTodoListDirective.directiveName, employeeDashboardTodoListDirective)
	    .directive(employeeDashboardTabsDirective.directiveName, employeeDashboardTabsDirective)
	    .directive(employeeDashboardTabsListDirective.directiveName, employeeDashboardTabsListDirective)
	    .directive(employeeDashboardListNoContentDirective.directiveName, employeeDashboardListNoContentDirective);


/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var employeeDashboardDetailViewController = __webpack_require__(530);
	var employeeDashboardTabListViewDirective = function () {
	    return {
	        restrict: 'E',
	        controller: employeeDashboardDetailViewController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/employeeDashboard/views/details/template.html',
	    };
	};
	employeeDashboardTabListViewDirective.directiveName = 'crmEmployeeDashboardDetails';
	module.exports = employeeDashboardTabListViewDirective;


/***/ },
/* 530 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var EmployeeDashboardDetailsController = (function () {
	    function EmployeeDashboardDetailsController($stateParams, EmployeeDashboardService) {
	        var _this = this;
	        this.isLoading = true;
	        var todoId = $stateParams['activityId'] || $stateParams['opportunityId'];
	        EmployeeDashboardService.setStates($stateParams['todoType'], todoId, $stateParams['filterId'])
	            .then(function () {
	            _this.initializeView(EmployeeDashboardService);
	            _this.isLoading = false;
	        });
	    }
	    EmployeeDashboardDetailsController.prototype.initializeView = function (EmployeeDashboardService) {
	        var selectedTodoOptions = EmployeeDashboardService.getSelectedTodoOptions();
	        if (selectedTodoOptions) {
	            this.opportunityType = selectedTodoOptions.opportunityType;
	            this.opportunityOptions = {
	                contactId: selectedTodoOptions.contactId,
	                opportunityId: selectedTodoOptions.opportunityId,
	                dealershipId: selectedTodoOptions.dealershipId
	            };
	        }
	        else {
	            this.selectedTab = EmployeeDashboardService.getSelectedTab();
	            this.opportunityType = "none";
	        }
	    };
	    EmployeeDashboardDetailsController.$inject = [
	        '$stateParams',
	        'EmployeeDashboardService'
	    ];
	    return EmployeeDashboardDetailsController;
	}());
	module.exports = EmployeeDashboardDetailsController;


/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var employeeDashboardListViewController = __webpack_require__(532);
	var employeeDashboardListViewDirective = function () {
	    return {
	        restrict: 'E',
	        controller: employeeDashboardListViewController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/employeeDashboard/views/list/side-bar-list/template.html',
	    };
	};
	employeeDashboardListViewDirective.directiveName = 'crmEmployeeDashboardTodoList';
	module.exports = employeeDashboardListViewDirective;


/***/ },
/* 532 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var EmployeeDashboardListViewController = (function () {
	    function EmployeeDashboardListViewController($scope, $window, $filter, $state, EmployeeDashboardService, TaskFilterService, CrmConstants, EventManagerService) {
	        var _this = this;
	        this.$state = $state;
	        this.EmployeeDashboardService = EmployeeDashboardService;
	        this.TaskFilterService = TaskFilterService;
	        this.CrmConstants = CrmConstants;
	        this.EventManagerService = EventManagerService;
	        this.listStyle = {};
	        this.showsCompactFilters = false;
	        this.searchModelOptions = {
	            debounce: 300
	        };
	        this.todoTaskCardOptions = {
	            onDelete: function (todo) {
	                var self = _this;
	                self.EmployeeDashboardService.deleteTask(todo).then(function () {
	                    self.reloadTodos();
	                });
	            },
	            onSelect: function (todo) {
	                var self = _this;
	                self.selectTodo(todo);
	            },
	            refreshTodos: function () {
	                return _this.refreshTodos();
	            }
	        };
	        // TODO: There should be a better css solution to this.
	        this.defaultVerticalOffset = 200;
	        this.loading = true;
	        this.orderByFilter = $filter("orderBy");
	        this._searchText = '';
	        this.sortOrderOptions = this.EmployeeDashboardService.sortOrderOptions;
	        var todoId = $state.params['activityId'] || $state.params['opportunityId'];
	        this.EmployeeDashboardService.setStates(this.$state.params['todoType'], todoId, this.$state.params['filterId'])
	            .then(function () {
	            _this.refreshTodos().then(function () {
	                _this.EmployeeDashboardService.refreshSelectedTodo();
	                _this.selectedTodoId = _this.EmployeeDashboardService.getSelectedTodoId();
	                if ($state.is('employee.list')) {
	                    _this.updateSelected();
	                }
	                _this.loading = false;
	            });
	            _this.sortOrder = _this.EmployeeDashboardService.sortOrder;
	            _this.loadFilters();
	        });
	        this.setupWindowResizeListener($scope, $window);
	    }
	    Object.defineProperty(EmployeeDashboardListViewController.prototype, "searchText", {
	        // Properties
	        get: function () {
	            return this._searchText;
	        },
	        set: function (value) {
	            if (value !== this._searchText) {
	                this._searchText = value;
	                this.reloadTodos();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    EmployeeDashboardListViewController.prototype.setSortOrder = function (sortOrderOption) {
	        this.EmployeeDashboardService.sortOrder = sortOrderOption;
	        this.sortOrder = sortOrderOption;
	        this.reloadTodos();
	    };
	    // Member Methods
	    EmployeeDashboardListViewController.prototype.toggleCompactFilters = function () {
	        this.showsCompactFilters = !this.showsCompactFilters;
	    };
	    EmployeeDashboardListViewController.prototype.selectFranchise = function () {
	        var self = this;
	        self.loading = true;
	        self.EmployeeDashboardService
	            .setSelectedFranchise(self.selectedFranchise)
	            .then(function () {
	            self.loadFilters();
	            self.reloadTodos();
	            self.updateSelected();
	            self.loading = false;
	        });
	    };
	    EmployeeDashboardListViewController.prototype.selectCategoryFilter = function () {
	        var self = this;
	        self.loading = true;
	        self.EmployeeDashboardService
	            .setSelectedCategoryFilter(self.selectedCategoryFilter)
	            .then(function () {
	            self.reloadTodos();
	            self.updateSelected();
	            self.loading = false;
	        });
	    };
	    EmployeeDashboardListViewController.prototype.selectAssignedTo = function () {
	        var self = this;
	        self.loading = true;
	        self.EmployeeDashboardService
	            .setSelectedEmployee(self.selectedAssignedTo)
	            .then(function () {
	            self.reloadTodos();
	            self.updateSelected();
	            self.loading = false;
	        });
	    };
	    EmployeeDashboardListViewController.prototype.getListStyle = function (offset) {
	        var self = this;
	        var offset = offset || self.defaultVerticalOffset;
	        self.listStyle = {
	            height: (window.innerHeight - offset) + 'px'
	        };
	        return self.listStyle;
	    };
	    // END TODO...
	    EmployeeDashboardListViewController.prototype.selectTodo = function (item) {
	        this.EmployeeDashboardService.setSelectedTodo(item);
	        this.updateSelected(false);
	    };
	    EmployeeDashboardListViewController.prototype.isSelectedTodoTaskCardClass = function (item) {
	        return (this.isSelectedTodo(item)) ? 'active' : '';
	    };
	    // Private member functions
	    EmployeeDashboardListViewController.prototype.isSelectedTodo = function (item) {
	        return (item.activityId === this.selectedTodoId || item.salesOpportunityId === this.selectedTodoId);
	    };
	    EmployeeDashboardListViewController.prototype.setupWindowResizeListener = function ($scope, $window) {
	        var onResize = function () {
	            $scope.$apply();
	        };
	        $window.removeEventListener('resize', onResize);
	        $window.addEventListener('resize', onResize);
	        $scope.$on('$destroy', function () {
	            $window.removeEventListener('resize', onResize);
	        });
	    };
	    EmployeeDashboardListViewController.prototype.loadFilters = function () {
	        this.filters = this.EmployeeDashboardService.getFilters();
	        this.selectedFranchise = this.EmployeeDashboardService.getSelectedFranchise();
	        this.selectedCategoryFilter = this.EmployeeDashboardService.getSelectedCategoryFilter();
	        this.selectedAssignedTo = this.EmployeeDashboardService.getSelectedEmployee();
	    };
	    EmployeeDashboardListViewController.prototype.updateSelected = function (checkIfTabState) {
	        if (checkIfTabState === void 0) { checkIfTabState = true; }
	        var todoOptions;
	        var params = {};
	        this.selectedTodoId = this.EmployeeDashboardService.getSelectedTodoId();
	        if (!checkIfTabState || !this.$state.is('employee.list.expanded.tab')) {
	            todoOptions = this.EmployeeDashboardService.getSelectedTodoOptions();
	            if (todoOptions.opportunityId !== this.selectedTodoId) {
	                params['activityId'] = this.selectedTodoId;
	            }
	            if (+this.$state.params['opportunityId'] !== todoOptions.opportunityId) {
	                params['opportunityId'] = todoOptions.opportunityId;
	            }
	            if (this.$state.params['opportunityType'] !== todoOptions.opportunityType) {
	                params['opportunityType'] = todoOptions.opportunityType;
	            }
	            this.$state.go('employee.list.detail', params);
	        }
	    };
	    EmployeeDashboardListViewController.prototype.reloadTodos = function () {
	        var _this = this;
	        var todosList = this.orderByFilter(this.EmployeeDashboardService.getTodos(), this.sortOrder.value);
	        if (this._searchText === '') {
	            this.todos = todosList;
	        }
	        else {
	            this.todos = todosList.filter(function (todo) {
	                return _this.TaskFilterService.matchesSearchText(_this._searchText, todo);
	            });
	        }
	    };
	    EmployeeDashboardListViewController.prototype.refreshTodos = function () {
	        var self = this;
	        this.EmployeeDashboardService.clearCache();
	        this.loading = true;
	        return this.EmployeeDashboardService.retrieveTodos().then(function () {
	            self.loading = false;
	            self.reloadTodos();
	        });
	    };
	    EmployeeDashboardListViewController.$inject = [
	        '$scope',
	        '$window',
	        '$filter',
	        '$state',
	        'EmployeeDashboardService',
	        'TaskFilterService',
	        'CrmConstants',
	        'eventManagerService'
	    ];
	    return EmployeeDashboardListViewController;
	}());
	module.exports = EmployeeDashboardListViewController;


/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var employeeDashboardTabViewController = __webpack_require__(534);
	var employeeDashboardTabViewDirective = function () {
	    return {
	        restrict: 'E',
	        controller: employeeDashboardTabViewController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/employeeDashboard/views/tabs/template.html',
	    };
	};
	employeeDashboardTabViewDirective.directiveName = 'crmEmployeeDashboardTabs';
	module.exports = employeeDashboardTabViewDirective;


/***/ },
/* 534 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var MODAL_TEMPLATE_URL = 'app/employeeDashboard/filterManager/filterManagerModalTemplate.html';
	var REPORTS_MODAL_TEMPLATE_URL = 'app/employeeDashboard/reports/reportsModalTemplate.html';
	var EmployeeDashboardTabsViewController = (function () {
	    function EmployeeDashboardTabsViewController($q, $state, EmployeeDashboardService, modalService) {
	        this.$q = $q;
	        this.$state = $state;
	        this.EmployeeDashboardService = EmployeeDashboardService;
	        this.modalService = modalService;
	        this.activeIndex = 0;
	        var activeTab = $state.params['todoType'] || EmployeeDashboardService.getSelectedTab();
	        var self = this;
	        self.loading = true;
	        self.activeIndex = activeTab === 'opportunities' ? 0 : 1;
	        EmployeeDashboardService.setSelectedTab(activeTab).then(function () {
	            self.loading = false;
	        });
	    }
	    // Note: this is bound to an ng-click on the tab instead of the uibTab `select` callback to prevent circular loads
	    EmployeeDashboardTabsViewController.prototype.setCurrentlyActiveTab = function (todoType) {
	        // Values can only be opportunities or tasks
	        var self = this;
	        if (todoType !== "opportunities" && todoType !== "tasks") {
	            todoType = "opportunities";
	        }
	        self.activeIndex = todoType === 'opportunities' ? 0 : 1;
	        this.loading = true;
	        this.EmployeeDashboardService.setSelectedTab(todoType).then(function () {
	            self.$state.go('employee.list.expanded.tab', { todoType: todoType });
	            self.loading = false;
	        });
	    };
	    EmployeeDashboardTabsViewController.prototype.openFilterManager = function () {
	        var self = this;
	        self.filterManagerOptions = {
	            onClose: function () {
	                self.filterManagerModal.cancel();
	            }
	        };
	        self.filterManagerModal = self.modalService.openModalViaTemplateUrl(MODAL_TEMPLATE_URL, self, true);
	    };
	    EmployeeDashboardTabsViewController.prototype.openReportOptions = function () {
	        this.reportOptionsModal = this.modalService.openModalViaTemplateUrl(REPORTS_MODAL_TEMPLATE_URL, this, true);
	    };
	    EmployeeDashboardTabsViewController.$inject = [
	        '$q',
	        '$state',
	        'EmployeeDashboardService',
	        'modalService'
	    ];
	    return EmployeeDashboardTabsViewController;
	}());
	module.exports = EmployeeDashboardTabsViewController;


/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var employeeDashboardListViewController = __webpack_require__(532);
	var employeeDashboardTabListViewDirective = function () {
	    return {
	        restrict: 'E',
	        controller: employeeDashboardListViewController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/employeeDashboard/views/list/tab-list/template.html',
	    };
	};
	employeeDashboardTabListViewDirective.directiveName = 'crmEmployeeDashboardTabsList';
	module.exports = employeeDashboardTabListViewDirective;


/***/ },
/* 536 */
/***/ function(module, exports) {

	///<reference path="../../../../../typings/index.d.ts"/>
	"use strict";
	var employeeDashboardListViewNoContentDirective = function () {
	    return {
	        restrict: 'E',
	        templateUrl: function (element, attrs) {
	            var templateType;
	            if (attrs.todoType === 'opportunities') {
	                templateType = 'noOpportunitiesMessage';
	            }
	            else {
	                templateType = 'noTasksMessage';
	            }
	            return 'app/employeeDashboard/views/list/no-content/' + templateType + 'Template.html';
	        }
	    };
	};
	employeeDashboardListViewNoContentDirective.directiveName = 'crmEmployeeDashboardNoTodos';
	module.exports = employeeDashboardListViewNoContentDirective;


/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var todoIconDirective = __webpack_require__(538);
	var todoIconController = __webpack_require__(539);
	module.exports = angular.module("crm.todoIcon", [])
	    .directive(todoIconDirective.directiveName, todoIconDirective)
	    .controller("TodoIconController", todoIconController);


/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var TodoIconController = __webpack_require__(539);
	var TodoIconDirective = function () {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            todo: '=',
	            mainBadgeStatus: '=',
	            cornerBadgeStatus: '=',
	            isExpanded: '@'
	        },
	        templateUrl: 'app/employeeDashboard/todoIcon/todoIconTemplate.html',
	        controller: TodoIconController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	};
	TodoIconDirective.directiveName = "crmTodoIcon";
	module.exports = TodoIconDirective;


/***/ },
/* 539 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var TodoIconController = (function () {
	    function TodoIconController() {
	        this.mainBadgeClass = 'fa fa-clock-o';
	        this.cornerBadgeClass = 'fa fa-clock-o';
	        this.determineIcon();
	    }
	    Object.defineProperty(TodoIconController.prototype, "todo", {
	        get: function () {
	            return this._todo;
	        },
	        set: function (todo) {
	            this._todo = todo;
	            this.determineIcon();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TodoIconController.prototype.determineIcon = function () {
	        if (this.isOpportunity()) {
	            this.mainBadgeClass = this.getIconClassFromOpportunityType();
	        }
	        else {
	            this.mainBadgeClass = this.getIconClassFromActivityType();
	            this.cornerBadgeClass = this.getIconClassFromOpportunityType();
	        }
	    };
	    TodoIconController.prototype.getIconClassFromOpportunityType = function () {
	        var opportunityType = this.todo.opportunityType;
	        switch (opportunityType) {
	            case 'sales':
	                return 'fa fa-dollar';
	            case 'service':
	                return 'fa fa-wrench';
	            case 'qa':
	                return 'fa fa-thumbs-up';
	            default:
	                return 'fa fa-clock-o';
	        }
	    };
	    TodoIconController.prototype.getIconClassFromActivityType = function () {
	        var activityType = this.todo.activityType.toLowerCase();
	        switch (activityType) {
	            case 'appointment':
	            case 'appt confirm':
	            case 'no appt follow up':
	                return "fa fa-calendar";
	            case 'email':
	            case 'send email':
	            case 'email received':
	                return "fa fa-envelope";
	            case 'call':
	            case 'outbound call':
	            case 'inbound call':
	                return "fa fa-phone";
	            case 'web lead':
	                return "fa fa-user";
	            default:
	                return "fa fa-clock-o";
	        }
	    };
	    TodoIconController.prototype.getIconBadgeSize = function () {
	        return this.isExpanded ? 'lg' : 'md';
	    };
	    TodoIconController.prototype.isOpportunity = function () {
	        return this.todo.todoType === 'opportunity';
	    };
	    TodoIconController.$inject = [];
	    return TodoIconController;
	}());
	module.exports = TodoIconController;


/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var taskCardDirective = __webpack_require__(541);
	var compactTaskCardDirective = __webpack_require__(543);
	var expandedTaskCardDirective = __webpack_require__(544);
	var expandedTaskCardDetailDirective = __webpack_require__(545);
	var expandedOpportunityCardDetailDirective = __webpack_require__(546);
	module.exports = angular.module("crm.tasks.card", [])
	    .directive(taskCardDirective.directiveName, taskCardDirective)
	    .directive(compactTaskCardDirective.directiveName, compactTaskCardDirective)
	    .directive(expandedTaskCardDirective.directiveName, expandedTaskCardDirective)
	    .directive(expandedTaskCardDetailDirective.directiveName, expandedTaskCardDetailDirective)
	    .directive(expandedOpportunityCardDetailDirective.directiveName, expandedOpportunityCardDetailDirective);


/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(542);
	var taskCardDirective = function () {
	    return {
	        restrict: 'E',
	        controller: controller,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/employeeDashboard/taskCard/taskCardTemplate.html',
	        scope: {
	            taskOrOpportunity: '='
	        }
	    };
	};
	taskCardDirective.directiveName = 'crmTaskCard';
	module.exports = taskCardDirective;


/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var moment = __webpack_require__(19);
	var activityEnums_1 = __webpack_require__(412);
	var DATE_TIME_FORMAT = 'M/D/YYYY h:mm A';
	var GOOD_STATUS = 'complete';
	var WARNING_STATUS = 'open';
	var BAD_STATUS = 'overdue';
	var BAD_STATUS_CLASS = 'ws-status-bad';
	var GOOD_STATUS_CLASS = 'ws-status-good';
	var WARNING_STATUS_CLASS = 'ws-status-warning';
	var EVENT_STATUS_LOST = 'lost';
	var EVENT_STATUS_SOLD = 'sold';
	var TaskCardController = (function () {
	    function TaskCardController(DateTimeHelper, TranslationCache, PrintTaskService, $window, activityApiService, $q, IncentiveService, modalService, InventorySerializer, SalesOpportunityVehicleOfInterestApiService, ActivityService, ContactService, permissionService, $state) {
	        var _this = this;
	        this.DateTimeHelper = DateTimeHelper;
	        this.TranslationCache = TranslationCache;
	        this.PrintTaskService = PrintTaskService;
	        this.$window = $window;
	        this.activityApiService = activityApiService;
	        this.$q = $q;
	        this.IncentiveService = IncentiveService;
	        this.modalService = modalService;
	        this.InventorySerializer = InventorySerializer;
	        this.SalesOpportunityVehicleOfInterestApiService = SalesOpportunityVehicleOfInterestApiService;
	        this.ActivityService = ActivityService;
	        this.ContactService = ContactService;
	        this.permissionService = permissionService;
	        this.$state = $state;
	        this.activityActionType = activityEnums_1.ActivityActionType;
	        this.onActivityComplete = function (type) {
	            var stateParams;
	            var stateName;
	            _this.options.refreshTodos();
	            if (type) {
	                stateParams = {
	                    contactId: _this.taskOrOpportunity.contactId,
	                    initialActivityType: type
	                };
	                switch (_this.taskOrOpportunity.opportunityType) {
	                    case 'sales':
	                        stateName = 'sales.view';
	                        stateParams.salesOpportunityId = _this.taskOrOpportunity.salesOpportunityId;
	                        break;
	                    case 'service':
	                        stateName = 'serviceUpdate';
	                        stateParams.serviceId = _this.taskOrOpportunity.salesOpportunityId;
	                        break;
	                    case 'qa':
	                        stateName = 'csiUpdate';
	                        stateParams.csiId = _this.taskOrOpportunity.salesOpportunityId;
	                        break;
	                    default:
	                        stateName = 'error404';
	                        stateParams = {};
	                }
	                _this.$state.go(stateName, stateParams);
	            }
	        };
	        this.permissionService.getPermission('RevenueRadar-AlertDetailsIcon')
	            .then(function (permission) {
	            _this.revRadarPermission = permission;
	        });
	        this.isWaiting = false;
	        // Note: do not put bindable properties in this constructor. As a task card is reordered (and reused) these values
	        // will stay the same and thereby show the wrong information to the user.
	    }
	    Object.defineProperty(TaskCardController.prototype, "age", {
	        get: function () {
	            if (parseInt(this.taskOrOpportunity.age) > 365) {
	                return this.DateTimeHelper.timeAgo(this.DateTimeHelper.now.subtract(this.taskOrOpportunity.age, 'days'));
	            }
	            return this.taskOrOpportunity.age + ' ' + this.TranslationCache.get('crm.employeeDashboard.DAYS_OLD');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TaskCardController.prototype, "lastUpdate", {
	        get: function () {
	            if (parseInt(this.taskOrOpportunity.lastUpdate) > 365) {
	                return this.DateTimeHelper.timeAgo(this.DateTimeHelper.now.subtract(this.taskOrOpportunity.lastUpdate, 'days'));
	            }
	            return this.taskOrOpportunity.lastUpdate + ' ' + this.TranslationCache.get('crm.employeeDashboard.DAYS_AGO');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TaskCardController.prototype, "carFullName", {
	        get: function () {
	            return this.getCarFullName(this.taskOrOpportunity.year, this.taskOrOpportunity.make, this.taskOrOpportunity.model);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TaskCardController.prototype, "editedEventStatus", {
	        get: function () {
	            if (this.taskOrOpportunity.eventStatus[2] == '-') {
	                return this.taskOrOpportunity.eventStatus.substring(4);
	            }
	            return this.taskOrOpportunity.eventStatus;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TaskCardController.prototype, "activityCompleted", {
	        get: function () {
	            if (this.activity && this.activity.activityId.toString() == this.taskOrOpportunity.activityId) {
	                return this.activity.status.value === activityEnums_1.ActivityStatus.completed.toString();
	            }
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TaskCardController.prototype, "isLoggingActivity", {
	        get: function () {
	            return (this.ActivityService.activeActivityDetails.activeId === +this.taskOrOpportunity.activityId);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TaskCardController.prototype, "activityType", {
	        get: function () {
	            if (this.activity && this.activity.type) {
	                return this.activity.type.text;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TaskCardController.prototype, "eventStatusClass", {
	        get: function () {
	            var eventStatus = this.editedEventStatus.toLowerCase();
	            if (eventStatus === EVENT_STATUS_SOLD) {
	                return GOOD_STATUS_CLASS;
	            }
	            else if (eventStatus === EVENT_STATUS_LOST) {
	                return BAD_STATUS_CLASS;
	            }
	            else {
	                return WARNING_STATUS_CLASS;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TaskCardController.prototype, "iconStatusClass", {
	        get: function () {
	            var now = moment();
	            var dueTime = moment(this.taskOrOpportunity.activityDateTime, DATE_TIME_FORMAT);
	            var dayDifference = this.getDayDifference(now, dueTime);
	            if (dayDifference === 0) {
	                return WARNING_STATUS_CLASS;
	            }
	            else if (dayDifference > 0) {
	                return GOOD_STATUS_CLASS;
	            }
	            else {
	                return BAD_STATUS_CLASS;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TaskCardController.prototype.onDelete = function () {
	        var self = this;
	        if (self.options && self.options.onDelete) {
	            self.options.onDelete(self.taskOrOpportunity);
	        }
	    };
	    TaskCardController.prototype.onSelect = function () {
	        var self = this;
	        if (self.options && self.options.onSelect) {
	            self.options.onSelect(self.taskOrOpportunity);
	        }
	    };
	    TaskCardController.prototype.stopEventPropagation = function ($event) {
	        $event.stopPropagation();
	        $event.preventDefault();
	    };
	    TaskCardController.prototype.getIconStatus = function () {
	        if (this.isOpportunity()) {
	            return this.getStatusClassFromEventStatus();
	        }
	        else {
	            var now = moment();
	            var dueTime = moment(this.taskOrOpportunity.activityDateTime, DATE_TIME_FORMAT);
	            var dayDifference = this.getDayDifference(now, dueTime);
	            if (dayDifference === 0) {
	                return WARNING_STATUS;
	            }
	            else if (dayDifference > 0) {
	                return GOOD_STATUS;
	            }
	            else {
	                return BAD_STATUS;
	            }
	        }
	    };
	    TaskCardController.prototype.getDayDifference = function (currentTime, dueTime) {
	        var today = currentTime.startOf('day');
	        var dueDay = dueTime.startOf('day');
	        return dueDay.diff(today);
	    };
	    TaskCardController.prototype.getStatusClassFromEventStatus = function () {
	        var eventStatus = this.taskOrOpportunity.eventStatus.toLowerCase();
	        if (eventStatus === EVENT_STATUS_SOLD) {
	            return GOOD_STATUS;
	        }
	        else if (eventStatus === EVENT_STATUS_LOST) {
	            return BAD_STATUS;
	        }
	        else {
	            return WARNING_STATUS;
	        }
	    };
	    TaskCardController.prototype.getCarFullName = function (year, make, model) {
	        var carName = year;
	        carName += ' ' + make;
	        carName = carName.trim();
	        carName += ' ' + model;
	        return carName.trim();
	    };
	    TaskCardController.prototype.isPastDue = function () {
	        var now = moment();
	        var dueTime = moment(this.taskOrOpportunity.activityDateTime, DATE_TIME_FORMAT);
	        return this.getDayDifference(now, dueTime) < 0;
	    };
	    TaskCardController.prototype.hasNoTasks = function () {
	        return !this.taskOrOpportunity.activityDateTime;
	    };
	    TaskCardController.prototype.getActivityTypeDateTimeText = function () {
	        var text = this.taskOrOpportunity.activityType;
	        if (!this.taskOrOpportunity.activityDateTime) {
	            return text;
	        }
	        if (this.taskOrOpportunity.activityType && this.taskOrOpportunity.activityDateTime) {
	            text += ', ' + this.getDateTimeText();
	        }
	        return text;
	    };
	    TaskCardController.prototype.getDateTimeText = function () {
	        var text = '';
	        var containsTimePortion = (this.taskOrOpportunity.activityDateTime &&
	            this.taskOrOpportunity.activityDateTime.split(' ').length > 1);
	        if (containsTimePortion) {
	            text += moment(new Date(this.taskOrOpportunity.activityDateTime)).format('L, LT');
	        }
	        else {
	            text += moment(new Date(this.taskOrOpportunity.activityDateTime)).format('L');
	            text += ', ' + this.TranslationCache.get('crm.employeeDashboard.EOD');
	        }
	        return text;
	    };
	    TaskCardController.prototype.isOpportunity = function () {
	        return this.taskOrOpportunity.todoType === 'opportunity';
	    };
	    TaskCardController.prototype.openTaskSheetPrintout = function () {
	        var eventId = this.taskOrOpportunity.salesOpportunityId;
	        var activityId = this.taskOrOpportunity.activityId;
	        var entityId = this.taskOrOpportunity.contactId;
	        var taskSheetUrl = this.PrintTaskService.getTaskSheetUrl(eventId, activityId, entityId);
	        var taskSheetWindowOptions = this.PrintTaskService.getTaskSheetWindowOptions();
	        this.$window.open(taskSheetUrl, 'qcal', taskSheetWindowOptions);
	    };
	    TaskCardController.prototype.logActivity = function () {
	        var _this = this;
	        if (!this.isOpportunity()) {
	            this.isWaiting = true;
	            this.ActivityService.cancelActiveActivity()
	                .then(function () {
	                var promises = [];
	                promises.push(_this.ContactService.get({ contactId: _this.taskOrOpportunity.contactId, summaryOnly: true }));
	                promises.push(_this.ActivityService.getActivityForEmployeeDashboard(+_this.taskOrOpportunity.contactId, +_this.taskOrOpportunity.activityId));
	                promises.push(_this.ActivityService.loadRefDefs(+_this.taskOrOpportunity.contactId));
	                return _this.$q.all(promises);
	            }).then(function (results) {
	                var activityActionType;
	                _this.contact = results[0];
	                _this.activity = results[1].activity;
	                _this.campaignSteps = results[1].campaignSteps;
	                _this.contactName = _this.taskOrOpportunity.fullName;
	                activityActionType = _this.ActivityService.getActivityLogStep(+_this.activity.type.value);
	                return _this.ActivityService.setActiveActivity(results[1], activityActionType);
	            }).finally(function () {
	                _this.isWaiting = false;
	            });
	        }
	    };
	    TaskCardController.prototype.showLoggingTaskCard = function (activityActionType) {
	        return (this.isLoggingActivity && (activityActionType === this.ActivityService.activeActivityDetails.activeActionType));
	    };
	    TaskCardController.prototype.isPhoneCall = function () {
	        var activityType = +this.activity.type.value;
	        return activityType === activityEnums_1.ActivityType.outboundCall || activityType === activityEnums_1.ActivityType.inboundCall;
	    };
	    TaskCardController.prototype.isAppointment = function () {
	        return +this.activity.type.value === activityEnums_1.ActivityType.appointment;
	    };
	    TaskCardController.prototype.isOther = function () {
	        return !this.isAppointment() && !this.isPhoneCall();
	    };
	    TaskCardController.prototype.showIncentives = function (event) {
	        var _this = this;
	        event.stopPropagation();
	        if (this.isOpeningIncentiveModal) {
	            return;
	        }
	        this.isOpeningIncentiveModal = true;
	        this.SalesOpportunityVehicleOfInterestApiService.getVehiclesOfInterest(this.taskOrOpportunity.contactId, this.taskOrOpportunity.salesOpportunityId)
	            .then(function (vehiclesOfInterest) {
	            var vehicle = _.find(vehiclesOfInterest, function (vehicleOfInterest) {
	                return vehicleOfInterest.id == _this.taskOrOpportunity.productId;
	            });
	            _this.inventory = _this.InventorySerializer.deserializeVehicleOfInterest(vehicle);
	            return _this.inventory;
	        })
	            .then(function (inventory) {
	            return _this.IncentiveService.getIncentives(parseInt(_this.taskOrOpportunity.chromeStyleId), inventory.condition);
	        })
	            .then(function (incentives) {
	            _this.inventory.incentives = incentives;
	            var awesomeTemplate = '<co-vehicle-incentives inventory="ctrl.inventory" on-close="ctrl.onCloseIncentivesModal()"></co-vehicle-incentives>';
	            var modalInstance = _this.modalService.openModalViaTemplateAndGetHandle(awesomeTemplate, _this);
	            _this.onCloseIncentivesModal = function () {
	                modalInstance.close();
	            };
	            _this.isOpeningIncentiveModal = false;
	        });
	    };
	    TaskCardController.prototype.showPings = function (event) {
	        var _this = this;
	        event.stopPropagation();
	        // TODO: is there a good reason we are hardcoding this instead of creating a file like we have done every other time?
	        var modalWrapperTemplate = '<crm-ping-collection-modal contact-id="ctrl.taskOrOpportunity.contactId" full-name="ctrl.taskOrOpportunity.fullName" on-close="ctrl.onClosePingsModal()"></crm-ping-collection-modal>';
	        var modalInstance = this.modalService.openModalViaTemplateAndGetHandle(modalWrapperTemplate, this);
	        this.onClosePingsModal = function () {
	            modalInstance.close();
	            _this.isOpeningIncentiveModal = false;
	        };
	    };
	    TaskCardController.$inject = [
	        'DateTimeHelper',
	        'TranslationCache',
	        'PrintTaskService',
	        '$window',
	        'ActivityApiService',
	        '$q',
	        'IncentiveService',
	        'modalService',
	        'InventorySerializer',
	        'SalesOpportunityVehicleOfInterestApiService',
	        'ActivityService',
	        'ContactService',
	        'permissionService',
	        '$state'
	    ];
	    return TaskCardController;
	}());
	module.exports = TaskCardController;


/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var controller = __webpack_require__(542);
	var compactTaskCardDirective = function () {
	    return {
	        restrict: "E",
	        controller: controller,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/employeeDashboard/taskCard/compact/compactTaskCardTemplate.html',
	        scope: {
	            taskOrOpportunity: '=',
	            activeTaskOrOpportunity: '='
	        }
	    };
	};
	compactTaskCardDirective.directiveName = 'crmCompactTaskCard';
	module.exports = compactTaskCardDirective;


/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var controller = __webpack_require__(542);
	var expandedTaskCardDirective = function () {
	    return {
	        restrict: "E",
	        controller: controller,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/employeeDashboard/taskCard/expanded/expandedTaskCardTemplate.html',
	        scope: {
	            taskOrOpportunity: '=',
	            options: '='
	        }
	    };
	};
	expandedTaskCardDirective.directiveName = 'crmExpandedTaskCard';
	module.exports = expandedTaskCardDirective;


/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var controller = __webpack_require__(542);
	var expandedTaskCardDetailDirective = function () {
	    return {
	        restrict: "E",
	        controller: controller,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/employeeDashboard/taskCard/expanded/details/expandedTaskCardDetailTemplate.html',
	        scope: {
	            taskOrOpportunity: '=',
	            options: '='
	        }
	    };
	};
	expandedTaskCardDetailDirective.directiveName = 'crmExpandedTaskCardDetail';
	module.exports = expandedTaskCardDetailDirective;


/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var controller = __webpack_require__(542);
	var expandedOpportunityCardDetailDirective = function () {
	    return {
	        restrict: "E",
	        controller: controller,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/employeeDashboard/taskCard/expanded/opportunityDetails/expandedOpportunityCardDetailTemplate.html',
	        scope: {
	            taskOrOpportunity: '=',
	            options: '='
	        }
	    };
	};
	expandedOpportunityCardDetailDirective.directiveName = 'crmExpandedOpportunityCardDetail';
	module.exports = expandedOpportunityCardDetailDirective;


/***/ },
/* 547 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var FilterManagerDirective = __webpack_require__(548);
	module.exports = angular.module("crm.tasks.filterManager", [])
	    .directive("crmFilterManager", FilterManagerDirective);


/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var FilterManagerController = __webpack_require__(549);
	function FilterManagerDirective() {
	    return {
	        restrict: 'E',
	        controller: FilterManagerController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/employeeDashboard/filterManager/template.html',
	        scope: {
	            filterOptions: '='
	        }
	    };
	}
	module.exports = FilterManagerDirective;


/***/ },
/* 549 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var EDIT_RENAME_LABEL = 'crm.employee_dashboard.RENAME_THE_FILTER_EDIT';
	var DUPLICATE_RENAME_LABEL = 'crm.employee_dashboard.RENAME_THE_FILTER_DUPLICATE';
	var FilterManagerAction;
	(function (FilterManagerAction) {
	    FilterManagerAction[FilterManagerAction["Create"] = 0] = "Create";
	    FilterManagerAction[FilterManagerAction["Edit"] = 1] = "Edit";
	    FilterManagerAction[FilterManagerAction["Delete"] = 2] = "Delete";
	    FilterManagerAction[FilterManagerAction["Duplicate"] = 3] = "Duplicate";
	})(FilterManagerAction || (FilterManagerAction = {}));
	var FilterManagerController = (function () {
	    function FilterManagerController(EmployeeDashboardService, FilterManagerService, TranslationCache) {
	        this.EmployeeDashboardService = EmployeeDashboardService;
	        this.FilterManagerService = FilterManagerService;
	        this.TranslationCache = TranslationCache;
	        this.filterManagerActions = FilterManagerAction;
	        this.isLoading = false;
	        this.selectedAction = this.filterManagerActions.Edit.toString();
	        this.onActionSelected(this.selectedAction);
	        this.init();
	        this.selectDefaultFilter();
	    }
	    FilterManagerController.prototype.init = function () {
	        var self = this;
	        self.categoryList = [];
	        var allCategoriesAndFilters = self.EmployeeDashboardService.getAllCategoriesAndFilters();
	        _.mapObject(allCategoriesAndFilters, function (value, key) {
	            var currentCategory = {
	                id: value[0].categoryId,
	                name: key,
	                filters: value
	            };
	            self.categoryList.push(currentCategory);
	        });
	    };
	    FilterManagerController.prototype.selectDefaultFilter = function () {
	        var self = this;
	        var currentFilter = self.EmployeeDashboardService.getSelectedCategoryFilter();
	        self.selectedCategory = _.find(self.categoryList, function (category) {
	            return currentFilter.categoryId === category.id;
	        });
	        if (!self.selectedCategory) {
	            return;
	        }
	        self.selectedFilter = _.find(self.selectedCategory.filters, function (filter) {
	            return filter.id === currentFilter.id;
	        });
	        self.selectFilter();
	    };
	    FilterManagerController.prototype.selectFilter = function () {
	        var self = this;
	        if (!self.selectedFilter) {
	            return;
	        }
	        self.isLoading = true;
	        self.FilterManagerService.getConditionDataForFilter(self.selectedFilter.id).then(function (conditionData) {
	            self.conditionData = conditionData;
	            self.conditionData.sortOrder.selected = _.find(self.conditionData.sortOrder.options, function (option) {
	                return self.conditionData.sortOrder.selected.value === option.value;
	            });
	            self.addedConditions = [];
	            self.conditionData.conditionCollection.forEach(function (conditionValue) {
	                if (self.hasValue(conditionValue)) {
	                    if (conditionValue.conditionType === 'singleSelect') {
	                        conditionValue.selected = _.find(conditionValue.options, function (currentOption) {
	                            return currentOption.value === conditionValue.selected.value;
	                        });
	                    }
	                    self.addedConditions.push({ condition: conditionValue });
	                }
	            });
	            self.isLoading = false;
	        });
	    };
	    FilterManagerController.prototype.resetNewName = function () {
	        this.newFilterName = '';
	    };
	    FilterManagerController.prototype.onActionSelected = function (action) {
	        var self = this;
	        action = parseInt(action);
	        self.resetNewName();
	        // switching from create to something else, reinitialize the dropdowns.
	        if (self.selectedFilter === null && action !== self.filterManagerActions.Create) {
	            self.selectDefaultFilter();
	        }
	        // flag defaults
	        self.showFilters = true;
	        self.renameEnabled = false;
	        self.renameOptional = false;
	        self.changeName = false;
	        self.deleteEnabled = false;
	        switch (action) {
	            case self.filterManagerActions.Create:
	                self.showFilters = false;
	                self.selectedFilter = null;
	                self.addedConditions = [];
	                break;
	            case self.filterManagerActions.Edit:
	                self.renameLabel = self.TranslationCache.get(EDIT_RENAME_LABEL);
	                self.renameEnabled = true;
	                self.renameOptional = true;
	                break;
	            case self.filterManagerActions.Delete:
	                self.deleteEnabled = true;
	                break;
	            case self.filterManagerActions.Duplicate:
	                self.renameLabel = self.TranslationCache.get(DUPLICATE_RENAME_LABEL);
	                self.renameEnabled = true;
	                self.changeName = true;
	                break;
	            default:
	                return;
	        }
	    };
	    FilterManagerController.prototype.addCondition = function () {
	        this.addedConditions.push({ condition: {} });
	    };
	    FilterManagerController.prototype.resetConditionSelection = function (index) {
	        var condition = this.addedConditions[index].condition;
	        var duplicateRule = this.addedConditions.some(function (value, i) {
	            return (i !== index && value.condition.filterKey === condition.filterKey);
	        });
	        if (!duplicateRule) {
	            switch (condition.conditionType) {
	                case 'multiSelect':
	                    condition.selected = [];
	                    break;
	                case 'text':
	                    condition.selected = "";
	                    break;
	                default:
	                    condition.selected = null;
	            }
	        }
	    };
	    FilterManagerController.prototype.changeCondition = function (index) {
	        this.resetConditionSelection(index);
	    };
	    FilterManagerController.prototype.removeCondition = function (index) {
	        this.resetConditionSelection(index);
	        this.addedConditions.splice(index, 1);
	    };
	    FilterManagerController.prototype.hasValue = function (condition) {
	        if (condition.conditionType === 'multiSelect') {
	            return condition.selected.length > 0;
	        }
	        if (condition.conditionType === 'text') {
	            return condition.selected !== '';
	        }
	        return condition.selected && condition.selected.text;
	    };
	    FilterManagerController.prototype.onSubmit = function (form) {
	        var self = this;
	        var savePromise;
	        if (form.$invalid) {
	            return;
	        }
	        self.isLoading = true;
	        //Pack all the conditions we need to save
	        var conditionsWithValue = {
	            userAccess: self.conditionData.userAccess.selected,
	            sortOrder: self.conditionData.sortOrder.selected,
	            opportunityType: self.conditionData.opportunityType.selected
	        };
	        if (self.addedConditions.length > 0) {
	            self.addedConditions.forEach(function (addedCondition) {
	                conditionsWithValue[addedCondition.condition.filterKey] = addedCondition.condition.selected;
	            });
	        }
	        //Default filter settings. Only edit has a different filter.name, which is set by it
	        var filter = {
	            name: self.newFilterName,
	            id: self.selectedFilter ? self.selectedFilter.id : 0,
	            categoryId: self.selectedCategory.id
	        };
	        switch (parseInt(self.selectedAction)) {
	            case self.filterManagerActions.Create:
	                savePromise = self.FilterManagerService.createFilter(conditionsWithValue, filter);
	                break;
	            case self.filterManagerActions.Edit:
	                filter.name = self.changeName ? self.newFilterName : self.selectedFilter.name;
	                savePromise = self.FilterManagerService.updateFilter(conditionsWithValue, filter);
	                break;
	            case self.filterManagerActions.Delete:
	                savePromise = self.FilterManagerService.deleteFilter(filter.id);
	                break;
	            case self.filterManagerActions.Duplicate:
	                // Resets id to 0 to create new filter.
	                filter.id = 0;
	                savePromise = self.FilterManagerService.createFilter(conditionsWithValue, filter);
	                break;
	            default:
	                return;
	        }
	        savePromise.then(function () {
	            return self.EmployeeDashboardService.refreshCategoryFilters();
	        }).then(function () {
	            self.filterOptions.onClose();
	        });
	    };
	    FilterManagerController.$inject = [
	        'EmployeeDashboardService',
	        'FilterManagerService',
	        'TranslationCache'
	    ];
	    return FilterManagerController;
	}());
	module.exports = FilterManagerController;


/***/ },
/* 550 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var MultiSelectDirective = __webpack_require__(551);
	var MultiSelectPaneDirective = __webpack_require__(553);
	module.exports = angular.module("crm.tasks.multiSelect", [])
	    .directive("crmMultiSelect", MultiSelectDirective)
	    .directive("crmMultiSelectPane", MultiSelectPaneDirective);


/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var MultiSelectController = __webpack_require__(552);
	function MultiSelectDirective() {
	    return {
	        restrict: 'EA',
	        controller: MultiSelectController,
	        controllerAs: 'vm',
	        bindToController: true,
	        scope: {
	            options: "=",
	            placeholder: "@",
	            model: "=ngModel"
	        },
	        templateUrl: "app/employeeDashboard/multiSelect/multi-select-template.html",
	        require: ['?ngModel', 'crmMultiSelect'],
	        link: postLink
	    };
	    function postLink(scope, element, attrs, controllers) {
	        var ngModel = controllers[0];
	        if (!ngModel)
	            return;
	        var multiSelectCtrl = controllers[1];
	        ngModel.$isEmpty = function () {
	            return (!angular.isArray(ngModel.$viewValue) || ngModel.$viewValue.length === 0);
	        };
	        ngModel.$render = function () {
	            multiSelectCtrl.setViewValue(ngModel.$viewValue);
	            //update the input's value each time the model updates
	            ngModel.$viewChangeListeners.push(function () {
	                multiSelectCtrl.setViewValue(ngModel.$viewValue);
	            });
	        };
	    }
	}
	module.exports = MultiSelectDirective;


/***/ },
/* 552 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var MultiSelectController = (function () {
	    function MultiSelectController() {
	        var _this = this;
	        this.toggleSelectPane = function () {
	            _this.open = !_this.open;
	        };
	        this.setViewValue = function (itemsSelected) {
	            if (!itemsSelected || itemsSelected.length === 0) {
	                _this.viewValue = "";
	                _this.selected = "";
	            }
	            else {
	                _this.viewValue = itemsSelected
	                    .map(function (item) {
	                    return item.text;
	                })
	                    .join(', ');
	                _this.selected = _this.viewValue;
	            }
	        };
	        this.open = false;
	    }
	    MultiSelectController.$inject = [];
	    return MultiSelectController;
	}());
	module.exports = MultiSelectController;


/***/ },
/* 553 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	MultiSelectPaneDirective.$inject = ['$document'];
	function MultiSelectPaneDirective($document) {
	    return {
	        restrict: 'EA',
	        replace: true,
	        require: '?ngModel',
	        templateUrl: 'app/employeeDashboard/multiSelect/multi-select-pane-template.html',
	        scope: {
	            open: '=',
	            options: '='
	        },
	        link: function (scope, element, attrs, ngModel) {
	            var selectedItems;
	            if (!ngModel)
	                return;
	            ngModel.$isEmpty = function () {
	                return (!angular.isArray(ngModel.$viewValue) || ngModel.$viewValue.length === 0);
	            };
	            ngModel.$render = function () {
	                selectedItems = ngModel.$viewValue || [];
	                scope.optionCollection = scope.options && scope.options.map(function (option) {
	                    return {
	                        selected: selectedItems && selectedItems.some(function (i) {
	                            return i.value === option.value;
	                        }),
	                        item: option
	                    };
	                });
	            };
	            scope.toggleItem = function (option) {
	                option.selected = !option.selected;
	                if (option.selected) {
	                    selectedItems = [].concat(selectedItems, option.item);
	                }
	                else {
	                    selectedItems = selectedItems.filter(function (item) {
	                        return item.text !== option.item.text;
	                    });
	                }
	                ngModel.$setViewValue(selectedItems);
	            };
	            var onUniversalClick = function (e) {
	                var container = element.parent();
	                if (container !== e.target && !container[0].contains(e.target)) {
	                    scope.$apply(function () {
	                        scope.open = false;
	                    });
	                }
	            };
	            $document.on('click', onUniversalClick);
	            scope.$on('$destroy', function () {
	                $document.off('click', onUniversalClick);
	            });
	        }
	    };
	}
	module.exports = MultiSelectPaneDirective;


/***/ },
/* 554 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var ReportOptionsDirective = __webpack_require__(555);
	module.exports = angular.module("crm.tasks.reportOptions", [])
	    .directive("crmReportOptions", ReportOptionsDirective);


/***/ },
/* 555 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var ReportOptionsController = __webpack_require__(556);
	function ReportOptionsDirective() {
	    return {
	        restrict: 'E',
	        controller: ReportOptionsController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/employeeDashboard/reports/template.html'
	    };
	}
	module.exports = ReportOptionsDirective;


/***/ },
/* 556 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var EVENT_DETAIL_WINDOW_OPTIONS = 'toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=no,width=735,height=650,top=20,left=20';
	var TODO_WINDOW_OPTIONS = 'toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=735,height=650,top=20,left=20';
	var REPORT_WINDOW_OPTIONS = 'toolbar=yes,location=no,directories=no,status=yes,menubar=no,scrollbars=yes,resizable=yes,width=950,height=625';
	var ReportsController = (function () {
	    function ReportsController($window, ReportsService) {
	        this.$window = $window;
	        this.ReportsService = ReportsService;
	    }
	    ReportsController.prototype.openTodoDetails = function () {
	        this.$window.open(this.ReportsService.getToDoDetailUrl(), 'wp', TODO_WINDOW_OPTIONS);
	    };
	    ReportsController.prototype.openEventDetailsWithoutNotes = function () {
	        this.$window.open(this.ReportsService.getEventWithoutNotesUrl(), 'wp', EVENT_DETAIL_WINDOW_OPTIONS);
	    };
	    ReportsController.prototype.openEventDetailsWithNotes = function () {
	        this.$window.open(this.ReportsService.getEventWithNotesUrl(), 'wp', EVENT_DETAIL_WINDOW_OPTIONS);
	    };
	    ReportsController.prototype.openActivitySummaryReport = function () {
	        this.$window.open(this.ReportsService.getActivitySummaryUrl(), 'ActivitySummaryReport', REPORT_WINDOW_OPTIONS);
	    };
	    ReportsController.prototype.openSalesTrackingReport = function () {
	        this.$window.open(this.ReportsService.getSalesTrackingUrl(), 'SalesTrackingReport', REPORT_WINDOW_OPTIONS);
	    };
	    ReportsController.prototype.openDailyCheckoutReport = function () {
	        this.$window.open(this.ReportsService.getDailyCheckoutUrl(), 'DailyCheckOutReport', REPORT_WINDOW_OPTIONS);
	    };
	    ReportsController.$inject = [
	        '$window',
	        'ReportsService'
	    ];
	    return ReportsController;
	}());
	module.exports = ReportsController;


/***/ },
/* 557 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var activityTimelineService_1 = __webpack_require__(558);
	var ActivityService_1 = __webpack_require__(561);
	var EventStatusLogGroupService_1 = __webpack_require__(562);
	var ActiveTimelineItemService_1 = __webpack_require__(563);
	var TimelineItemFactory_1 = __webpack_require__(564);
	var statusWarningService_1 = __webpack_require__(565);
	var statusMappingService_1 = __webpack_require__(566);
	var angular = __webpack_require__(2);
	var activityCardModule = __webpack_require__(567);
	var confirmApptModule = __webpack_require__(570);
	var activitiesListModule = __webpack_require__(573);
	var logPhoneCallModule = __webpack_require__(576);
	var setApptModule = __webpack_require__(579);
	var setReminderModule = __webpack_require__(582);
	var activityCommentModule = __webpack_require__(585);
	var logAppointmentModule = __webpack_require__(588);
	var workNoteEditorModule = __webpack_require__(591);
	var workNoteViewModule = __webpack_require__(594);
	var completeTaskCardModule = __webpack_require__(597);
	var phoneScriptModule = __webpack_require__(600);
	var logOtherTaskModule = __webpack_require__(603);
	var logStoreVisitModule = __webpack_require__(606);
	var eventStatusLogGroupCardModule = __webpack_require__(609);
	var webLeadModule = __webpack_require__(612);
	var defaultActivityCardModule = __webpack_require__(615);
	var defaultEventStatusLogGroupCardModule = __webpack_require__(618);
	var activityBar = __webpack_require__(621);
	var quickFilterBar = __webpack_require__(624);
	var activitiesNotes = __webpack_require__(627);
	var displayEventTypeAndEventId = __webpack_require__(630);
	var openActivities = __webpack_require__(633);
	var eventStatusCheckboxes = __webpack_require__(636);
	module.exports = angular.module('crm.activities', [
	    activityCardModule.name,
	    confirmApptModule.name,
	    logPhoneCallModule.name,
	    activitiesListModule.name,
	    activityCommentModule.name,
	    setApptModule.name,
	    setReminderModule.name,
	    activitiesListModule.name,
	    logAppointmentModule.name,
	    workNoteEditorModule.name,
	    workNoteViewModule.name,
	    completeTaskCardModule.name,
	    phoneScriptModule.name,
	    logOtherTaskModule.name,
	    logStoreVisitModule.name,
	    webLeadModule.name,
	    defaultActivityCardModule.name,
	    defaultEventStatusLogGroupCardModule.name,
	    activityBar.name,
	    quickFilterBar.name,
	    activitiesNotes.name,
	    eventStatusLogGroupCardModule.name,
	    displayEventTypeAndEventId.name,
	    openActivities.name,
	    eventStatusCheckboxes.name
	])
	    .service('ActivityTimelineService', activityTimelineService_1.ActivityTimelineService)
	    .service('TimelineItemFactory', TimelineItemFactory_1.TimelineItemFactory)
	    .service('ActivityService', ActivityService_1.ActivityService)
	    .service('EventStatusLogGroupService', EventStatusLogGroupService_1.EventStatusLogGroupService)
	    .service('statusWarningService', statusWarningService_1.StatusWarningService)
	    .service('ActiveTimelineItemService', ActiveTimelineItemService_1.ActiveTimelineItemService)
	    .service('StatusMappingService', statusMappingService_1.StatusMappingService);


/***/ },
/* 558 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var FilteredCollection = __webpack_require__(559);
	var DETAILS_MODAL_URL = 'app/activities/activityCard/templates/detailsModalTemplate.html';
	var ActivityTimelineService = (function () {
	    function ActivityTimelineService($q, $state, $window, $timeout, ActivityFilterService, ActivityTimelineApiService, ActiveTimelineItemService, WorkNoteService, ActivityService, PrintTaskService, AuthenticationService, eventManagerService, CrmConstants, modalService, TranslationCache, ODataObjectFactory, DataApiSettings, EmailDialogService, TimelineItemFactory) {
	        var _this = this;
	        this.$q = $q;
	        this.$state = $state;
	        this.$window = $window;
	        this.$timeout = $timeout;
	        this.ActivityFilterService = ActivityFilterService;
	        this.ActivityTimelineApiService = ActivityTimelineApiService;
	        this.ActiveTimelineItemService = ActiveTimelineItemService;
	        this.WorkNoteService = WorkNoteService;
	        this.ActivityService = ActivityService;
	        this.PrintTaskService = PrintTaskService;
	        this.AuthenticationService = AuthenticationService;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.modalService = modalService;
	        this.TranslationCache = TranslationCache;
	        this.ODataObjectFactory = ODataObjectFactory;
	        this.DataApiSettings = DataApiSettings;
	        this.EmailDialogService = EmailDialogService;
	        this.TimelineItemFactory = TimelineItemFactory;
	        this.selectedSort = {
	            name: '',
	            value: ''
	        };
	        this.reloadActivityTimelineItems = function () {
	            _this.ActiveTimelineItemService.unsetActiveTimelineItem()
	                .then(function () {
	                if (_this.contact) {
	                    _this.loadActivityTimelineItems(_this.contact, _this.eventId, _this.eventType, true);
	                }
	            });
	        };
	        this.onFilteredCollectionChanged = function (message) {
	            _this.filterActivityTimeline();
	        };
	        this.init();
	    }
	    Object.defineProperty(ActivityTimelineService.prototype, "activeTimelineItem", {
	        get: function () {
	            return this.ActiveTimelineItemService.activeTimelineItem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    ActivityTimelineService.prototype.init = function () {
	        this.loggedInUser = this.AuthenticationService.getUser();
	        this.filters = {
	            typeFilters: [],
	            assignedToFilters: [],
	            statusFilters: [],
	            opportunityFilters: []
	        };
	        this.openActivityTimelineItems = [];
	        this.activityTimeline = new FilteredCollection([]);
	        this.eventManagerService.subscribe(this.CrmConstants.SALES_OPPORTUNITY.POST_TO_DMS_RESULT, this.reloadActivityTimelineItems);
	    };
	    // region load
	    ActivityTimelineService.prototype.loadActivityTimelineItems = function (contact, eventId, eventType, editable) {
	        var _this = this;
	        if (editable === void 0) { editable = false; }
	        this.customerId = +contact.id;
	        this.contact = contact;
	        this.eventId = eventId;
	        this.eventType = eventType;
	        this.activitiesDisabled = !editable;
	        // TODO: check for memoized items first... (should this be an activityTimelineService that manages memoization?)
	        return this.ActivityService.loadRefDefs(this.customerId)
	            .then(function () {
	            return _this.ActivityTimelineApiService.getActivityTimelineItems(_this.customerId, eventId);
	        })
	            .then(function (timeline) {
	            // TODO: Memoize the timeline or the filteredcollection?
	            _this.openActivityTimelineItems.length = 0; // empties the list and triggers garbage collection to free up memory (reference https://davidwalsh.name/empty-array)
	            var history = [];
	            timeline.forEach(function (item) {
	                // set properties that are not set
	                if (item.activity && item.activity.dueDate && !item.activity.dueTime) {
	                    item.activity.dueTime = _this.ActivityService.findClosestTime(item.activity.dueDate);
	                }
	                if (item.activity && _this.ActivityService.isActivityInOpenStatus(item.activity)) {
	                    _this.openActivityTimelineItems.push(item);
	                }
	                else {
	                    history.push(item);
	                }
	            });
	            if (_this.activityTimeline && _this.activityTimeline.collectionChangedEvent) {
	                _this.activityTimeline.collectionChangedEvent.unsubscribe(_this.onFilteredCollectionChanged);
	            }
	            _this.activityTimeline = new FilteredCollection(history);
	            _this.activityTimeline.collectionChangedEvent.subscribe(_this.onFilteredCollectionChanged);
	            _this.setFilterCounts();
	            _this.sortActivityTimeline(_this.CrmConstants.LAST_UPDATED_NEWEST);
	            // TODO: Call reset on the active activity details?
	        });
	    };
	    //endregion
	    // region add temp timeline item
	    ActivityTimelineService.prototype.addTempActivity = function (activityButton) {
	        var _this = this;
	        if (activityButton === activityEnums_1.ActivityButton.sendEmail) {
	            this.sendEmail(this.eventId.toString());
	            return;
	        }
	        var campaignSteps = [];
	        if (this.activityTimeline.baseCollection.length) {
	            campaignSteps = this.activityTimeline.baseCollection[0].campaignSteps;
	        }
	        var activityTimelineItem = this.TimelineItemFactory.createActivityTimelineItem(activityButton, this.customerId, this.eventId, this.eventType, campaignSteps);
	        var timelineItemType = (activityButton === activityEnums_1.ActivityButton.storeVisit) ? activityEnums_1.TimelineItemType.eventStatusLogGroup : activityEnums_1.TimelineItemType.activity;
	        return this.startActivityTimelineItem(activityTimelineItem, timelineItemType, this.getActionFromButtonType(activityButton))
	            .then(function () {
	            _this.openActivityTimelineItems.unshift(activityTimelineItem);
	            return activityTimelineItem;
	        });
	    };
	    ActivityTimelineService.prototype.getActionFromButtonType = function (activityButton) {
	        switch (activityButton) {
	            case activityEnums_1.ActivityButton.phoneCall:
	                return activityEnums_1.ActivityActionType.logPhoneCall;
	            case activityEnums_1.ActivityButton.appointment:
	                return activityEnums_1.ActivityActionType.setAppointment;
	            case activityEnums_1.ActivityButton.other:
	                return activityEnums_1.ActivityActionType.logOther;
	            case activityEnums_1.ActivityButton.reminder:
	            case activityEnums_1.ActivityButton.phoneCallReminder:
	                return activityEnums_1.ActivityActionType.setReminder;
	            case activityEnums_1.ActivityButton.storeVisit:
	                return activityEnums_1.ActivityActionType.logStoreVisit;
	            default:
	                return activityEnums_1.ActivityActionType.logOther;
	        }
	    };
	    //TODO: move this to the email dialog service
	    ActivityTimelineService.prototype.sendEmail = function (eventId, activity) {
	        var _this = this;
	        var previousTemp;
	        if (this.ActiveTimelineItemService.activeTimelineItem.activeId === 0) {
	            previousTemp = _.find(this.openActivityTimelineItems, function (item) {
	                return (item.activityTimelineId === 0);
	            });
	        }
	        this.ActiveTimelineItemService.unsetActiveTimelineItem().then(function () {
	            if (previousTemp) {
	                _this.removeOpenItem(previousTemp);
	            }
	            var emailWindow = _this.EmailDialogService.sendEmail(_this.getEmailDoc(eventId));
	            _this.onEmailWindowClosed(emailWindow, activity);
	        });
	    };
	    ActivityTimelineService.prototype.onEmailWindowClosed = function (emailWindow, activity) {
	        var _this = this;
	        if (emailWindow.closed) {
	            if (activity && activityEnums_1.OpenActivityStatus[activity.status.value]) {
	                this.ActiveTimelineItemService.setActiveTimelineItem(activity.activityId, activityEnums_1.TimelineItemType.activity, activityEnums_1.ActivityActionType.completed)
	                    .then(function () {
	                    _this.ActivityService.saveActiveActivity(activity, null, activityEnums_1.ActivityStatus.completed);
	                });
	                return;
	            }
	            this.reloadActivityTimelineItems();
	            return;
	        }
	        this.$timeout(function () {
	            _this.onEmailWindowClosed(emailWindow, activity);
	        }, 3000);
	    };
	    ActivityTimelineService.prototype.viewEmail = function (workNote, activity) {
	        var emailWindow = this.EmailDialogService.viewClassicEmail(this.EmailDialogService.getWebleadId(workNote.note), this.loggedInUser.getFullName(), this.DataApiSettings.getSiteId());
	        this.onEmailWindowClosed(emailWindow, activity);
	    };
	    ActivityTimelineService.prototype.emailAttachment = function (workNote, attachmentIndex) {
	        return this.EmailDialogService.checkAttachments(workNote.note, attachmentIndex);
	    };
	    ActivityTimelineService.prototype.emailSubject = function (startIndex, endIndex, workNote) {
	        return this.EmailDialogService.getEmailSubject(startIndex, endIndex, workNote.note);
	    };
	    ActivityTimelineService.prototype.getEmailDoc = function (eventId) {
	        var evtId = this.eventId === null ? this.eventId : eventId;
	        return {
	            eventId: +evtId,
	            entityId: +this.contact.id,
	            siteId: +this.DataApiSettings.getSiteId(),
	            emailDocId: null,
	            newEbrochure: null,
	            source: null,
	            noteType: 1,
	            sendFrom: null,
	            message: null,
	            subject: null,
	            sendTo: this.contact.contactPoints.email.value,
	            bcc: null,
	            cc: null,
	            friendlyName: null,
	            files: []
	        };
	    };
	    ActivityTimelineService.prototype.removeOpenItem = function (activityTimelineItem) {
	        var index = this.openActivityTimelineItems.indexOf(activityTimelineItem);
	        this.openActivityTimelineItems.splice(index, 1);
	    };
	    ActivityTimelineService.prototype.startActivityTimelineItem = function (activityTimelineItem, type, action) {
	        var _this = this;
	        var previousTemp;
	        if (this.ActiveTimelineItemService.activeTimelineItem.activeId === 0) {
	            previousTemp = _.find(this.openActivityTimelineItems, function (item) {
	                return (item.activityTimelineId === 0);
	            });
	        }
	        if (this.ActiveTimelineItemService.activeTimelineItem.activeActionType === activityEnums_1.ActivityActionType.completed) {
	            var completedActivity = _.find(this.openActivityTimelineItems, function (item) {
	                return (item.activityTimelineId === _this.ActiveTimelineItemService.activeTimelineItem.activeId);
	            });
	            if (completedActivity) {
	                this.removeOpenItem(completedActivity);
	                this.activityTimeline.add(completedActivity, true);
	            }
	        }
	        return this.ActiveTimelineItemService.setActiveTimelineItem(activityTimelineItem.activityTimelineId, type, action)
	            .then(function () {
	            if (previousTemp) {
	                _this.removeOpenItem(previousTemp);
	            }
	        });
	    };
	    ActivityTimelineService.prototype.saveActivityTimelineItem = function (activityTimelineItem, activity, buttonType) {
	        var activityWasClosed = !(this.ActivityService.isActivityInOpenStatus(activityTimelineItem.activity));
	        var activityIsNowOpen = this.ActivityService.isActivityInOpenStatus(activity);
	        var activityChangedToOpen = (activityWasClosed && activityIsNowOpen);
	        var activityStayedInClosed = (activityWasClosed && !activityIsNowOpen);
	        activityTimelineItem.activity = activity;
	        activityTimelineItem.activityTimelineId = activity.activityId;
	        activityTimelineItem.workNotes = activity.workNotes;
	        activityTimelineItem.eventStatuses = activity.eventStatuses;
	        activityTimelineItem.lastUpdated = activity.updateDate;
	        if (activityChangedToOpen) {
	            this.openActivityTimelineItems.unshift(activityTimelineItem);
	            this.activityTimeline.remove(activityTimelineItem);
	        }
	        else if (activityStayedInClosed) {
	            this.filterActivityTimeline();
	        }
	        if (buttonType) {
	            this.addTempActivity(buttonType);
	        }
	        return activityTimelineItem;
	    };
	    ActivityTimelineService.prototype.cancelActivityTimelineItem = function (activityTimelineItem) {
	        if (activityTimelineItem.activityTimelineId === 0) {
	            this.removeOpenItem(activityTimelineItem);
	        }
	    };
	    ActivityTimelineService.prototype.onCompletedTimeout = function (activityTimelineItem, activityButton) {
	        var _this = this;
	        this.ActiveTimelineItemService.unsetActiveTimelineItem(activityTimelineItem.activityTimelineId)
	            .then(function () {
	            if (activityButton) {
	                _this.addTempActivity(activityButton);
	            }
	            _this.activityTimeline.add(activityTimelineItem, true);
	            _this.removeOpenItem(activityTimelineItem);
	        });
	    };
	    // endregion
	    ActivityTimelineService.prototype.addWorkNote = function (workNote) {
	        var _this = this;
	        return this.WorkNoteService.saveWorkNotes(workNote)
	            .then(function (workNoteResponse) {
	            return _this.ActivityTimelineApiService.getSingleWorkNote((+workNote.entityId), (+workNoteResponse.workNoteId));
	        })
	            .then(function (activityTimelineItemResponse) {
	            _this.activityTimeline.add(activityTimelineItemResponse, true);
	        });
	    };
	    //region sort and filter
	    ActivityTimelineService.prototype.filterActivityTimeline = function () {
	        var _this = this;
	        return this.ActiveTimelineItemService.unsetActiveTimelineItem()
	            .then(function () {
	            _this.setFilterCounts();
	            _this.ActivityFilterService.filterActivitiesAndWorknotes(_this.activityTimeline, _this.filters.typeFilters, _this.filters.assignedToFilters, _this.filters.statusFilters, _this.filters.opportunityFilters);
	            _this.sortActivityTimelineItems();
	        });
	    };
	    ActivityTimelineService.prototype.sortActivityTimeline = function (sortValue) {
	        var _this = this;
	        return this.ActiveTimelineItemService.unsetActiveTimelineItem()
	            .then(function () {
	            _this.selectedSort.value = sortValue;
	            _this.selectedSort.name = _this.TranslationCache.get('crm.salesOpportunity.filter_bar.sort_types.' + sortValue);
	            _this.sortActivityTimelineItems();
	        });
	    };
	    ActivityTimelineService.prototype.sortActivityTimelineItems = function () {
	        this.activityTimeline.filteredCollection = _.sortBy(this.activityTimeline.filteredCollection, function (activityTimelineItem) {
	            return activityTimelineItem.lastUpdated;
	        });
	        if (this.selectedSort.value === this.CrmConstants.LAST_UPDATED_NEWEST) {
	            this.activityTimeline.filteredCollection = this.activityTimeline.filteredCollection.reverse();
	        }
	        this.sortOpenActivities();
	    };
	    ActivityTimelineService.prototype.sortOpenActivities = function () {
	        this.openActivityTimelineItems.sort(function (item1, item2) {
	            if (item1.activity && item2.activity) {
	                if (item1.activity.dueDate > item2.activity.dueDate) {
	                    return 1;
	                }
	                else if (item1.activity.dueDate < item2.activity.dueDate) {
	                    return -1;
	                }
	                else {
	                    //This is to guarantee that activities always sort the same way even if they
	                    //have the same due date and due time.
	                    if (item1.activity.activityId > item2.activity.activityId) {
	                        return 1;
	                    }
	                    else {
	                        return -1;
	                    }
	                }
	            }
	            return 0;
	        });
	    };
	    ActivityTimelineService.prototype.setFilterCounts = function () {
	        this.activityCounts = this.ActivityFilterService.buildFilterCounts(this.activityTimeline.baseCollection, this.filters.typeFilters, this.filters.assignedToFilters, this.filters.statusFilters, this.filters.opportunityFilters);
	    };
	    //endregion
	    // region action item menu
	    ActivityTimelineService.prototype.showActivityDetailsModal = function (activityTimelineItem) {
	        this.modalService.openModalViaTemplateUrlPromise(DETAILS_MODAL_URL, { activity: activityTimelineItem.activity }, null).catch(function (obj) {
	            obj.modalInstance.close();
	        });
	    };
	    ActivityTimelineService.prototype.openActivityListPrintWindow = function (activityTimelineItem) {
	        var eventId = activityTimelineItem.eventId.toString();
	        var activityId = activityTimelineItem.activity.activityId.toString();
	        var entityId = activityTimelineItem.customerId.toString();
	        var taskSheetUrl = this.PrintTaskService.getTaskSheetUrl(eventId, activityId, entityId);
	        var taskSheetWindowOptions = this.PrintTaskService.getTaskSheetWindowOptions();
	        this.$window.open(taskSheetUrl, 'qcal', taskSheetWindowOptions);
	    };
	    ActivityTimelineService.prototype.skipActivity = function (activityTimelineItem) {
	        var _this = this;
	        return this.ActiveTimelineItemService.setActiveTimelineItem(activityTimelineItem.activity.activityId, activityEnums_1.TimelineItemType.activity, activityEnums_1.ActivityActionType.default)
	            .then(function () {
	            var title = _this.TranslationCache.get('crm.salesOpportunity.activities.skipModal.TITLE');
	            var prompt = _this.TranslationCache.get('crm.salesOpportunity.activities.skipModal.PROMPT');
	            var acceptButton = _this.TranslationCache.get('crm.salesOpportunity.activities.skipModal.ACCEPT_BUTTON');
	            var cancelButton = _this.TranslationCache.get('crm.salesOpportunity.activities.skipModal.CANCEL_BUTTON');
	            return _this.modalService.openModal(prompt, title, acceptButton, cancelButton);
	        }).then(function (modalInstance) {
	            modalInstance.close();
	            return _this.ActivityService.saveActiveActivity(activityTimelineItem.activity, null, activityEnums_1.ActivityStatus.skipped);
	        }, /*rejected*/ function (modalInstance) {
	            modalInstance.dismiss();
	            _this.ActiveTimelineItemService.unsetActiveTimelineItem(activityTimelineItem.activityTimelineId);
	            return _this.$q.reject("(╯°□°）╯︵ ┻━┻"); // keeps us on the reject path.
	        })
	            .then(function () {
	            _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.ACTIVITIES.TASK_ACTION_ALERT, {
	                alertType: _this.TranslationCache.get('crm.salesOpportunity.activities.ALERT_TYPE'),
	                message: activityTimelineItem.activity.type.text +
	                    _this.TranslationCache.get('crm.salesOpportunity.activities.ACTIVITY_SKIPPED')
	            });
	        });
	    };
	    ActivityTimelineService.prototype.removeActivityFromTimeline = function (activityTimelineItem) {
	        var _this = this;
	        this.ActiveTimelineItemService.unsetActiveTimelineItem()
	            .then(function () {
	            var title = _this.TranslationCache.get('crm.salesOpportunity.activities.deleteModal.TITLE');
	            var prompt = _this.TranslationCache.get('crm.salesOpportunity.activities.deleteModal.PROMPT');
	            var acceptButton = _this.TranslationCache.get('crm.salesOpportunity.activities.deleteModal.ACCEPT_BUTTON');
	            var cancelButton = _this.TranslationCache.get('crm.salesOpportunity.activities.deleteModal.CANCEL_BUTTON');
	            return _this.modalService.openModal(prompt, title, acceptButton, cancelButton);
	        }).then(function (modalInstance) {
	            modalInstance.close();
	            return _this.ActivityService.deleteActivity(activityTimelineItem.activity);
	        }, /*rejected*/ function (modalInstance) {
	            modalInstance.dismiss();
	            return _this.$q.reject("(╯°□°）╯︵ ┻━┻"); // keeps us on the reject path.
	        }).then(function () {
	            if (activityTimelineItem.activity && _this.ActivityService.isActivityInOpenStatus(activityTimelineItem.activity)) {
	                _this.removeOpenItem(activityTimelineItem);
	            }
	            else {
	                _this.activityTimeline.remove(activityTimelineItem);
	            }
	            _this.eventManagerService.publish(_this.CrmConstants.SALES_OPPORTUNITY.ACTIVITIES.TASK_ACTION_ALERT, {
	                alertType: _this.TranslationCache.get('crm.salesOpportunity.activities.ALERT_TYPE'),
	                message: activityTimelineItem.activity.type.text +
	                    _this.TranslationCache.get('crm.salesOpportunity.activities.ACTIVITY_DELETED')
	            });
	            // TODO: Remove from memoized lists as well. (Contact:Event and Contact)
	        });
	    };
	    ActivityTimelineService.prototype.redirectToEvent = function (activityTimelineItem, onRedirect) {
	        if (onRedirect) {
	            onRedirect();
	        }
	        if (!this.activitiesDisabled) {
	            return this.$q.resolve();
	        }
	        switch (activityTimelineItem.eventType) {
	            case activityEnums_1.OpportunityEventType.qa:
	                return this.$state.go('csiUpdate', {
	                    'csiId': activityTimelineItem.eventId,
	                    'contactId': activityTimelineItem.customerId
	                });
	            case activityEnums_1.OpportunityEventType.sales:
	                return this.$state.go('sales.view', {
	                    salesOpportunityId: activityTimelineItem.eventId,
	                    contactId: activityTimelineItem.customerId
	                });
	        }
	        return this.$q.resolve();
	    };
	    // TODO: we need an array of IActivityTimelineItem arrays for memoization...
	    ActivityTimelineService.$inject = [
	        '$q',
	        '$state',
	        '$window',
	        '$timeout',
	        'ActivityFilterService',
	        'ActivityTimelineApiService',
	        'ActiveTimelineItemService',
	        'WorkNoteService',
	        'ActivityService',
	        'PrintTaskService',
	        'AuthenticationService',
	        'eventManagerService',
	        'CrmConstants',
	        'modalService',
	        'TranslationCache',
	        'ODataObjectFactory',
	        'DataApiSettings',
	        'EmailDialogService',
	        'TimelineItemFactory'
	    ];
	    return ActivityTimelineService;
	}());
	exports.ActivityTimelineService = ActivityTimelineService;


/***/ },
/* 559 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var EventHandler = __webpack_require__(374);
	var FilteredCollectionChangedMessageType = __webpack_require__(560);
	var FilteredCollection = (function () {
	    function FilteredCollection(initialItems) {
	        this.collectionChangedEvent = new EventHandler();
	        if (initialItems) {
	            // This creates two lists containing the same objects.
	            // This way we can manipulate the two objects and those changes will be reflected in both lists.
	            this.baseCollection = initialItems;
	            this.filteredCollection = initialItems.slice(0);
	        }
	        else {
	            this.baseCollection = [];
	            this.filteredCollection = [];
	        }
	    }
	    FilteredCollection.prototype.add = function (item, addToFilter) {
	        this.baseCollection.push(item);
	        if (addToFilter) {
	            this.filteredCollection.unshift(item);
	        }
	        var message = {
	            type: FilteredCollectionChangedMessageType.Added,
	            item: item
	        };
	        this.collectionChangedEvent.fire(message);
	    };
	    FilteredCollection.prototype.remove = function (item, removeAll) {
	        var somethingChanged = false;
	        for (var i = this.baseCollection.length - 1; i >= 0; i--) {
	            if (this.baseCollection[i] === item) {
	                this.baseCollection.splice(i, 1);
	                somethingChanged = true;
	                if (!removeAll) {
	                    break;
	                }
	            }
	        }
	        for (var i = this.filteredCollection.length - 1; i >= 0; i--) {
	            if (this.filteredCollection[i] === item) {
	                this.filteredCollection.splice(i, 1);
	                if (!removeAll) {
	                    break;
	                }
	            }
	        }
	        if (somethingChanged) {
	            var message = {
	                type: FilteredCollectionChangedMessageType.Removed,
	                item: item
	            };
	            this.collectionChangedEvent.fire(message);
	        }
	    };
	    FilteredCollection.prototype.filterBy = function (filterFunction) {
	        var self = this;
	        self.filteredCollection = self.baseCollection.slice(0);
	        this.thenBy(filterFunction);
	        return this;
	    };
	    FilteredCollection.prototype.thenBy = function (filterFunction) {
	        var self = this;
	        var indicesToRemove = [];
	        for (var i = 0; i < self.filteredCollection.length; i++) {
	            if (filterFunction(self.filteredCollection[i])) {
	                indicesToRemove.push(i);
	            }
	        }
	        for (var i = indicesToRemove.length - 1; i >= 0; i--) {
	            self.filteredCollection.splice(indicesToRemove[i], 1);
	        }
	        return this;
	    };
	    return FilteredCollection;
	}());
	module.exports = FilteredCollection;


/***/ },
/* 560 */
/***/ function(module, exports) {

	"use strict";
	var FilteredCollectionChangedMessageType;
	(function (FilteredCollectionChangedMessageType) {
	    FilteredCollectionChangedMessageType[FilteredCollectionChangedMessageType["Added"] = 0] = "Added";
	    FilteredCollectionChangedMessageType[FilteredCollectionChangedMessageType["Removed"] = 1] = "Removed";
	})(FilteredCollectionChangedMessageType || (FilteredCollectionChangedMessageType = {}));
	module.exports = FilteredCollectionChangedMessageType;


/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var Moment = __webpack_require__(19);
	var ActivityService = (function () {
	    function ActivityService($q, ActivityApiService, WorkNoteService, EventStatusService, TranslationCache, ServiceWrapper, salesOpportunityService, ActivityTimelineApiService, AuthenticationService, ActiveTimelineItemService, StatusMappingService) {
	        this.$q = $q;
	        this.ActivityApiService = ActivityApiService;
	        this.WorkNoteService = WorkNoteService;
	        this.EventStatusService = EventStatusService;
	        this.TranslationCache = TranslationCache;
	        this.ServiceWrapper = ServiceWrapper;
	        this.salesOpportunityService = salesOpportunityService;
	        this.ActivityTimelineApiService = ActivityTimelineApiService;
	        this.AuthenticationService = AuthenticationService;
	        this.ActiveTimelineItemService = ActiveTimelineItemService;
	        this.StatusMappingService = StatusMappingService;
	        this.cleanActiveActivityFromListCallback = function () { };
	    }
	    Object.defineProperty(ActivityService.prototype, "activeActivityDetails", {
	        get: function () {
	            return this.ActiveTimelineItemService.activeTimelineItem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    //You must wait on the promise this method returns before attempting to use this class
	    ActivityService.prototype.loadRefDefs = function (contactId) {
	        var _this = this;
	        var promises = [];
	        var activityRefDefPromise = this.ActivityApiService.getActivityRefDefs().then(function (returnedActivityRefDefs) {
	            _this.activitiesRefDefs = returnedActivityRefDefs;
	        });
	        promises.push(activityRefDefPromise);
	        return this.$q.all(promises).then(function () { return; });
	    };
	    //region initNewActivity
	    ActivityService.prototype.initNewActivity = function (customerId, eventId, eventType, loggedInUser) {
	        var currentDate = Moment();
	        var activity = {
	            activityId: 0,
	            customerId: customerId,
	            eventId: eventId,
	            eventType: eventType,
	            createdDate: currentDate,
	            createdBy: this.getAssignedTo(loggedInUser),
	            updateDate: currentDate,
	            updatedBy: this.getRefDefFromCurrentUser(loggedInUser),
	            assignedTo: this.getAssignedTo(loggedInUser),
	            dueDate: currentDate,
	            dueTime: this.findClosestTime(Moment(currentDate.local().format('MM/DD/YYYY hh:mm a'))),
	            rank: this.getActivityRank(activityEnums_1.ActivityRank.low),
	            status: this.getActivityStatus(activityEnums_1.ActivityStatus.open),
	            workNotes: [],
	            eventStatuses: []
	        };
	        return activity;
	    };
	    ActivityService.prototype.getRefDefFromCurrentUser = function (loggedInUser) {
	        if (!loggedInUser) {
	            return this.createEmptyRefDef();
	        }
	        return {
	            text: loggedInUser.getFullName(),
	            value: loggedInUser.username
	        };
	    };
	    ActivityService.prototype.getAssignedTo = function (loggedInUser) {
	        var found = _.find(this.activitiesRefDefs.assignedTos, function (item) {
	            return item.value === loggedInUser.username;
	        });
	        return found || this.activitiesRefDefs.assignedTos[0];
	    };
	    ActivityService.prototype.getActivityStatus = function (status) {
	        return _.find(this.activitiesRefDefs.statuses, function (item) {
	            return +item.value === status;
	        }) || this.createEmptyRefDef();
	    };
	    ActivityService.prototype.getActivityType = function (type) {
	        return _.find(this.activitiesRefDefs.activityTypes, function (item) {
	            return +item.value === type;
	        }) || this.createEmptyRefDef();
	    };
	    ActivityService.prototype.getActivityRank = function (rank) {
	        return _.find(this.activitiesRefDefs.ranks, function (item) {
	            return +item.value === rank;
	        }) || this.createEmptyRefDef();
	    };
	    ActivityService.prototype.createEmptyRefDef = function () {
	        return {
	            value: null,
	            text: null
	        };
	    };
	    ActivityService.prototype.getReminderActivityTypes = function () {
	        var nonOtherReminderTypes = [
	            this.getActivityType(activityEnums_1.ActivityType.sendEmail)
	        ];
	        return nonOtherReminderTypes.concat(this.getOtherActivityTypes());
	    };
	    ActivityService.prototype.getOtherActivityTypes = function () {
	        return this.activitiesRefDefs.activityTypes.filter(function (type) {
	            return !activityEnums_1.NonOtherActivityType[type.value];
	        });
	    };
	    ActivityService.prototype.findClosestTime = function (compareDate) {
	        var timeDifference = Number.MAX_VALUE;
	        var result = this.activitiesRefDefs.dueTimes[0];
	        this.activitiesRefDefs.dueTimes.forEach(function (time) {
	            var refDate = Moment(compareDate.format('MM/DD/YYYY') + ' ' + time.text, 'MM/DD/YYYY hh:mm a');
	            var dueTimeDiff = refDate.diff(compareDate, 'minutes');
	            if (0 <= dueTimeDiff && dueTimeDiff < timeDifference) {
	                timeDifference = dueTimeDiff;
	                result = time;
	            }
	        });
	        return result;
	    };
	    //endregion
	    // region setActiveActivity
	    ActivityService.prototype.setActiveActivity = function (activityTimelineItem, action) {
	        var _this = this;
	        if (!activityTimelineItem.activity) {
	            return this.$q.reject();
	        }
	        return this.ActiveTimelineItemService.setActiveTimelineItem(activityTimelineItem.activity.activityId, activityEnums_1.TimelineItemType.activity, action).then(function () {
	            _this.cleanActiveActivityFromListCallback();
	        });
	    };
	    ActivityService.prototype.registerDirtyCheckCallback = function (dirtyCheckFn) {
	        this.ActiveTimelineItemService.registerDirtyCheckCallback(dirtyCheckFn);
	    };
	    ActivityService.prototype.registerCleanActiveActivityFromListCallback = function (cleanActiveActivityFromListFn) {
	        this.cleanActiveActivityFromListCallback = cleanActiveActivityFromListFn;
	    };
	    ActivityService.prototype.determineAction = function (activity, isEdit) {
	        if (isEdit === void 0) { isEdit = false; }
	        if (this.isAppointment(activity)) {
	            if (isEdit && this.isOpen(activity)) {
	                return activityEnums_1.ActivityActionType.setAppointment;
	            }
	            return activityEnums_1.ActivityActionType.logAppointment;
	        }
	        if (this.isPhoneCall(activity)) {
	            if (isEdit && +activity.type.value === activityEnums_1.ActivityType.outboundCall && this.isOpen(activity)) {
	                return activityEnums_1.ActivityActionType.setReminder;
	            }
	            return activityEnums_1.ActivityActionType.logPhoneCall;
	        }
	        if (this.isReminder(activity)) {
	            if (isEdit) {
	                return activityEnums_1.ActivityActionType.setReminder;
	            }
	            return activityEnums_1.ActivityActionType.logOther;
	        }
	        if (this.isWebLead(activity) && !isEdit) {
	            return activityEnums_1.ActivityActionType.webLead;
	        }
	        return activityEnums_1.ActivityActionType.logOther;
	    };
	    ActivityService.prototype.isOpen = function (activity) {
	        return activityEnums_1.OpenActivityStatus[activity.status.value] !== undefined;
	    };
	    ActivityService.prototype.isAppointment = function (activity) {
	        return activity.type && +activity.type.value === activityEnums_1.ActivityType.appointment;
	    };
	    ActivityService.prototype.isPhoneCall = function (activity) {
	        var callTypes = [activityEnums_1.ActivityType.inboundCall, activityEnums_1.ActivityType.outboundCall];
	        return activity.type && callTypes.some(function (id) { return +activity.type.value === id; });
	    };
	    ActivityService.prototype.isWebLead = function (activity) {
	        return activity.type && +activity.type.value === activityEnums_1.ActivityType.webLead;
	    };
	    ActivityService.prototype.isEmailReceived = function (activity) {
	        return activity.type && +activity.type.value === activityEnums_1.ActivityType.emailReceived;
	    };
	    ActivityService.prototype.isEmail = function (activity) {
	        return activity.type && +activity.type.value === activityEnums_1.ActivityType.sendEmail;
	    };
	    //endregion
	    //region employee dashboard
	    ActivityService.prototype.getActivityForEmployeeDashboard = function (contactId, activityId) {
	        var _this = this;
	        return this.ActivityTimelineApiService.getSingleActivity(contactId, activityId)
	            .then(function (item) {
	            if (item.activity && item.activity.dueDate && !item.activity.dueTime) {
	                item.activity.dueTime = _this.findClosestTime(item.activity.dueDate);
	            }
	            return item;
	        });
	    };
	    // note: Employee Dashboard task cards will call this function to know which log step to transition to.
	    ActivityService.prototype.getActivityLogStep = function (activityType) {
	        switch (activityType) {
	            case activityEnums_1.ActivityType.appointment:
	                return activityEnums_1.ActivityActionType.logAppointment;
	            case activityEnums_1.ActivityType.outboundCall:
	                return activityEnums_1.ActivityActionType.logPhoneCall;
	            case activityEnums_1.ActivityType.webLead:
	                return activityEnums_1.ActivityActionType.webLead;
	            default:
	                return activityEnums_1.ActivityActionType.logOther;
	        }
	    };
	    //endregion
	    // region save
	    ActivityService.prototype.saveActiveActivity = function (activity, workNote, activityStatus, dateCreated) {
	        var _this = this;
	        var showCompleteTaskCard = false;
	        var updatedActivity;
	        if (activityStatus) {
	            if (activityEnums_1.OpenActivityStatus[activity.status.value] && !activityEnums_1.OpenActivityStatus[activityStatus]) {
	                showCompleteTaskCard = true;
	            }
	            activity.status = this.getActivityStatus(activityStatus);
	        }
	        return this.saveActivityChanges(activity)
	            .then(function (activityResult) {
	            var promises = {};
	            updatedActivity = activity;
	            updatedActivity.activityId = activityResult.activityId;
	            updatedActivity.updateDate = activityResult.updateDate;
	            if (activityResult.updatedBy && activityResult.updatedBy.value) {
	                updatedActivity.updatedBy = activityResult.updatedBy;
	            }
	            _this.ActiveTimelineItemService.activeTimelineItem.activeId = activityResult.activityId;
	            if (workNote && workNote.note) {
	                promises['workNotePromise'] = _this.saveWorkNote(updatedActivity.customerId, updatedActivity.eventId, workNote, updatedActivity.activityId);
	            }
	            if (activity.eventType === activityEnums_1.OpportunityEventType.sales) {
	                promises['salesOppStatusesPromise'] = _this.setAndSaveActivityStatuses(updatedActivity, dateCreated);
	            }
	            return _this.$q.all(promises);
	        }).then(function (results) {
	            var workNoteResult = results.workNotePromise;
	            if (workNoteResult) {
	                if (angular.isArray(activity.workNotes)) {
	                    updatedActivity.workNotes.unshift(workNoteResult);
	                }
	                else {
	                    updatedActivity.workNotes = [workNote];
	                }
	            }
	            if (showCompleteTaskCard) {
	                _this.ActiveTimelineItemService.activeTimelineItem.activeActionType = activityEnums_1.ActivityActionType.completed;
	            }
	            else {
	                _this.ActiveTimelineItemService.clearActiveTimelineItemDetails();
	            }
	            return updatedActivity;
	        });
	    };
	    ActivityService.prototype.saveActivityChanges = function (activity) {
	        var _this = this;
	        if (activity.activityId) {
	            return this.ActivityApiService.updateActivity(activity);
	        }
	        return this.ActivityApiService.createActivity(activity)
	            .then(function (newActivity) {
	            activity.activityId = newActivity.activityId;
	            //We NEED to save again - classic can't set the activity status on create, so we have to create and then update.
	            return _this.ActivityApiService.updateActivity(activity);
	        });
	    };
	    // TODO: Move this repeated logic to a worknote service
	    ActivityService.prototype.saveWorkNote = function (customerId, eventId, workNote, activityId) {
	        var currentUser = this.AuthenticationService.getUser();
	        if (activityId) {
	            workNote.activityId = activityId.toString();
	        }
	        workNote.eventId = eventId.toString();
	        workNote.entityId = customerId.toString();
	        workNote.createdDate = Moment();
	        workNote.createdBy = currentUser.username;
	        return this.WorkNoteService.saveWorkNotes(workNote).then(function (workNoteResult) {
	            workNote.workNoteId = workNoteResult.workNoteId;
	            workNote.createdDate = workNoteResult.createdDate;
	            workNote.createdBy = currentUser.username;
	            workNote.fullName = currentUser.getFullName();
	            return workNote;
	        });
	    };
	    //endregion
	    //region Sales Opportunity
	    ActivityService.prototype.setAndSaveActivityStatuses = function (activity, dateCreated) {
	        var _this = this;
	        return this.updateContactedStatus(activity)
	            .then(function () {
	            return _this.salesOpportunityService.save(activity.customerId.toString(), activity.eventId.toString(), _this.StatusMappingService.getSelectedStatuses(activity.eventStatuses), false, null, dateCreated, activity.activityId);
	        });
	    };
	    // TODO: Consider moving this logic...
	    ActivityService.prototype.updateContactedStatus = function (activity) {
	        var _this = this;
	        if (+activity.status.value === activityEnums_1.ActivityStatus.completed && (this.isEmailReceived(activity) || this.isPhoneCall(activity))) {
	            return this.salesOpportunityService.get(activity.customerId.toString(), activity.eventId.toString())
	                .then(function (salesOpp) {
	                var contactedStatus = _.find(activity.eventStatuses, function (status) {
	                    return +status.eventStatusId === activityEnums_1.SalesStatus.contacted;
	                });
	                if (!contactedStatus && +salesOpp.status.id === activityEnums_1.SalesStatus.unqualified) {
	                    activity.eventStatuses.push({
	                        eventStatusId: activityEnums_1.SalesStatus.contacted,
	                        status: _this.StatusMappingService.getSalesOppStatus(activityEnums_1.SalesStatus.contacted)
	                    });
	                }
	            });
	        }
	        return this.$q.when();
	    };
	    //endregion
	    // If you choose to pass an activity in, it will verify that the activity is the active one, otherwise that one is active.
	    ActivityService.prototype.cancelActiveActivity = function (activity) {
	        var activityId;
	        if (activity) {
	            activityId = activity.activityId;
	        }
	        return this.ActiveTimelineItemService.unsetActiveTimelineItem(activityId);
	    };
	    // region delete
	    ActivityService.prototype.deleteActivity = function (activity) {
	        return this.ActivityApiService.deleteActivity(activity);
	    };
	    //endregion
	    ActivityService.prototype.isActivityPersisted = function (activity) {
	        return !!(activity && activity.activityId);
	    };
	    ActivityService.prototype.isActivityInOpenStatus = function (activity) {
	        return activityEnums_1.OpenActivityStatus[activity.status.value] !== undefined;
	    };
	    ActivityService.prototype.isReminder = function (activity) {
	        var activityType = activity.type && +activity.type.value;
	        return (this.isActivityInOpenStatus(activity) &&
	            (activityType === activityEnums_1.ActivityType.sendEmail ||
	                activityType === activityEnums_1.ActivityType.outboundCall ||
	                this.isOtherTask(activity)));
	    };
	    ActivityService.prototype.isOtherTask = function (activity) {
	        return (activity.type && (activityEnums_1.NonOtherActivityType[activity.type.value] === undefined));
	    };
	    ActivityService.$inject = [
	        '$q',
	        'ActivityApiService',
	        'WorkNoteService',
	        'EventStatusService',
	        'TranslationCache',
	        'ServiceWrapper',
	        'salesOpportunityService',
	        'ActivityTimelineApiService',
	        'AuthenticationService',
	        'ActiveTimelineItemService',
	        'StatusMappingService'
	    ];
	    return ActivityService;
	}());
	exports.ActivityService = ActivityService;


/***/ },
/* 562 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var Moment = __webpack_require__(19);
	var EventStatusLogGroupService = (function () {
	    function EventStatusLogGroupService($q, ActiveTimelineItemService, salesOpportunityService, WorkNoteService, UserFactory, AuthenticationService, ActivityTimelineApiService, StatusMappingService) {
	        this.$q = $q;
	        this.ActiveTimelineItemService = ActiveTimelineItemService;
	        this.salesOpportunityService = salesOpportunityService;
	        this.WorkNoteService = WorkNoteService;
	        this.UserFactory = UserFactory;
	        this.AuthenticationService = AuthenticationService;
	        this.ActivityTimelineApiService = ActivityTimelineApiService;
	        this.StatusMappingService = StatusMappingService;
	    }
	    Object.defineProperty(EventStatusLogGroupService.prototype, "activeEventStatusLogGroupDetails", {
	        get: function () {
	            return this.ActiveTimelineItemService.activeTimelineItem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    EventStatusLogGroupService.prototype.setActiveEventStatusLogGroup = function (timelineItem, action) {
	        if (!timelineItem.eventStatusLogGroup) {
	            return this.$q.reject();
	        }
	        return this.ActiveTimelineItemService.setActiveTimelineItem(timelineItem.eventStatusLogGroup.GroupId, activityEnums_1.TimelineItemType.eventStatusLogGroup, action);
	    };
	    EventStatusLogGroupService.prototype.cancelActiveEventStatusLogGroup = function (eventStatusLogGroup) {
	        var groupId;
	        if (eventStatusLogGroup) {
	            groupId = eventStatusLogGroup.GroupId;
	        }
	        return this.ActiveTimelineItemService.unsetActiveTimelineItem(groupId);
	    };
	    EventStatusLogGroupService.prototype.saveActiveEventStatusLogGroup = function (timelineItem, workNote) {
	        var _this = this;
	        var showCompleteTaskCard = false;
	        var updatedTimelineItem = angular.copy(timelineItem);
	        if (timelineItem.eventStatusLogGroup.GroupId === 0) {
	            showCompleteTaskCard = true;
	        }
	        return this.salesOpportunityService.save(timelineItem.customerId.toString(), timelineItem.eventId.toString(), this.StatusMappingService.getSelectedStatuses(timelineItem.eventStatuses), false, timelineItem.eventStatusLogGroup.GroupId, timelineItem.dateCreated).then(function (result) {
	            updatedTimelineItem.eventStatusLogGroup.GroupId = +result.eventStatusLogGroupId;
	            updatedTimelineItem.activityTimelineId = +result.eventStatusLogGroupId;
	            // even if our id changed we still want to be the active item.
	            _this.ActiveTimelineItemService.activeTimelineItem.activeId = +result.eventStatusLogGroupId;
	            if (workNote && workNote.note) {
	                return _this.saveWorkNote(timelineItem.customerId, timelineItem.eventId, workNote);
	            }
	            return _this.$q.when({});
	        }).then(function (results) {
	            var workNoteResult = results;
	            if (workNoteResult.note) {
	                if (angular.isArray(timelineItem.workNotes)) {
	                    timelineItem.workNotes.unshift(workNoteResult);
	                }
	                else {
	                    timelineItem.workNotes = [workNoteResult];
	                }
	                if (updatedTimelineItem.eventStatusLogGroup && updatedTimelineItem.eventStatusLogGroup.GroupId) {
	                    _this.ActivityTimelineApiService.postEventStatusLogGroupWorkNote(workNoteResult.workNoteId, updatedTimelineItem.eventStatusLogGroup.GroupId.toString());
	                }
	            }
	            if (showCompleteTaskCard) {
	                _this.ActiveTimelineItemService.activeTimelineItem.activeActionType = activityEnums_1.ActivityActionType.completed;
	            }
	            else {
	                _this.ActiveTimelineItemService.clearActiveTimelineItemDetails();
	            }
	            return updatedTimelineItem;
	        });
	    };
	    // TODO: Move this repeated logic to the worknote service
	    EventStatusLogGroupService.prototype.saveWorkNote = function (customerId, eventId, workNote, activityId) {
	        var currentUser = this.AuthenticationService.getUser();
	        if (activityId) {
	            workNote.activityId = activityId.toString();
	        }
	        workNote.eventId = eventId.toString();
	        workNote.entityId = customerId.toString();
	        workNote.createdDate = Moment();
	        workNote.createdBy = currentUser.username;
	        return this.WorkNoteService.saveWorkNotes(workNote).then(function (workNoteResult) {
	            workNote.workNoteId = workNoteResult.workNoteId;
	            workNote.createdDate = workNoteResult.createdDate;
	            workNote.createdBy = currentUser.username;
	            workNote.fullName = currentUser.getFullName();
	            return workNote;
	        });
	    };
	    EventStatusLogGroupService.prototype.registerDirtyCheckCallback = function (dirtyCheckFn) {
	        this.ActiveTimelineItemService.registerDirtyCheckCallback(dirtyCheckFn);
	    };
	    EventStatusLogGroupService.$inject = [
	        '$q',
	        'ActiveTimelineItemService',
	        'salesOpportunityService',
	        'WorkNoteService',
	        'UserFactory',
	        'AuthenticationService',
	        'ActivityTimelineApiService',
	        'StatusMappingService'
	    ];
	    return EventStatusLogGroupService;
	}());
	exports.EventStatusLogGroupService = EventStatusLogGroupService;


/***/ },
/* 563 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var ActiveTimelineItemService = (function () {
	    function ActiveTimelineItemService($q, ModalService, TranslationCache) {
	        this.$q = $q;
	        this.ModalService = ModalService;
	        this.TranslationCache = TranslationCache;
	        this.clearActiveTimelineItemDetails();
	    }
	    ActiveTimelineItemService.prototype.clearActiveTimelineItemDetails = function () {
	        this.activeTimelineItem = {
	            activeId: -1,
	            activeTimelineItemType: null,
	            activeActionType: activityEnums_1.ActivityActionType.default
	        };
	        this.isDirtyCallback = function () { return {}; };
	    };
	    ActiveTimelineItemService.prototype.registerDirtyCheckCallback = function (dirtyCheckFn) {
	        this.isDirtyCallback = dirtyCheckFn;
	    };
	    ActiveTimelineItemService.prototype.setActiveTimelineItem = function (timelineItemId, timelineItemType, action) {
	        var _this = this;
	        return this.unsetActiveTimelineItem()
	            .then(function () {
	            _this.activeTimelineItem = {
	                activeId: timelineItemId,
	                activeTimelineItemType: timelineItemType,
	                activeActionType: action
	            };
	        });
	    };
	    ActiveTimelineItemService.prototype.unsetActiveTimelineItem = function (timelineItemId) {
	        var _this = this;
	        var deferred;
	        // make sure that the id, if provided, is the activeId before deactivating it.
	        if (timelineItemId && timelineItemId !== this.activeTimelineItem.activeId) {
	            return this.$q.reject();
	        }
	        deferred = this.$q.defer();
	        if ((this.activeTimelineItem.activeId !== -1) && this.isFormDirty()) {
	            this.showDirtyCheckModal()
	                .then(function () {
	                _this.clearActiveTimelineItemDetails();
	                deferred.resolve();
	            }, function () {
	                deferred.reject();
	            });
	        }
	        else {
	            this.clearActiveTimelineItemDetails();
	            deferred.resolve();
	        }
	        return deferred.promise;
	    };
	    ActiveTimelineItemService.prototype.isFormDirty = function () {
	        if (this.isDirtyCallback && this.isDirtyCallback().getForm && this.isDirtyCallback().getForm()) {
	            return this.isDirtyCallback().getForm().$dirty;
	        }
	        return false;
	    };
	    ActiveTimelineItemService.prototype.showDirtyCheckModal = function () {
	        var _this = this;
	        var title = this.TranslationCache.get('crm.salesOpportunity.activities.dirtyModal.TITLE');
	        var prompt = this.TranslationCache.get('crm.salesOpportunity.activities.dirtyModal.PROMPT');
	        var acceptButton = this.TranslationCache.get('crm.salesOpportunity.activities.dirtyModal.ACCEPT_BUTTON');
	        var cancelButton = this.TranslationCache.get('crm.salesOpportunity.activities.dirtyModal.CANCEL_BUTTON');
	        return this.ModalService.openModal(prompt, title, acceptButton, cancelButton)
	            .then(function (modalInstance) {
	            modalInstance.close(); // TODO: uibModal service should take care of this for us...close and dismiss are what resolve and reject the modalInstance.result (promise)
	        }, function (modalInstance) {
	            modalInstance.dismiss();
	            return _this.$q.reject(); //Stay on the reject path
	        });
	    };
	    ActiveTimelineItemService.$inject = [
	        '$q',
	        'modalService',
	        'TranslationCache'
	    ];
	    return ActiveTimelineItemService;
	}());
	exports.ActiveTimelineItemService = ActiveTimelineItemService;


/***/ },
/* 564 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var activityEnums_2 = __webpack_require__(412);
	var Moment = __webpack_require__(19);
	var TimelineItemFactory = (function () {
	    function TimelineItemFactory(ActivityService, AuthenticationService) {
	        this.ActivityService = ActivityService;
	        this.AuthenticationService = AuthenticationService;
	    }
	    TimelineItemFactory.prototype.createActivityTimelineItem = function (activityButton, customerId, eventId, eventType, campaignSteps) {
	        var activityTimelineItem = this.initNewActivityTimelineItem(customerId, eventId, eventType, campaignSteps);
	        if (activityButton === activityEnums_1.ActivityButton.storeVisit) {
	            activityTimelineItem.eventStatusLogGroup = {
	                GroupId: 0,
	                CreatedBy: this.AuthenticationService.getUserFullName(),
	                CreatedDate: Moment()
	            };
	        }
	        else {
	            var activityType;
	            if (activityButton === activityEnums_1.ActivityButton.phoneCall || activityButton === activityEnums_1.ActivityButton.phoneCallReminder) {
	                activityType = activityEnums_2.ActivityType.outboundCall;
	            }
	            else if (activityButton === activityEnums_1.ActivityButton.appointment) {
	                activityType = activityEnums_2.ActivityType.appointment;
	            }
	            activityTimelineItem.activity = this.ActivityService.initNewActivity(customerId, eventId, eventType, this.AuthenticationService.getUser());
	            activityTimelineItem.activity.type = this.ActivityService.getActivityType(activityType);
	        }
	        return activityTimelineItem;
	    };
	    TimelineItemFactory.prototype.initNewActivityTimelineItem = function (customerId, eventId, eventType, campaignSteps) {
	        var now = Moment();
	        if (!campaignSteps) {
	            campaignSteps = [];
	        }
	        return {
	            activityTimelineId: 0,
	            eventId: eventId,
	            eventType: eventType,
	            customerId: customerId,
	            workNotes: [],
	            eventStatuses: [],
	            lastUpdated: now,
	            dateCreated: now,
	            campaignSteps: campaignSteps
	        };
	    };
	    TimelineItemFactory.$inject = [
	        'ActivityService',
	        'AuthenticationService'
	    ];
	    return TimelineItemFactory;
	}());
	exports.TimelineItemFactory = TimelineItemFactory;


/***/ },
/* 565 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var Moment = __webpack_require__(19);
	var WARNING_MODAL_URL = 'app/activities/activityCard/templates/statusWarningModalTemplate.html';
	var StatusWarningService = (function () {
	    function StatusWarningService($q, modalService, ActivityTimelineApiService) {
	        this.$q = $q;
	        this.modalService = modalService;
	        this.ActivityTimelineApiService = ActivityTimelineApiService;
	        this.mostRecentIsStoreVisit = function (mostRecentOverlapItem) {
	            return mostRecentOverlapItem.eventStatusLogGroup !== null;
	        };
	        this.mostRecentIsAppointment = function (mostRecentOverlapItem) {
	            return mostRecentOverlapItem.activity && +mostRecentOverlapItem.activity.type.value === activityEnums_1.ActivityType.appointment;
	        };
	    }
	    StatusWarningService.prototype.searchPreStatusChange = function (lastUpdate, eventId, entityId) {
	        var _this = this;
	        var sameDayItems;
	        return this.ActivityTimelineApiService.getSameDayAppointmentsAndStoreVisits(entityId, eventId, Moment())
	            .then(function (sameDayCollections) {
	            sameDayItems = _.filter(sameDayCollections, function (ActivityTimelineItem) {
	                return (ActivityTimelineItem.lastUpdated.isSame(lastUpdate, "day") && _this.loggedStatusChangeItem(ActivityTimelineItem));
	            });
	            return sameDayItems;
	        });
	    };
	    StatusWarningService.prototype.loggedStatusChangeItem = function (item) {
	        return (item.status === activityEnums_1.ActivityStatus.completed && item.type === activityEnums_1.ActivityType.appointment) || item.eventStatusLogGroup !== null;
	    };
	    StatusWarningService.prototype.getMostRecentItem = function (items) {
	        var mostRecentOverlapItem = items[0];
	        if (items.length !== 1) {
	            items.forEach(function (activityTimelineItem) {
	                if (activityTimelineItem.lastUpdated.isAfter(mostRecentOverlapItem.lastUpdated) ||
	                    activityTimelineItem.lastUpdated.isAfter(mostRecentOverlapItem.dateCreated) ||
	                    activityTimelineItem.dateCreated.isAfter(mostRecentOverlapItem.dateCreated) ||
	                    activityTimelineItem.dateCreated.isAfter(mostRecentOverlapItem.lastUpdated))
	                    mostRecentOverlapItem = activityTimelineItem;
	            });
	        }
	        return mostRecentOverlapItem;
	    };
	    StatusWarningService.prototype.getOverlapStatusString = function (mostRecentStatuses, statusesToSave) {
	        var _this = this;
	        var overlapStatusesString = "";
	        _.each(statusesToSave, function (statusToSave) {
	            _.each(mostRecentStatuses, function (mostRecentStatus) {
	                if (statusToSave.status.value === mostRecentStatus.status.value && +mostRecentStatus.status.value !== +activityEnums_1.SalesStatus.contacted) {
	                    overlapStatusesString += _this.getDisplayStatusString(+mostRecentStatus.status.value) + ", ";
	                }
	            });
	        });
	        return overlapStatusesString.substring(0, overlapStatusesString.length - 2);
	    };
	    StatusWarningService.prototype.getDisplayStatusString = function (statusId) {
	        switch (statusId) {
	            case activityEnums_1.SalesStatus.demo:
	                return 'Demo';
	            case activityEnums_1.SalesStatus.fAndI:
	                return 'F&I';
	            case activityEnums_1.SalesStatus.storeVisit:
	                return 'Store Visit';
	            case activityEnums_1.SalesStatus.writeUp:
	                return 'Write Up';
	            case activityEnums_1.SalesStatus.sold:
	                return 'Sold';
	            default:
	                return '';
	        }
	    };
	    StatusWarningService.prototype.showWarning = function (itemToSave, eventId, entityId) {
	        var _this = this;
	        var overlapStatusesString = "";
	        var mostRecentOverlapItem = null;
	        var deferred = this.$q.defer();
	        var lastUpdate = itemToSave.lastUpdated || itemToSave.updateDate;
	        this.searchPreStatusChange(lastUpdate, eventId, entityId)
	            .then(function (sameDayItems) {
	            if (sameDayItems === null || sameDayItems.length === 0) {
	                deferred.resolve();
	                return deferred.promise;
	            }
	            else {
	                mostRecentOverlapItem = _this.getMostRecentItem(sameDayItems);
	                overlapStatusesString = _this.getOverlapStatusString(mostRecentOverlapItem.eventStatuses, itemToSave.eventStatuses);
	                var warningObject = {
	                    overlapStatusesString: overlapStatusesString,
	                    mostRecentOverlapItem: mostRecentOverlapItem,
	                    mostRecentIsStoreVisit: _this.mostRecentIsStoreVisit,
	                    mostRecentIsAppointment: _this.mostRecentIsAppointment,
	                    completeStatus: 'complete'
	                };
	                _this.modalService.openModalViaTemplateUrlPromise(WARNING_MODAL_URL, warningObject, function (result) {
	                    result.modalInstance.close();
	                    deferred.resolve();
	                }).catch(function (obj) {
	                    obj.modalInstance.dismiss();
	                    deferred.reject();
	                });
	            }
	        });
	        return deferred.promise;
	    };
	    StatusWarningService.$inject = [
	        '$q',
	        'modalService',
	        'ActivityTimelineApiService'
	    ];
	    return StatusWarningService;
	}());
	exports.StatusWarningService = StatusWarningService;


/***/ },
/* 566 */
/***/ function(module, exports) {

	"use strict";
	var StatusMappingService = (function () {
	    function StatusMappingService(SalesOpportunityStatusList) {
	        this.SalesOpportunityStatusList = SalesOpportunityStatusList;
	    }
	    StatusMappingService.prototype.getSalesOppStatus = function (statusId) {
	        var salesOppStatus = _.find(this.SalesOpportunityStatusList.values, function (item) {
	            return item.id === statusId;
	        });
	        if (!salesOppStatus) {
	            return null;
	        }
	        return {
	            value: salesOppStatus.id.toString(),
	            text: salesOppStatus.statusName
	        };
	    };
	    StatusMappingService.prototype.getMappedStatusList = function (existingStatuses) {
	        var statuses = this.getOrderedStatusArray();
	        return statuses.map(function (status) {
	            return {
	                selected: existingStatuses && existingStatuses.some(function (s) { return s.status.value == status.id.toString(); }),
	                translationKey: 'crm.salesOpportunity.statusAthirdwayofsayingthesamething.' + status.statusName,
	                statusObject: status,
	                statusName: status.statusName
	            };
	        });
	    };
	    StatusMappingService.prototype.getOrderedStatusArray = function () {
	        return [
	            this.SalesOpportunityStatusList.qualifiedContact,
	            this.SalesOpportunityStatusList.storeVisit,
	            this.SalesOpportunityStatusList.demo,
	            this.SalesOpportunityStatusList.confirmed,
	            this.SalesOpportunityStatusList.proposal,
	            this.SalesOpportunityStatusList.sold,
	            this.SalesOpportunityStatusList.turn
	        ];
	    };
	    StatusMappingService.prototype.getSelectedStatuses = function (eventStatuses) {
	        var _this = this;
	        return eventStatuses
	            .map(function (status) {
	            return _.find(_this.SalesOpportunityStatusList.values, function (salesStatus) {
	                return salesStatus.id === +status.status.value;
	            });
	        });
	    };
	    StatusMappingService.$inject = [
	        'SalesOpportunityStatusList'
	    ];
	    return StatusMappingService;
	}());
	exports.StatusMappingService = StatusMappingService;


/***/ },
/* 567 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var ActivityCardDirective = __webpack_require__(568);
	module.exports = angular.module("crm.activity.activityCard", [])
	    .directive('crmActivityCard', ActivityCardDirective);


/***/ },
/* 568 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(569);
	function ActivityCardDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            activityTimelineItem: '='
	        },
	        templateUrl: 'app/activities/activityCard/template.html',
	        controller: controller_1.ActivityCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = ActivityCardDirective;


/***/ },
/* 569 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var moment = __webpack_require__(19);
	var activityEnums_2 = __webpack_require__(412);
	var ActivityCardController = (function () {
	    function ActivityCardController(activityTimelineService) {
	        var _this = this;
	        this.activityTimelineService = activityTimelineService;
	        this.onSaveSuccess = function (activity, buttonType) {
	            _this.status = _this.getStatus(activity);
	            _this.activityTimelineItem = _this.activityTimelineService.saveActivityTimelineItem(_this.activityTimelineItem, activity, buttonType);
	            _this.activity = angular.copy(_this.activityTimelineItem.activity);
	        };
	        this.onCancel = function (activity) {
	            // reset the activity.
	            _this.activityTimelineService.cancelActivityTimelineItem(_this.activityTimelineItem);
	            _this.activity = angular.copy(_this.activityTimelineItem.activity);
	        };
	        this.onCloseComplete = function (activityButton) {
	            if (_this.activityTimelineItem && _this.activityTimelineItem.activity && (_this.activityTimelineItem.activity.type.value === activityEnums_1.ActivityType.sendEmail.toString()
	                || _this.activityTimelineItem.activity.type.value === activityEnums_1.ActivityType.emailReceived.toString())) {
	                _this.activityTimelineService.reloadActivityTimelineItems();
	            }
	            _this.activityTimelineService.onCompletedTimeout(_this.activityTimelineItem, activityButton);
	        };
	        this.activity = angular.copy(this.activityTimelineItem.activity);
	        this.ActivityActionType = activityEnums_1.ActivityActionType;
	        this.status = this.getStatus(this.activity);
	        this.contact = activityTimelineService.contact;
	        this.contactName = this.contact.getFullName();
	    }
	    Object.defineProperty(ActivityCardController.prototype, "isActive", {
	        // public properties
	        get: function () {
	            return (this.activityTimelineService
	                && (this.activityTimelineService.activeTimelineItem.activeTimelineItemType === activityEnums_2.TimelineItemType.activity)
	                && (this.activityTimelineService.activeTimelineItem.activeId === this.activityTimelineItem.activity.activityId));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ActivityCardController.prototype.showTaskCard = function (activityActionType) {
	        return ((activityActionType === this.activityTimelineService.activeTimelineItem.activeActionType));
	    };
	    ActivityCardController.prototype.getStatus = function (activity) {
	        if (activityEnums_1.OpenActivityStatus[+activity.status.value]) {
	            if (moment().diff(activity.dueDate, 'days') > 0) {
	                return 'overdue';
	            }
	            return 'open';
	        }
	        return 'complete';
	    };
	    ActivityCardController.$inject = [
	        'ActivityTimelineService'
	    ];
	    return ActivityCardController;
	}());
	exports.ActivityCardController = ActivityCardController;


/***/ },
/* 570 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var confirmApptDirective = __webpack_require__(571);
	module.exports = angular.module('crm.activities.confirmAppt', [])
	    .directive('crmConfirmAppt', confirmApptDirective);


/***/ },
/* 571 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(572);
	function confirmApptDirective() {
	    return {
	        restrict: 'E',
	        controller: controller_1.ConfirmApptController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/confirmAppt/template.html',
	        scope: {
	            activity: '=',
	            onSave: '&',
	            onCancel: '&',
	            status: '='
	        }
	    };
	}
	module.exports = confirmApptDirective;


/***/ },
/* 572 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var ConfirmApptController = (function () {
	    function ConfirmApptController(ActivityService) {
	        this.ActivityService = ActivityService;
	        this.ActivityButton = activityEnums_1.ActivityButton;
	        this.isWaiting = false;
	    }
	    ConfirmApptController.prototype.confirmAppointment = function (type) {
	        var _this = this;
	        this.isWaiting = true;
	        this.ActivityService.saveActiveActivity(this.activity, null, activityEnums_1.ActivityStatus.confirmed)
	            .then(function (activity) {
	            if (_this.onSave) {
	                _this.onSave({
	                    activity: activity,
	                    type: type
	                });
	            }
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    ConfirmApptController.prototype.cancel = function () {
	        var _this = this;
	        this.isWaiting = true;
	        this.ActivityService.cancelActiveActivity(this.activity)
	            .then(function () {
	            if (_this.onCancel) {
	                _this.onCancel();
	            }
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    ConfirmApptController.$inject = [
	        'ActivityService'
	    ];
	    return ConfirmApptController;
	}());
	exports.ConfirmApptController = ConfirmApptController;


/***/ },
/* 573 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var activitiesListDirective = __webpack_require__(574);
	module.exports = angular.module('crm.activities.list', [])
	    .directive('crmActivitiesList', activitiesListDirective);


/***/ },
/* 574 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(575);
	function activitiesListDirective() {
	    return {
	        restrict: 'E',
	        controller: controller_1.ActivitiesListController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/activitiesList/template.html',
	        transclude: true,
	        scope: {
	            contact: '=',
	            event: '=',
	            eventType: '='
	        }
	    };
	}
	module.exports = activitiesListDirective;


/***/ },
/* 575 */
/***/ function(module, exports) {

	"use strict";
	var ActivitiesListController = (function () {
	    function ActivitiesListController($stateParams, ActivityTimelineService, ActivityService) {
	        this.ActivityTimelineService = ActivityTimelineService;
	        this.ActivityService = ActivityService;
	        this.init($stateParams);
	    }
	    Object.defineProperty(ActivitiesListController.prototype, "filteredActivityTimeline", {
	        get: function () {
	            return this.ActivityTimelineService.activityTimeline;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    ActivitiesListController.prototype.init = function ($stateParams) {
	        var _this = this;
	        this.isWaiting = true;
	        this.ActivityTimelineService.loadActivityTimelineItems(this.contact, +this.event.id, this.eventType, true)
	            .then(function () {
	            if ($stateParams['initialActivityType']) {
	                _this.ActivityTimelineService.addTempActivity(+$stateParams.initialActivityType);
	                $stateParams['initialActivityType'] = null;
	            }
	            else if ($stateParams['activityId']) {
	                var activityId = $stateParams['activityId'];
	                var activityTimelineItem = _.find(_this.ActivityTimelineService.openActivityTimelineItems, function (timelineItem) {
	                    return (timelineItem.activity && timelineItem.activity.activityId === +activityId);
	                });
	                if (activityTimelineItem && activityTimelineItem.activity) {
	                    var activityAction = _this.ActivityService.determineAction(activityTimelineItem.activity);
	                    _this.ActivityService.setActiveActivity(activityTimelineItem, activityAction);
	                }
	            }
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    ActivitiesListController.$inject = [
	        '$stateParams',
	        'ActivityTimelineService',
	        'ActivityService'
	    ];
	    return ActivitiesListController;
	}());
	exports.ActivitiesListController = ActivitiesListController;


/***/ },
/* 576 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var logPhoneCallDirective = __webpack_require__(577);
	module.exports = angular.module('crm.activities.logPhoneCall', [])
	    .directive('crmLogPhoneCall', logPhoneCallDirective);


/***/ },
/* 577 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(578);
	function logPhoneCallDirective() {
	    return {
	        restrict: 'E',
	        controller: controller_1.LogPhoneCallController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/logPhoneCall/template.html',
	        scope: {
	            contact: '=',
	            activity: '=',
	            onSave: '&',
	            onCancel: '&',
	            status: '=',
	            canCancel: '=?'
	        }
	    };
	}
	module.exports = logPhoneCallDirective;


/***/ },
/* 578 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var LogPhoneCallController = (function () {
	    function LogPhoneCallController(ModalService, ActivityService, $window) {
	        var _this = this;
	        this.ModalService = ModalService;
	        this.ActivityService = ActivityService;
	        this.$window = $window;
	        this.activityStatus = activityEnums_1.ActivityStatus;
	        this.activityType = activityEnums_1.ActivityType;
	        this.showPhoneScriptModal = function () {
	            _this.ModalService.openModalViaTemplateUrl("app/activities/logPhoneCall/phoneScript/phoneScriptModal.html", _this, false);
	        };
	        this.isWaiting = false;
	        if (!angular.isDefined(this.canCancel)) {
	            this.canCancel = true;
	        }
	        if (this.canCancel) {
	            ActivityService.registerDirtyCheckCallback(function () {
	                return {
	                    getForm: function () {
	                        return _this.form;
	                    }
	                };
	            });
	        }
	        this.isPersisted = ActivityService.isActivityPersisted(this.activity);
	        if (this.isPersisted) {
	            this.callStatus = this.setInitialCallStatus(+this.activity.status.value);
	            this.callType = +this.activity.type.value;
	        }
	        this.initTitle();
	    }
	    // Check if status is one of possible log phone call states.
	    LogPhoneCallController.prototype.setInitialCallStatus = function (status) {
	        if (status === activityEnums_1.ActivityStatus.badNumber || status === activityEnums_1.ActivityStatus.completed ||
	            status === activityEnums_1.ActivityStatus.leftMessage || status === activityEnums_1.ActivityStatus.noAnswer) {
	            return status;
	        }
	        return null;
	    };
	    Object.defineProperty(LogPhoneCallController.prototype, "assignedTos", {
	        get: function () {
	            return this.ActivityService.activitiesRefDefs.assignedTos;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    LogPhoneCallController.prototype.initTitle = function () {
	        if (this.isPersisted && this.activity.type) {
	            if (!this.ActivityService.isActivityInOpenStatus(this.activity)) {
	                if (+this.activity.type.value === activityEnums_1.ActivityType.outboundCall) {
	                    this.title = 'crm.activities.logCall.EDIT_OUTBOUND_TITLE';
	                }
	                if (+this.activity.type.value === activityEnums_1.ActivityType.inboundCall) {
	                    this.title = 'crm.activities.logCall.EDIT_INBOUND_TITLE';
	                }
	            }
	            else {
	                if (+this.activity.type.value === activityEnums_1.ActivityType.outboundCall) {
	                    this.title = 'crm.activities.logCall.LOG_OUTBOUND_TITLE';
	                }
	                if (+this.activity.type.value === activityEnums_1.ActivityType.inboundCall) {
	                    this.title = 'crm.activities.logCall.LOG_INBOUND_TITLE';
	                }
	            }
	        }
	        else {
	            this.title = 'crm.activities.logCall.TITLE';
	        }
	    };
	    LogPhoneCallController.prototype.isInbound = function () {
	        return (this.callType === activityEnums_1.ActivityType.inboundCall);
	    };
	    LogPhoneCallController.prototype.isOutbound = function () {
	        return (this.callType === activityEnums_1.ActivityType.outboundCall);
	    };
	    LogPhoneCallController.prototype.savePhoneCall = function () {
	        var _this = this;
	        if (this.form.$invalid) {
	            this.submitted = true;
	            return;
	        }
	        this.isWaiting = true;
	        if (!this.ActivityService.isActivityPersisted(this.activity)) {
	            this.activity.activityId = 0;
	        }
	        this.activity.type = this.ActivityService.getActivityType(+this.callType);
	        this.ActivityService.saveActiveActivity(this.activity, this.newWorkNote, +this.callStatus)
	            .then(function (activity) {
	            if (_this.onSave) {
	                _this.onSave({
	                    activity: activity
	                });
	            }
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    LogPhoneCallController.prototype.cancel = function () {
	        var _this = this;
	        this.isWaiting = true;
	        this.ActivityService.cancelActiveActivity(this.activity)
	            .then(function () {
	            if (_this.onCancel) {
	                _this.onCancel();
	            }
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    LogPhoneCallController.prototype.hasPhoneScript = function () {
	        return this.activity && this.activity.phoneScript && this.activity.phoneScript.value && this.activity.phoneScript.value !== "0";
	    };
	    LogPhoneCallController.prototype.openListenToCallWindow = function () {
	        this.$window.open(this.activity.listenToCallInfo.listenToCallUrl);
	    };
	    LogPhoneCallController.$inject = [
	        'modalService',
	        'ActivityService',
	        '$window'
	    ];
	    return LogPhoneCallController;
	}());
	exports.LogPhoneCallController = LogPhoneCallController;


/***/ },
/* 579 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var setApptDirective = __webpack_require__(580);
	module.exports = angular.module('crm.activities.setAppt', [])
	    .directive('crmSetAppt', setApptDirective);


/***/ },
/* 580 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(581);
	function setApptDirective() {
	    return {
	        restrict: 'E',
	        controller: controller_1.SetApptController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/setAppt/template.html',
	        scope: {
	            activity: '=',
	            onSave: '&',
	            onCancel: '&',
	            status: '='
	        }
	    };
	}
	module.exports = setApptDirective;


/***/ },
/* 581 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var moment = __webpack_require__(19);
	var SetApptController = (function () {
	    function SetApptController(ActivityService) {
	        var _this = this;
	        this.ActivityService = ActivityService;
	        this.MAX_COMMENT_LENGTH = 254;
	        this.showActivityTypeRequired = false;
	        this.isWaiting = false;
	        ActivityService.registerDirtyCheckCallback(function () {
	            return {
	                getForm: function () {
	                    return _this.form;
	                }
	            };
	        });
	        this.isPersisted = ActivityService.isActivityPersisted(this.activity);
	        this.newDueDate = this.activity.dueDate.toDate() || new Date();
	        this.newDueTime = this.activity.dueTime || this.ActivityService.findClosestTime(moment());
	        this.showAllFields = false;
	        this.datePickerOpen = false;
	        if (this.isPersisted) {
	            this.title = 'crm.activities.setAppointment.EDIT_APPOINTMENT';
	        }
	        else {
	            this.title = 'crm.activities.setAppointment.SET_APPOINTMENT';
	        }
	    }
	    SetApptController.prototype.assignedTos = function () {
	        return this.ActivityService.activitiesRefDefs.assignedTos;
	    };
	    SetApptController.prototype.ranks = function () {
	        return this.ActivityService.activitiesRefDefs.ranks;
	    };
	    SetApptController.prototype.taskCategories = function () {
	        return this.ActivityService.activitiesRefDefs.toDoCodes;
	    };
	    SetApptController.prototype.startTimes = function () {
	        return this.ActivityService.activitiesRefDefs.dueTimes;
	    };
	    SetApptController.prototype.openDatePicker = function () {
	        this.datePickerOpen = !this.datePickerOpen;
	    };
	    SetApptController.prototype.cancel = function () {
	        var _this = this;
	        this.isWaiting = true;
	        this.ActivityService.cancelActiveActivity(this.activity)
	            .then(function () {
	            if (_this.onCancel) {
	                _this.onCancel();
	            }
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    SetApptController.prototype.saveAppt = function () {
	        var _this = this;
	        if (this.form.$invalid) {
	            this.submitted = true;
	            return;
	        }
	        this.isWaiting = true;
	        this.activity.dueDate = moment(this.newDueDate);
	        this.activity.dueTime = this.newDueTime;
	        this.ActivityService.saveActiveActivity(this.activity)
	            .then(function (activity) {
	            if (_this.onSave) {
	                _this.onSave({
	                    activity: activity
	                });
	            }
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    SetApptController.prototype.toggleShow = function () {
	        this.showAllFields = !this.showAllFields;
	    };
	    SetApptController.$inject = [
	        'ActivityService'
	    ];
	    return SetApptController;
	}());
	exports.SetApptController = SetApptController;


/***/ },
/* 582 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var setReminderDirective = __webpack_require__(583);
	module.exports = angular.module('crm.activities.setReminder', [])
	    .directive('crmSetReminder', setReminderDirective);


/***/ },
/* 583 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(584);
	function setReminderDirective() {
	    return {
	        restrict: 'E',
	        controller: controller_1.SetReminderController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/setReminder/template.html',
	        scope: {
	            activity: '=',
	            onSave: '&',
	            onCancel: '&',
	            status: '='
	        }
	    };
	}
	module.exports = setReminderDirective;


/***/ },
/* 584 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var moment = __webpack_require__(19);
	var SetReminderController = (function () {
	    function SetReminderController(ActivityService, permissionService) {
	        var _this = this;
	        this.ActivityService = ActivityService;
	        this.permissionService = permissionService;
	        this.MAX_COMMENT_LENGTH = 254;
	        this.reminderActivityTypes = [];
	        this.showActivityTypeRequired = false;
	        this.isWaiting = false;
	        ActivityService.registerDirtyCheckCallback(function () {
	            return {
	                getForm: function () {
	                    return _this.form;
	                }
	            };
	        });
	        this.isPersisted = ActivityService.isActivityPersisted(this.activity);
	        this.newDueDate = this.activity.dueDate.toDate() || new Date();
	        this.newDueTime = this.activity.dueTime || this.ActivityService.findClosestTime(moment());
	        this.showAllFields = false;
	        this.datePickerOpen = false;
	        if (this.isPersisted) {
	            if (this.isPhoneCall()) {
	                this.title = 'crm.activities.setReminder.EDIT_CALL_REMINDER';
	            }
	            else {
	                this.title = 'crm.activities.setAppointment.EDIT_REMINDER';
	            }
	        }
	        else {
	            if (this.isPhoneCall()) {
	                this.title = 'crm.activities.setReminder.SET_CALL_REMINDER';
	            }
	            else {
	                this.title = 'crm.activities.setAppointment.SET_REMINDER';
	            }
	        }
	        this.permissionService.getPermission('InsertRestriction:ActivityType')
	            .then(function (permission) {
	            _this.activityTypePermission = permission;
	            _this.setAllowedActivityTypes();
	        });
	    }
	    SetReminderController.prototype.setAllowedActivityTypes = function () {
	        var _this = this;
	        var allReminderActivityTypes = this.ActivityService.getReminderActivityTypes();
	        if (!this.activityTypePermission.restricted) {
	            this.reminderActivityTypes = allReminderActivityTypes;
	        }
	        else {
	            this.reminderActivityTypes = _.filter(allReminderActivityTypes, function (taskType) {
	                return _.contains(_this.activityTypePermission.enabledValues, taskType.value);
	            });
	        }
	    };
	    SetReminderController.prototype.assignedTos = function () {
	        return this.ActivityService.activitiesRefDefs.assignedTos;
	    };
	    SetReminderController.prototype.ranks = function () {
	        return this.ActivityService.activitiesRefDefs.ranks;
	    };
	    SetReminderController.prototype.taskCategories = function () {
	        return this.ActivityService.activitiesRefDefs.toDoCodes;
	    };
	    SetReminderController.prototype.startTimes = function () {
	        return this.ActivityService.activitiesRefDefs.dueTimes;
	    };
	    SetReminderController.prototype.openDatePicker = function () {
	        this.datePickerOpen = !this.datePickerOpen;
	    };
	    SetReminderController.prototype.cancel = function () {
	        var _this = this;
	        this.isWaiting = true;
	        this.ActivityService.cancelActiveActivity(this.activity)
	            .then(function () {
	            if (_this.onCancel) {
	                _this.onCancel();
	            }
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    SetReminderController.prototype.invalidActivityType = function (dropdown) {
	        return this.submitted && (dropdown.$error.required || this.activity.type.value === null);
	    };
	    SetReminderController.prototype.saveReminder = function () {
	        var _this = this;
	        if (this.form.$invalid || this.activity.type.value === null) {
	            this.submitted = true;
	            return;
	        }
	        this.isWaiting = true;
	        this.activity.dueDate = moment(this.newDueDate);
	        this.activity.dueTime = this.newDueTime;
	        this.ActivityService.saveActiveActivity(this.activity)
	            .then(function (activity) {
	            if (_this.onSave) {
	                _this.onSave({
	                    activity: activity
	                });
	            }
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    SetReminderController.prototype.toggleShow = function () {
	        this.showAllFields = !this.showAllFields;
	    };
	    SetReminderController.prototype.isPhoneCall = function () {
	        if (!this.activity) {
	            return false;
	        }
	        return this.ActivityService.isPhoneCall(this.activity);
	    };
	    SetReminderController.$inject = [
	        'ActivityService',
	        'permissionService'
	    ];
	    return SetReminderController;
	}());
	exports.SetReminderController = SetReminderController;


/***/ },
/* 585 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var ActivityCommentDirective = __webpack_require__(586);
	module.exports = angular.module("crm.activity.comment", [])
	    .directive('crmActivityComment', ActivityCommentDirective);


/***/ },
/* 586 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(587);
	function ActivityCommentDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            comment: '='
	        },
	        templateUrl: 'app/activities/activityComment/template.html',
	        controller: controller_1.ActivityCommentController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = ActivityCommentDirective;


/***/ },
/* 587 */
/***/ function(module, exports) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var ActivityCommentController = (function () {
	    function ActivityCommentController() {
	    }
	    return ActivityCommentController;
	}());
	exports.ActivityCommentController = ActivityCommentController;


/***/ },
/* 588 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var logAppointmentDirective = __webpack_require__(589);
	module.exports = angular.module('crm.activities.logAppointment', [])
	    .directive('crmLogAppointment', logAppointmentDirective);


/***/ },
/* 589 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(590);
	function logAppointmentDirective() {
	    return {
	        restrict: 'E',
	        controller: controller_1.LogAppointmentController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/logAppointment/template.html',
	        scope: {
	            activity: '=',
	            contact: '=',
	            onSave: '&',
	            onCancel: '&',
	            status: '='
	        }
	    };
	}
	module.exports = logAppointmentDirective;


/***/ },
/* 590 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var moment = __webpack_require__(19);
	var LogAppointmentController = (function () {
	    function LogAppointmentController(SalesOpportunityStatusList, ActivityService, permissionService, StatusMappingService, statusWarningService) {
	        var _this = this;
	        this.SalesOpportunityStatusList = SalesOpportunityStatusList;
	        this.ActivityService = ActivityService;
	        this.permissionService = permissionService;
	        this.StatusMappingService = StatusMappingService;
	        this.statusWarningService = statusWarningService;
	        this.initialSalesOppStatuses = [];
	        this.salesOppStatuses = [];
	        this.canEditEventDate = false;
	        this.submitted = false;
	        this.isWaiting = false;
	        this.permissionService.getPermission('EvtSalesStatus')
	            .then(function (permission) {
	            if (permission.view) {
	                _this.canEditEventDate = true;
	            }
	        });
	        ActivityService.registerDirtyCheckCallback(function () {
	            return {
	                getForm: function () {
	                    return _this.form;
	                }
	            };
	        });
	        if (this.isInOpenStatus()) {
	            this.title = "crm.activities.logAppointment.LOG_APPOINTMENT";
	        }
	        else {
	            this.title = "crm.activities.logAppointment.EDIT_LOGGED_APPOINTMENT";
	        }
	        this.setInitialRadioButtonStates();
	        this.maxShowedUpDate = new Date();
	        if (this.activity.dueDate && this.activity.dueDate.toDate() <= this.maxShowedUpDate) {
	            this.showedUpDate = this.activity.dueDate.toDate();
	        }
	        else {
	            this.showedUpDate = new Date();
	        }
	    }
	    //region initialize
	    LogAppointmentController.prototype.setInitialRadioButtonStates = function () {
	        if (this.activity.status) {
	            switch (+this.activity.status.value) {
	                case activityEnums_1.ActivityStatus.completed:
	                    this.madeItToStore = 'Y';
	                    break;
	                case activityEnums_1.ActivityStatus.noShow:
	                    this.madeItToStore = 'N';
	                    this.didNotShowReason = 'no_show';
	                    break;
	                case activityEnums_1.ActivityStatus.cancelled:
	                    this.madeItToStore = 'N';
	                    this.didNotShowReason = 'cancelled';
	                    break;
	                case activityEnums_1.ActivityStatus.unreportedShow:
	                    this.madeItToStore = 'U';
	                    break;
	            }
	        }
	        this.madeAppointment = (this.madeItToStore === 'Y') || (this.madeItToStore === 'U');
	        this.missedAppointment = (this.madeItToStore === 'N');
	    };
	    //endregion
	    LogAppointmentController.prototype.save = function (form) {
	        var _this = this;
	        if (form.$invalid) {
	            this.submitted = true;
	            return;
	        }
	        this.isWaiting = true;
	        var statuses = [];
	        if (this.isSalesOpportunityType()) {
	            statuses = this.salesOppStatuses
	                .filter(function (status) { return status.selected; })
	                .map(function (status) {
	                return status.statusObject;
	            });
	            if (this.madeAppointment) {
	                statuses.unshift(this.SalesOpportunityStatusList.qualifiedContact, this.SalesOpportunityStatusList.storeVisit);
	            }
	            this.activity.eventStatuses = statuses
	                .filter(function (status) {
	                return status.id !== _this.SalesOpportunityStatusList.turn.id;
	            }).map(function (status) {
	                return {
	                    eventStatusId: status.id,
	                    status: _this.StatusMappingService.getSalesOppStatus(status.id)
	                };
	            });
	        }
	        var newActivityStatus = this.getNewActivityStatus();
	        var dateCreated;
	        if (this.isInOpenStatus()) {
	            dateCreated = moment(this.showedUpDate.toUTCString());
	        }
	        if (this.activity.eventStatuses.length === 0) {
	            this.ActivityService.saveActiveActivity(this.activity, this.newWorkNote, newActivityStatus, dateCreated)
	                .then(function (activity) {
	                if (_this.onSave) {
	                    _this.onSave({
	                        activity: activity
	                    });
	                }
	            }).finally(function () {
	                _this.isWaiting = false;
	            });
	        }
	        else {
	            this.statusWarningService.showWarning(this.activity, this.activity.eventId, +this.contact.id)
	                .then(function () {
	                _this.ActivityService.saveActiveActivity(_this.activity, _this.newWorkNote, newActivityStatus, dateCreated)
	                    .then(function (activity) {
	                    if (_this.onSave) {
	                        _this.onSave({
	                            activity: activity
	                        });
	                    }
	                });
	            }).finally(function () {
	                _this.isWaiting = false;
	            });
	        }
	    };
	    LogAppointmentController.prototype.getNewActivityStatus = function () {
	        switch (this.madeItToStore) {
	            case 'Y':
	                return activityEnums_1.ActivityStatus.completed;
	            case 'N':
	                if (this.didNotShowReason === 'no_show') {
	                    return activityEnums_1.ActivityStatus.noShow;
	                }
	                else if (this.didNotShowReason === 'cancelled') {
	                    return activityEnums_1.ActivityStatus.cancelled;
	                }
	            case 'U':
	                return activityEnums_1.ActivityStatus.unreportedShow;
	        }
	    };
	    LogAppointmentController.prototype.cancel = function () {
	        var _this = this;
	        this.isWaiting = true;
	        this.ActivityService.cancelActiveActivity(this.activity)
	            .then(function () {
	            if (_this.onCancel) {
	                _this.onCancel();
	            }
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    LogAppointmentController.prototype.clearStatuses = function (madeItToStore) {
	        this.submitted = false;
	        this.madeAppointment = (madeItToStore === 'Y') || (this.madeItToStore === 'U');
	        this.missedAppointment = (madeItToStore === 'N');
	        if (this.madeAppointment) {
	            this.salesOppStatuses = this.initialSalesOppStatuses
	                .map(function (status) {
	                return angular.copy(status);
	            });
	        }
	        else {
	            this.salesOppStatuses.forEach(function (status) {
	                status.selected = false;
	            });
	        }
	        this.didNotShowReason = "";
	    };
	    LogAppointmentController.prototype.showMadeItToStoreRequired = function (form, submitted) {
	        return (submitted && form['madeItToStore'].$error.required);
	    };
	    LogAppointmentController.prototype.showWhyNotRequired = function (form, submitted) {
	        return (submitted && form['didNotShowReason'].$error.required);
	    };
	    LogAppointmentController.prototype.isInOpenStatus = function () {
	        return this.ActivityService.isActivityInOpenStatus(this.activity);
	    };
	    LogAppointmentController.prototype.hasUnreportedShowStatus = function () {
	        if (!this.isSalesOpportunityType()) {
	            return false;
	        }
	        return this.ActivityService.activitiesRefDefs.statuses.some(function (status) {
	            return +status.value === activityEnums_1.ActivityStatus.unreportedShow;
	        });
	    };
	    LogAppointmentController.prototype.isSalesOpportunityType = function () {
	        return this.activity.eventType === activityEnums_1.OpportunityEventType.sales;
	    };
	    LogAppointmentController.$inject = [
	        'SalesOpportunityStatusList',
	        'ActivityService',
	        'permissionService',
	        'StatusMappingService',
	        'statusWarningService'
	    ];
	    return LogAppointmentController;
	}());
	exports.LogAppointmentController = LogAppointmentController;


/***/ },
/* 591 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var workNoteEditor = __webpack_require__(592);
	module.exports = angular.module('crm.activities.workNoteEditor', [])
	    .directive('crmWorkNoteEditor', workNoteEditor);


/***/ },
/* 592 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(593);
	workNoteEditor.$inject = ['$timeout'];
	function workNoteEditor($timeout) {
	    return {
	        restrict: 'E',
	        controller: controller_1.WorkNoteEditorController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/workNoteEditor/template.html',
	        scope: {
	            worknote: '=?',
	            eventId: '=',
	            customerId: '=',
	            workNotes: '=',
	            displayonly: '=?',
	            disableInfoText: '=?'
	        },
	        link: {
	            post: function ($scope, $element, $attrs, controller) {
	                // TODO: refactor this so it works better, maybe remove the watch?
	                var expanderSection = $element.find('.ws-expand-section');
	                var updateCanExpand = function () {
	                    $timeout(function () {
	                        var hasMultipleItems = controller.workNotes &&
	                            $scope.ctrl.workNotes.length > 1;
	                        var scrollHeight = expanderSection[0].scrollHeight;
	                        var innerHeight = expanderSection.innerHeight();
	                        var isOverflown = scrollHeight > innerHeight;
	                        controller.canExpand = isOverflown || hasMultipleItems;
	                    });
	                };
	                var killWatch = $scope.$watchCollection('ctrl.workNotes', updateCanExpand);
	                updateCanExpand();
	                $scope.$on('$destroy', function () {
	                    killWatch();
	                });
	            }
	        }
	    };
	}
	module.exports = workNoteEditor;


/***/ },
/* 593 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var WorkNoteEditorController = (function () {
	    function WorkNoteEditorController(WorkNoteFactory) {
	        this.WorkNoteFactory = WorkNoteFactory;
	        this.addOpen = this.workNotes.length < 1;
	        this.sortWorkNotes();
	    }
	    WorkNoteEditorController.prototype.sortWorkNotes = function () {
	        this.workNotes = _.sortBy(this.workNotes, function (workNote) {
	            return workNote.createdDate;
	        }).reverse();
	    };
	    WorkNoteEditorController.prototype.addWorkNote = function () {
	        this.worknote = this.WorkNoteFactory.create();
	        this.worknote.eventId = this.eventId.toString();
	        this.worknote.entityId = this.customerId.toString();
	        this.worknote.note = '';
	        this.addOpen = true;
	    };
	    WorkNoteEditorController.prototype.toggleExpand = function () {
	        this.expanded = !this.expanded;
	    };
	    WorkNoteEditorController.$inject = [
	        'WorkNoteFactory',
	    ];
	    return WorkNoteEditorController;
	}());
	exports.WorkNoteEditorController = WorkNoteEditorController;


/***/ },
/* 594 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var workNoteView = __webpack_require__(595);
	module.exports = angular.module('crm.activities.workNoteView', [])
	    .directive('crmWorkNoteView', workNoteView);


/***/ },
/* 595 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(596);
	workNoteEditor.$inject = ['$timeout'];
	function workNoteEditor($timeout) {
	    return {
	        restrict: 'E',
	        controller: controller_1.WorkNoteViewController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/workNoteView/template.html',
	        scope: {
	            worknote: '=',
	            disableInfoText: '=?'
	        }
	    };
	}
	module.exports = workNoteEditor;


/***/ },
/* 596 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var WorkNoteViewController = (function () {
	    function WorkNoteViewController() {
	    }
	    return WorkNoteViewController;
	}());
	exports.WorkNoteViewController = WorkNoteViewController;


/***/ },
/* 597 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var completeTaskCardDirective = __webpack_require__(598);
	module.exports = angular.module('crm.activities.completeTaskCard', [])
	    .directive('crmCompleteTaskCard', completeTaskCardDirective);


/***/ },
/* 598 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(599);
	function completeTaskCardDirective() {
	    return {
	        restrict: 'E',
	        controller: controller_1.CompleteTaskCardController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/completeTaskCard/template.html',
	        scope: {
	            campaignSteps: '=',
	            eventType: '=',
	            onClose: '&'
	        }
	    };
	}
	module.exports = completeTaskCardDirective;


/***/ },
/* 599 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var CLOSE_TIME = 20000;
	var CompleteTaskCardController = (function () {
	    function CompleteTaskCardController($scope, $timeout) {
	        var _this = this;
	        this.$timeout = $timeout;
	        this.ActivityButton = activityEnums_1.ActivityButton;
	        this.OpportunityEventType = activityEnums_1.OpportunityEventType;
	        this.timeoutPromise = $timeout(function () {
	            _this.closeCompleteTaskCard();
	        }, CLOSE_TIME);
	        $scope.$on('$destroy', function () {
	            _this.$timeout.cancel(_this.timeoutPromise);
	        });
	    }
	    CompleteTaskCardController.prototype.createActivity = function (activityButton) {
	        this.closeCompleteTaskCard(activityButton);
	    };
	    CompleteTaskCardController.prototype.closeCompleteTaskCard = function (activityButton) {
	        this.$timeout.cancel(this.timeoutPromise);
	        if (this.onClose) {
	            this.onClose({ type: activityButton });
	        }
	    };
	    CompleteTaskCardController.$inject = [
	        '$scope',
	        '$timeout'
	    ];
	    return CompleteTaskCardController;
	}());
	exports.CompleteTaskCardController = CompleteTaskCardController;


/***/ },
/* 600 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var phoneScriptDirective = __webpack_require__(601);
	module.exports = angular.module('crm.activities.logPhoneCall.phoneScript', [])
	    .directive('crmPhoneScript', phoneScriptDirective);


/***/ },
/* 601 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var PhoneScriptController = __webpack_require__(602);
	function PhoneScriptDirective() {
	    return {
	        restrict: 'E',
	        controller: PhoneScriptController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/logPhoneCall/phoneScript/phoneScriptTemplate.html',
	        scope: {
	            siteId: '=',
	            documentId: '=',
	            entityId: '=',
	            eventId: '='
	        }
	    };
	}
	module.exports = PhoneScriptDirective;


/***/ },
/* 602 */
/***/ function(module, exports) {

	"use strict";
	var PhoneScriptController = (function () {
	    function PhoneScriptController(AuthenticationService, AppSettings) {
	        this.AppSettings = AppSettings;
	        var user = AuthenticationService.getUser();
	        this.userName = user.username;
	    }
	    PhoneScriptController.prototype.buildPhoneScriptUrl = function () {
	        var url = this.AppSettings.crmUrl + "/document/viewPhoneScript.aspx?SiteId=" + this.siteId +
	            '&DocId=' + this.documentId + '&EntityId=' + this.entityId +
	            '&DocType=1&NoteType=3&EventId=' + this.eventId + '&User=' + this.userName;
	        return url;
	    };
	    PhoneScriptController.$inject = [
	        'AuthenticationService',
	        'AppSettings'
	    ];
	    return PhoneScriptController;
	}());
	module.exports = PhoneScriptController;


/***/ },
/* 603 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var logOtherTaskDirective = __webpack_require__(604);
	module.exports = angular.module('crm.activities.logOtherTask', [])
	    .directive('crmLogOtherTask', logOtherTaskDirective);


/***/ },
/* 604 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(605);
	function logOtherTaskDirective() {
	    return {
	        restrict: 'E',
	        controller: controller_1.LogOtherTaskController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/logOtherTask/template.html',
	        scope: {
	            activity: '=',
	            onSave: '&',
	            onCancel: '&',
	            status: '='
	        }
	    };
	}
	module.exports = logOtherTaskDirective;


/***/ },
/* 605 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var activityEnums_1 = __webpack_require__(412);
	var LogOtherTaskController = (function () {
	    function LogOtherTaskController(ActivityService, permissionService) {
	        var _this = this;
	        this.ActivityService = ActivityService;
	        this.permissionService = permissionService;
	        this.taskTypes = [];
	        this.isWaiting = false;
	        if (this.isInOpenStatus()) {
	            this.title = "crm.activities.logOtherTask.LOG_OTHER_TASK";
	        }
	        else {
	            this.title = "crm.activities.logOtherTask.EDIT_LOGGED_OTHER_TASK";
	        }
	        ActivityService.registerDirtyCheckCallback(function () {
	            return {
	                getForm: function () {
	                    return _this.form;
	                }
	            };
	        });
	        this.permissionService.getPermission('InsertRestriction:ActivityType')
	            .then(function (permission) {
	            _this.activityTypePermission = permission;
	            _this.setAllowedActivityTypes();
	        });
	    }
	    LogOtherTaskController.prototype.setAllowedActivityTypes = function () {
	        var _this = this;
	        var allTaskTypes = this.ActivityService.getOtherActivityTypes();
	        if (!this.activityTypePermission.restricted) {
	            this.taskTypes = allTaskTypes;
	        }
	        else {
	            this.taskTypes = _.filter(allTaskTypes, function (taskType) {
	                return _.contains(_this.activityTypePermission.enabledValues, taskType.value);
	            });
	        }
	    };
	    LogOtherTaskController.prototype.invalidTaskType = function (dropdown) {
	        return this.submitted && (dropdown.$error.required || this.activity.type.value === null);
	    };
	    LogOtherTaskController.prototype.save = function () {
	        var _this = this;
	        if (this.form.$invalid || this.activity.type.value === null) {
	            this.submitted = true;
	            return;
	        }
	        this.isWaiting = true;
	        this.ActivityService.saveActiveActivity(this.activity, this.newWorkNote, activityEnums_1.ActivityStatus.completed)
	            .then(function (activity) {
	            if (_this.onSave) {
	                _this.onSave({
	                    activity: activity
	                });
	            }
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    LogOtherTaskController.prototype.cancel = function () {
	        var _this = this;
	        this.isWaiting = true;
	        this.ActivityService.cancelActiveActivity(this.activity)
	            .then(function () {
	            if (_this.onCancel) {
	                _this.onCancel();
	            }
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    LogOtherTaskController.prototype.isInOpenStatus = function () {
	        return this.ActivityService.isActivityInOpenStatus(this.activity);
	    };
	    LogOtherTaskController.$inject = [
	        'ActivityService',
	        'permissionService'
	    ];
	    return LogOtherTaskController;
	}());
	exports.LogOtherTaskController = LogOtherTaskController;


/***/ },
/* 606 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var logStoreVisitDirective = __webpack_require__(607);
	module.exports = angular.module('crm.activities.logStoreVisit', [])
	    .directive('crmLogStoreVisit', logStoreVisitDirective);


/***/ },
/* 607 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var LogStoreVisitController = __webpack_require__(608);
	function logStoreVisitDirective() {
	    return {
	        restrict: 'E',
	        controller: LogStoreVisitController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/logStoreVisit/template.html',
	        scope: {
	            activityTimelineItem: '=',
	            onSave: '&',
	            onCancel: '&',
	            contact: '=',
	            canCancel: '=?'
	        }
	    };
	}
	module.exports = logStoreVisitDirective;


/***/ },
/* 608 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var moment = __webpack_require__(19);
	var LogStoreVisitController = (function () {
	    function LogStoreVisitController(SalesOpportunityStatusList, TranslationCache, EventStatusService, EventStatusLogGroupService, ActivityTimelineService, permissionService, statusWarningService, salesOpportunityService, StatusMappingService) {
	        var _this = this;
	        this.SalesOpportunityStatusList = SalesOpportunityStatusList;
	        this.TranslationCache = TranslationCache;
	        this.EventStatusService = EventStatusService;
	        this.EventStatusLogGroupService = EventStatusLogGroupService;
	        this.ActivityTimelineService = ActivityTimelineService;
	        this.permissionService = permissionService;
	        this.statusWarningService = statusWarningService;
	        this.salesOpportunityService = salesOpportunityService;
	        this.StatusMappingService = StatusMappingService;
	        this.salesOppStatuses = [];
	        this.canEditEventDate = false;
	        if (!angular.isDefined(this.canCancel)) {
	            this.canCancel = true;
	        }
	        if (this.canCancel) {
	            EventStatusLogGroupService.registerDirtyCheckCallback(function () {
	                return {
	                    getForm: function () {
	                        return _this.form;
	                    }
	                };
	            });
	        }
	        this.permissionService.getPermission('EvtSalesStatus')
	            .then(function (permission) {
	            if (permission.edit) {
	                _this.canEditEventDate = true;
	            }
	        });
	        this.newDueDate = this.activityTimelineItem.dateCreated.toDate() || new Date();
	        this.maxDueDate = new Date();
	    }
	    LogStoreVisitController.prototype.save = function () {
	        var _this = this;
	        if (this.form.$invalid) {
	            return;
	        }
	        var statuses;
	        this.isWaiting = true;
	        statuses = this.salesOppStatuses
	            .filter(function (status) { return status.selected; })
	            .map(function (status) {
	            return status.statusObject;
	        });
	        statuses.unshift(this.SalesOpportunityStatusList.qualifiedContact, this.SalesOpportunityStatusList.storeVisit);
	        this.activityTimelineItem.eventStatuses = statuses
	            .filter(function (status) {
	            return status.id !== _this.SalesOpportunityStatusList.turn.id;
	        }).map(function (status) {
	            return {
	                eventStatusId: status.id,
	                status: _this.StatusMappingService.getSalesOppStatus(status.id)
	            };
	        });
	        this.activityTimelineItem.dateCreated = moment(this.newDueDate.toUTCString());
	        this.statusWarningService.showWarning(this.activityTimelineItem, this.activityTimelineItem.eventId, +this.contact.id)
	            .then(function () {
	            _this.EventStatusLogGroupService.saveActiveEventStatusLogGroup(_this.activityTimelineItem, _this.newWorkNote)
	                .then(function (activityTimelineItem) {
	                if (_this.onSave) {
	                    _this.onSave({
	                        timelineItem: activityTimelineItem
	                    });
	                }
	            });
	        }).finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    LogStoreVisitController.prototype.cancel = function () {
	        var _this = this;
	        this.isWaiting = true;
	        this.EventStatusLogGroupService.cancelActiveEventStatusLogGroup(this.activityTimelineItem.eventStatusLogGroup)
	            .then(function () {
	            if (_this.onCancel) {
	                _this.onCancel();
	            }
	            _this.isWaiting = false;
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    LogStoreVisitController.prototype.isPersisted = function () {
	        return this.activityTimelineItem.eventStatusLogGroup.GroupId !== 0;
	    };
	    LogStoreVisitController.prototype.getStatus = function () {
	        if (this.isPersisted()) {
	            return "complete";
	        }
	        else {
	            return "open";
	        }
	    };
	    LogStoreVisitController.$inject = [
	        'SalesOpportunityStatusList',
	        'TranslationCache',
	        'EventStatusService',
	        'EventStatusLogGroupService',
	        'ActivityTimelineService',
	        'permissionService',
	        'statusWarningService',
	        'salesOpportunityService',
	        'StatusMappingService'
	    ];
	    return LogStoreVisitController;
	}());
	module.exports = LogStoreVisitController;


/***/ },
/* 609 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var EventStatusLogGroupCardDirective = __webpack_require__(610);
	module.exports = angular.module("crm.activity.card", [])
	    .directive('crmEventStatusLogGroupCard', EventStatusLogGroupCardDirective);


/***/ },
/* 610 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(611);
	function EventStatusLogGroupCardDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            activityTimelineItem: '='
	        },
	        templateUrl: 'app/activities/eventStatusLogGroupCard/template.html',
	        controller: controller_1.EventStatusLogGroupCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = EventStatusLogGroupCardDirective;


/***/ },
/* 611 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var moment = __webpack_require__(19);
	var EventStatusLogGroupCardController = (function () {
	    function EventStatusLogGroupCardController(activityTimelineService, SalesOpportunityStatusList) {
	        var _this = this;
	        this.activityTimelineService = activityTimelineService;
	        this.SalesOpportunityStatusList = SalesOpportunityStatusList;
	        this.onSaveSuccess = function (timelineItem, buttonType) {
	            var wasClosed = (_this.activityTimelineItem.activityTimelineId !== 0);
	            _this.activityTimelineItem.eventStatusLogGroup.GroupId = timelineItem.eventStatusLogGroup.GroupId;
	            _this.activityTimelineItem.activityTimelineId = timelineItem.activityTimelineId;
	            _this.activityTimelineItem.lastUpdated = moment();
	            if (wasClosed) {
	                _this.activityTimelineService.filterActivityTimeline();
	            }
	            if (buttonType) {
	                _this.activityTimelineService.addTempActivity(buttonType);
	            }
	        };
	        this.onCloseComplete = function (activityButton) {
	            _this.activityTimelineService.onCompletedTimeout(_this.activityTimelineItem, activityButton);
	        };
	        this.onCancel = function () {
	            _this.activityTimelineService.cancelActivityTimelineItem(_this.activityTimelineItem);
	        };
	        this.ActivityActionType = activityEnums_1.ActivityActionType;
	        this.contact = activityTimelineService.contact;
	    }
	    Object.defineProperty(EventStatusLogGroupCardController.prototype, "isActive", {
	        // public properties
	        get: function () {
	            return (this.activityTimelineService
	                && (this.activityTimelineService.activeTimelineItem.activeTimelineItemType === activityEnums_1.TimelineItemType.eventStatusLogGroup)
	                && (this.activityTimelineService.activeTimelineItem.activeId === this.activityTimelineItem.eventStatusLogGroup.GroupId));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    EventStatusLogGroupCardController.prototype.showTaskCard = function (activityActionType) {
	        return ((activityActionType === this.activityTimelineService.activeTimelineItem.activeActionType));
	    };
	    EventStatusLogGroupCardController.prototype.getStatus = function () {
	        return 'complete';
	    };
	    EventStatusLogGroupCardController.$inject = [
	        'ActivityTimelineService',
	        'SalesOpportunityStatusList'
	    ];
	    return EventStatusLogGroupCardController;
	}());
	exports.EventStatusLogGroupCardController = EventStatusLogGroupCardController;


/***/ },
/* 612 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var webLeadTaskDirective = __webpack_require__(613);
	module.exports = angular.module('crm.activities.webLeadTask', [])
	    .directive('crmWebLeadTask', webLeadTaskDirective);


/***/ },
/* 613 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(614);
	function webLeadTaskDirective() {
	    return {
	        restrict: 'E',
	        controller: controller_1.WebLeadTaskController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/webLead/template.html',
	        scope: {
	            activity: '=',
	            onSave: '&',
	            onCancel: '&',
	            status: '='
	        }
	    };
	}
	module.exports = webLeadTaskDirective;


/***/ },
/* 614 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var WebLeadTaskController = (function () {
	    function WebLeadTaskController(ActivityService) {
	        this.ActivityService = ActivityService;
	        this.activityButton = activityEnums_1.ActivityButton;
	    }
	    WebLeadTaskController.prototype.cancel = function () {
	        var _this = this;
	        this.isWaiting = true;
	        this.ActivityService.cancelActiveActivity(this.activity)
	            .then(function () {
	            if (_this.onCancel) {
	                _this.onCancel();
	            }
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    WebLeadTaskController.prototype.createActivity = function (type) {
	        var _this = this;
	        this.isWaiting = true;
	        this.ActivityService.saveActiveActivity(this.activity, null, activityEnums_1.ActivityStatus.completed)
	            .then(function (activity) {
	            if (_this.onSave) {
	                _this.onSave({
	                    activity: activity,
	                    type: type
	                });
	            }
	        })
	            .finally(function () {
	            _this.isWaiting = false;
	        });
	    };
	    WebLeadTaskController.$inject = [
	        'ActivityService'
	    ];
	    return WebLeadTaskController;
	}());
	exports.WebLeadTaskController = WebLeadTaskController;


/***/ },
/* 615 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var DefaultActivityCardDirective = __webpack_require__(616);
	module.exports = angular.module("crm.default.activity.card", [])
	    .directive('crmDefaultActivityCard', DefaultActivityCardDirective);


/***/ },
/* 616 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(617);
	function DefaultActivityCardDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            activityTimelineItem: '=',
	            status: '=',
	            uneditable: '='
	        },
	        templateUrl: 'app/activities/defaultActivityCard/template.html',
	        controller: controller_1.DefaultActivityCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = DefaultActivityCardDirective;


/***/ },
/* 617 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var DefaultActivityCardController = (function () {
	    function DefaultActivityCardController($q, ActivityTimelineService, ActivityService, TranslationCache, permissionService, statusMappingService, DateFormatService) {
	        this.$q = $q;
	        this.ActivityTimelineService = ActivityTimelineService;
	        this.ActivityService = ActivityService;
	        this.TranslationCache = TranslationCache;
	        this.permissionService = permissionService;
	        this.statusMappingService = statusMappingService;
	        this.DateFormatService = DateFormatService;
	        this.actionItems = [];
	        this.mappedStatuses = [];
	        this.multipleAttachment = false;
	        this.initializeActionItemsMenu();
	        this.singleEmailReceivedWorkNote = this.singleEmailWorkNote();
	        if (this.singleEmailReceivedWorkNote)
	            this.initEmailWorkNote();
	        this.mappedStatuses = this.statusMappingService.getMappedStatusList(this.activityTimelineItem.activity.eventStatuses);
	        this.waiting = false;
	    }
	    DefaultActivityCardController.prototype.getTitle = function () {
	        var title = ''; // this.title is one-way-bound and therefore can only be set ONCE.
	        if (this.isOtherTask() && !this.isReminder()) {
	            title = this.TranslationCache.get('crm.activities.logOtherTask.OTHER') + ': ';
	        }
	        else if (this.isReminder()) {
	            title = this.TranslationCache.get('crm.activities.logOtherTask.REMINDER') + ': ';
	        }
	        if (this.activityTimelineItem.activity.type.text) {
	            title = title + this.activityTimelineItem.activity.type.text;
	        }
	        return title;
	    };
	    DefaultActivityCardController.prototype.getPermissions = function () {
	        var _this = this;
	        var activityPermissionPromise = this.permissionService.getPermission('EvtActivity')
	            .then(function (permission) {
	            _this.activityPermission = permission;
	        });
	        return activityPermissionPromise;
	    };
	    DefaultActivityCardController.prototype.initializeActionItemsMenu = function () {
	        var _this = this;
	        this.getPermissions().then(function () {
	            _this.actionItems = [
	                {
	                    text: _this.TranslationCache.get('crm.salesOpportunity.activities.VIEW_TASK_DETAILS'),
	                    isDisabled: function () { return false; },
	                    isVisible: function () { return true; },
	                    callback: function () { return _this.ActivityTimelineService.showActivityDetailsModal(_this.activityTimelineItem); }
	                },
	                {
	                    text: _this.TranslationCache.get('crm.salesOpportunity.activities.PRINT_TASK'),
	                    isDisabled: function () { return false; },
	                    isVisible: function () { return true; },
	                    callback: function () { return _this.ActivityTimelineService.openActivityListPrintWindow(_this.activityTimelineItem); }
	                },
	                {
	                    text: _this.TranslationCache.get('crm.salesOpportunity.activities.SKIP_TASK'),
	                    isDisabled: function () { return !_this.activityPermission.edit; },
	                    isVisible: function () { return _this.activityPermission.edit && activityEnums_1.OpenActivityStatus[_this.activityTimelineItem.activity.status.value] !== undefined; },
	                    callback: function () {
	                        _this.waiting = true;
	                        _this.ActivityTimelineService.skipActivity(_this.activityTimelineItem)
	                            .finally(function () {
	                            _this.waiting = false;
	                        });
	                    }
	                },
	                {
	                    text: _this.TranslationCache.get('crm.salesOpportunity.activities.DELETE_TASK'),
	                    isDisabled: function () { return !_this.activityPermission.delete; },
	                    isVisible: function () { return _this.activityPermission.delete; },
	                    callback: function () { return _this.ActivityTimelineService.removeActivityFromTimeline(_this.activityTimelineItem); }
	                }
	            ];
	        });
	    };
	    DefaultActivityCardController.prototype.isSkipTaskPermissionDisabled = function (permissions) {
	        switch (this.activityTimelineItem.eventType) {
	            case activityEnums_1.OpportunityEventType.sales:
	                return !permissions.SalesOpportunityTasks || !permissions.SalesOpportunityTasks.edit;
	            case activityEnums_1.OpportunityEventType.qa:
	                //TODO - need QA task permissions
	                return false;
	            case activityEnums_1.OpportunityEventType.service:
	                //TODO - need service task permissions
	                return false;
	        }
	    };
	    DefaultActivityCardController.prototype.isDeleteTaskPermissionDisabled = function (permissions) {
	        switch (this.activityTimelineItem.eventType) {
	            case activityEnums_1.OpportunityEventType.sales:
	                return !permissions.SalesOpportunityTasks || !permissions.SalesOpportunityTasks.remove;
	            case activityEnums_1.OpportunityEventType.qa:
	                //TODO - need QA task permissions
	                return false;
	            case activityEnums_1.OpportunityEventType.service:
	                //TODO - need service task permissions
	                return false;
	        }
	    };
	    DefaultActivityCardController.prototype.getActivityIcon = function () {
	        switch (+this.activityTimelineItem.activity.type.value) {
	            case activityEnums_1.ActivityType.appointment:
	                return 'fa-calendar';
	            case activityEnums_1.ActivityType.inboundCall:
	            case activityEnums_1.ActivityType.outboundCall:
	                return 'fa-phone';
	            case activityEnums_1.ActivityType.webLead:
	                return 'fa-user';
	            case activityEnums_1.ActivityType.sendEmail:
	            case activityEnums_1.ActivityType.emailReceived:
	                return 'fa-envelope-o';
	            default:
	                return 'fa-clock-o';
	        }
	    };
	    DefaultActivityCardController.prototype.showStatusLog = function () {
	        return ((+this.activityTimelineItem.activity.type.value === activityEnums_1.ActivityType.appointment)
	            && !this.ActivityService.isActivityInOpenStatus(this.activityTimelineItem.activity));
	    };
	    DefaultActivityCardController.prototype.showActionButtons = function () {
	        return (this.ActivityService.isActivityInOpenStatus(this.activityTimelineItem.activity)
	            && !!(this.getPrimaryButtonText())
	            && !this.isCardDisabled());
	    };
	    DefaultActivityCardController.prototype.isEmailReceivedComplete = function () {
	        return (+this.activityTimelineItem.activity.type.value === activityEnums_1.ActivityType.emailReceived
	            && +this.activityTimelineItem.activity.status.value === activityEnums_1.ActivityStatus.completed);
	    };
	    DefaultActivityCardController.prototype.hasWorkNote = function () {
	        return this.activityTimelineItem.workNotes && this.activityTimelineItem.workNotes.length > 0;
	    };
	    DefaultActivityCardController.prototype.getPrimaryButtonText = function () {
	        if (this.ActivityService.isActivityInOpenStatus(this.activityTimelineItem.activity)) {
	            if (this.ActivityService.isWebLead(this.activityTimelineItem.activity) ||
	                this.ActivityService.isEmailReceived(this.activityTimelineItem.activity)) {
	                return this.TranslationCache.get('crm.salesOpportunity.activities.RESPOND');
	            }
	            return this.TranslationCache.get('crm.salesOpportunity.activities.START_THIS_TASK');
	        }
	        return '';
	    };
	    DefaultActivityCardController.prototype.getSecondaryButtonText = function () {
	        if (this.ActivityService.isActivityInOpenStatus(this.activityTimelineItem.activity) &&
	            +this.activityTimelineItem.activity.type.value === activityEnums_1.ActivityType.appointment && !this.isConfirmed()) {
	            return this.TranslationCache.get('crm.salesOpportunity.activities.CONFIRM_APPT');
	        }
	        if (+this.activityTimelineItem.activity.type.value === activityEnums_1.ActivityType.emailReceived) {
	            return this.TranslationCache.get('crm.salesOpportunity.activities.NO_RESPONSE_NEEDED');
	        }
	        return '';
	    };
	    DefaultActivityCardController.prototype.canEdit = function () {
	        var _this = this;
	        if (!this.activityPermission || !this.activityPermission.edit || this.uneditable) {
	            return false;
	        }
	        // These types are currently not editable
	        var uneditableTypes = [
	            activityEnums_1.ActivityType.webLead,
	            activityEnums_1.ActivityType.emailReceived
	        ];
	        var typeIsUneditable = uneditableTypes.some(function (value) {
	            return +_this.activityTimelineItem.activity.type.value === value;
	        });
	        return !this.isCardDisabled() && !typeIsUneditable;
	    };
	    DefaultActivityCardController.prototype.startEdit = function () {
	        var _this = this;
	        if (this.canEdit()) {
	            this.waiting = true;
	            var action = this.ActivityService.determineAction(this.activityTimelineItem.activity, true);
	            this.ActivityTimelineService.startActivityTimelineItem(this.activityTimelineItem, activityEnums_1.TimelineItemType.activity, action)
	                .finally(function () {
	                _this.waiting = false;
	            });
	        }
	    };
	    DefaultActivityCardController.prototype.startTask = function () {
	        var _this = this;
	        if (+this.activityTimelineItem.activity.type.value === activityEnums_1.ActivityType.sendEmail) {
	            this.ActivityTimelineService.sendEmail(this.activityTimelineItem.eventId.toString(), this.activityTimelineItem.activity);
	            return;
	        }
	        if (+this.activityTimelineItem.activity.type.value === activityEnums_1.ActivityType.emailReceived) {
	            if (this.hasWorkNote()) {
	                this.ActivityTimelineService.viewEmail(this.activityTimelineItem.workNotes[0], this.activityTimelineItem.activity);
	                return;
	            }
	            else {
	                this.ActivityTimelineService.sendEmail(this.activityTimelineItem.eventId.toString(), this.activityTimelineItem.activity);
	                return;
	            }
	        }
	        this.waiting = true;
	        var action = this.ActivityService.determineAction(this.activityTimelineItem.activity);
	        this.ActivityTimelineService.startActivityTimelineItem(this.activityTimelineItem, activityEnums_1.TimelineItemType.activity, action)
	            .finally(function () {
	            _this.waiting = false;
	        });
	    };
	    DefaultActivityCardController.prototype.completeEmailReceived = function () {
	        this.ActivityService.saveActiveActivity(this.activityTimelineItem.activity, null, activityEnums_1.ActivityStatus.completed);
	    };
	    DefaultActivityCardController.prototype.secondaryButtonClick = function () {
	        if (+this.activityTimelineItem.activity.type.value === activityEnums_1.ActivityType.appointment) {
	            this.ActivityService.setActiveActivity(this.activityTimelineItem, activityEnums_1.ActivityActionType.confirmAppointment);
	        }
	        else if (+this.activityTimelineItem.activity.type.value === activityEnums_1.ActivityType.emailReceived) {
	            this.completeEmailReceived();
	        }
	    };
	    DefaultActivityCardController.prototype.isReminder = function () {
	        return this.ActivityService.isReminder(this.activityTimelineItem.activity);
	    };
	    DefaultActivityCardController.prototype.isOtherTask = function () {
	        return this.ActivityService.isOtherTask(this.activityTimelineItem.activity);
	    };
	    DefaultActivityCardController.prototype.isConfirmedAppt = function () {
	        return (+this.activityTimelineItem.activity.type.value === activityEnums_1.ActivityType.appointment && this.isConfirmed());
	    };
	    DefaultActivityCardController.prototype.isConfirmed = function () {
	        return (+this.activityTimelineItem.activity.status.value === activityEnums_1.ActivityStatus.confirmed);
	    };
	    // These functions activate the "fire" of the activity. Low = 1st fire, to high = all 3 fires.
	    DefaultActivityCardController.prototype.isLowRanked = function () {
	        return (+this.activityTimelineItem.activity.rank.value === activityEnums_1.ActivityRank.low || this.isMediumRanked());
	    };
	    DefaultActivityCardController.prototype.isMediumRanked = function () {
	        return (+this.activityTimelineItem.activity.rank.value === activityEnums_1.ActivityRank.medium || this.isHighRanked());
	    };
	    DefaultActivityCardController.prototype.isHighRanked = function () {
	        return (+this.activityTimelineItem.activity.rank.value === activityEnums_1.ActivityRank.high);
	    };
	    DefaultActivityCardController.prototype.displayDueDate = function () {
	        if (this.ActivityService.isActivityInOpenStatus(this.activityTimelineItem.activity)) {
	            return this.TranslationCache.get('crm.salesOpportunity.activities.DUE') + this.DateFormatService.getFormattedDate(this.activityTimelineItem.activity.dueDate, false);
	        }
	        else {
	            return this.DateFormatService.getFormattedDate(this.activityTimelineItem.activity.dueDate);
	        }
	    };
	    DefaultActivityCardController.prototype.isCardDisabled = function () {
	        return this.ActivityTimelineService.activitiesDisabled;
	    };
	    DefaultActivityCardController.prototype.displayEventType = function () {
	        switch (this.activityTimelineItem.eventType) {
	            case activityEnums_1.OpportunityEventType.sales:
	                return this.TranslationCache.get('crm.activities.opportunity_types.SALES');
	            case activityEnums_1.OpportunityEventType.service:
	                return this.TranslationCache.get('crm.activities.opportunity_types.SERVICE');
	            case activityEnums_1.OpportunityEventType.qa:
	                return this.TranslationCache.get('crm.activities.opportunity_types.QA');
	        }
	    };
	    DefaultActivityCardController.prototype.singleEmailWorkNote = function () {
	        if (this.activityTimelineItem.workNotes && this.activityTimelineItem.workNotes.length === 1)
	            return this.activityTimelineItem.workNotes[0].visibility === 'R';
	        else
	            return false;
	    };
	    DefaultActivityCardController.prototype.initEmailWorkNote = function () {
	        var workNote = this.activityTimelineItem.workNotes[0];
	        var startIndex = workNote.note.indexOf('Subject:') + 'Subject:'.length;
	        var endIndex = workNote.note.indexOf('Attachments: </b><a', startIndex);
	        this.emailSubject = this.ActivityTimelineService.emailSubject(startIndex, endIndex, workNote);
	        this.attachmentResult = this.ActivityTimelineService.emailAttachment(workNote, endIndex);
	        if (this.attachmentResult.hasAttachment && this.attachmentResult.attachmentCount > 1)
	            this.multipleAttachment = true;
	    };
	    DefaultActivityCardController.$inject = [
	        '$q',
	        'ActivityTimelineService',
	        'ActivityService',
	        'TranslationCache',
	        'permissionService',
	        'StatusMappingService',
	        'DateFormatService'
	    ];
	    return DefaultActivityCardController;
	}());
	exports.DefaultActivityCardController = DefaultActivityCardController;


/***/ },
/* 618 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var DefaultEventStatusLogGroupCardDirective = __webpack_require__(619);
	module.exports = angular.module("crm.default.eventStatusLogGroup.card", [])
	    .directive('crmDefaultEventStatusLogGroupCard', DefaultEventStatusLogGroupCardDirective);


/***/ },
/* 619 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(620);
	function DefaultEventStatusLogGroupCardDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            activityTimelineItem: '=',
	            status: '=',
	            editable: '='
	        },
	        templateUrl: 'app/activities/defaultEventStatusLogGroupCard/template.html',
	        controller: controller_1.DefaultEventStatusLogGroupCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = DefaultEventStatusLogGroupCardDirective;


/***/ },
/* 620 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var activityEnums_2 = __webpack_require__(412);
	var DefaultEventStatusLogGroupCardController = (function () {
	    function DefaultEventStatusLogGroupCardController(ActivityTimelineService, TranslationCache, statusMappingService, DateFormatService) {
	        this.ActivityTimelineService = ActivityTimelineService;
	        this.TranslationCache = TranslationCache;
	        this.statusMappingService = statusMappingService;
	        this.DateFormatService = DateFormatService;
	        this.mappedStatuses = [];
	        this.initialSalesOppStatuses = [];
	        this.mappedStatuses = this.statusMappingService.getMappedStatusList(this.activityTimelineItem.eventStatuses);
	        this.waiting = false;
	        this.title = this.TranslationCache.get('crm.activities.logStoreVisit.STORE_VISIT');
	    }
	    DefaultEventStatusLogGroupCardController.prototype.startEdit = function () {
	        var _this = this;
	        this.waiting = true;
	        this.ActivityTimelineService.startActivityTimelineItem(this.activityTimelineItem, activityEnums_2.TimelineItemType.eventStatusLogGroup, activityEnums_1.ActivityActionType.logStoreVisit)
	            .finally(function () {
	            _this.waiting = false;
	        });
	    };
	    DefaultEventStatusLogGroupCardController.prototype.displayDueDate = function () {
	        return this.DateFormatService.getFormattedDate(this.activityTimelineItem.dateCreated);
	    };
	    DefaultEventStatusLogGroupCardController.$inject = [
	        'ActivityTimelineService',
	        'TranslationCache',
	        'StatusMappingService',
	        'DateFormatService'
	    ];
	    return DefaultEventStatusLogGroupCardController;
	}());
	exports.DefaultEventStatusLogGroupCardController = DefaultEventStatusLogGroupCardController;


/***/ },
/* 621 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var activityBarDirective = __webpack_require__(622);
	module.exports = angular.module('crm.activity.bar', [])
	    .directive('crmActivityBar', activityBarDirective);


/***/ },
/* 622 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(623);
	function ActivityBarDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            createActivity: '&',
	            eventId: '=',
	            contactId: '=',
	            eventType: '='
	        },
	        templateUrl: 'app/activities/activityBar/template.html',
	        controller: controller_1.ActivityBarController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = ActivityBarDirective;


/***/ },
/* 623 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var ActivityBarController = (function () {
	    function ActivityBarController(activityTimelineService, permissionService, $q, salesOpportunityStatusList, salesOpportunityService) {
	        var _this = this;
	        this.activityTimelineService = activityTimelineService;
	        this.permissionService = permissionService;
	        this.$q = $q;
	        this.salesOpportunityStatusList = salesOpportunityStatusList;
	        this.salesOpportunityService = salesOpportunityService;
	        this.ActivityButton = activityEnums_1.ActivityButton;
	        this.OpportunityEventType = activityEnums_1.OpportunityEventType;
	        this.ActivityType = activityEnums_1.ActivityType;
	        this.getPermissions()
	            .then(function () {
	            if (_this.createActivity) {
	                _this.createActivityCallback = _this.createActivity();
	            }
	            _this.eventStatusIsSold = false;
	            if (_this.eventId && _this.eventType === activityEnums_1.OpportunityEventType.sales) {
	                _this.salesOpportunityService.get(_this.contactId.toString(), _this.eventId.toString())
	                    .then(function (event) {
	                    _this.eventStatusIsSold = event.status.id == activityEnums_1.SalesStatus.sold;
	                });
	            }
	        });
	    }
	    ActivityBarController.prototype.hasActivityTypePermission = function (activityTypeValue) {
	        if (!this.activityTypePermission) {
	            return false;
	        }
	        if (!this.activityTypePermission.restricted) {
	            return true;
	        }
	        return _.contains(this.activityTypePermission.enabledValues, activityTypeValue.toString());
	    };
	    ActivityBarController.prototype.getPermissions = function () {
	        var _this = this;
	        var permissions = [
	            this.permissionService.getPermission('EvtActivity')
	                .then(function (permission) {
	                _this.activityPermission = permission;
	            }),
	            this.permissionService.getPermission('InsertRestriction:ActivityType')
	                .then(function (permission) {
	                _this.activityTypePermission = permission;
	            }),
	            this.permissionService.getPermission('SalesSoldChangeStatus')
	                .then(function (permission) {
	                _this.salesSoldChangeStatusPermission = permission;
	            })
	        ];
	        return this.$q.all(permissions);
	    };
	    ActivityBarController.prototype.addActivityToTimeline = function (activityButton) {
	        if (this.createActivityCallback) {
	            return this.createActivityCallback(activityButton);
	        }
	        this.activityTimelineService.addTempActivity(activityButton);
	    };
	    ActivityBarController.prototype.hasChangeFromSoldStatusPermission = function () {
	        if (!this.salesSoldChangeStatusPermission) {
	            return false;
	        }
	        else {
	            return this.salesSoldChangeStatusPermission.edit;
	        }
	    };
	    ActivityBarController.$inject = [
	        'ActivityTimelineService',
	        'permissionService',
	        '$q',
	        'SalesOpportunityStatusList',
	        'salesOpportunityService'
	    ];
	    return ActivityBarController;
	}());
	exports.ActivityBarController = ActivityBarController;


/***/ },
/* 624 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var QuickFilterBarDirective = __webpack_require__(625);
	module.exports = angular.module('crm.activities.quickFilterBar', [])
	    .directive(QuickFilterBarDirective.directiveName, QuickFilterBarDirective);


/***/ },
/* 625 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var controller_1 = __webpack_require__(626);
	var QuickFilterBarDirective = function () {
	    return {
	        restrict: 'E',
	        controller: controller_1.QuickFilterBarController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/quickFilterBar/template.html',
	        scope: {}
	    };
	};
	QuickFilterBarDirective.directiveName = 'crmQuickFilterBar';
	module.exports = QuickFilterBarDirective;


/***/ },
/* 626 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var QuickFilterBarController = (function () {
	    function QuickFilterBarController(ActivityTimelineService, TranslationCache, CrmConstants) {
	        this.ActivityTimelineService = ActivityTimelineService;
	        this.TranslationCache = TranslationCache;
	        this.CrmConstants = CrmConstants;
	    }
	    Object.defineProperty(QuickFilterBarController.prototype, "selectedOpportunityFilters", {
	        get: function () {
	            return this.ActivityTimelineService.filters.opportunityFilters;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QuickFilterBarController.prototype, "selectedAssignedToFilters", {
	        get: function () {
	            return this.ActivityTimelineService.filters.assignedToFilters;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QuickFilterBarController.prototype, "selectedTypeFilters", {
	        get: function () {
	            return this.ActivityTimelineService.filters.typeFilters;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QuickFilterBarController.prototype, "selectedStatusFilters", {
	        get: function () {
	            return this.ActivityTimelineService.filters.statusFilters;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QuickFilterBarController.prototype, "activityCounts", {
	        get: function () {
	            return this.ActivityTimelineService.activityCounts;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QuickFilterBarController.prototype, "selectedSort", {
	        get: function () {
	            return this.ActivityTimelineService.selectedSort;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    QuickFilterBarController.prototype.isMapEmpty = function (map) {
	        if (!map)
	            return false;
	        return Object.keys(map).length == 0;
	    };
	    QuickFilterBarController.prototype.toggleFilterListValue = function (list, key) {
	        this.ActivityTimelineService.filterActivityTimeline()
	            .catch(function () {
	            list[key] = !list[key];
	        });
	    };
	    QuickFilterBarController.prototype.setSelectedSort = function (value) {
	        this.ActivityTimelineService.sortActivityTimeline(value);
	    };
	    QuickFilterBarController.prototype.showOpportunityFilter = function () {
	        return this.ActivityTimelineService.activitiesDisabled;
	    };
	    QuickFilterBarController.prototype.displayOpportunityLabel = function (eventType) {
	        switch (+eventType) {
	            case activityEnums_1.OpportunityEventType.sales:
	                return this.TranslationCache.get('crm.activities.opportunity_types.SALES');
	            case activityEnums_1.OpportunityEventType.service:
	                return this.TranslationCache.get('crm.activities.opportunity_types.SERVICE');
	            case activityEnums_1.OpportunityEventType.qa:
	                return this.TranslationCache.get('crm.activities.opportunity_types.QA');
	        }
	    };
	    QuickFilterBarController.prototype.refreshTimeline = function () {
	        this.ActivityTimelineService.reloadActivityTimelineItems();
	    };
	    QuickFilterBarController.$inject = [
	        'ActivityTimelineService',
	        'TranslationCache',
	        'CrmConstants'
	    ];
	    return QuickFilterBarController;
	}());
	exports.QuickFilterBarController = QuickFilterBarController;


/***/ },
/* 627 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var activitiesNotesDirective = __webpack_require__(628);
	module.exports = angular.module('crm.activities.notes', [])
	    .directive('crmActivitiesNotes', activitiesNotesDirective);


/***/ },
/* 628 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var controller_1 = __webpack_require__(629);
	function activitiesNotesDirective() {
	    return {
	        restrict: 'E',
	        controller: controller_1.ActivitiesNotesController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/activitiesNotes/template.html',
	        transclude: true,
	        scope: {
	            filteredActivityTimeline: '=',
	            onRedirect: '&'
	        }
	    };
	}
	module.exports = activitiesNotesDirective;


/***/ },
/* 629 */
/***/ function(module, exports) {

	"use strict";
	var EMAIL_SENT_PREFIX = '<strong>Email Sent</strong>';
	var ActivitiesNotesController = (function () {
	    function ActivitiesNotesController(ActivityTimelineService) {
	        this.ActivityTimelineService = ActivityTimelineService;
	    }
	    ActivitiesNotesController.prototype.onCardClick = function (activityTimelineItem) {
	        this.ActivityTimelineService.redirectToEvent(activityTimelineItem, this.onRedirect);
	    };
	    ActivitiesNotesController.prototype.isEmailSent = function (workNote) {
	        return (workNote.visibility == 'S' && workNote.note.indexOf(EMAIL_SENT_PREFIX) >= 0);
	    };
	    ActivitiesNotesController.prototype.isActivitiesDisabled = function () {
	        return this.ActivityTimelineService.activitiesDisabled;
	    };
	    ActivitiesNotesController.$inject = [
	        'ActivityTimelineService'
	    ];
	    return ActivitiesNotesController;
	}());
	exports.ActivitiesNotesController = ActivitiesNotesController;


/***/ },
/* 630 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var DisplayEventTypeAndEventIdDirective = __webpack_require__(631);
	module.exports = angular.module("crm.default.activity.displayEventTypeAndEventId", [])
	    .directive('crmDisplayEventTypeAndEventId', DisplayEventTypeAndEventIdDirective);


/***/ },
/* 631 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(632);
	function DisplayEventTypeAndEventIdDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            eventId: '@',
	            eventType: '@'
	        },
	        templateUrl: 'app/activities/displayEventTypeAndEventId/template.html',
	        controller: controller_1.DisplayEventTypeAndEventIdController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = DisplayEventTypeAndEventIdDirective;


/***/ },
/* 632 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var DisplayEventTypeAndEventIdController = (function () {
	    function DisplayEventTypeAndEventIdController(ActivityTimelineService, TranslationCache) {
	        this.ActivityTimelineService = ActivityTimelineService;
	        this.TranslationCache = TranslationCache;
	    }
	    DisplayEventTypeAndEventIdController.prototype.isEventTypeDisplayed = function () {
	        return this.ActivityTimelineService.activitiesDisabled;
	    };
	    DisplayEventTypeAndEventIdController.prototype.displayEventType = function () {
	        switch (+this.eventType) {
	            case activityEnums_1.OpportunityEventType.sales:
	                return this.TranslationCache.get('crm.activities.opportunity_types.SALES');
	            case activityEnums_1.OpportunityEventType.service:
	                return this.TranslationCache.get('crm.activities.opportunity_types.SERVICE');
	            case activityEnums_1.OpportunityEventType.qa:
	                return this.TranslationCache.get('crm.activities.opportunity_types.QA');
	        }
	    };
	    DisplayEventTypeAndEventIdController.$inject = [
	        'ActivityTimelineService',
	        'TranslationCache'
	    ];
	    return DisplayEventTypeAndEventIdController;
	}());
	exports.DisplayEventTypeAndEventIdController = DisplayEventTypeAndEventIdController;


/***/ },
/* 633 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var openActivitiesDirective = __webpack_require__(634);
	module.exports = angular.module('crm.activities.openActivities', [])
	    .directive('crmOpenActivities', openActivitiesDirective);


/***/ },
/* 634 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(635);
	function openActivitiesDirective() {
	    return {
	        restrict: 'E',
	        controller: controller_1.OpenActivitiesController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        templateUrl: 'app/activities/openActivities/template.html',
	        transclude: true,
	        scope: {
	            onRedirect: '&'
	        }
	    };
	}
	module.exports = openActivitiesDirective;


/***/ },
/* 635 */
/***/ function(module, exports) {

	"use strict";
	var OpenActivitiesController = (function () {
	    function OpenActivitiesController(ActivityTimelineService) {
	        this.ActivityTimelineService = ActivityTimelineService;
	        this.openActivityTimelineItems = this.ActivityTimelineService.openActivityTimelineItems;
	    }
	    OpenActivitiesController.prototype.onCardClick = function (activityTimelineItem) {
	        this.ActivityTimelineService.redirectToEvent(activityTimelineItem, this.onRedirect);
	    };
	    OpenActivitiesController.$inject = [
	        'ActivityTimelineService'
	    ];
	    return OpenActivitiesController;
	}());
	exports.OpenActivitiesController = OpenActivitiesController;


/***/ },
/* 636 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var EventStatusCheckboxesDirective = __webpack_require__(637);
	module.exports = angular.module("crm.activity", [])
	    .directive('crmEventStatusCheckboxes', EventStatusCheckboxesDirective);


/***/ },
/* 637 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller_1 = __webpack_require__(638);
	function EventStatusCheckboxesDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            statuses: '=',
	            initialStatuses: '=',
	            initialSalesOppStatuses: '='
	        },
	        templateUrl: 'app/activities/eventStatusCheckboxes/template.html',
	        controller: controller_1.EventStatusCheckboxesController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = EventStatusCheckboxesDirective;


/***/ },
/* 638 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var EventStatusCheckboxesController = (function () {
	    function EventStatusCheckboxesController(permissionService, SalesOpportunityStatusList, statusMappingService) {
	        var _this = this;
	        this.permissionService = permissionService;
	        this.SalesOpportunityStatusList = SalesOpportunityStatusList;
	        this.statusMappingService = statusMappingService;
	        this.initialSalesOppStatuses = [];
	        this.setInitialSalesOppStatuses = function () {
	            _this.permissionService.getPermission('SalesSold')
	                .then(function (permission) {
	                var canSetStatusToSold = permission.edit;
	                var hiddenStatuses = [
	                    _this.SalesOpportunityStatusList.qualifiedContact,
	                    _this.SalesOpportunityStatusList.storeVisit
	                ];
	                if (!canSetStatusToSold) {
	                    hiddenStatuses.push(_this.SalesOpportunityStatusList.sold);
	                }
	                _this.statuses = _this.statusMappingService.getMappedStatusList(_this.initialStatuses)
	                    .filter(function (status) {
	                    if (!hiddenStatuses.some(function (hiddenStatus) { return status.statusObject.id === hiddenStatus.id; })) {
	                        return angular.copy(status);
	                    }
	                });
	                if (!_this.initialSalesOppStatuses) {
	                    _this.initialSalesOppStatuses = [];
	                }
	                _this.statuses.forEach(function (status) {
	                    _this.initialSalesOppStatuses.push(angular.copy(status));
	                });
	            });
	        };
	        this.setInitialSalesOppStatuses();
	    }
	    EventStatusCheckboxesController.$inject = [
	        'permissionService',
	        'SalesOpportunityStatusList',
	        'StatusMappingService'
	    ];
	    return EventStatusCheckboxesController;
	}());
	exports.EventStatusCheckboxesController = EventStatusCheckboxesController;


/***/ },
/* 639 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var workNoteCardModule = __webpack_require__(640);
	var addWorkNoteModule = __webpack_require__(643);
	var emailWorkNoteModule = __webpack_require__(646);
	module.exports = angular.module("crm.workNote", [
	    workNoteCardModule.name,
	    addWorkNoteModule.name,
	    emailWorkNoteModule.name
	]);


/***/ },
/* 640 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var WorkNoteCardDirective = __webpack_require__(641);
	module.exports = angular.module("crm.workNote.card", [])
	    .directive('crmWorkNoteCard', WorkNoteCardDirective);


/***/ },
/* 641 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var WorkNoteCardController = __webpack_require__(642);
	WorkNoteCardDirective.$inject = ['$timeout'];
	function WorkNoteCardDirective($timeout) {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            workNote: '=',
	            eventId: '@',
	            eventType: '@',
	            entityId: '@'
	        },
	        templateUrl: 'app/workNote/workNoteCard/template.html',
	        controller: WorkNoteCardController,
	        controllerAs: 'ctrl',
	        bindToController: true,
	        link: {
	            post: function ($scope, $element, $attrs, controller) {
	                $timeout(function () {
	                    var expanderSection = $element.find('.ws-expand-section');
	                    var scrollHeight = expanderSection[0].scrollHeight;
	                    var innerHeight = expanderSection.innerHeight();
	                    var isOverflown = scrollHeight > innerHeight;
	                    controller.canExpand = isOverflown;
	                });
	            }
	        }
	    };
	    return directive;
	}
	module.exports = WorkNoteCardDirective;


/***/ },
/* 642 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var VIEW_FORM_DETECT = 'onclick=\'ViewForm(';
	var WorkNoteCardController = (function () {
	    function WorkNoteCardController(TranslationCache, DataApiSettings, $window, AppSettings, DateFormatService) {
	        this.TranslationCache = TranslationCache;
	        this.DataApiSettings = DataApiSettings;
	        this.$window = $window;
	        this.AppSettings = AppSettings;
	        this.DateFormatService = DateFormatService;
	        this.charLimit = 500;
	        this.expanded = false;
	        this.setWorkNoteTitle();
	    }
	    WorkNoteCardController.prototype.toggleExpand = function () {
	        this.expanded = !this.expanded;
	    };
	    WorkNoteCardController.prototype.setWorkNoteTitle = function () {
	        if (this.workNote.createdBy) {
	            this.workNoteTitle = this.workNote.fullName + this.TranslationCache.get('crm.workNote.WROTE');
	        }
	        else {
	            this.workNoteTitle = this.TranslationCache.get('crm.workNote.SYSTEM_WROTE');
	        }
	    };
	    WorkNoteCardController.prototype.getWorkNoteText = function () {
	        var noteText = this.workNote.note;
	        // if the note doesn't have html tags, evaluate it as plain text.
	        if (!noteText.match(/^<[^>]+?>[^<]*?<\/[^>]+?>/)) {
	            noteText = noteText.replace(/\n/g, '<br/>');
	        }
	        noteText = noteText.replace(/target=("|').*("|')/g, '');
	        noteText = noteText.replace(/(<a [^>]+)>/g, '$1 target="_blank">');
	        return noteText;
	    };
	    WorkNoteCardController.prototype.isViewForm = function () {
	        return (this.workNote.note.indexOf(VIEW_FORM_DETECT) >= 0);
	    };
	    WorkNoteCardController.prototype.getFormName = function () {
	        return this.workNote.note.substring(this.workNote.note.indexOf('<span>') + 6, this.workNote.note.indexOf('</span>', this.workNote.note.indexOf('<span>')));
	    };
	    WorkNoteCardController.prototype.viewClassicForm = function () {
	        var formName = this.getFormName();
	        var siteId = this.DataApiSettings.getSiteId();
	        var eventId = this.eventId;
	        var entityId = this.entityId;
	        var eventType = this.eventType;
	        var workNoteId = this.workNote.workNoteId;
	        var strLocation = "?SiteId=" + siteId + "&iWorkNoteId=" + workNoteId + "&EventId=" + eventId + "&EntityId=" + entityId + "&EvtType=" + eventType + "&formName=" + formName + "&Reload=true";
	        var features = 'toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=no,width=800,height=650';
	        var url = this.AppSettings.crmUrl + "/PrintOut/PrintAndSave.aspx" + strLocation;
	        this.$window.open(url, 'qcal', features);
	    };
	    WorkNoteCardController.prototype.displayDueDate = function () {
	        return this.DateFormatService.getFormattedDate(this.workNote.createdDate);
	    };
	    WorkNoteCardController.$inject = [
	        'TranslationCache',
	        'DataApiSettings',
	        '$window',
	        'AppSettings',
	        'DateFormatService'
	    ];
	    return WorkNoteCardController;
	}());
	module.exports = WorkNoteCardController;


/***/ },
/* 643 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var AddWorkNoteDirective = __webpack_require__(644);
	module.exports = angular.module("crm.workNote.add", [])
	    .directive('crmAddWorkNote', AddWorkNoteDirective);


/***/ },
/* 644 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var AddWorkNoteController = __webpack_require__(645);
	function AddWorkNoteDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            'eventId': '=',
	            'contactId': '='
	        },
	        templateUrl: 'app/workNote/addWorkNote/template.html',
	        controller: AddWorkNoteController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = AddWorkNoteDirective;


/***/ },
/* 645 */
/***/ function(module, exports) {

	"use strict";
	var WorkNoteCardController = (function () {
	    function WorkNoteCardController(ActivityTimelineService, workNoteFactory) {
	        this.ActivityTimelineService = ActivityTimelineService;
	        this.workNoteFactory = workNoteFactory;
	        this.workNote = '';
	        this.isWorkNoteSaving = false;
	    }
	    WorkNoteCardController.prototype.displaySubmitButton = function () {
	        if (this.isWorkNoteSaving) {
	            return false;
	        }
	        return this.workNote.length > 0;
	    };
	    WorkNoteCardController.prototype.saveWorkNote = function () {
	        var _this = this;
	        var newWorkNote = this.workNoteFactory.create();
	        newWorkNote.eventId = this.eventId;
	        newWorkNote.entityId = this.contactId;
	        newWorkNote.note = this.workNote;
	        this.isWorkNoteSaving = true;
	        this.ActivityTimelineService.addWorkNote(newWorkNote).finally(function () {
	            _this.isWorkNoteSaving = false;
	            _this.workNote = '';
	        });
	    };
	    WorkNoteCardController.$inject = [
	        'ActivityTimelineService',
	        'WorkNoteFactory'
	    ];
	    return WorkNoteCardController;
	}());
	module.exports = WorkNoteCardController;


/***/ },
/* 646 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var EmailWorkNoteCardDirective = __webpack_require__(647);
	module.exports = angular.module("crm.emailWorkNote.card", [])
	    .directive('crmEmailWorkNoteCard', EmailWorkNoteCardDirective);


/***/ },
/* 647 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var EmailWorkNoteCardController = __webpack_require__(648);
	function EmailWorkNoteCardDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            workNote: '=',
	            eventId: '@',
	            eventType: '@'
	        },
	        templateUrl: 'app/workNote/emailWorkNoteCard/template.html',
	        controller: EmailWorkNoteCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = EmailWorkNoteCardDirective;


/***/ },
/* 648 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var EmailWorkNoteCardController = (function () {
	    function EmailWorkNoteCardController(DataApiSettings, AuthenticationService, EmailDialogService, DateFormatService) {
	        this.DataApiSettings = DataApiSettings;
	        this.AuthenticationService = AuthenticationService;
	        this.EmailDialogService = EmailDialogService;
	        this.DateFormatService = DateFormatService;
	        this.multipleAttachment = false;
	        this.startIndex = this.workNote.note.indexOf('Subject:') + 'Subject:'.length;
	        this.endIndex = this.workNote.note.indexOf('Attachments: </b><a', this.startIndex);
	        this.attachmentResult = this.EmailDialogService.checkAttachments(this.workNote.note, this.endIndex);
	        if (this.attachmentResult.hasAttachment && this.attachmentResult.attachmentCount > 1)
	            this.multipleAttachment = true;
	        this.subject = this.EmailDialogService.getEmailSubject(this.startIndex, this.endIndex, this.workNote.note);
	    }
	    EmailWorkNoteCardController.prototype.viewEmail = function () {
	        var webleadId = this.EmailDialogService.getWebleadId(this.workNote.note);
	        var userName = this.AuthenticationService.getUser().username;
	        var siteId = this.DataApiSettings.getSiteId().toString();
	        this.EmailDialogService.viewClassicEmail(webleadId, userName, siteId);
	    };
	    EmailWorkNoteCardController.prototype.displayDueDate = function () {
	        return this.DateFormatService.getFormattedDate(this.workNote.createdDate);
	    };
	    EmailWorkNoteCardController.$inject = [
	        'DataApiSettings',
	        'AuthenticationService',
	        'EmailDialogService',
	        'DateFormatService'
	    ];
	    return EmailWorkNoteCardController;
	}());
	module.exports = EmailWorkNoteCardController;


/***/ },
/* 649 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var csiAddModule = __webpack_require__(650);
	var csiUpdateModule = __webpack_require__(655);
	var csiDetailModule = __webpack_require__(658);
	var csiInlineEditingModule = __webpack_require__(662);
	var csiExistingVehicleModule = __webpack_require__(664);
	module.exports = angular.module("crm.csi", [
	    csiAddModule.name, csiUpdateModule.name, csiDetailModule.name, csiInlineEditingModule.name, csiExistingVehicleModule.name
	]);


/***/ },
/* 650 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var csiAddController = __webpack_require__(651);
	var csiAddPanelController = __webpack_require__(652);
	var csiAddDirective = __webpack_require__(653);
	var csiAddPanelDirective = __webpack_require__(654);
	module.exports = angular.module('csi.add', [])
	    .controller('csiAddController', csiAddController)
	    .controller('csiAddPanelController', csiAddPanelController)
	    .directive('csiAddDirective', csiAddDirective)
	    .directive('csiAddPanel', csiAddPanelDirective);


/***/ },
/* 651 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var csiAddController = (function () {
	    function csiAddController($scope, $state, $stateParams, $q, $translate, CrmConstants, ContactQAEventFactory, eventManagerService, ContactService, ServiceWrapper, dirtyFormWarningService, contactVehicleApiService, ContactQAEventApiService, vehicleService, vehicleFactory) {
	        this.$scope = $scope;
	        this.$state = $state;
	        this.$stateParams = $stateParams;
	        this.$q = $q;
	        this.$translate = $translate;
	        this.CrmConstants = CrmConstants;
	        this.ContactQAEventFactory = ContactQAEventFactory;
	        this.eventManagerService = eventManagerService;
	        this.ContactService = ContactService;
	        this.ServiceWrapper = ServiceWrapper;
	        this.dirtyFormWarningService = dirtyFormWarningService;
	        this.contactVehicleApiService = contactVehicleApiService;
	        this.ContactQAEventApiService = ContactQAEventApiService;
	        this.vehicleService = vehicleService;
	        this.vehicleFactory = vehicleFactory;
	        this.isLoading = false;
	        this.isSubmitted = false;
	        this.init();
	    }
	    csiAddController.prototype.init = function () {
	        var _this = this;
	        this.loadContact();
	        this.csiContactModel = this.ContactQAEventFactory.create();
	        this.csiContactModel.vehicle = this.vehicleFactory.create();
	        this.dirtyFormWarningService.register(function () {
	            return _this.addCsiEventForm.$dirty;
	        });
	        this.$scope.$on('$destroy', function () {
	            _this.dirtyFormWarningService.deregister();
	        });
	    };
	    csiAddController.prototype.loadContact = function () {
	        var _this = this;
	        this.isLoading = true;
	        this.ServiceWrapper.get(this.ContactService, this.$stateParams.contactId).then(function (contact) {
	            _this.contact = contact;
	            _this.csiContactModel.vehicle.entityId = _this.contact.id;
	            _this.loadExistingVehicles().then(function (data) {
	                _this.contact.vehicles = data;
	            });
	            _this.isLoading = false;
	        });
	    };
	    csiAddController.prototype.loadExistingVehicles = function () {
	        return this.contactVehicleApiService.get(this.contact.id);
	    };
	    csiAddController.prototype.submit = function (form) {
	        form.$setSubmitted();
	        this.isSubmitted = true;
	        if (!this.csiContactModel.vehicle.id) {
	            this.csiContactModel.vehicle.id = null;
	        }
	        if (!this.isVehicleValid()) {
	            this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.CSI_TAB.ERROR_MESSAGE, {
	                alertType: 'error',
	                message: this.$translate.instant('crm.salesOpportunity.csi.ERROR_MESSAGE.INVALID_CSI_ADD_BAD_VEHICLE')
	            });
	        }
	        else if (this.isInvalid()) {
	            this.eventManagerService.publish(this.CrmConstants.SALES_OPPORTUNITY.CSI_TAB.ERROR_MESSAGE, {
	                alertType: 'error',
	                message: this.$translate.instant('crm.salesOpportunity.csi.ERROR_MESSAGE.INVALID_CSI_ADD')
	            });
	        }
	        else {
	            if (this.csiContactModel.vehicle && this.csiContactModel.vehicle.id == null
	                && this.csiContactModel.vehicle.year != '' && this.csiContactModel.vehicle.make != ''
	                && this.csiContactModel.vehicle.model != '') {
	                this.saveVehicleThenCsi();
	            }
	            else {
	                this.saveCsiCase();
	            }
	        }
	    };
	    csiAddController.prototype.saveCsiCase = function () {
	        var _this = this;
	        this.dirtyFormWarningService.deregister();
	        this.isLoading = true;
	        var post = {
	            entityId: this.$stateParams.contactId,
	            csiEvent: this.csiContactModel
	        };
	        var self = this;
	        this.ContactQAEventApiService.save(post).then(function (csiEventId) {
	            if (csiEventId) {
	                self.csiContactModel.id = csiEventId.toString();
	                self.dirtyFormWarningService.deregister();
	                _this.redirectToCsiCase();
	            }
	        });
	    };
	    csiAddController.prototype.saveVehicleThenCsi = function () {
	        var _this = this;
	        this.vehicleService.save(this.csiContactModel.vehicle).then(function (vehicle) {
	            _this.csiContactModel.vehicle = vehicle;
	            _this.saveCsiCase();
	        });
	    };
	    csiAddController.prototype.redirectToCsiCase = function () {
	        if (this.$stateParams.contactId) {
	            this.$state.go('csiUpdate', { 'contactId': this.$stateParams.contactId, 'csiId': this.csiContactModel.id });
	        }
	        else {
	            console.warn("contactId parameter is required.");
	        }
	    };
	    csiAddController.prototype.isInvalid = function () {
	        this.invalid =
	            (!this.csiContactModel.type || !this.csiContactModel.type.text || !this.csiContactModel.type.value)
	                || (!this.csiContactModel.subType || !this.csiContactModel.subType.text || !this.csiContactModel.subType.value)
	                || (!this.csiContactModel.resolutionDate || !this.csiContactModel.resolutionDate.text || !this.csiContactModel.resolutionDate.value)
	                || (!this.csiContactModel.source || !this.csiContactModel.source.text || !this.csiContactModel.source.value);
	        return this.invalid;
	    };
	    csiAddController.prototype.isVehicleValid = function () {
	        if (this.csiContactModel.vehicle && this.csiContactModel.vehicle.id == null && (this.csiContactModel.vehicle.make != '' || this.csiContactModel.vehicle.model != '' || this.csiContactModel.vehicle.year != '')) {
	            if (this.csiContactModel.vehicle.id == null
	                && this.csiContactModel.vehicle.make != "" && this.csiContactModel.vehicle.model != "" && this.csiContactModel.vehicle.year != "") {
	                return true;
	            }
	            else {
	                return false;
	            }
	        }
	        else {
	            return true;
	        }
	    };
	    csiAddController.$inject = [
	        '$scope',
	        '$state',
	        '$stateParams',
	        '$q',
	        '$translate',
	        'CrmConstants',
	        'ContactQAEventFactory',
	        'eventManagerService',
	        'ContactService',
	        'ServiceWrapper',
	        'dirtyFormWarningService',
	        'ContactVehicleApiService',
	        'ContactQAEventApiService',
	        'vehicleService',
	        'VehicleFactory'
	    ];
	    return csiAddController;
	}());
	module.exports = csiAddController;


/***/ },
/* 652 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var csiAddPanelController = (function () {
	    function csiAddPanelController(CsiEventRefDefService, ServiceWrapper, $stateParams, CurrentUserApiService) {
	        var _this = this;
	        this.CsiEventRefDefService = CsiEventRefDefService;
	        this.ServiceWrapper = ServiceWrapper;
	        this.$stateParams = $stateParams;
	        this.CurrentUserApiService = CurrentUserApiService;
	        this.expanded = false;
	        this.isLoading = false;
	        this.setAssignedToCurrentUser = function () {
	            var self = _this;
	            _this.ServiceWrapper.get(_this.CurrentUserApiService).then(function (response) {
	                var assignedRefDef = _.findWhere(self.csiEventRefDefs.AssignedTo, { text: response });
	                self.csiCaseModel.assignTo = assignedRefDef;
	            });
	        };
	        this.init();
	    }
	    csiAddPanelController.prototype.init = function () {
	        var self = this;
	        self.isLoading = true;
	        this.ServiceWrapper.get(this.CsiEventRefDefService, this.$stateParams.contactId).then(function (response) {
	            self.csiEventRefDefs = response;
	            self.setAssignedToCurrentUser();
	        });
	    };
	    csiAddPanelController.prototype.updateDescription = function () {
	        this.csiCaseModel.description = this.description;
	    };
	    csiAddPanelController.$inject = [
	        'CsiEventRefDefService',
	        'ServiceWrapper',
	        '$stateParams',
	        'CurrentUserApiService'
	    ];
	    return csiAddPanelController;
	}());
	module.exports = csiAddPanelController;


/***/ },
/* 653 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var csiAddController = __webpack_require__(651);
	function csiAddDirective() {
	    return {
	        restrict: 'E',
	        templateUrl: 'app/csi/add/csiAddTemplate.html',
	        controller: csiAddController,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = csiAddDirective;


/***/ },
/* 654 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var csiAddPanelController = __webpack_require__(652);
	function csiAddPanelDirective() {
	    return {
	        restrict: 'E',
	        scope: {
	            csiCaseModel: '=',
	            invalid: '=',
	            form: '=',
	        },
	        templateUrl: 'app/csi/add/panel/csiAddPanelTemplate.html',
	        controller: csiAddPanelController,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = csiAddPanelDirective;


/***/ },
/* 655 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var csiUpdateController = __webpack_require__(656);
	var csiUpdateDirective = __webpack_require__(657);
	module.exports = angular.module('csi.update', [])
	    .controller('csiUpdateController', csiUpdateController)
	    .directive('csiUpdateDirective', csiUpdateDirective);


/***/ },
/* 656 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var activityEnums_1 = __webpack_require__(412);
	var csiUpdateController = (function () {
	    function csiUpdateController($scope, $state, $stateParams, $q, $window, CrmConstants, ContactService, ServiceWrapper, CSIInlineEditConfig, ContactQAEventApiService, CsiEventRefDefService, modalService, AuditLogApiService, csiPrintProspectSheetApiService, ContactVehicleApiService, vehicleFactory, EventManagerService, Constants, DocumentManagerService) {
	        this.$scope = $scope;
	        this.$state = $state;
	        this.$stateParams = $stateParams;
	        this.$q = $q;
	        this.$window = $window;
	        this.CrmConstants = CrmConstants;
	        this.ContactService = ContactService;
	        this.ServiceWrapper = ServiceWrapper;
	        this.CSIInlineEditConfig = CSIInlineEditConfig;
	        this.ContactQAEventApiService = ContactQAEventApiService;
	        this.CsiEventRefDefService = CsiEventRefDefService;
	        this.modalService = modalService;
	        this.AuditLogApiService = AuditLogApiService;
	        this.csiPrintProspectSheetApiService = csiPrintProspectSheetApiService;
	        this.ContactVehicleApiService = ContactVehicleApiService;
	        this.vehicleFactory = vehicleFactory;
	        this.EventManagerService = EventManagerService;
	        this.Constants = Constants;
	        this.DocumentManagerService = DocumentManagerService;
	        this.printProspectSheetWindowParams = "toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=no,resizable=yes,width=800,height=650";
	        this.isLoading = false;
	        this.OpportunityEventType = activityEnums_1.OpportunityEventType;
	        this.irresolvableModalUrl = "app/csi/sharedTemplates/irresolvableModal.html";
	        this.auditLogModalUrl = "app/auditLog/updateAuditLogModalTemplate.html";
	        this.init();
	    }
	    csiUpdateController.prototype.init = function () {
	        var _this = this;
	        if (this.options && this.options.contactId && this.options.opportunityId) {
	            this.contactId = this.options.contactId;
	            this.csiId = this.options.opportunityId;
	        }
	        else {
	            this.contactId = this.$stateParams.contactId;
	            this.csiId = this.$stateParams.csiId;
	        }
	        this.ServiceWrapper.get(this.CsiEventRefDefService, this.contactId).then(function (response) {
	            _this.csiEventRefDefs = response;
	            _this.loadContact();
	        });
	    };
	    csiUpdateController.prototype.showIrresolvableModal = function () {
	        this.modal = this.modalService.openModalViaTemplateUrl(this.irresolvableModalUrl, this, true);
	    };
	    csiUpdateController.prototype.vehicleChanged = function (vehicle) {
	        vehicle.entityId = this.contact.id;
	        this.csiEvent.vehicle = vehicle;
	        this.save();
	    };
	    csiUpdateController.prototype.save = function () {
	        var self = this;
	        var post = {
	            entityId: self.contactId,
	            csiEvent: self.csiEvent
	        };
	        this.initialStatus = self.csiEvent.status;
	        if (this.csiEvent.vehicle.id == "") {
	            this.csiEvent.vehicle.id = null;
	            this.csiEvent.vehicleId = null;
	        }
	        return this.ContactQAEventApiService.save(post);
	    };
	    csiUpdateController.prototype.statusModalSave = function () {
	        this.modal.accept();
	        this.save();
	    };
	    csiUpdateController.prototype.loadContact = function () {
	        var _this = this;
	        var self = this;
	        this.ServiceWrapper.get(this.ContactService, this.contactId).then(function (contact) {
	            self.contact = contact;
	            _this.loadExistingVehicles().then(function (data) {
	                self.contact.vehicles = data;
	                _this.loadCSI();
	            });
	        });
	    };
	    csiUpdateController.prototype.loadExistingVehicles = function () {
	        return this.ContactVehicleApiService.get(this.contact.id);
	    };
	    csiUpdateController.prototype.loadCSI = function () {
	        var _this = this;
	        this.isLoading = true;
	        this.ContactQAEventApiService.getCsi(this.contactId, this.csiId).then(function (csiQaEvent) {
	            _this.initialStatus = csiQaEvent.status;
	            _this.csiEvent = csiQaEvent;
	            if (_this.csiEvent.vehicleId != "0" && _this.contact.vehicles) {
	                var elementPos = _this.contact.vehicles.map(function (x) {
	                    return x.id;
	                }).indexOf(_this.csiEvent.vehicleId);
	                var objectFound = _this.contact.vehicles[elementPos];
	                _this.csiEvent.vehicle = objectFound;
	            }
	            else {
	                _this.csiEvent.vehicle = _this.vehicleFactory.create();
	                _this.csiEvent.vehicle.entityId = _this.contact.id;
	            }
	            _this.CSIInlineEditConfig.init(_this.csiEvent, _this.csiEventRefDefs, _this.inlineEditSaveCallback());
	            _this.EventManagerService.publish(_this.CrmConstants.CSI_EVENT.CSI_LOADED, _this.csiEvent);
	            _this.additionalDetails = _this.csiEventRefDefs.ResolutionCode2[_this.csiEvent.resolutionCode1.value];
	            _this.isLoading = false;
	        });
	        this.$scope.$watch("ctrl.csiEvent.status", function (newValue) {
	            if (!newValue)
	                return;
	            _this.csiEventActive = newValue && newValue.value != '100027';
	            if (newValue.value == _this.initialStatus.value) {
	                _this.initialStatus = newValue;
	                return;
	            }
	            if (_this.csiEvent && _this.csiEvent.status && (_this.csiEvent.status.value == '100027' || _this.csiEvent.status.value == '100026')) {
	                _this.showIrresolvableModal();
	            }
	            else {
	                _this.save();
	            }
	        });
	    };
	    csiUpdateController.prototype.inlineEditSaveCallback = function () {
	        var _this = this;
	        var self = this;
	        return function (inlineReturnObj) {
	            var post = {
	                entityId: self.contactId,
	                csiEvent: self.csiEvent
	            };
	            for (var prop in inlineReturnObj.model) {
	                post.csiEvent[prop] = inlineReturnObj.model[prop];
	            }
	            self.csiEvent = post.csiEvent;
	            if (self.csiEvent.vehicleId === "0") {
	                self.csiEvent.vehicleId = null;
	                self.csiEvent.vehicle.id = null;
	            }
	            _this.EventManagerService.publish(_this.CrmConstants.CSI_EVENT.CSI_LOADED, self.csiEvent);
	            return _this.ContactQAEventApiService.save(post);
	        };
	    };
	    csiUpdateController.prototype.toggleActive = function (newActiveStatus) {
	        if (newActiveStatus) {
	            this.csiEvent.status = _.find(this.csiEventRefDefs.Statuses, function (thing) { return (thing.value == '100024'); });
	        }
	        else {
	            this.csiEvent.status = _.find(this.csiEventRefDefs.Statuses, function (thing) { return (thing.value == '100027'); });
	        }
	    };
	    csiUpdateController.prototype.getCSIVehicleTitle = function () {
	        if (this.csiEvent == null || this.csiEvent.vehicle == null) {
	            return '';
	        }
	        return (this.csiEvent.vehicle.year ? this.csiEvent.vehicle.year : "") + " " +
	            (this.csiEvent.vehicle.make ? this.csiEvent.vehicle.make : "") + " " +
	            (this.csiEvent.vehicle.model ? this.csiEvent.vehicle.model : "") + " " +
	            (this.csiEvent.vehicle.trim ? this.csiEvent.vehicle.trim : "");
	    };
	    csiUpdateController.prototype.onResChange = function () {
	        this.additionalDetails = this.csiEventRefDefs.ResolutionCode2[this.csiEvent.resolutionCode1.value];
	    };
	    csiUpdateController.prototype.getCSITimeLineTitle = function () {
	        if (this.activities) {
	            return this.activities.filter(function (x) {
	                return x.status.value != '100072';
	            }).length
	                + ' Open/ ' + this.activities.filter(function (x) {
	                return x.status.value == '100072';
	            }).length
	                + ' Completed';
	        }
	        else {
	            return '';
	        }
	    };
	    csiUpdateController.prototype.printProspect = function () {
	        var _this = this;
	        this.csiPrintProspectSheetApiService.get({
	            contactId: this.contact.id,
	            qaId: this.csiEvent.id
	        })
	            .then(function (url) {
	            _this.$window.open(url, "qcal", _this.printProspectSheetWindowParams);
	        })
	            .catch(function (error) {
	            console.error(error);
	        });
	    };
	    csiUpdateController.prototype.actionView = function () {
	        var _this = this;
	        var data = {
	            logType: this.Constants.AUDIT_LOGS.CSI,
	            entityId: this.contact.id,
	            eventId: this.csiEvent.id
	        };
	        this.AuditLogApiService.get(data)
	            .then(function (response) {
	            _this.retrievedAuditLogs = true;
	            _this.auditLogs = response;
	            _this.modal = _this.modalService.openModalViaTemplateUrl(_this.auditLogModalUrl, _this);
	        })
	            .catch(function (error) {
	            console.error(error);
	        });
	    };
	    csiUpdateController.prototype.openDocumentForAction = function (forEmail) {
	        var docType = forEmail ? 0 : 1;
	        this.DocumentManagerService.openDocumentEvent(docType, 3, this.contact.id, this.csiEvent.id);
	    };
	    csiUpdateController.$inject = [
	        '$scope',
	        '$state',
	        '$stateParams',
	        '$q',
	        '$window',
	        'CrmConstants',
	        'ContactService',
	        'ServiceWrapper',
	        'CSIInlineEditConfig',
	        'ContactQAEventApiService',
	        'CsiEventRefDefService',
	        'modalService',
	        'AuditLogApiService',
	        'csiPrintProspectSheetApiService',
	        'ContactVehicleApiService',
	        'VehicleFactory',
	        'eventManagerService',
	        'Constants',
	        'DocumentManagerService'
	    ];
	    return csiUpdateController;
	}());
	module.exports = csiUpdateController;


/***/ },
/* 657 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var csiUpdateController = __webpack_require__(656);
	function csiUpdateDirective() {
	    return {
	        restrict: 'E',
	        templateUrl: 'app/csi/update/csiUpdateTemplate.html',
	        controller: csiUpdateController,
	        controllerAs: "ctrl",
	        bindToController: true,
	        scope: {
	            options: '=',
	            embedded: '='
	        }
	    };
	}
	module.exports = csiUpdateDirective;


/***/ },
/* 658 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var CSIDetailCardDirective = __webpack_require__(659);
	module.exports = angular.module("crm.csi.detail", [])
	    .directive('crmCsiDetailCard', CSIDetailCardDirective);


/***/ },
/* 659 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var CSIDetailCardController = __webpack_require__(660);
	function CSIDetailCardDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            csiEvent: "="
	        },
	        templateUrl: 'app/csi/details/card/detailCardTemplate.html',
	        controller: CSIDetailCardController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = CSIDetailCardDirective;


/***/ },
/* 660 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var CSIFacade = __webpack_require__(661);
	var CSIDetailViewController = (function () {
	    function CSIDetailViewController($scope, TranslationCache, CSIInlineEditConfig, ContactSurveyApiService, WordService, modalService, eventManagerService, CrmConstants) {
	        this.$scope = $scope;
	        this.TranslationCache = TranslationCache;
	        this.CSIInlineEditConfig = CSIInlineEditConfig;
	        this.ContactSurveyApiService = ContactSurveyApiService;
	        this.WordService = WordService;
	        this.modalService = modalService;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.csiFacade = null;
	        this.init();
	    }
	    CSIDetailViewController.prototype.init = function () {
	        this.csiFacade = new CSIFacade(this.$scope, this.csiEvent, this.TranslationCache, this.CSIInlineEditConfig, this.WordService, null, this.modalService, this.eventManagerService, this.CrmConstants);
	    };
	    CSIDetailViewController.$inject = [
	        '$scope',
	        'TranslationCache',
	        'CSIInlineEditConfig',
	        'ContactSurveyApiService',
	        'WordService',
	        'modalService',
	        'eventManagerService',
	        'CrmConstants'
	    ];
	    return CSIDetailViewController;
	}());
	module.exports = CSIDetailViewController;


/***/ },
/* 661 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var CSIFacade = (function () {
	    function CSIFacade($scope, _csiEvent, TranslationCache, csiEventInlineEditConfig, WordService, ContactSurvey, modalService, eventManagerService, CrmConstants) {
	        var _this = this;
	        this.$scope = $scope;
	        this._csiEvent = _csiEvent;
	        this.TranslationCache = TranslationCache;
	        this.csiEventInlineEditConfig = csiEventInlineEditConfig;
	        this.WordService = WordService;
	        this.ContactSurvey = ContactSurvey;
	        this.modalService = modalService;
	        this.eventManagerService = eventManagerService;
	        this.CrmConstants = CrmConstants;
	        this.cardClickCallback = function () {
	        };
	        this.getBadgeIcon = function () {
	            return CSIFacade._badgeTrophy;
	        };
	        this.getBadgeText = function () {
	            if (_this.csiEvent && _this.csiEvent.status) {
	                return _this.csiEvent.status.text;
	            }
	            else {
	                "";
	            }
	        };
	        this.getInactiveText = function () {
	            return _this.TranslationCache.get('crm.contact.csi.IRRESOLVABLE');
	        };
	        this.getResolvedText = function () {
	            return _this.TranslationCache.get('crm.contact.csi.RESOLVED');
	        };
	        this.getBadgePercentage = function () {
	            if (_this.csiEvent && _this.csiEvent.status) {
	                switch (_this.csiEvent.status.value) {
	                    case "100027":
	                        _this.fillColor = 'thermometer-danger';
	                        return '1';
	                    case "100023":
	                        _this.fillColor = 'thermometer-warning';
	                        return '.85';
	                    case "100024":
	                        _this.fillColor = 'thermometer-warning';
	                        return '.50';
	                    case "100025":
	                        _this.fillColor = 'thermometer-warning';
	                        return '1';
	                    case "100026":
	                        _this.fillColor = 'thermometer-success';
	                        return '.1';
	                }
	            }
	            else {
	                _this.fillColor = 'thermometer-success';
	                return '.1';
	            }
	        };
	        this.getFillColor = function (value) {
	            return _this.fillColor;
	        };
	        this.csiEvent = _csiEvent;
	        if (this.csiEvent) {
	            this.initializeFacade();
	        }
	        var eventSubscription = eventManagerService.subscribe(CrmConstants.CSI_EVENT.CSI_LOADED, function (csiEvent) {
	            _this.csiEvent = csiEvent;
	            _this.csiEventInlineEditConfig.updateEvent(csiEvent);
	            _this.initializeFacade();
	        });
	    }
	    CSIFacade.prototype.initializeFacade = function () {
	        var _this = this;
	        this.isActive = function () {
	            return true;
	        };
	        this.isIrresolvable = function () {
	            return _this.csiEvent.status != null ? _this.csiEvent.status.value == '100027' : false;
	        };
	        this.isInactive = function () {
	            return false;
	        };
	        this.isComplete = function () {
	            return false;
	        };
	        this.isResolved = function () {
	            return _this.csiEvent.status != null ? _this.csiEvent.status.value == '100026' : false;
	        };
	        this.initializeTitle();
	        this.initializePrimaryContent();
	        this.initializeCollapsibleContent();
	        this.actionItems = [];
	    };
	    CSIFacade.prototype.initializeTitle = function () {
	        var _this = this;
	        this.title = {
	            getText: function () {
	                return _this.TranslationCache.get('crm.contact.headers.SUMMARY');
	            },
	            getHtmlName: function () {
	                return 'csi-title';
	            },
	            isAccented: CSIFacade._alwaysFalse,
	            isLowlight: CSIFacade._alwaysFalse,
	            hasSeparator: CSIFacade._alwaysFalse
	        };
	    };
	    CSIFacade.prototype.initializePrimaryContent = function () {
	        this.leftSideContent = [{ rows: [] }, { rows: [] }, { rows: [] }];
	        this.initializeDescription();
	        this.initializeIssue();
	        this.initializeResolution();
	        this.initializeAssignedTo();
	    };
	    CSIFacade.prototype.initializeCollapsibleContent = function () {
	        this.collapsibleContent = [{
	                rows: []
	            }];
	        this.initializeCSICaseId();
	        this.initializeBDCAssignedTo();
	        this.initializeRanking();
	        this.initializeSource();
	    };
	    CSIFacade.prototype.initializeDescription = function () {
	        var _this = this;
	        this.leftSideContent[1].rows.push({
	            items: [{
	                    getText: function () {
	                        return '\u2022 ' + _this.csiEvent.description;
	                    },
	                    getHtmlName: function () {
	                        return 'csi-description';
	                    },
	                    inlineData: {
	                        getModel: function () {
	                            return _this.csiEvent.description;
	                        },
	                        isValid: function () {
	                            return !!_this.csiEvent.description;
	                        },
	                        facade: this.csiEventInlineEditConfig.getDescriptionPromise(),
	                        getNullText: function () {
	                            return _this.TranslationCache.get('crm.contact.csi.DESCRIPTION');
	                        }
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse
	                }]
	        });
	    };
	    CSIFacade.prototype.initializeIssue = function () {
	        var _this = this;
	        this.leftSideContent[1].rows.push({
	            items: [{
	                    getText: function () {
	                        if (_this.csiEvent.type) {
	                            return '\u2022 ' + _this.TranslationCache.get('crm.contact.csi.CSI_ISSUE');
	                        }
	                        else {
	                            return '';
	                        }
	                    },
	                    getHtmlName: function () {
	                        return 'csiIssueIsLabel';
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse,
	                    isEmphasized: CSIFacade._alwaysFalse
	                }, {
	                    getText: function () {
	                        if (_this.csiEvent.type) {
	                            return _this.csiEvent.type.text;
	                        }
	                        else {
	                            return '';
	                        }
	                    },
	                    getHtmlName: function () {
	                        return 'csi-type';
	                    },
	                    inlineData: {
	                        getModel: function () {
	                            return _this.csiEvent.type;
	                        },
	                        isValid: function () {
	                            return !!(_this.csiEvent.type && _this.csiEvent.type.text);
	                        },
	                        facade: this.csiEventInlineEditConfig.getTypePromise(),
	                        getNullText: function () {
	                            return _this.TranslationCache.get('crm.contact.csi.TYPE');
	                        }
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse,
	                    isEmphasized: CSIFacade._alwaysTrue
	                },
	                {
	                    getText: function () {
	                        return '/';
	                    },
	                    getHtmlName: function () {
	                        return '';
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse
	                },
	                {
	                    getText: function () {
	                        if (_this.csiEvent.subType) {
	                            return _this.csiEvent.subType.text;
	                        }
	                        else {
	                            return '';
	                        }
	                    },
	                    getHtmlName: function () {
	                        return 'csi-subtype';
	                    },
	                    inlineData: {
	                        getModel: function () {
	                            return _this.csiEvent.subType;
	                        },
	                        isValid: function () {
	                            return !!(_this.csiEvent.subType && _this.csiEvent.subType.text);
	                        },
	                        facade: this.csiEventInlineEditConfig.getSubTypePromise(),
	                        getNullText: function () {
	                            return _this.TranslationCache.get('crm.contact.csi.SUB_TYPE');
	                        }
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse,
	                    isEmphasized: CSIFacade._alwaysTrue
	                }
	            ]
	        });
	    };
	    CSIFacade.prototype.initializeResolution = function () {
	        var _this = this;
	        this.leftSideContent[1].rows.push({
	            items: [{
	                    getText: function () {
	                        return '\u2022 ' + _this.TranslationCache.get('crm.contact.csi.EXPECTED_RES_DATE');
	                    },
	                    getHtmlName: function () {
	                        return 'expectedResDateLabel';
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse,
	                    isEmphasized: CSIFacade._alwaysFalse
	                }, {
	                    getText: function () {
	                        if (_this.csiEvent.resolutionDate) {
	                            return _this.csiEvent.resolutionDate.text;
	                        }
	                        else {
	                            return '';
	                        }
	                    },
	                    getHtmlName: function () {
	                        return 'csi-resolution-date';
	                    },
	                    inlineData: {
	                        getModel: function () {
	                            return _this.csiEvent.resolutionDate;
	                        },
	                        isValid: function () {
	                            return !!(_this.csiEvent.resolutionDate && _this.csiEvent.resolutionDate.text);
	                        },
	                        facade: this.csiEventInlineEditConfig.getResolutionDatePromise(),
	                        getNullText: function () {
	                            return _this.TranslationCache.get('crm.contact.csi.RESOLUTION_DATE');
	                        }
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse,
	                    isEmphasized: CSIFacade._alwaysTrue
	                }
	            ]
	        });
	    };
	    CSIFacade.prototype.initializeAssignedTo = function () {
	        var _this = this;
	        this.leftSideContent[1].rows.push({
	            items: [{
	                    getText: function () {
	                        if (_this.csiEvent.assignTo) {
	                            return '\u2022 ' + _this.TranslationCache.get('crm.contact.csi.ASSIGNED_TO');
	                        }
	                        else {
	                            return '';
	                        }
	                    },
	                    getHtmlName: function () {
	                        return 'csiAssignedToLabel';
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse,
	                    isEmphasized: CSIFacade._alwaysFalse
	                }, {
	                    getText: function () {
	                        if (_this.csiEvent.assignTo) {
	                            return _this.csiEvent.assignTo.text;
	                        }
	                        else {
	                            return '';
	                        }
	                    },
	                    getHtmlName: function () {
	                        return 'csi-assigned-to';
	                    },
	                    inlineData: {
	                        getModel: function () {
	                            return _this.csiEvent.assignTo;
	                        },
	                        isValid: function () {
	                            return !!(_this.csiEvent.assignTo && _this.csiEvent.assignTo.text);
	                        },
	                        facade: this.csiEventInlineEditConfig.getAssignedToPromise(),
	                        getNullText: function () {
	                            return _this.TranslationCache.get('crm.contact.csi.ASSIGNED_TO');
	                        }
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse,
	                    isEmphasized: CSIFacade._alwaysTrue
	                }
	            ]
	        });
	    };
	    CSIFacade.prototype.initializeCSICaseId = function () {
	        var _this = this;
	        this.collapsibleContent[0].rows.push({
	            items: [{
	                    getText: function () {
	                        if (_this.csiEvent.id) {
	                            return _this.TranslationCache.get('crm.contact.csi.CSI_CASE_ID') + ': ';
	                        }
	                        else {
	                            return '';
	                        }
	                    },
	                    getHtmlName: function () {
	                        return 'csi-case-id-label';
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse,
	                    isEmphasized: CSIFacade._alwaysTrue
	                }, {
	                    getText: function () {
	                        if (_this.csiEvent.id) {
	                            return _this.csiEvent.id;
	                        }
	                        else {
	                            return '';
	                        }
	                    },
	                    getHtmlName: function () {
	                        return 'csi-case-id';
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse
	                }]
	        });
	    };
	    CSIFacade.prototype.initializeBDCAssignedTo = function () {
	        var _this = this;
	        this.collapsibleContent[0].rows.push({
	            items: [{
	                    getText: function () {
	                        return _this.TranslationCache.get('crm.contact.csi.BDC_ASSIGNED_TO') + ': ';
	                    },
	                    getHtmlName: function () {
	                        return 'csi-bdc-label';
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse,
	                    isEmphasized: CSIFacade._alwaysTrue
	                }, {
	                    getText: function () {
	                        if (_this.csiEvent.bdcAssigned) {
	                            return _this.csiEvent.bdcAssigned.text;
	                        }
	                        else {
	                            return '';
	                        }
	                    },
	                    getHtmlName: function () {
	                        return 'csi-bdc-assigned-to';
	                    },
	                    inlineData: {
	                        getModel: function () {
	                            return _this.csiEvent.bdcAssigned;
	                        },
	                        isValid: function () {
	                            return !!(_this.csiEvent.bdcAssigned && _this.csiEvent.bdcAssigned.text);
	                        },
	                        facade: this.csiEventInlineEditConfig.getBDCAssignedToPromise(),
	                        getNullText: function () {
	                            return _this.TranslationCache.get('crm.contact.csi.BDC_ASSIGNED_TO');
	                        }
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse,
	                    isEmphasized: CSIFacade._alwaysFalse
	                }
	            ]
	        });
	    };
	    CSIFacade.prototype.initializeRanking = function () {
	        var _this = this;
	        this.collapsibleContent[0].rows.push({
	            items: [{
	                    getText: function () {
	                        if (_this.csiEvent.ranking) {
	                            return _this.TranslationCache.get('crm.contact.csi.RANKING') + ': ';
	                        }
	                        else {
	                            return '';
	                        }
	                    },
	                    getHtmlName: function () {
	                        return 'csi-ranking-label';
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse,
	                    isEmphasized: CSIFacade._alwaysTrue
	                }, {
	                    getText: function () {
	                        if (_this.csiEvent.ranking) {
	                            return _this.csiEvent.ranking.text;
	                        }
	                        else {
	                            return '';
	                        }
	                    },
	                    getHtmlName: function () {
	                        return 'csi-ranking';
	                    },
	                    inlineData: {
	                        getModel: function () {
	                            return _this.csiEvent.ranking;
	                        },
	                        isValid: function () {
	                            return !!(_this.csiEvent.ranking && _this.csiEvent.ranking.text);
	                        },
	                        facade: this.csiEventInlineEditConfig.getRankingPromise(),
	                        getNullText: function () {
	                            return _this.TranslationCache.get('crm.contact.csi.RANKING');
	                        }
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse,
	                    isEmphasized: CSIFacade._alwaysFalse
	                }
	            ]
	        });
	    };
	    CSIFacade.prototype.initializeSource = function () {
	        var _this = this;
	        this.collapsibleContent[0].rows.push({
	            items: [{
	                    getText: function () {
	                        return _this.TranslationCache.get('crm.contact.csi.SOURCE') + ': ';
	                    },
	                    getHtmlName: function () {
	                        return 'csi-source-label';
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse,
	                    isEmphasized: CSIFacade._alwaysTrue
	                }, {
	                    getText: function () {
	                        if (_this.csiEvent.source) {
	                            return _this.csiEvent.source.text;
	                        }
	                        else {
	                            return '';
	                        }
	                    },
	                    getHtmlName: function () {
	                        return 'csi-source';
	                    },
	                    inlineData: {
	                        getModel: function () {
	                            return _this.csiEvent.source;
	                        },
	                        isValid: function () {
	                            return !!(_this.csiEvent.source && _this.csiEvent.source.text);
	                        },
	                        facade: this.csiEventInlineEditConfig.getSourcePromise(),
	                        getNullText: function () {
	                            return _this.TranslationCache.get('crm.contact.csi.SOURCE');
	                        }
	                    },
	                    isAccented: CSIFacade._alwaysFalse,
	                    isLowlight: CSIFacade._alwaysFalse,
	                    hasSeparator: CSIFacade._alwaysFalse,
	                    isEmphasized: CSIFacade._alwaysFalse
	                }
	            ]
	        });
	    };
	    CSIFacade.prototype.getCSIEvent = function () {
	        return this.csiEvent;
	    };
	    CSIFacade._alwaysFalse = function () {
	        return false;
	    };
	    CSIFacade._alwaysTrue = function () {
	        return true;
	    };
	    CSIFacade._badgeTrophy = 'fa-trophy';
	    return CSIFacade;
	}());
	module.exports = CSIFacade;


/***/ },
/* 662 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var CSIInlineEditConfig = __webpack_require__(663);
	module.exports = angular.module("crm.csi.inlineEditing", [])
	    .service('CSIInlineEditConfig', CSIInlineEditConfig);


/***/ },
/* 663 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var CSIInlineEditConfig = (function () {
	    function CSIInlineEditConfig(InlineEditFacadeFactory, $q) {
	        this.InlineEditFacadeFactory = InlineEditFacadeFactory;
	        this.$q = $q;
	        this.promisesResolved = false;
	        this.initPromiseStates();
	    }
	    CSIInlineEditConfig.prototype.updateEvent = function (csiEvent) {
	        this.csiEvent = csiEvent;
	        this.updateFacade();
	    };
	    CSIInlineEditConfig.prototype.updateFacade = function () {
	        var _this = this;
	        if (this.promisesResolved) {
	            this.initPromiseStates();
	        }
	        var promiseArray = [];
	        if (this.csiEvent == null) {
	            return;
	        }
	        promiseArray.push(this.getDescriptionFacade(this.saveFunction));
	        promiseArray.push(this.getSourceFacade(this.saveFunction));
	        promiseArray.push(this.getTypeFacade(this.saveFunction));
	        promiseArray.push(this.getSubTypeFacade(this.saveFunction));
	        promiseArray.push(this.getResolutionDateFacade(this.saveFunction));
	        promiseArray.push(this.getAssignedToFacade(this.saveFunction));
	        promiseArray.push(this.getBDCAssignedToFacade(this.saveFunction));
	        promiseArray.push(this.getCSICaseIdFacade(this.saveFunction));
	        promiseArray.push(this.getRankingFacade(this.saveFunction));
	        this.$q.all(promiseArray).then(function () {
	            _this.promisesResolved = true;
	        });
	    };
	    CSIInlineEditConfig.prototype.init = function (csiEvent, csiEventRefDefs, saveFunction) {
	        this.csiEventRefDefs = csiEventRefDefs;
	        this.csiEvent = csiEvent;
	        this.saveFunction = saveFunction;
	        if (this.csiEvent) {
	            this.updateFacade();
	        }
	    };
	    CSIInlineEditConfig.prototype.initPromiseStates = function () {
	        this.descriptionPromise = this.$q.defer();
	        this.sourcePromise = this.$q.defer();
	        this.typePromise = this.$q.defer();
	        this.subTypePromise = this.$q.defer();
	        this.resDatePromise = this.$q.defer();
	        this.assignedToPromise = this.$q.defer();
	        this.bdcAssignedToPromise = this.$q.defer();
	        this.csiCaseIdPromise = this.$q.defer();
	        this.rankingPromise = this.$q.defer();
	        this.sourcePromise = this.$q.defer();
	        this.promisesResolved = false;
	    };
	    CSIInlineEditConfig.prototype.getDescriptionPromise = function () {
	        return this.descriptionPromise.promise;
	    };
	    CSIInlineEditConfig.prototype.getDescriptionFacade = function (onSave) {
	        var inlineTypeModel = {
	            description: this.csiEvent.description
	        };
	        var fields = [
	            {
	                fieldName: 'description',
	                type: 'textarea',
	                placeholder: 'CSI Description'
	            }
	        ];
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade('Description', inlineTypeModel, fields, onSave);
	        facade.disableEdit = false;
	        this.descriptionPromise.resolve(facade);
	    };
	    CSIInlineEditConfig.prototype.getSourcePromise = function () {
	        return this.sourcePromise.promise;
	    };
	    CSIInlineEditConfig.prototype.getSourceFacade = function (onSave) {
	        var _this = this;
	        var inlineTypeModel = {
	            source: _.find(this.csiEventRefDefs.Source, function (refdef) { return _this.csiEvent.source != null ? refdef.value == _this.csiEvent.source.value : false; })
	        };
	        var fields = [
	            {
	                fieldName: 'source',
	                type: 'select',
	                fieldValues: this.csiEventRefDefs.Source
	            }
	        ];
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade('Source', inlineTypeModel, fields, onSave);
	        this.sourcePromise.resolve(facade);
	    };
	    CSIInlineEditConfig.prototype.getTypePromise = function () {
	        return this.typePromise.promise;
	    };
	    CSIInlineEditConfig.prototype.getTypeFacade = function (onSave) {
	        var _this = this;
	        var inlineTypeModel = {
	            type: _.find(this.csiEventRefDefs.Types, function (refdef) { return _this.csiEvent.type != null ? refdef.value == _this.csiEvent.type.value : false; })
	        };
	        var fields = [
	            {
	                fieldName: 'type',
	                type: 'select',
	                fieldValues: this.csiEventRefDefs.Types
	            }
	        ];
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade('Type', inlineTypeModel, fields, onSave);
	        this.typePromise.resolve(facade);
	    };
	    CSIInlineEditConfig.prototype.getSubTypePromise = function () {
	        return this.subTypePromise.promise;
	    };
	    CSIInlineEditConfig.prototype.getSubTypeFacade = function (onSave) {
	        var _this = this;
	        var inlineTypeModel = {
	            subType: _.find(this.csiEventRefDefs.ServiceProduct, function (refdef) { return _this.csiEvent.subType != null ? refdef.value == _this.csiEvent.subType.value : false; })
	        };
	        var fields = [
	            {
	                fieldName: 'subType',
	                type: 'select',
	                fieldValues: this.csiEventRefDefs.ServiceProduct
	            }
	        ];
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade('Sub Type', inlineTypeModel, fields, onSave);
	        this.subTypePromise.resolve(facade);
	    };
	    CSIInlineEditConfig.prototype.getResolutionDatePromise = function () {
	        return this.resDatePromise.promise;
	    };
	    CSIInlineEditConfig.prototype.getResolutionDateFacade = function (onSave) {
	        var _this = this;
	        var inlineTypeModel = {
	            resolutionDate: _.find(this.csiEventRefDefs.ResolutionDate, function (refdef) { return _this.csiEvent.resolutionDate != null ? refdef.value == _this.csiEvent.resolutionDate.value : false; })
	        };
	        var fields = [
	            {
	                fieldName: 'resolutionDate',
	                type: 'select',
	                fieldValues: this.csiEventRefDefs.ResolutionDate
	            }
	        ];
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade('Resolution Date', inlineTypeModel, fields, onSave);
	        this.resDatePromise.resolve(facade);
	    };
	    CSIInlineEditConfig.prototype.getAssignedToPromise = function () {
	        return this.assignedToPromise.promise;
	    };
	    CSIInlineEditConfig.prototype.getAssignedToFacade = function (onSave) {
	        var _this = this;
	        var inlineTypeModel = {
	            assignTo: _.find(this.csiEventRefDefs.AssignedTo, function (refdef) { return _this.csiEvent.assignTo != null ? refdef.value == _this.csiEvent.assignTo.value : false; })
	        };
	        var fields = [
	            {
	                fieldName: 'assignTo',
	                type: 'select',
	                fieldValues: this.csiEventRefDefs.AssignedTo
	            }
	        ];
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade('Assigned To', inlineTypeModel, fields, onSave);
	        this.assignedToPromise.resolve(facade);
	    };
	    CSIInlineEditConfig.prototype.getBDCAssignedToPromise = function () {
	        return this.bdcAssignedToPromise.promise;
	    };
	    CSIInlineEditConfig.prototype.getBDCAssignedToFacade = function (onSave) {
	        var _this = this;
	        var inlineTypeModel = {
	            bdcAssigned: _.find(this.csiEventRefDefs.BDCAssigned, function (refdef) { return _this.csiEvent.bdcAssigned != null ? refdef.value == _this.csiEvent.bdcAssigned.value : false; })
	        };
	        var fields = [
	            {
	                fieldName: 'bdcAssigned',
	                type: 'select',
	                fieldValues: this.csiEventRefDefs.BDCAssigned
	            }
	        ];
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade('BDC Assigned To', inlineTypeModel, fields, onSave);
	        this.bdcAssignedToPromise.resolve(facade);
	    };
	    CSIInlineEditConfig.prototype.getRankingPromise = function () {
	        return this.rankingPromise.promise;
	    };
	    CSIInlineEditConfig.prototype.getRankingFacade = function (onSave) {
	        var _this = this;
	        var inlineTypeModel = {
	            ranking: _.find(this.csiEventRefDefs.Rankings, function (refdef) { return _this.csiEvent.ranking != null ? refdef.value == _this.csiEvent.ranking.value : false; })
	        };
	        var fields = [
	            {
	                fieldName: 'ranking',
	                type: 'select',
	                fieldValues: this.csiEventRefDefs.Rankings
	            }
	        ];
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade('Ranking', inlineTypeModel, fields, onSave);
	        this.rankingPromise.resolve(facade);
	    };
	    CSIInlineEditConfig.prototype.getCSICaseIdPromise = function () {
	        return this.csiCaseIdPromise.promise;
	    };
	    CSIInlineEditConfig.prototype.getCSICaseIdFacade = function (onSave) {
	        var inlineTypeModel = {
	            caseId: this.csiEvent.id
	        };
	        var fields = [
	            {
	                fieldName: 'id',
	                type: 'textarea',
	                placeholder: 'CSI Case Id'
	            }
	        ];
	        var facade = this.InlineEditFacadeFactory.createGeneralFacade('CSI Case Id', inlineTypeModel, fields, onSave);
	        this.csiCaseIdPromise.resolve(facade);
	    };
	    CSIInlineEditConfig.$inject = [
	        'InlineEditFacadeFactory',
	        '$q'
	    ];
	    return CSIInlineEditConfig;
	}());
	module.exports = CSIInlineEditConfig;


/***/ },
/* 664 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var directive = __webpack_require__(665);
	module.exports = angular.module("csi.existingVehicleCard", [])
	    .directive("csiExistingVehicleCard", directive);


/***/ },
/* 665 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var controller = __webpack_require__(666);
	function existingTradeVehicleCardDirective() {
	    return {
	        restrict: "E",
	        templateUrl: "app/csi/existingVehicleCard/existingVehicleCardTemplate.html",
	        scope: {
	            vehicle: "=",
	            callback: "&"
	        },
	        controller: controller,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = existingTradeVehicleCardDirective;


/***/ },
/* 666 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var moment = __webpack_require__(19);
	var ExistingTradeVehicleCardController = (function () {
	    function ExistingTradeVehicleCardController($filter, translationCache) {
	        this.$filter = $filter;
	        this.translationCache = translationCache;
	        this.isLoading = false;
	        this.initializeItems();
	        this.status = this.vehicle.isCustomerOwned ? "good" : "bad";
	        this.tradeBtnDisabled = false;
	    }
	    ExistingTradeVehicleCardController.prototype.initializeItems = function () {
	        this.items = [];
	        if (this.vehicle.odometer)
	            this.items.push(this.$filter("number")(this.vehicle.odometer, 0) + " " +
	                this.translationCache.get("crm.vehicle.ODOMETER_UNIT"));
	        if (this.vehicle.vin)
	            this.items.push(this.vehicle.vin);
	        if (this.vehicle.stockNumber)
	            this.items.push(this.translationCache.get("crm.salesOpportunity.trades.existingVehicle.STOCK_NUMBER") +
	                this.vehicle.stockNumber);
	    };
	    ExistingTradeVehicleCardController.prototype.getServiceTime = function () {
	        if (this.vehicle.lastServiced == null) {
	            return "No Service On Record";
	        }
	        return "Last Serviced " + moment(this.vehicle.lastServiced, "MM/DD/YYYY").fromNow().toString();
	    };
	    ExistingTradeVehicleCardController.prototype.onBtnClick = function () {
	        this.tradeBtnDisabled = true;
	        this.callback({ vehicle: this.vehicle });
	        this.callback = undefined;
	    };
	    ExistingTradeVehicleCardController.$inject = [
	        "$filter",
	        "TranslationCache"
	    ];
	    return ExistingTradeVehicleCardController;
	}());
	module.exports = ExistingTradeVehicleCardController;


/***/ },
/* 667 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var vehicleChromeModule = __webpack_require__(668);
	var vehicleInfoModule = __webpack_require__(671);
	module.exports = angular.module("crm.vehicle", [
	    vehicleChromeModule.name, vehicleInfoModule.name
	]);


/***/ },
/* 668 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var chromeVehicleSelectorController = __webpack_require__(669);
	var chromeVehicleSelectorDirective = __webpack_require__(670);
	module.exports = angular.module('vehicle.chrome', [])
	    .controller('chromeVehicleSelectorController', chromeVehicleSelectorController)
	    .directive('chromeVehicleSelector', chromeVehicleSelectorDirective);


/***/ },
/* 669 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var ChromeVehicleSelectorController = (function () {
	    function ChromeVehicleSelectorController($scope, $translate, chromeService) {
	        this.$scope = $scope;
	        this.$translate = $translate;
	        this.chromeService = chromeService;
	        this.isFreeText = false;
	        this.expanded = false;
	        this.initialize();
	    }
	    ChromeVehicleSelectorController.prototype.initialize = function () {
	        this.enterVehicleManuallyText = this.$translate.instant("vehicle.ENTER_VEHICLE_MANUALLY");
	        this.useDropDownsText = this.$translate.instant("vehicle.USE_DROPDOWNS_TO_ENTER_VEHICLE");
	        this.addVehicleText = this.enterVehicleManuallyText;
	        this.vinError = 0;
	        this.isLoading = false;
	        this.getYears();
	    };
	    ChromeVehicleSelectorController.prototype.doVinLookup = function () {
	        var _this = this;
	        if (!this.vehicle.vin)
	            return;
	        this.chromeFilterSet.vin = this.vehicle.vin;
	        this.isLoading = true;
	        this.chromeService.updateFilterSet(this.chromeFilterSet)
	            .then(function (chromeFilterSet) {
	            _this.isLoading = false;
	            _this.years = chromeFilterSet.years;
	            _this.makes = chromeFilterSet.makes;
	            _this.model = chromeFilterSet.models;
	            _this.trims = chromeFilterSet.trims;
	            _this.interiorColors = chromeFilterSet.interior;
	            _this.exteriorColors = chromeFilterSet.exterior;
	            _this.bodyStyles = chromeFilterSet.bodyStyle;
	            _this.vehicle.make = chromeFilterSet.decode.make;
	            _this.vehicle.model = chromeFilterSet.decode.model;
	            _this.vehicle.trim = chromeFilterSet.decode.trimName;
	            _this.vehicle.year = chromeFilterSet.decode.year.toString();
	        });
	    };
	    ChromeVehicleSelectorController.prototype.clearVinError = function () {
	        this.vinError = 0;
	    };
	    ChromeVehicleSelectorController.prototype.getYears = function () {
	        var _this = this;
	        this.isLoading = true;
	        this.chromeService.getEmptyFilterSet()
	            .then(function (chromeFilterSet) {
	            _this.chromeService.updateFilterSet(chromeFilterSet)
	                .then(function (chromeFilterSet) {
	                _this.isLoading = false;
	                _this.chromeFilterSet = chromeFilterSet;
	                _this.years = chromeFilterSet.years;
	            });
	        });
	    };
	    ChromeVehicleSelectorController.prototype.onYearChanged = function () {
	        var _this = this;
	        this.chromeFilterSet.vin = null;
	        this.chromeFilterSet.years = [+this.vehicle.year];
	        this.chromeFilterSet.makes = null;
	        this.chromeFilterSet.models = null;
	        this.chromeFilterSet.trims = null;
	        this.isLoading = true;
	        this.chromeService.updateFilterSet(this.chromeFilterSet)
	            .then(function (chromeFilterSet) {
	            _this.isLoading = false;
	            _this.chromeFilterSet = chromeFilterSet;
	            _this.makes = chromeFilterSet.makes;
	        });
	    };
	    ChromeVehicleSelectorController.prototype.onMakeChanged = function () {
	        var _this = this;
	        this.chromeFilterSet.vin = null;
	        this.chromeFilterSet.makes = [this.vehicle.make];
	        this.chromeFilterSet.models = null;
	        this.chromeFilterSet.trims = null;
	        this.isLoading = true;
	        this.chromeService.updateFilterSet(this.chromeFilterSet)
	            .then(function (chromeFilterSet) {
	            _this.isLoading = false;
	            _this.chromeFilterSet = chromeFilterSet;
	            _this.model = chromeFilterSet.models;
	        });
	    };
	    ChromeVehicleSelectorController.prototype.onModelChanged = function () {
	        var _this = this;
	        this.chromeFilterSet.vin = null;
	        this.chromeFilterSet.models = [this.vehicle.model];
	        this.chromeFilterSet.trims = null;
	        this.isLoading = true;
	        this.chromeService.updateFilterSet(this.chromeFilterSet)
	            .then(function (chromeFilterSet) {
	            _this.isLoading = false;
	            _this.chromeFilterSet = chromeFilterSet;
	            _this.trims = chromeFilterSet.trims;
	        });
	    };
	    ChromeVehicleSelectorController.prototype.toggleFreeText = function () {
	        this.isFreeText = !this.isFreeText;
	        this.addVehicleText = (this.isFreeText) ? this.useDropDownsText : this.enterVehicleManuallyText;
	    };
	    ChromeVehicleSelectorController.$inject = [
	        "$scope",
	        "$translate",
	        "ChromeService"
	    ];
	    return ChromeVehicleSelectorController;
	}());
	module.exports = ChromeVehicleSelectorController;


/***/ },
/* 670 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var ChromeVehicleSelectorController = __webpack_require__(669);
	function ChromeVehicleSelectorDirective() {
	    return {
	        restrict: 'E',
	        scope: {
	            vehicle: '=',
	            isSubmitted: '='
	        },
	        templateUrl: 'app/vehicle/chrome/chromeVehicleSelectorTemplate.html',
	        controller: ChromeVehicleSelectorController,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = ChromeVehicleSelectorDirective;


/***/ },
/* 671 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var vehicleInfoController = __webpack_require__(672);
	var vehicleInfoDirective = __webpack_require__(673);
	module.exports = angular.module('vehicle.info', [])
	    .controller('vehicleInfoController', vehicleInfoController)
	    .directive('vehicleInfo', vehicleInfoDirective);


/***/ },
/* 672 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var VehicleInfoController = (function () {
	    function VehicleInfoController($scope, $translate, modalService, vehicleService, vehicleFactory) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$translate = $translate;
	        this.modalService = modalService;
	        this.vehicleService = vehicleService;
	        this.vehicleFactory = vehicleFactory;
	        this.modalTemplate = "app/csi/existingVehicleCard/existingVehicleCardModalTemplate.html";
	        this.deleteModalText = {
	            title: '',
	            text: '',
	            acceptButton: '',
	            cancelButton: ''
	        };
	        this.actionItems = [];
	        this.contactVehiclesWatch = this.$scope.$watch("ctrl.contactVehicles", function (val) {
	            if (val) {
	                _this.existingVehicleTextModel = {
	                    count: val.length,
	                    vehicleText: (val.length > 1) ?
	                        _this.$translate.instant("crm.salesOpportunity.trades.VEHICLE_PLURAL") :
	                        _this.$translate.instant("crm.salesOpportunity.trades.VEHICLE_SINGULAR")
	                };
	                _this.contactVehiclesWatch();
	            }
	        });
	        this.init();
	    }
	    VehicleInfoController.prototype.init = function () {
	        this.loadTranslations();
	        this.initializeActionItems();
	    };
	    VehicleInfoController.prototype.loadTranslations = function () {
	        this.deleteModalText.title = this.$translate.instant('csi.deleteModal.TITLE');
	        this.deleteModalText.text = this.$translate.instant('csi.deleteModal.TEXT');
	        this.deleteModalText.acceptButton = this.$translate.instant('csi.deleteModal.ACCEPT_BUTTON');
	        this.deleteModalText.cancelButton = this.$translate.instant('csi.deleteModal.CANCEL_BUTTON');
	    };
	    VehicleInfoController.prototype.initializeActionItems = function () {
	        var _this = this;
	        this.actionItems = [
	            {
	                text: this.$translate.instant('crm.vehicle.card.REMOVE_VEHICLE'),
	                isDisabled: function () {
	                    return false;
	                },
	                isVisible: function () {
	                    return true;
	                },
	                callback: function () {
	                    _this.removeVehicle();
	                }
	            }
	        ];
	    };
	    VehicleInfoController.prototype.removeVehicle = function () {
	        var _this = this;
	        var prompt = this.getDeleteModalPrompt();
	        this.modalService.openModal(prompt, this.deleteModalText.title, this.deleteModalText.acceptButton, this.deleteModalText.cancelButton)
	            .then(function (modalInstance) {
	            _this.deleteVehicle();
	            modalInstance.close();
	        }, function (modalInstance) {
	            modalInstance.dismiss();
	        });
	    };
	    VehicleInfoController.prototype.getDeleteModalPrompt = function () {
	        var vehicle = '<strong>' + this.vehicle.year + ' ' + this.vehicle.make + ' ' + this.vehicle.model + '</strong>';
	        return vehicle + "<span>" + this.deleteModalText.text + "</span>";
	    };
	    VehicleInfoController.prototype.isVehicleValid = function () {
	        if (this.vehicle.make != '' || this.vehicle.model != '' || this.vehicle.year != '') {
	            if (this.vehicle.make != "" && this.vehicle.model != "" && this.vehicle.year != "") {
	                return true;
	            }
	            else {
	                return false;
	            }
	        }
	        else {
	            return false;
	        }
	    };
	    VehicleInfoController.prototype.showAddExistingVehicleModal = function () {
	        this.existingVehicleData = {
	            existingVehicles: this.contactVehicles,
	            modal: this.modalService.openModalViaTemplateUrl(this.modalTemplate, this)
	        };
	    };
	    VehicleInfoController.prototype.addExistingVehicle = function (vehicle) {
	        this.vehicle = vehicle;
	        if (this.existingVehicleData.modal) {
	            this.existingVehicleData.modal.accept();
	        }
	        if (this.vehicleChanged) {
	            this.vehicleChanged({ vehicle: this.vehicle });
	        }
	    };
	    VehicleInfoController.prototype.saveVehicle = function () {
	        var _this = this;
	        this.isSubmitted = false;
	        if (this.isVehicleValid()) {
	            this.vehicleService.save(this.vehicle).then(function (vehicle) {
	                _this.vehicle = vehicle;
	                if (_this.vehicleChanged) {
	                    _this.vehicleChanged({ vehicle: _this.vehicle });
	                }
	            });
	        }
	        else {
	            this.isSubmitted = true;
	        }
	    };
	    VehicleInfoController.prototype.deleteVehicle = function () {
	        this.vehicle = this.vehicleFactory.create();
	        if (this.vehicleChanged) {
	            this.vehicleChanged({ vehicle: this.vehicle });
	        }
	    };
	    VehicleInfoController.$inject = [
	        '$scope',
	        '$translate',
	        'modalService',
	        'vehicleService',
	        'VehicleFactory'
	    ];
	    return VehicleInfoController;
	}());
	module.exports = VehicleInfoController;


/***/ },
/* 673 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var VehicleInfoController = __webpack_require__(672);
	function VehicleInfoDirective() {
	    return {
	        restrict: 'E',
	        scope: {
	            contact: '<',
	            vehicle: '=',
	            contactVehicles: '=',
	            isAdd: '=?',
	            vehicleChanged: "&",
	            isSubmitted: '=?'
	        },
	        templateUrl: 'app/vehicle/info/vehicleInfoTemplate.html',
	        controller: VehicleInfoController,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = VehicleInfoDirective;


/***/ },
/* 674 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var UpdateLogModule = __webpack_require__(675);
	var PlainTextModule = __webpack_require__(164);
	module.exports = angular.module("crm.auditLogs", [
	    UpdateLogModule.name,
	    PlainTextModule.name
	]);


/***/ },
/* 675 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var UpdateAuditLogDirective = __webpack_require__(676);
	module.exports = angular.module("crm.auditLogs.updateLogs", [])
	    .directive("crmUpdateAuditLogCard", UpdateAuditLogDirective);


/***/ },
/* 676 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var UpdateAuditLogController = __webpack_require__(677);
	function UpdateAuditLogDirective() {
	    var directive = {
	        restrict: 'E',
	        scope: {
	            auditLog: "="
	        },
	        templateUrl: 'app/auditLog/updateLog/updateAuditLogTemplate.html',
	        controller: UpdateAuditLogController,
	        controllerAs: 'ctrl',
	        bindToController: true
	    };
	    return directive;
	}
	module.exports = UpdateAuditLogDirective;


/***/ },
/* 677 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var SalesOpportunityAuditLogController = (function () {
	    function SalesOpportunityAuditLogController() {
	    }
	    SalesOpportunityAuditLogController.prototype.isBlankValue = function (entry) {
	        return entry.toLowerCase().indexOf('blank') >= 0;
	    };
	    SalesOpportunityAuditLogController.prototype.getValueCssClasses = function (entry) {
	        var cssClasses = ['ds-card-bold'];
	        if (this.isBlankValue(entry)) {
	            cssClasses.push('ds-card-emphasis');
	        }
	        return cssClasses;
	    };
	    SalesOpportunityAuditLogController.$inject = [];
	    return SalesOpportunityAuditLogController;
	}());
	module.exports = SalesOpportunityAuditLogController;


/***/ },
/* 678 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	var ConvertOpportunityTypePanelComponent = __webpack_require__(679);
	module.exports = angular.module("crm.convertOpportunityType", [])
	    .component(ConvertOpportunityTypePanelComponent.componentName, new ConvertOpportunityTypePanelComponent());


/***/ },
/* 679 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../../typings/index.d.ts"/>
	"use strict";
	var _ = __webpack_require__(215);
	var ConvertOpportunityTypePanelComponent = (function () {
	    function ConvertOpportunityTypePanelComponent() {
	        this.templateUrl = "app/convertOpportunityType/panel/convertOpportunityTypePanelTemplate.html";
	        this.bindings = {
	            contactId: "<",
	            opportunityId: "<",
	            opportunityType: "<",
	            assignedTo: "<",
	            onCancel: "&",
	            onAccept: "&"
	        };
	        this.controller = ConvertOpportunityTypePanelController;
	        this.controllerAs = "ctrl";
	    }
	    ConvertOpportunityTypePanelComponent.componentName = "crmConvertOpportunityTypePanel";
	    return ConvertOpportunityTypePanelComponent;
	}());
	var ConvertOpportunityTypePanelController = (function () {
	    function ConvertOpportunityTypePanelController(translationCache, convertOpportunityTypeService) {
	        this.translationCache = translationCache;
	        this.convertOpportunityTypeService = convertOpportunityTypeService;
	        this.possibleTypes = [
	            "Sales",
	            "Service",
	            "Parts"
	        ];
	        this.NewOpportunitySelectionStep = 1;
	        this.ConfirmationStep = 2;
	        this.SuccessStep = 3;
	        this.FailureStep = 4;
	    }
	    ConvertOpportunityTypePanelController.prototype.$onInit = function () {
	        var _this = this;
	        this.step = this.NewOpportunitySelectionStep;
	        this.type = this.getTypeObject(this.opportunityType);
	        this.types = _.map(_.without(this.possibleTypes, this.opportunityType), function (type) {
	            return _this.getTypeObject(type);
	        });
	    };
	    ConvertOpportunityTypePanelController.prototype.continueStep = function () {
	        if (!this.newOpportunityType) {
	            this.typeRequired = true;
	            return;
	        }
	        this.typeRequired = false;
	        this.step = this.ConfirmationStep;
	        this.newType = _.findWhere(this.types, { type: this.newOpportunityType });
	    };
	    ConvertOpportunityTypePanelController.prototype.goBack = function () {
	        this.newType = null;
	        this.step = this.NewOpportunitySelectionStep;
	    };
	    ConvertOpportunityTypePanelController.prototype.convert = function () {
	        var _this = this;
	        this.isLoading = true;
	        this.convertOpportunityTypeService.performConversion(this.contactId, this.opportunityId, this.opportunityType, this.newOpportunityType, this.assignedTo)
	            .then(function (result) {
	            if (!result.isSuccess) {
	                _this.step = _this.FailureStep;
	                _this.errorMessage = result.message;
	            }
	            else {
	                _this.step = _this.SuccessStep;
	            }
	        })
	            .catch(function (response) {
	            var error = (response && response.data) ? response.data : response;
	            _this.step = _this.FailureStep;
	            _this.errorMessage = error.message || error;
	        })
	            .finally(function () {
	            _this.isLoading = false;
	        });
	    };
	    ConvertOpportunityTypePanelController.prototype.getTypeObject = function (type) {
	        var typeUpper = type.toLocaleUpperCase();
	        var text = this.translationCache.get("crm.convertOpportunityType." + typeUpper);
	        return {
	            type: type,
	            text: text,
	            textUpper: text.toLocaleUpperCase()
	        };
	    };
	    ConvertOpportunityTypePanelController.$inject = [
	        "TranslationCache",
	        "convertOpportunityTypeService"
	    ];
	    return ConvertOpportunityTypePanelController;
	}());
	module.exports = ConvertOpportunityTypePanelComponent;


/***/ },
/* 680 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var fileUploadDirective_1 = __webpack_require__(681);
	module.exports = angular.module('crm.utils', [])
	    .directive('crmFileUpload', fileUploadDirective_1.FileUploadDirective);


/***/ },
/* 681 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	function FileUploadDirective() {
	    var directive = {
	        templateUrl: 'app/utils/fileUpload/fileUploadTemplate.html',
	        restrict: 'E',
	        scope: {
	            onFileChange: '&',
	            acceptedFileTypes: '=?',
	            allowMultiple: '=?'
	        },
	        transclude: true,
	        link: function (scope, element, attrs) {
	            var inputElement = element.find('input[type="file"]');
	            inputElement.click(function (e) {
	                e.stopPropagation();
	            });
	            var onChangeWrapper = function (event) {
	                scope.onFileChange({ event: event });
	                inputElement.wrap('<form>').closest('form').get(0).reset();
	                inputElement.unwrap();
	                scope.$apply();
	            };
	            element.bind('click', function (event) {
	                inputElement.click();
	            });
	            inputElement.bind('change', onChangeWrapper.bind(scope));
	            var fileWatch = scope.$watch('acceptedFileTypes', function (val) {
	                if (!val) {
	                    scope.acceptedFileTypes = '*';
	                }
	            });
	            var multipleWatch = scope.$watch('allowMultiple', function (val) {
	                if (!!val) {
	                    inputElement.attr("multiple", true);
	                }
	                else {
	                    inputElement.removeAttr("multiple");
	                }
	            });
	            scope.$on('$destroy', function () {
	                fileWatch();
	                multipleWatch();
	            });
	        }
	    };
	    return directive;
	}
	exports.FileUploadDirective = FileUploadDirective;


/***/ },
/* 682 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var serviceAddModule = __webpack_require__(683);
	var serviceUpdateModule = __webpack_require__(687);
	module.exports = angular.module("crm.service", [
	    serviceAddModule.name,
	    serviceUpdateModule.name
	]);


/***/ },
/* 683 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var serviceAddController = __webpack_require__(684);
	var ServiceAddPanelController = __webpack_require__(685);
	var ServiceAddPanelDirective = __webpack_require__(686);
	module.exports = angular.module('service.add', [])
	    .controller('serviceAddController', serviceAddController)
	    .controller('ServiceAddPanelController', ServiceAddPanelController)
	    .directive('serviceAddPanel', ServiceAddPanelDirective);


/***/ },
/* 684 */
/***/ function(module, exports) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var serviceAddController = (function () {
	    function serviceAddController($scope, $state, $stateParams, $q, $translate, CrmConstants, eventManagerService, ContactService, contactVehicleApiService, ServiceWrapper, dirtyFormWarningService, vehicleService, ServiceEventService) {
	        this.$scope = $scope;
	        this.$state = $state;
	        this.$stateParams = $stateParams;
	        this.$q = $q;
	        this.$translate = $translate;
	        this.CrmConstants = CrmConstants;
	        this.eventManagerService = eventManagerService;
	        this.ContactService = ContactService;
	        this.contactVehicleApiService = contactVehicleApiService;
	        this.ServiceWrapper = ServiceWrapper;
	        this.dirtyFormWarningService = dirtyFormWarningService;
	        this.vehicleService = vehicleService;
	        this.ServiceEventService = ServiceEventService;
	        this.serviceModel = {};
	        this.isLoading = false;
	        this.isSubmitted = false;
	        this.init();
	    }
	    serviceAddController.prototype.init = function () {
	        var _this = this;
	        this.loadContact();
	        this.initEmpty();
	        this.dirtyFormWarningService.register(function () {
	            return _this.addServiceEventForm.$dirty;
	        });
	        this.$scope.$on('$destroy', function () {
	            _this.dirtyFormWarningService.deregister();
	        });
	    };
	    serviceAddController.prototype.loadContact = function () {
	        var _this = this;
	        this.isLoading = true;
	        this.ServiceWrapper.get(this.ContactService, this.$stateParams.contactId).then(function (contact) {
	            _this.contact = contact;
	            _this.serviceModel.vehicle.entityId = _this.contact.id;
	            _this.loadExistingVehicles().then(function (data) {
	                _this.contact.vehicles = data;
	            });
	            _this.isLoading = false;
	        });
	    };
	    serviceAddController.prototype.loadExistingVehicles = function () {
	        return this.contactVehicleApiService.get(this.contact.id);
	    };
	    serviceAddController.prototype.submit = function (form) {
	        form.$setSubmitted();
	        this.isSubmitted = true;
	        if (!this.serviceModel.vehicle) {
	            this.serviceModel.vehicle = { id: null };
	        }
	        if (!this.isVehicleValid()) {
	            this.eventManagerService.publish('SERVICE_ADD_ERROR', {
	                alertType: 'error',
	                message: this.$translate.instant('service.ERRORS.INVALID_SERVICE_ADD_BAD_VEHICLE')
	            });
	        }
	        else if (this.isInvalid()) {
	            this.eventManagerService.publish('SERVICE_ADD_ERROR', {
	                alertType: 'error',
	                message: this.$translate.instant('service.ERRORS.INVALID_SERVICE_ADD')
	            });
	        }
	        else {
	            if (this.serviceModel.vehicle && !this.serviceModel.vehicle.id
	                && this.serviceModel.vehicle.year && this.serviceModel.vehicle.make && this.serviceModel.vehicle.model) {
	                this.saveVehicleThenService();
	            }
	            else {
	                this.saveService();
	            }
	        }
	    };
	    serviceAddController.prototype.saveVehicleThenService = function () {
	        var _this = this;
	        var vehicle = this.serviceModel.vehicle;
	        this.vehicleService.save(vehicle).then(function (result) {
	            _this.serviceModel.vehicle = result;
	            _this.saveService();
	        });
	    };
	    serviceAddController.prototype.saveService = function () {
	        var _this = this;
	        this.isLoading = true;
	        this.ServiceEventService.save(this.serviceModel, this.contact.id).then(function (data) {
	            if (data && data.id) {
	                _this.serviceModel.id = data.id.toString();
	                _this.dirtyFormWarningService.deregister();
	                _this.redirectToServiceEvent();
	            }
	        });
	    };
	    serviceAddController.prototype.redirectToServiceEvent = function () {
	        if (this.$stateParams.contactId) {
	            this.$state.go('serviceUpdate', { 'contactId': this.$stateParams.contactId, 'serviceId': this.serviceModel.id });
	        }
	        else {
	            console.warn("contactId parameter is required.");
	        }
	    };
	    serviceAddController.prototype.isInvalid = function () {
	        this.invalid =
	            (!this.serviceModel.type || !this.serviceModel.type.text || !this.serviceModel.type.value)
	                || (!this.serviceModel.serviceProduct || !this.serviceModel.serviceProduct.text || !this.serviceModel.serviceProduct.value)
	                || (!this.serviceModel.serviceDate || !this.serviceModel.serviceDate.text || !this.serviceModel.serviceDate.value)
	                || (!this.serviceModel.source || !this.serviceModel.source.text || !this.serviceModel.source.value);
	        return this.invalid;
	    };
	    serviceAddController.prototype.isVehicleValid = function () {
	        if (this.serviceModel.vehicle && this.serviceModel.vehicle.id) {
	            return true;
	        }
	        else if (this.serviceModel.vehicle && this.serviceModel.vehicle.make && this.serviceModel.vehicle.model && this.serviceModel.vehicle.year && this.serviceModel.vehicle.vin && this.serviceModel.vehicle.odometer) {
	            return true;
	        }
	    };
	    serviceAddController.prototype.initEmpty = function () {
	        this.serviceModel.id = "";
	        this.serviceModel.status = this.setRefDef('', '');
	        this.serviceModel.type = this.setRefDef('', '');
	        this.serviceModel.source = this.setRefDef('', '');
	        this.serviceModel.franchise = this.setRefDef('', '');
	        this.serviceModel.dealership = this.setRefDef('', '');
	        this.serviceModel.serviceProduct = this.setRefDef('', '');
	        this.serviceModel.trackingCode = this.setRefDef('', '');
	        this.serviceModel.serviceDate = this.setRefDef('', '');
	        this.serviceModel.ranking = this.setRefDef('', '');
	        this.serviceModel.assignedTo = this.setRefDef('', '');
	        this.serviceModel.bdcAssigned = this.setRefDef('', '');
	        this.serviceModel.oppCodes = [];
	        this.serviceModel.serviceAdviser = '';
	        this.serviceModel.dueDate = '';
	        this.serviceModel.lastUpdated = '';
	        this.serviceModel.currentMiKm = 0;
	        this.serviceModel.totalCost = null;
	        this.serviceModel.vehicle = {};
	    };
	    serviceAddController.prototype.setRefDef = function (value, text) {
	        return {
	            value: value,
	            text: text
	        };
	    };
	    serviceAddController.$inject = [
	        '$scope',
	        '$state',
	        '$stateParams',
	        '$q',
	        '$translate',
	        'CrmConstants',
	        'eventManagerService',
	        'ContactService',
	        'ContactVehicleApiService',
	        'ServiceWrapper',
	        'dirtyFormWarningService',
	        'vehicleService',
	        'ServiceEventService'
	    ];
	    return serviceAddController;
	}());
	module.exports = serviceAddController;


/***/ },
/* 685 */
/***/ function(module, exports) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var ServiceAddPanelController = (function () {
	    function ServiceAddPanelController(ServiceEventService, ServiceWrapper, CurrentUserApiService) {
	        var _this = this;
	        this.ServiceEventService = ServiceEventService;
	        this.ServiceWrapper = ServiceWrapper;
	        this.CurrentUserApiService = CurrentUserApiService;
	        this.expanded = false;
	        this.isLoading = false;
	        this.setAssignedToCurrentUser = function () {
	            var self = _this;
	            _this.ServiceWrapper.get(_this.CurrentUserApiService).then(function (response) {
	                var assignedRefDef = _.findWhere(self.serviceEventRefDefs.assignedTo, { text: response });
	                self.serviceModel.assignedTo = assignedRefDef;
	            });
	        };
	        this.init();
	    }
	    ServiceAddPanelController.prototype.init = function () {
	        var self = this;
	        self.isLoading = true;
	        this.ServiceEventService.getAddRefDefs(this.serviceModel.vehicle.entityId).then(function (response) {
	            self.serviceEventRefDefs = response;
	            self.setAssignedToCurrentUser();
	        });
	    };
	    ServiceAddPanelController.prototype.updateDescription = function () {
	        this.serviceModel.description = this.description;
	    };
	    ServiceAddPanelController.$inject = [
	        'ServiceEventService',
	        'ServiceWrapper',
	        'CurrentUserApiService'
	    ];
	    return ServiceAddPanelController;
	}());
	module.exports = ServiceAddPanelController;


/***/ },
/* 686 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../../typings/index.d.ts"/>
	"use strict";
	var ServiceAddPanelController = __webpack_require__(685);
	function ServiceAddPanelDirective() {
	    return {
	        restrict: 'E',
	        scope: {
	            serviceModel: '=',
	            invalid: '=',
	            form: '=',
	        },
	        templateUrl: 'app/service/add/panel/serviceAddPanelTemplate.html',
	        controller: ServiceAddPanelController,
	        controllerAs: "ctrl",
	        bindToController: true
	    };
	}
	module.exports = ServiceAddPanelDirective;


/***/ },
/* 687 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var serviceUpdateController = __webpack_require__(688);
	var serviceUpdateDirective = __webpack_require__(689);
	module.exports = angular.module('service.update', [])
	    .controller('serviceUpdateController', serviceUpdateController)
	    .directive('serviceUpdateDirective', serviceUpdateDirective);


/***/ },
/* 688 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var activityEnums_1 = __webpack_require__(412);
	var PrintProspectService = __webpack_require__(235);
	var serviceUpdateController = (function () {
	    function serviceUpdateController($scope, $state, $stateParams, $q, $window, CrmConstants, ContactService, ServiceWrapper, ContactVehicleApiService, ServiceEventService, modalService, AuditLogApiService, SurveyApiService, Constants, PrintProspectService, convertOpportunityTypeService, permissionService, DocumentManagerService) {
	        this.$scope = $scope;
	        this.$state = $state;
	        this.$stateParams = $stateParams;
	        this.$q = $q;
	        this.$window = $window;
	        this.CrmConstants = CrmConstants;
	        this.ContactService = ContactService;
	        this.ServiceWrapper = ServiceWrapper;
	        this.ContactVehicleApiService = ContactVehicleApiService;
	        this.ServiceEventService = ServiceEventService;
	        this.modalService = modalService;
	        this.AuditLogApiService = AuditLogApiService;
	        this.SurveyApiService = SurveyApiService;
	        this.Constants = Constants;
	        this.PrintProspectService = PrintProspectService;
	        this.convertOpportunityTypeService = convertOpportunityTypeService;
	        this.permissionService = permissionService;
	        this.DocumentManagerService = DocumentManagerService;
	        this.printProspectSheetWindowParams = "toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=no,resizable=yes,width=800,height=650";
	        this.serviceModel = {};
	        this.OpportunityEventType = activityEnums_1.OpportunityEventType;
	        this.isLoading = false;
	        this.init();
	    }
	    serviceUpdateController.prototype.init = function () {
	        if (this.options && this.options.contactId && this.options.opportunityId) {
	            this.contactId = this.options.contactId;
	            this.serviceId = this.options.opportunityId;
	        }
	        else {
	            this.contactId = this.$stateParams.contactId;
	            this.serviceId = this.$stateParams.serviceId;
	        }
	        this.loadContact();
	        this.loadPermissions();
	    };
	    serviceUpdateController.prototype.getServiceVehicleTitle = function () {
	        if (!this.serviceModel || !this.serviceModel.vehicle) {
	            return '';
	        }
	        return (this.serviceModel.vehicle.year ? this.serviceModel.vehicle.year : "") + " " +
	            (this.serviceModel.vehicle.make ? this.serviceModel.vehicle.make : "") + " " +
	            (this.serviceModel.vehicle.model ? this.serviceModel.vehicle.model : "") + " " +
	            (this.serviceModel.vehicle.trim ? this.serviceModel.vehicle.trim : "");
	    };
	    serviceUpdateController.prototype.getServiceTimeLineTitle = function () {
	        if (this.activities) {
	            return this.activities.filter(function (x) {
	                return x.status.value != '100072';
	            }).length
	                + ' Open/ ' + this.activities.filter(function (x) {
	                return x.status.value == '100072';
	            }).length
	                + ' Completed';
	        }
	        else {
	            return '';
	        }
	    };
	    serviceUpdateController.prototype.loadContact = function () {
	        var _this = this;
	        var self = this;
	        this.ServiceWrapper.get(this.ContactService, this.contactId).then(function (contact) {
	            self.contact = contact;
	            _this.loadExistingVehicles().then(function (data) {
	                self.contact.vehicles = data;
	                _this.loadServiceEvent();
	            });
	        });
	    };
	    serviceUpdateController.prototype.loadPermissions = function () {
	        var _this = this;
	        var convertPermissionPromise = this.permissionService.getPermission('EventConversion')
	            .then(function (permission) {
	            _this.eventConversionPermission = permission;
	        });
	    };
	    serviceUpdateController.prototype.loadServiceEvent = function () {
	        var _this = this;
	        this.isLoading = false;
	        this.ServiceEventService.get(+this.contactId, +this.serviceId).then(function (data) {
	            _this.serviceModel = data;
	            _this.serviceModel.vehicle = _.find(_this.contact.vehicles, function (vehicle) { return vehicle.id === _this.serviceModel.vehicleId; });
	        });
	    };
	    serviceUpdateController.prototype.loadExistingVehicles = function () {
	        return this.ContactVehicleApiService.get(this.contact.id);
	    };
	    serviceUpdateController.prototype.printProspect = function () {
	        var _this = this;
	        this.PrintProspectService.getPrintProspectFormUrl(this.contact.id, this.serviceId)
	            .then(function (url) {
	            _this.$window.open(url, '_blank', 'location=0,scrollbars=yes');
	        });
	    };
	    serviceUpdateController.prototype.actionConvert = function () {
	        var assignedTo = !!this.serviceModel.assignedTo ? this.serviceModel.assignedTo.value : null;
	        this.convertOpportunityTypeService.convertOpportunityType(this.contactId, this.serviceId, this.Constants.CONVERT_TYPE.SERVICE, assignedTo);
	    };
	    serviceUpdateController.prototype.actionSurvey = function () {
	        var _this = this;
	        var data = {
	            surveyType: this.Constants.SURVEYS.SERVICE,
	            entityId: this.contact.id,
	            eventId: this.serviceId
	        };
	        this.SurveyApiService.get(data)
	            .then(function (surveys) {
	            _this.surveys = surveys;
	            _this.modal = _this.modalService.openModalViaTemplateUrl(serviceUpdateController.surveyModalTemplateUrl, _this);
	        });
	    };
	    serviceUpdateController.prototype.actionView = function () {
	        var _this = this;
	        var data = {
	            logType: this.Constants.AUDIT_LOGS.SERVICE,
	            entityId: this.contact.id,
	            eventId: this.serviceId
	        };
	        this.AuditLogApiService.get(data)
	            .then(function (response) {
	            _this.auditLogs = response;
	            _this.modal = _this.modalService.openModalViaTemplateUrl(serviceUpdateController.auditLogModalTemplateUrl, _this);
	        });
	    };
	    serviceUpdateController.prototype.closeModal = function () {
	        this.modal.cancel();
	    };
	    serviceUpdateController.prototype.openDocumentForAction = function (forEmail) {
	        var docType = forEmail ? 0 : 1;
	        this.DocumentManagerService.openDocumentEvent(docType, 2, this.contact.id, this.serviceId);
	    };
	    serviceUpdateController.auditLogModalTemplateUrl = 'app/auditLog/updateAuditLogModalTemplate.html';
	    serviceUpdateController.surveyModalTemplateUrl = 'app/surveys/surveysModalTemplate.html';
	    serviceUpdateController.$inject = [
	        '$scope',
	        '$state',
	        '$stateParams',
	        '$q',
	        '$window',
	        'CrmConstants',
	        'ContactService',
	        'ServiceWrapper',
	        'ContactVehicleApiService',
	        'ServiceEventService',
	        'modalService',
	        'AuditLogApiService',
	        'SurveyApiService',
	        'Constants',
	        PrintProspectService.serviceName,
	        'convertOpportunityTypeService',
	        'permissionService',
	        'DocumentManagerService'
	    ];
	    return serviceUpdateController;
	}());
	module.exports = serviceUpdateController;


/***/ },
/* 689 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../../typings/index.d.ts"/>
	"use strict";
	var serviceUpdateController = __webpack_require__(688);
	function serviceUpdateDirective() {
	    return {
	        restrict: 'E',
	        templateUrl: 'app/service/update/serviceUpdateTemplate.html',
	        controller: serviceUpdateController,
	        controllerAs: "ctrl",
	        bindToController: true,
	        scope: {
	            options: '=',
	            embedded: '='
	        }
	    };
	}
	module.exports = serviceUpdateDirective;


/***/ },
/* 690 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var surveysComponent_1 = __webpack_require__(691);
	module.exports = angular.module('crm.surveys', [])
	    .component(surveysComponent_1.SurveysComponent.componentName, new surveysComponent_1.SurveysComponent());


/***/ },
/* 691 */
/***/ function(module, exports) {

	///<reference path='../../typings/index.d.ts'/>
	"use strict";
	var SurveysComponent = (function () {
	    function SurveysComponent() {
	        this.bindings = {
	            survey: '<'
	        };
	        this.controller = SurveysController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/surveys/surveysTemplate.html';
	    }
	    SurveysComponent.componentName = 'crmSurveys';
	    return SurveysComponent;
	}());
	exports.SurveysComponent = SurveysComponent;
	var SurveysController = (function () {
	    function SurveysController($window) {
	        this.$window = $window;
	    }
	    SurveysController.prototype.openSurvey = function () {
	        this.$window.open(this.survey.url, '_blank', 'location=0,scrollbars=yes');
	    };
	    SurveysController.$inject = [
	        '$window'
	    ];
	    return SurveysController;
	}());


/***/ },
/* 692 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var adminMenuComponent_1 = __webpack_require__(693);
	var angular = __webpack_require__(2);
	exports.AdminModule = angular.module('crm.admin', [])
	    .component('crmAdminMenu', new adminMenuComponent_1.AdminMenuComponent());


/***/ },
/* 693 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../typings/index.d.ts"/>
	var adminMenuController_1 = __webpack_require__(694);
	var AdminMenuComponent = (function () {
	    function AdminMenuComponent() {
	        this.bindings = {};
	        this.controller = adminMenuController_1.AdminMenuController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/admin/adminMenuTemplate.html';
	    }
	    return AdminMenuComponent;
	}());
	exports.AdminMenuComponent = AdminMenuComponent;


/***/ },
/* 694 */
/***/ function(module, exports) {

	"use strict";
	var AdminMenuController = (function () {
	    function AdminMenuController($scope, $rootScope, $sce, DataApiSettings, AppSettings) {
	        this.$scope = $scope;
	        this.$rootScope = $rootScope;
	        this.$sce = $sce;
	        this.DataApiSettings = DataApiSettings;
	        this.AppSettings = AppSettings;
	        try {
	            this.adminMenuUrl = this.$sce.trustAsResourceUrl(this.AppSettings.globalUrl + '/CRM/admin/adminMenuOptions.aspx');
	        }
	        catch (e) {
	        }
	    }
	    AdminMenuController.prototype.getAdminMenuUrl = function () {
	        return this.$sce.trustAsResourceUrl(this.adminMenuUrl + "?siteId=" + this.DataApiSettings.getSiteId());
	    };
	    AdminMenuController.$inject = [
	        '$scope',
	        '$rootScope',
	        '$sce',
	        'DataApiSettings',
	        'AppSettings'
	    ];
	    return AdminMenuController;
	}());
	exports.AdminMenuController = AdminMenuController;


/***/ },
/* 695 */
/***/ function(module, exports, __webpack_require__) {

	///<reference path="../../typings/index.d.ts"/>
	"use strict";
	var businessRuleManagerComponent_1 = __webpack_require__(696);
	var campaignManagerComponent_1 = __webpack_require__(698);
	var documentManagerComponent_1 = __webpack_require__(700);
	var emailMyCustomerComponent_1 = __webpack_require__(702);
	var emailQueueComponent_1 = __webpack_require__(704);
	var emailTemplatesComponent_1 = __webpack_require__(706);
	var listBuilderComponent_1 = __webpack_require__(708);
	var marketingToolsHelpComponent_1 = __webpack_require__(710);
	var printQueueComponent_1 = __webpack_require__(712);
	var textQueueComponent_1 = __webpack_require__(714);
	var angular = __webpack_require__(2);
	exports.MarketingToolsModule = angular.module('crm.marketingTools', [])
	    .component('crmMarketingToolsBusinessRuleManager', new businessRuleManagerComponent_1.BusinessRuleManagerComponent())
	    .component('crmMarketingToolsCampaignManager', new campaignManagerComponent_1.CampaignManagerComponent())
	    .component('crmMarketingToolsDocumentManager', new documentManagerComponent_1.DocumentManagerComponent())
	    .component('crmMarketingToolsEmailMyCustomer', new emailMyCustomerComponent_1.EmailMyCustomerComponent())
	    .component('crmMarketingToolsEmailQueue', new emailQueueComponent_1.EmailQueueComponent())
	    .component('crmMarketingToolsEmailTemplates', new emailTemplatesComponent_1.EmailTemplatesComponent())
	    .component('crmMarketingToolsListBuilder', new listBuilderComponent_1.ListBuilderComponent())
	    .component('crmMarketingToolsHelp', new marketingToolsHelpComponent_1.MarketingToolsHelpComponent())
	    .component('crmMarketingToolsPrintQueue', new printQueueComponent_1.PrintQueueComponent())
	    .component('crmMarketingToolsTextQueue', new textQueueComponent_1.TextQueueComponent());


/***/ },
/* 696 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var businessRuleManagerController_1 = __webpack_require__(697);
	var BusinessRuleManagerComponent = (function () {
	    function BusinessRuleManagerComponent() {
	        this.bindings = {};
	        this.controller = businessRuleManagerController_1.BusinessRuleManagerController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/marketingTools/businessRuleManager/businessRuleManagerTemplate.html';
	    }
	    return BusinessRuleManagerComponent;
	}());
	exports.BusinessRuleManagerComponent = BusinessRuleManagerComponent;


/***/ },
/* 697 */
/***/ function(module, exports) {

	"use strict";
	var BusinessRuleManagerController = (function () {
	    function BusinessRuleManagerController($scope, $rootScope, $sce, DataApiSettings, AppSettings) {
	        this.$scope = $scope;
	        this.$rootScope = $rootScope;
	        this.$sce = $sce;
	        this.DataApiSettings = DataApiSettings;
	        this.AppSettings = AppSettings;
	        try {
	            this.businessRuleManagerUrl = this.$sce.trustAsResourceUrl(this.AppSettings.globalUrl + '/CRM/business/br_manager.aspx');
	        }
	        catch (e) {
	        }
	    }
	    BusinessRuleManagerController.prototype.getBusinessRuleManagerUrl = function () {
	        return this.$sce.trustAsResourceUrl(this.businessRuleManagerUrl + "?SiteId=" + this.DataApiSettings.getSiteId());
	    };
	    BusinessRuleManagerController.$inject = [
	        '$scope',
	        '$rootScope',
	        '$sce',
	        'DataApiSettings',
	        'AppSettings'
	    ];
	    return BusinessRuleManagerController;
	}());
	exports.BusinessRuleManagerController = BusinessRuleManagerController;


/***/ },
/* 698 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var campaignManagerController_1 = __webpack_require__(699);
	var CampaignManagerComponent = (function () {
	    function CampaignManagerComponent() {
	        this.bindings = {};
	        this.controller = campaignManagerController_1.CampaignManagerController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/marketingTools/campaignManager/campaignManagerTemplate.html';
	    }
	    return CampaignManagerComponent;
	}());
	exports.CampaignManagerComponent = CampaignManagerComponent;


/***/ },
/* 699 */
/***/ function(module, exports) {

	"use strict";
	var CampaignManagerController = (function () {
	    function CampaignManagerController($scope, $rootScope, $sce, DataApiSettings, AppSettings) {
	        this.$scope = $scope;
	        this.$rootScope = $rootScope;
	        this.$sce = $sce;
	        this.DataApiSettings = DataApiSettings;
	        this.AppSettings = AppSettings;
	        try {
	            this.campaignManagerUrl = this.$sce.trustAsResourceUrl(this.AppSettings.globalUrl + '/CRM/market/cd_marketing_new_main.aspx');
	        }
	        catch (e) {
	        }
	    }
	    CampaignManagerController.prototype.getCampaignManagerUrl = function () {
	        return this.$sce.trustAsResourceUrl(this.campaignManagerUrl + "?CampaignId=-1&SiteId=" + this.DataApiSettings.getSiteId());
	    };
	    CampaignManagerController.$inject = [
	        '$scope',
	        '$rootScope',
	        '$sce',
	        'DataApiSettings',
	        'AppSettings'
	    ];
	    return CampaignManagerController;
	}());
	exports.CampaignManagerController = CampaignManagerController;


/***/ },
/* 700 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var documentManagerController_1 = __webpack_require__(701);
	var DocumentManagerComponent = (function () {
	    function DocumentManagerComponent() {
	        this.bindings = {};
	        this.controller = documentManagerController_1.DocumentManagerController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/marketingTools/documentManager/documentManagerTemplate.html';
	    }
	    return DocumentManagerComponent;
	}());
	exports.DocumentManagerComponent = DocumentManagerComponent;


/***/ },
/* 701 */
/***/ function(module, exports) {

	"use strict";
	var DocumentManagerController = (function () {
	    function DocumentManagerController($scope, $rootScope, $sce, DataApiSettings, AppSettings) {
	        this.$scope = $scope;
	        this.$rootScope = $rootScope;
	        this.$sce = $sce;
	        this.DataApiSettings = DataApiSettings;
	        this.AppSettings = AppSettings;
	        try {
	            this.documentManagerUrl = this.$sce.trustAsResourceUrl(this.AppSettings.globalUrl + '/CRM/document/ds_document_main.aspx');
	        }
	        catch (e) {
	        }
	    }
	    DocumentManagerController.prototype.getDocumentManagerUrl = function () {
	        return this.$sce.trustAsResourceUrl(this.documentManagerUrl + "?SiteId=" + this.DataApiSettings.getSiteId());
	    };
	    DocumentManagerController.$inject = [
	        '$scope',
	        '$rootScope',
	        '$sce',
	        'DataApiSettings',
	        'AppSettings'
	    ];
	    return DocumentManagerController;
	}());
	exports.DocumentManagerController = DocumentManagerController;


/***/ },
/* 702 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var emailMyCustomerController_1 = __webpack_require__(703);
	var EmailMyCustomerComponent = (function () {
	    function EmailMyCustomerComponent() {
	        this.bindings = {};
	        this.controller = emailMyCustomerController_1.EmailMyCustomerController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/marketingTools/emailMyCustomer/emailMyCustomerTemplate.html';
	    }
	    return EmailMyCustomerComponent;
	}());
	exports.EmailMyCustomerComponent = EmailMyCustomerComponent;


/***/ },
/* 703 */
/***/ function(module, exports) {

	"use strict";
	var EmailMyCustomerController = (function () {
	    function EmailMyCustomerController($scope, $rootScope, $sce, DataApiSettings, AppSettings) {
	        this.$scope = $scope;
	        this.$rootScope = $rootScope;
	        this.$sce = $sce;
	        this.DataApiSettings = DataApiSettings;
	        this.AppSettings = AppSettings;
	        try {
	            this.emailMyCustomerUrl = this.$sce.trustAsResourceUrl(this.AppSettings.globalUrl + '/CRM/email/emailMycustomer_main.aspx');
	        }
	        catch (e) {
	        }
	    }
	    EmailMyCustomerController.prototype.getEmailMyCustomerUrl = function () {
	        return this.$sce.trustAsResourceUrl(this.emailMyCustomerUrl + "?SiteId=" + this.DataApiSettings.getSiteId());
	    };
	    EmailMyCustomerController.$inject = [
	        '$scope',
	        '$rootScope',
	        '$sce',
	        'DataApiSettings',
	        'AppSettings'
	    ];
	    return EmailMyCustomerController;
	}());
	exports.EmailMyCustomerController = EmailMyCustomerController;


/***/ },
/* 704 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var emailQueueController_1 = __webpack_require__(705);
	var EmailQueueComponent = (function () {
	    function EmailQueueComponent() {
	        this.bindings = {};
	        this.controller = emailQueueController_1.EmailQueueController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/marketingTools/emailQueue/emailQueueTemplate.html';
	    }
	    return EmailQueueComponent;
	}());
	exports.EmailQueueComponent = EmailQueueComponent;


/***/ },
/* 705 */
/***/ function(module, exports) {

	"use strict";
	var EmailQueueController = (function () {
	    function EmailQueueController($scope, $rootScope, $sce, DataApiSettings, AppSettings) {
	        this.$scope = $scope;
	        this.$rootScope = $rootScope;
	        this.$sce = $sce;
	        this.DataApiSettings = DataApiSettings;
	        this.AppSettings = AppSettings;
	        try {
	            this.emailQueueUrl = this.$sce.trustAsResourceUrl(this.AppSettings.globalUrl + '/CRM/document/ds_document_email_batch.aspx');
	        }
	        catch (e) {
	        }
	    }
	    EmailQueueController.prototype.getEmailQueueUrl = function () {
	        return this.$sce.trustAsResourceUrl(this.emailQueueUrl + "?SiteId=" + this.DataApiSettings.getSiteId());
	    };
	    EmailQueueController.$inject = [
	        '$scope',
	        '$rootScope',
	        '$sce',
	        'DataApiSettings',
	        'AppSettings'
	    ];
	    return EmailQueueController;
	}());
	exports.EmailQueueController = EmailQueueController;


/***/ },
/* 706 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var emailTemplatesController_1 = __webpack_require__(707);
	var EmailTemplatesComponent = (function () {
	    function EmailTemplatesComponent() {
	        this.bindings = {};
	        this.controller = emailTemplatesController_1.EmailTemplatesController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/marketingTools/emailTemplates/emailTemplatesTemplate.html';
	    }
	    return EmailTemplatesComponent;
	}());
	exports.EmailTemplatesComponent = EmailTemplatesComponent;


/***/ },
/* 707 */
/***/ function(module, exports) {

	"use strict";
	var EmailTemplatesController = (function () {
	    function EmailTemplatesController($scope, $rootScope, $sce, DataApiSettings, AppSettings) {
	        this.$scope = $scope;
	        this.$rootScope = $rootScope;
	        this.$sce = $sce;
	        this.DataApiSettings = DataApiSettings;
	        this.AppSettings = AppSettings;
	        try {
	            this.emailTemplatesUrl = this.$sce.trustAsResourceUrl(this.AppSettings.globalUrl + '/CRM/email/admin_email_template.aspx');
	        }
	        catch (e) {
	        }
	    }
	    EmailTemplatesController.prototype.getEmailTemplatesUrl = function () {
	        return this.$sce.trustAsResourceUrl(this.emailTemplatesUrl + "?SiteId=" + this.DataApiSettings.getSiteId());
	    };
	    EmailTemplatesController.$inject = [
	        '$scope',
	        '$rootScope',
	        '$sce',
	        'DataApiSettings',
	        'AppSettings'
	    ];
	    return EmailTemplatesController;
	}());
	exports.EmailTemplatesController = EmailTemplatesController;


/***/ },
/* 708 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var listBuilderController_1 = __webpack_require__(709);
	var ListBuilderComponent = (function () {
	    function ListBuilderComponent() {
	        this.bindings = {};
	        this.controller = listBuilderController_1.ListBuilderController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/marketingTools/listBuilder/listBuilderTemplate.html';
	    }
	    return ListBuilderComponent;
	}());
	exports.ListBuilderComponent = ListBuilderComponent;


/***/ },
/* 709 */
/***/ function(module, exports) {

	"use strict";
	var ListBuilderController = (function () {
	    function ListBuilderController($scope, $rootScope, $sce, DataApiSettings, AppSettings) {
	        this.$scope = $scope;
	        this.$rootScope = $rootScope;
	        this.$sce = $sce;
	        this.DataApiSettings = DataApiSettings;
	        this.AppSettings = AppSettings;
	        try {
	            this.listBuilderUrl = this.$sce.trustAsResourceUrl(this.AppSettings.globalUrl + '/CRM/listbuilder/ls_data.aspx');
	        }
	        catch (e) {
	        }
	    }
	    ListBuilderController.prototype.getListBuilderUrl = function () {
	        return this.$sce.trustAsResourceUrl(this.listBuilderUrl + "?SiteId=" + this.DataApiSettings.getSiteId() + "mode=run&SqlId=0");
	    };
	    ListBuilderController.$inject = [
	        '$scope',
	        '$rootScope',
	        '$sce',
	        'DataApiSettings',
	        'AppSettings'
	    ];
	    return ListBuilderController;
	}());
	exports.ListBuilderController = ListBuilderController;


/***/ },
/* 710 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var marketingToolsHelpController_1 = __webpack_require__(711);
	var MarketingToolsHelpComponent = (function () {
	    function MarketingToolsHelpComponent() {
	        this.bindings = {};
	        this.controller = marketingToolsHelpController_1.MarketingToolsHelpController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/marketingTools/marketingToolsHelp/marketingToolsHelpTemplate.html';
	    }
	    return MarketingToolsHelpComponent;
	}());
	exports.MarketingToolsHelpComponent = MarketingToolsHelpComponent;


/***/ },
/* 711 */
/***/ function(module, exports) {

	"use strict";
	var MarketingToolsHelpController = (function () {
	    function MarketingToolsHelpController($scope, $rootScope, $sce, DataApiSettings, AppSettings) {
	        this.$scope = $scope;
	        this.$rootScope = $rootScope;
	        this.$sce = $sce;
	        this.DataApiSettings = DataApiSettings;
	        this.AppSettings = AppSettings;
	        try {
	            this.marketingToolsHelpUrl = this.$sce.trustAsResourceUrl(this.AppSettings.globalUrl + '/help/MarketingToolsHelp/About_Marketing_Tools.htm');
	        }
	        catch (e) {
	        }
	    }
	    MarketingToolsHelpController.prototype.getMarketingToolsHelpUrl = function () {
	        return this.$sce.trustAsResourceUrl(this.marketingToolsHelpUrl.toString());
	    };
	    MarketingToolsHelpController.$inject = [
	        '$scope',
	        '$rootScope',
	        '$sce',
	        'DataApiSettings',
	        'AppSettings'
	    ];
	    return MarketingToolsHelpController;
	}());
	exports.MarketingToolsHelpController = MarketingToolsHelpController;


/***/ },
/* 712 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var printQueueController_1 = __webpack_require__(713);
	var PrintQueueComponent = (function () {
	    function PrintQueueComponent() {
	        this.bindings = {};
	        this.controller = printQueueController_1.PrintQueueController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/marketingTools/printQueue/printQueueTemplate.html';
	    }
	    return PrintQueueComponent;
	}());
	exports.PrintQueueComponent = PrintQueueComponent;


/***/ },
/* 713 */
/***/ function(module, exports) {

	"use strict";
	var PrintQueueController = (function () {
	    function PrintQueueController($scope, $rootScope, $sce, DataApiSettings, AppSettings) {
	        this.$scope = $scope;
	        this.$rootScope = $rootScope;
	        this.$sce = $sce;
	        this.DataApiSettings = DataApiSettings;
	        this.AppSettings = AppSettings;
	        try {
	            this.printQueueUrl = this.$sce.trustAsResourceUrl(this.AppSettings.globalUrl + '/CRM/document/ds_document_batch.aspx');
	        }
	        catch (e) {
	        }
	    }
	    PrintQueueController.prototype.getPrintQueueUrl = function () {
	        return this.$sce.trustAsResourceUrl(this.printQueueUrl + "?SiteId=" + this.DataApiSettings.getSiteId());
	    };
	    PrintQueueController.$inject = [
	        '$scope',
	        '$rootScope',
	        '$sce',
	        'DataApiSettings',
	        'AppSettings'
	    ];
	    return PrintQueueController;
	}());
	exports.PrintQueueController = PrintQueueController;


/***/ },
/* 714 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	///<reference path="../../../typings/index.d.ts"/>
	var textQueueController_1 = __webpack_require__(715);
	var TextQueueComponent = (function () {
	    function TextQueueComponent() {
	        this.bindings = {};
	        this.controller = textQueueController_1.TextQueueController;
	        this.controllerAs = 'ctrl';
	        this.templateUrl = 'app/marketingTools/textQueue/textQueueTemplate.html';
	    }
	    return TextQueueComponent;
	}());
	exports.TextQueueComponent = TextQueueComponent;


/***/ },
/* 715 */
/***/ function(module, exports) {

	"use strict";
	var TextQueueController = (function () {
	    function TextQueueController($scope, $rootScope, $sce, DataApiSettings, AppSettings) {
	        this.$scope = $scope;
	        this.$rootScope = $rootScope;
	        this.$sce = $sce;
	        this.DataApiSettings = DataApiSettings;
	        this.AppSettings = AppSettings;
	        try {
	            this.textQueueUrl = this.$sce.trustAsResourceUrl(this.AppSettings.globalUrl + '/CRM/document/ds_document_text_batch.aspx');
	        }
	        catch (e) {
	        }
	    }
	    TextQueueController.prototype.getPrintQueueUrl = function () {
	        return this.$sce.trustAsResourceUrl(this.textQueueUrl + "?SiteId=" + this.DataApiSettings.getSiteId());
	    };
	    TextQueueController.$inject = [
	        '$scope',
	        '$rootScope',
	        '$sce',
	        'DataApiSettings',
	        'AppSettings'
	    ];
	    return TextQueueController;
	}());
	exports.TextQueueController = TextQueueController;


/***/ },
/* 716 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../typings/index.d.ts"/>
	"use strict";
	var angular = __webpack_require__(2);
	var states_1 = __webpack_require__(717);
	var states_2 = __webpack_require__(721);
	var states_3 = __webpack_require__(723);
	var states_4 = __webpack_require__(726);
	var states_5 = __webpack_require__(732);
	var states_6 = __webpack_require__(734);
	var states_7 = __webpack_require__(738);
	var states_8 = __webpack_require__(741);
	var states_9 = __webpack_require__(744);
	var states_10 = __webpack_require__(746);
	var angularUiRouter = __webpack_require__(758);
	angularUiRouter;
	var states = [].concat(states_1.AddStates, states_2.ContactStates, states_3.CsiStates, states_4.EmployeeStates, states_5.ErrorStates, states_6.SalesStates, states_7.ServiceStates, states_8.ViewStates, states_9.AdminStates, states_10.MarketingToolsStates);
	module.exports = angular.module("crm.router", [
	    'ui.router'
	])
	    .config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
	        angular.forEach(states, function (state) {
	            $stateProvider.state(state);
	        });
	        $urlRouterProvider.otherwise('/omega/home');
	    }]);


/***/ },
/* 717 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	var add_state_1 = __webpack_require__(718);
	var individual_state_1 = __webpack_require__(719);
	var organization_state_1 = __webpack_require__(720);
	exports.AddStates = [
	    add_state_1.AddState,
	    individual_state_1.AddIndividualState,
	    organization_state_1.AddOrganizationState
	];


/***/ },
/* 718 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.AddState = {
	    name: "add",
	    url: "/add",
	    abstract: true,
	    template: "<ui-view/>",
	    params: {
	        contact: null
	    }
	};


/***/ },
/* 719 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.AddIndividualState = {
	    name: "add.individual",
	    url: "/individual",
	    template: "<crm-customer-panel customer-type='individual'></crm-customer-panel>",
	    params: {
	        contact: null
	    }
	};


/***/ },
/* 720 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.AddOrganizationState = {
	    name: "add.company",
	    url: "/company",
	    template: "<crm-customer-panel customer-type='organization'></crm-customer-panel>",
	    params: {
	        contact: null
	    }
	};


/***/ },
/* 721 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	var contact_state_1 = __webpack_require__(722);
	exports.ContactStates = [contact_state_1.ContactState];


/***/ },
/* 722 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.ContactState = {
	    name: "contact",
	    url: "/contact",
	    templateUrl: "app/contact/contactSplitPane.html"
	};


/***/ },
/* 723 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	var add_state_1 = __webpack_require__(724);
	var update_state_1 = __webpack_require__(725);
	exports.CsiStates = [
	    add_state_1.CsiAddState,
	    update_state_1.CsiUpdateState
	];


/***/ },
/* 724 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.CsiAddState = {
	    name: "csiAdd",
	    url: "/csi/add/:contactId",
	    templateUrl: "app/csi/add/csiAddTemplate.html",
	    controller: "csiAddController",
	    controllerAs: "ctrl"
	};


/***/ },
/* 725 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.CsiUpdateState = {
	    name: "csiUpdate",
	    url: "/csi/update/:contactId/:csiId",
	    templateUrl: "app/csi/update/csiUpdateTemplate.html",
	    params: {
	        initialActivityType: null
	    },
	    controller: "csiUpdateController",
	    controllerAs: "ctrl"
	};


/***/ },
/* 726 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	var employee_state_1 = __webpack_require__(727);
	var expanded_state_1 = __webpack_require__(728);
	var tab_state_1 = __webpack_require__(729);
	var detail_state_1 = __webpack_require__(730);
	var list_state_1 = __webpack_require__(731);
	exports.EmployeeStates = [
	    employee_state_1.EmployeeState,
	    expanded_state_1.EmployeeListExpandedState,
	    tab_state_1.EmployeeListExpandedTabState,
	    detail_state_1.EmployeeListDetailState,
	    list_state_1.EmployeeListState
	];


/***/ },
/* 727 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.EmployeeState = {
	    name: "employee",
	    url: "/employee",
	    template: "<crm-employee-dashboard-split-pane></crm-employee-dashboard-split-pane>"
	};


/***/ },
/* 728 */
/***/ function(module, exports) {

	/// <reference path="../../../../typings/index.d.ts"/>
	"use strict";
	exports.EmployeeListExpandedState = {
	    name: "employee.list.expanded",
	    views: {
	        "list@employee": {
	            template: "<crm-employee-dashboard-tabs></crm-employee-dashboard-tabs>"
	        }
	    }
	};


/***/ },
/* 729 */
/***/ function(module, exports) {

	/// <reference path="../../../../typings/index.d.ts"/>
	"use strict";
	exports.EmployeeListExpandedTabState = {
	    name: "employee.list.expanded.tab",
	    template: "<crm-employee-dashboard-tabs-list></crm-employee-dashboard-tabs-list>"
	};


/***/ },
/* 730 */
/***/ function(module, exports) {

	/// <reference path="../../../typings/index.d.ts"/>
	"use strict";
	exports.EmployeeListDetailState = {
	    name: "employee.list.detail",
	    url: "/:opportunityType/:opportunityId?activityId",
	    params: {
	        initialActivityType: null
	    },
	    views: {
	        "details@employee": {
	            template: "<crm-employee-dashboard-details></crm-employee-dashboard-details>"
	        }
	    }
	};


/***/ },
/* 731 */
/***/ function(module, exports) {

	/// <reference path="../../../typings/index.d.ts"/>
	"use strict";
	exports.EmployeeListState = {
	    name: "employee.list",
	    url: "/:todoType?filterId",
	    views: {
	        "list@employee": {
	            template: "<crm-employee-dashboard-todo-list></crm-employee-dashboard-todo-list>"
	        }
	    }
	};


/***/ },
/* 732 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	var _404_state_1 = __webpack_require__(733);
	exports.ErrorStates = [
	    _404_state_1.NotFoundState
	];


/***/ },
/* 733 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.NotFoundState = {
	    name: "error404",
	    url: "/404",
	    templateUrl: "app/error/404.html"
	};


/***/ },
/* 734 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	var add_state_1 = __webpack_require__(735);
	var sales_state_1 = __webpack_require__(736);
	var view_state_1 = __webpack_require__(737);
	exports.SalesStates = [
	    add_state_1.AddSalesState,
	    sales_state_1.SalesState,
	    view_state_1.ViewSalesState
	];


/***/ },
/* 735 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.AddSalesState = {
	    name: "sales.add",
	    url: "/add/:contactId",
	    template: "<crm-add-sales-opportunity></crm-add-sales-opportunity>"
	};


/***/ },
/* 736 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.SalesState = {
	    name: "sales",
	    url: "/sales",
	    abstract: true,
	    template: "<ui-view/>"
	};


/***/ },
/* 737 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.ViewSalesState = {
	    name: "sales.view",
	    url: "/view/:contactId/:salesOpportunityId",
	    templateUrl: "app/salesOpportunity/page/salesOpportunityPage.html",
	    params: {
	        initialActivityType: null
	    }
	};


/***/ },
/* 738 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	var add_state_1 = __webpack_require__(739);
	var update_state_1 = __webpack_require__(740);
	exports.ServiceStates = [
	    add_state_1.AddServiceState,
	    update_state_1.UpdateServiceState
	];


/***/ },
/* 739 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.AddServiceState = {
	    name: "serviceAdd",
	    url: "/service/add/:contactId",
	    templateUrl: "app/service/add/serviceAddTemplate.html",
	    controller: "serviceAddController",
	    controllerAs: "ctrl"
	};


/***/ },
/* 740 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.UpdateServiceState = {
	    name: "serviceUpdate",
	    url: "/service/update/:contactId/:serviceId",
	    templateUrl: "app/service/update/serviceUpdateTemplate.html",
	    params: {
	        initialActivityType: null
	    },
	    controller: "serviceUpdateController",
	    controllerAs: "ctrl"
	};


/***/ },
/* 741 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	var view_state_1 = __webpack_require__(742);
	var contact_state_1 = __webpack_require__(743);
	exports.ViewStates = [view_state_1.ViewState, contact_state_1.ViewContactState];


/***/ },
/* 742 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	var ViewStateController = (function () {
	    function ViewStateController($scope, eventManagerService, CrmConstants) {
	        var _this = this;
	        this.isLoading = true;
	        var viewIsLoadingEvent = eventManagerService.subscribe(CrmConstants.VIEW_IS_LOADING, function (isLoading) {
	            _this.isLoading = isLoading;
	        });
	        $scope.$on("$destroy", function () {
	            eventManagerService.unSubscribe(CrmConstants.VIEW_IS_LOADING, viewIsLoadingEvent);
	        });
	    }
	    ViewStateController.$inject = [
	        "$scope",
	        "eventManagerService",
	        "CrmConstants"
	    ];
	    return ViewStateController;
	}());
	exports.ViewState = {
	    name: "view",
	    url: "/view",
	    abstract: true,
	    controller: ViewStateController,
	    controllerAs: "ctrl",
	    templateUrl: "app/contact/contactSplitPane.html"
	};


/***/ },
/* 743 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	var Option = __webpack_require__(224);
	var ViewContactStateController = (function () {
	    function ViewContactStateController($state, eventManagerService, serviceWrapper, CrmConstants, contactResult, ContactService) {
	        if (!contactResult) {
	            ContactService.getLastContact().then(function (data) {
	                if (!data || !data.id || data.id === "0") {
	                    $state.go('add.individual', {});
	                }
	                else {
	                    $state.go('view.contact', { 'contactId': data.id });
	                }
	            });
	        }
	        else {
	            this.contact = contactResult.isDefined() ? contactResult.getValue() : null;
	            eventManagerService.publish(CrmConstants.CONTACT.CONTACT_LOADED, this.contact);
	        }
	        eventManagerService.publish(CrmConstants.VIEW_IS_LOADING, false);
	    }
	    ViewContactStateController.$inject = [
	        "$state",
	        "eventManagerService",
	        "ServiceWrapper",
	        "CrmConstants",
	        "contact",
	        'ContactService'
	    ];
	    return ViewContactStateController;
	}());
	exports.ViewContactState = {
	    name: "view.contact",
	    url: "/contact/:contactId",
	    template: "<crm-get-contact-card contact=\"ctrl.contact\"></crm-get-contact-card>",
	    controller: ViewContactStateController,
	    controllerAs: "ctrl",
	    resolve: {
	        contact: [
	            "$stateParams",
	            "eventManagerService",
	            "ServiceWrapper",
	            "ContactService",
	            "CrmConstants",
	            function ($stateParams, eventManagerService, serviceWrapper, contactService, CrmConstants) {
	                eventManagerService.publish(CrmConstants.VIEW_IS_LOADING, true);
	                if (!$stateParams.contactId) {
	                    return null;
	                }
	                var idObject = {
	                    guid: $stateParams.contactId
	                };
	                return serviceWrapper.get(contactService, idObject)
	                    .then(function (data) {
	                    if (data.error) {
	                        return Option.None();
	                    }
	                    return Option.Create(data);
	                })
	                    .catch(function () {
	                    return Option.None();
	                });
	            }]
	    }
	};


/***/ },
/* 744 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	var admin_state_1 = __webpack_require__(745);
	exports.AdminStates = [admin_state_1.AdminState];


/***/ },
/* 745 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.AdminState = {
	    name: "admin",
	    url: "/admin",
	    // templateUrl: "app/admin/adminMenuTemplate.html",
	    // controller: "adminMenuController",
	    // controllerAs: "ctrl"
	    template: "<crm-admin-menu></crm-admin-menu>"
	};


/***/ },
/* 746 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	var marketingTools_state_1 = __webpack_require__(747);
	var marketingToolsHelp_state_1 = __webpack_require__(748);
	var emailQueue_state_1 = __webpack_require__(749);
	var businessRuleManager_state_1 = __webpack_require__(750);
	var printQueue_state_1 = __webpack_require__(751);
	var textQueue_state_1 = __webpack_require__(752);
	var documentManager_state_1 = __webpack_require__(753);
	var campaignManager_state_1 = __webpack_require__(754);
	var emailTemplates_state_1 = __webpack_require__(755);
	var emailMyCustomer_state_1 = __webpack_require__(756);
	var listBuilder_state_1 = __webpack_require__(757);
	exports.MarketingToolsStates = [
	    marketingTools_state_1.MarketingToolsState,
	    marketingToolsHelp_state_1.MarketingToolsHelpState,
	    emailQueue_state_1.EmailQueueState,
	    businessRuleManager_state_1.BusinessRuleManagerState,
	    printQueue_state_1.PrintQueueState,
	    textQueue_state_1.TextQueueState,
	    documentManager_state_1.DocumentManagerState,
	    campaignManager_state_1.CampaignManagerState,
	    emailTemplates_state_1.EmailTemplatesState,
	    emailMyCustomer_state_1.EmailMyCustomerState,
	    listBuilder_state_1.ListBuilderState
	];


/***/ },
/* 747 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.MarketingToolsState = {
	    name: "marketingTools",
	    url: "/marketingTools",
	    abstract: true,
	    template: "<ui-view/>"
	};


/***/ },
/* 748 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.MarketingToolsHelpState = {
	    name: "marketingTools.help",
	    url: "/help",
	    template: "<crm-marketing-tools-help></crm-marketing-tools-help>"
	};


/***/ },
/* 749 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.EmailQueueState = {
	    name: "marketingTools.emailQueue",
	    url: "/emailQueue",
	    template: "<crm-marketing-tools-email-queue></crm-marketing-tools-email-queue>"
	};


/***/ },
/* 750 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.BusinessRuleManagerState = {
	    name: "marketingTools.businessRuleManager",
	    url: "/businessRuleManager",
	    template: "<crm-marketing-tools-business-rule-manager></crm-marketing-tools-business-rule-manager>"
	};


/***/ },
/* 751 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.PrintQueueState = {
	    name: "marketingTools.printQueue",
	    url: "/printQueue",
	    template: "<crm-marketing-tools-print-queue></crm-marketing-tools-print-queue>"
	};


/***/ },
/* 752 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.TextQueueState = {
	    name: "marketingTools.textQueue",
	    url: "/textQueue",
	    template: "<crm-marketing-tools-text-queue></crm-marketing-tools-text-queue>"
	};


/***/ },
/* 753 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.DocumentManagerState = {
	    name: "marketingTools.documentManager",
	    url: "/documentManager",
	    template: "<crm-marketing-tools-document-manager></crm-marketing-tools-document-manager>"
	};


/***/ },
/* 754 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.CampaignManagerState = {
	    name: "marketingTools.campaignManager",
	    url: "/campaignManager",
	    template: "<crm-marketing-tools-campaign-manager></crm-marketing-tools-campaign-manager>"
	};


/***/ },
/* 755 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.EmailTemplatesState = {
	    name: "marketingTools.emailTemplates",
	    url: "/emailTemplates",
	    template: "<crm-marketing-tools-email-templates></crm-marketing-tools-email-templates>"
	};


/***/ },
/* 756 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.EmailMyCustomerState = {
	    name: "marketingTools.emailMyCustomer",
	    url: "/emailMyCustomer",
	    template: "<crm-marketing-tools-email-my-customer></crm-marketing-tools-email-my-customer>"
	};


/***/ },
/* 757 */
/***/ function(module, exports) {

	/// <reference path="../../typings/index.d.ts"/>
	"use strict";
	exports.ListBuilderState = {
	    name: "marketingTools.listBuilder",
	    url: "/listBuilder",
	    template: "<crm-marketing-tools-list-builder></crm-marketing-tools-list-builder>"
	};


/***/ },
/* 758 */,
/* 759 */,
/* 760 */
/***/ function(module, exports) {

	module.exports = {
		"crm": {
			"symbols": {
				"CURRENCY": "$"
			},
			"pings": {
				"REVENUE_RADAR_PINGS": "RevenueRadar Pings",
				"QUALIFIES_FOR_PINGS": "qualifies for the following Radar Pings",
				"VIEW_DETAILS": "View Details",
				"PING_PREFERENCES": "Ping Preferences",
				"WHICH_PING_TYPES_DOES": "Which ping types does",
				"WANT_TO_RECEIVE": "want to receive for all vehicles",
				"PURCHASED": "Purchased",
				"MI": "MI",
				"PING_SUMMARY": "Ping Summary",
				"ENABLE_ALL_PINGS": "Enable All Pings",
				"DISABLE_ALL_PINGS": "Disable All Pings",
				"LAST_SERVICED": "Last serviced",
				"NEVER_SERVICED": "Never serviced",
				"SAVE": "Save",
				"OWNED": "Owned",
				"NOT_OWNED": "Not Owned"
			},
			"emailVerify": {
				"EMAIL_VERIFY_TITLE": "Email sent to this address may not get delivered...",
				"FIX_EMAIL": "Fix the email address",
				"REMOVE_EMAIL": "Remove the email and save",
				"SAVE_ANYWAY": "Save anyway"
			},
			"expander": {
				"SHOW_MORE": "Show More",
				"SHOW_LESS": "Show Less"
			},
			"activities": {
				"opportunity_types": {
					"SALES": "Sales Opportunity",
					"SERVICE": "Service Opportunity",
					"QA": "QA Ticket"
				},
				"workNotes": {
					"INTRO": "On {createdDate.format('l')} at {createdDate.format('LT')}, {fullName} added a work note:",
					"NOTES_LABEL": "Work Notes",
					"PLACEHOLDER": "Add a note",
					"OPTIONAL_LABEL": "(optional)",
					"ADD_LINK": "Add Work Note"
				},
				"logCall": {
					"TITLE": "Log a Phone Call",
					"EDIT_OUTBOUND_TITLE": "Edit Outbound Phone Call",
					"EDIT_INBOUND_TITLE": "Edit Inbound Phone Call",
					"LOG_OUTBOUND_TITLE": "Log Outbound Phone Call",
					"LOG_INBOUND_TITLE": "Log Inbound Phone Call",
					"TASK_COMMENT_LABEL": "Task Comment",
					"PHONE_LIST_LABEL": "{firstName}'s Phone Numbers",
					"COMPANY_PHONE_LIST_LABEL": "{name}'s Phone Numbers",
					"CALL_RESULT_LABEL": "What was the result of the phone call with {firstName}?",
					"CALL_RESULT_SPOKE": "Spoke to customer",
					"CALL_RESULT_LEFT_MESSAGE": "Left message",
					"CALL_RESULT_MISSED_CALL": "Missed phone call",
					"CALL_RESULT_CANT_EVEN_LEAVE_MESSAGE": "Unable to leave message",
					"CALL_RESULT_BAD_PHONE_NUMBER": "Bad phone number",
					"PROVIDED_WRITEUP": "I provided a write-up during this call",
					"INBOUND_OUTBOUND_LABEL": "Outbound or inbound?",
					"OUTBOUND_LABEL": "Outbound",
					"INBOUND_LABEL": "Inbound",
					"CANCEL": "Cancel",
					"SAVE": "Save",
					"VIEW_PHONE_SCRIPT": "View Phone Script",
					"LISTEN_TO_CALL": "LISTEN TO CALL"
				},
				"logAppointment": {
					"LOG_APPOINTMENT": "Log Appointment",
					"EDIT_LOGGED_APPOINTMENT": "Edit Logged Appointment",
					"MAKE_IT_TO_STORE_QUESTION": "Did {firstName} make it into the store?",
					"YES": "Yes",
					"NO": "No",
					"UNREPORTED_SHOW": "Unreported show",
					"WHY_NOT_QUESTION": "Why didn't {firstName} make it into the store?",
					"NO_SHOW": "No-show",
					"CANCELLED": "Cancelled",
					"DURING_APPOINTMENT_QUESTION": "During the appointment, did you do any of the following with {firstName}?",
					"REQUIRED": "Required",
					"ALERT_TYPE_ERROR": "error",
					"VIN_REQUIRED": "A VIN is required to set a sales opportunity to 'Sold'",
					"SHOWED_UP_ON": "{firstName} showed up on..."
				},
				"logOtherTask": {
					"LOG_OTHER_TASK": "Log Other Task",
					"OTHER_TASK": "Other Task",
					"SELECT": "Select",
					"EDIT_LOGGED_OTHER_TASK": "Edit Logged Other Task",
					"OTHER": "Other",
					"REMINDER": "Reminder"
				},
				"webLeadTask": {
					"WEB_LEAD": "Web Lead",
					"CONTACT_QUESTION": "How do you want to contact this web lead?"
				},
				"confirmAppt": {
					"HEADER_QUESTION": "How do you want to confirm this appointment?",
					"ALREADY_LOGGED": "I’ve already logged a phone call or sent a separate email or text to confirm",
					"CANCEL": "Cancel"
				},
				"logStoreVisit": {
					"STORE_VISIT": "Store Visit",
					"LOG_A_STORE_VISIT": "Log a Store Visit",
					"EDIT_LOGGED_STORE_VISIT": "Edit Logged Store Visit",
					"STORE_VISIT_OCCURRED_ON": "Store visit occurred on...",
					"DURING_STORE_VISIT_QUESTION": "During the store visit, did you do any of the following with {firstName}?",
					"COMPLETED": "Completed",
					"MAX_DATE_ERROR": "The date must be today or earlier",
					"INVALID_DATE": "Invalid date"
				},
				"detailsModal": {
					"TASK_DETAILS": "Task Details",
					"CREATED_BY": "Created By:",
					"CREATED_ON": "Created On:",
					"UPDATED_BY": "Updated By:",
					"UPDATED_ON": "Updated On:",
					"TASK_ID": "Task ID:"
				},
				"setAppointment": {
					"SET_APPOINTMENT": "Set an Appointment",
					"EDIT_APPOINTMENT": "Edit Appointment",
					"DATE": "Date",
					"START_TIME": "Start Time",
					"ASSIGNED_TO": "Assigned To",
					"TASK_COMMENTS": "Task Comments",
					"OPTIONAL": "(optional)",
					"RANKING": "Ranking",
					"TASK_CATEGORY": "Task Category",
					"CREATED_BY": "Created By",
					"CANCEL": "Cancel",
					"ADD": "Add",
					"SAVE": "Save",
					"SHOW_EXTRA_FIELDS": "Show extra fields",
					"HIDE_EXTRA_FIELDS": "Hide extra fields",
					"ADD_A_COMMENT": "Add a comment",
					"REMINDER": "Reminder",
					"SET_REMINDER": "Set a Follow-up Reminder",
					"EDIT_REMINDER": "Edit Follow-up Reminder",
					"REQUIRED": "Required",
					"SELECT": "Select"
				},
				"setReminder": {
					"SET_CALL_REMINDER": "Set an Outbound Call Reminder",
					"EDIT_CALL_REMINDER": "Edit Outbound Call Reminder"
				},
				"openActivities": {
					"TITLE": "Open ({length})",
					"EMPTY": "No open tasks."
				},
				"closedActivities": {
					"TITLE": "History ({length})",
					"EMPTY": "No history tasks."
				}
			},
			"external_references": {
				"EXTERNAL_REFERENCE_ID": "External Reference Id",
				"EXTERNAL_REFERENCE_IDS": "External Reference IDs",
				"DEALERSHIP": "Dealership",
				"EXTERNAL_REFERENCES": "External References",
				"SAVE_PROMPT": "Are you sure you want to save your changes?",
				"ADD_ANOTHER_ID": "Add another ID",
				"NO_REFERENCES_EXIST": "No References Exist"
			},
			"dateStyles": {
				"NA": "N/A"
			},
			"timeAgo": {
				"NULL": "N/A",
				"TODAY": "today",
				"FUTURE": "in the future"
			},
			"errors": {
				"404": "The page you are looking for does not exist!",
				"MAX_CHARACTERS_EXCEEDED": "Max characters exceeded",
				"MAX_LENGTH": "The maximum length is ",
				"MIN_LENGTH": "The minimum length is ",
				"NOT_AVAILABLE": "N/A",
				"SOMETHING_WENT_WRONG": "Drats! It looks like something went wrong...",
				"SORRY_FOR_INCONVENIENCE": "We're sorry for the inconvenience. Please try again in a few moments."
			},
			"employeeDashboard": {
				"TASKS": "Tasks",
				"OPPORTUNITIES": "Opportunities",
				"OPPS": "Opps",
				"NO_UPCOMING_TASK": "No upcoming task",
				"LAST_UPDATED": "Last updated",
				"CREATED": "created",
				"EOD": "EOD",
				"FILTERS": "Filters",
				"SORTING": "Sorting",
				"SORT": "Sort",
				"DAYS_AGO": "days ago",
				"DAYS_OLD": "days old",
				"sortOptions": {
					"PRIORITY": "Priority",
					"AGE_NEWEST": "Age (newest first)",
					"AGE_OLDEST": "Age (oldest first)",
					"LAST_UPDATED_NEWEST": "Last Updated (newest first)",
					"LAST_UPDATED_OLDEST": "Last Updated (oldest first)",
					"DUE_DATE_NEWEST": "Due Date (newest first)",
					"DUE_DATE_OLDEST": "Due Date (oldest first)",
					"CUSTOMER_NAME_AZ": "Customer Name (A-Z)",
					"CUSTOMER_NAME_ZA": "Customer Name (Z-A)"
				},
				"DEALERSHIP": "Dealership",
				"QUICK_FILTER": "Quick Filter",
				"ASSIGNED_TO": "Assigned To"
			},
			"leftNav": {
				"CUSTOMERS": "Customers",
				"HOME": "Home",
				"SALES_ADD_INDIVIDUAL": "Add Individual",
				"SALES_ADD_COMPANY": "Add Company",
				"CONTACTS": "Contacts",
				"VIEW_LAST_CONTACT": "View Last Contact",
				"TASKS": "Tasks",
				"TASKS_MY_TASKS": "Tasks",
				"TASKS_MY_OPPORTUNITIES": "Opportunities",
				"OPPORTUNITIES_AND_TASKS": "Opportunities & Tasks",
				"SCHEDULE": "Schedule",
				"EMAIL_SETUP": "Email Template Set-up",
				"PHONE_SET": "Set Phone Extensions",
				"ADMIN": "Admin",
				"ADMINISTRATION": "Administration",
				"MARKETING_TOOLS": "Marketing Tools",
				"MARKETING_TOOLS_HELP": "Marketing Tools Help",
				"PRINT_QUEUE": "Print Queue",
				"EMAIL_QUEUE": "Email Queue",
				"TEXT_QUEUE": "Text Queue",
				"DOCUMENT_MANAGER": "Document Manager",
				"CAMPAIGN_MANAGER": "Campaign Manager",
				"BUSINESS_RULE_MANAGER": "Business Rule Manager",
				"EMAIL_TEMPLATES": "Email Templates",
				"EMAIL_MY_CUSTOMER": "Email My Customer",
				"LIST_BUILDER": "List Builder",
				"MY_LINKS": "My Links",
				"CLASSIC": "Classic CRM"
			},
			"loyalty": {
				"CUSTOMER_SUMMARY": "Customer Summary",
				"MARKETING": "Marketing",
				"SALES": "Sales",
				"QA": "CSI",
				"VEHICLES_OWNED": "Service",
				"SURVEYS": "Surveys",
				"CUSTOMER_SINCE": "Customer since",
				"OWNS": "Owns",
				"TOTAL_SPENT_AT_DEALERSHIP": "total spent at dealership",
				"OPEN_OPPORTUNITIES": "open opportunities",
				"CLOSED": "closed",
				"THIS_YEAR": "this year",
				"LAST_SERVICED": "Last serviced",
				"SOLD": "sold",
				"PURCHASED": "Purchased",
				"VEHICLES": "vehicles",
				"TOTAL": "total",
				"LAST_PURCHASE_MADE": "Last purchase made",
				"ACTIVE_CAMPAIGNS": "active campaigns",
				"COMPLETED": "completed",
				"EMAIL_OPEN_RATE": "email open rate",
				"LAST_STEP_RAN": "Last step ran",
				"OPEN_TICKETS": "open cases",
				"RESOLVED": "resolved",
				"LAST_TICKET_RESOLVED": "Last case resolved",
				"SENT": "sent",
				"RESPONDED": "responded",
				"AVERAGE_SCORE": "average score",
				"LAST_SURVEY_SENT": "Last survey sent"
			},
			"contact": {
				"ADD_SPECIAL_NOTE": "Notes",
				"csi": {
					"CSI_ISSUE": "CSI Issue Is ",
					"SOURCE": "Source",
					"TYPE": "Type",
					"SUB_TYPE": "Sub Type",
					"EXPECTED_RES_DATE": "The expected resolution date is ",
					"RESOLUTION_DATE": "Resolution Date",
					"ASSIGNED_TO": "Assigned To ",
					"CSI_CASE_ID": "CSI Case ID",
					"BDC_ASSIGNED_TO": "BDC",
					"RANKING": "Ranking",
					"IRRESOLVABLE": "Issue could not be resolved due to ",
					"RESOLVED": "Resolution Outcome: ",
					"DESCRIPTION": "Description",
					"IRRESOLVABLE_MODAL_TITLE": "What was the outcome of the resolution?",
					"PRIMARY_REASON": "How does the customer feel?",
					"ADDITIONAL_DETAILS": "Why does the customer feel that way?"
				},
				"gender": {
					"MALE": "Male",
					"FEMALE": "Female",
					"OTHER": "Other",
					"SELECT": "Select"
				},
				"prefix": {
					"MALE": "Mr.",
					"FEMALE_MARRIED": "Mrs.",
					"FEMALE_UNMARRIED": "Ms.",
					"DOCTOR": "Dr."
				},
				"driversLicense": {
					"DRIVERS_LICENSE": "Driver's License",
					"PRINT": "Print",
					"LOAD_FAILED": "Failed to load Driver's License...",
					"SAVE_FAILED": "Failed to save Driver's License...",
					"modal": {
						"SCANNER_FAILURE": "Scanner not detected",
						"SCANNER_FAILURE_FEEDBACK": "Please make sure the scanner has been properly set up and is connected",
						"COUNTRY": "Country",
						"STATE": "State",
						"AUTO_DETECT": "Auto-Detect",
						"SET": "Set",
						"COUNTRY_AND_STATE": "Country & State",
						"AS_DEFAULTS": "as defaults",
						"SCANNER_OPTIONS": "Scanner options",
						"CHECK_TRAY": "Check Tray",
						"CALIBRATE": "Calibrate",
						"CLEAN": "Clean",
						"VIEW_SETUP_DOCUMENTATION": "View setup documentation",
						"SCAN_FAILURE": "Scan failed. Please check scanner and try again",
						"SCAN_FRONT": "Scan front of license",
						"SCAN_BACK": "Scan back of license",
						"REMOVE_IMAGE": "Remove image",
						"MOBILE_MESSAGE": "or use our mobile scanner app for",
						"IOS": "iOS",
						"AND": "and",
						"Android": "Android",
						"CANCEL_SCAN": "Cancel scan",
						"CANCEL": "Cancel",
						"SAVE": "Save"
					}
				},
				"headers": {
					"CUSTOMER_TAB_HEADER": "Customer",
					"CONNECTIONS": "Connections",
					"LOYALTY_SUMMARY": "Loyalty",
					"SALES_OPPORTUNITY": "Sales Opportunity",
					"OPPORTUNITY_TIMELINE": "Opportunity Timeline",
					"GENDER": "Gender",
					"CUSTOMER": "Customer",
					"SALUTATION": "Prefix",
					"ORGANIZATION_ID": "Company ID:",
					"ERROR_LENGTH_50": "Cannot exceed 50 characters!",
					"ERROR_LENGTH_25": "Cannot exceed 25 characters!",
					"ERROR_LENGTH_15": "Cannot exceed 15 characters!",
					"INVALID_CHARACTERS": "Contains invalid characters!",
					"REQUIRED": "Required",
					"INVALID_EMAIL": "Invalid email address",
					"NEW_CUSTOMER": "Custom",
					"USER_CUSTOMERS": "My Customers",
					"ALL_CUSTOMERS": "All Customers",
					"PLANNER": "Planner",
					"ONE_POINT_OF_CONTACT": "At least 1 method of contact required",
					"INVALID_DATE_OF_BIRTH": "Invalid date of birth",
					"PREFERRED_LANGUAGE": "Preferred Language",
					"PRIMARY_COMPANY": "Primary Company",
					"CUSTOMER_SOURCE": "Customer Source",
					"NEVER_CONTACT_VIA": "Never Contact Via",
					"NOTES": "Notes",
					"STATUS": "Status",
					"CUSTOMER_TYPE": "Customer Type",
					"CUSTOMER_SUBTYPE": "Customer Subtype",
					"COMPANY_TYPE": "Company Type",
					"COMPANY_SUBTYPE": "Company Subtype",
					"EXTERNAL_REFERENCES": "External References",
					"INCOME": "Income",
					"DATE_OF_BIRTH": "Date of Birth",
					"DRIVERS_LICENSE_NUMBER": "Driver's License #",
					"DRIVERS_LICENSE_NUMBER_SHORT": "DL #",
					"SSN": "SSN",
					"ADD_SALES_OPPORTUNITY": "Add Sales Opportunity",
					"FULL_PROFILE": "Full Profile",
					"GM_CUSTOMER_INFO": "See GM Customer Info",
					"RESOLUTION_TIMELINE": "Resolution Timeline",
					"VEHICLE_INFO": "Vehicle INFO",
					"SUMMARY": "Summary"
				},
				"contact_points": {
					"MAIN": "Main",
					"MAIN_LETTER": "M",
					"TOLL_FREE": "Toll Free",
					"TOLL_FREE_LETTER": "T",
					"FAX": "Fax",
					"FAX_LETTER": "F",
					"MOBILE_TYPE": "Mobile",
					"MOBILE": "Mobile Phone",
					"MOBILE_LETTER": "M",
					"WORK_TYPE": "Work",
					"WORK": "Work Phone",
					"WORK_LETTER": "W",
					"HOME_TYPE": "Home",
					"HOME": "Home Phone",
					"HOME_LETTER": "H",
					"OTHER": "Home Phone",
					"OTHER_LETTER": "H",
					"DEFAULT": "Phone",
					"DEFAULT_LETTER": "P",
					"PHONE_NUMBERS": "Phone Numbers",
					"DO_NOT_CALL": "DNC List - Don't Contact"
				},
				"audit_logs": {
					"AUDIT_LOGS": "Audit Log",
					"OPEN_PARENTHESIS": "(",
					"CLOSE_PARENTHESIS": ")"
				},
				"CUSTOMER_NAME": "Customer Name",
				"FIRST_NAME": "First Name",
				"LAST_NAME": "Last Name",
				"MIDDLE_NAME": "Middle Name",
				"NICKNAME": "Nickname",
				"PHONE": "Phone",
				"EMAIL": "Email",
				"EMAIL_DELETE_ERROR": "Cannot delete email when contact has no other contact point",
				"DL": "DL #",
				"SSN": "SSN",
				"SOCIAL_SECURITY_NUMBER": "Social Security Number",
				"BUREAU": "Bureau",
				"BIRTH_DATE": "Birthdate",
				"TWITTER": "Twitter",
				"FACEBOOK": "Facebook",
				"BUYER": "Buyer",
				"COBUYER": "Co-Buyer",
				"CONNECTIONS": "Connections",
				"SHOW_ALL_FIELDS": "Show Details",
				"HIDE_EXTRA_FIELDS": "Hide Details",
				"CUSTOMER_ID": "Customer ID",
				"DETAILS": "Details",
				"HOME_ADDRESS": "Home Address",
				"MORE_DETAILS": "More Details",
				"FEWER_DETAILS": "Fewer Details",
				"HIDE_DETAILS": "Hide Details",
				"YEARS_OLD": "yo",
				"SHOW": "Show",
				"VIEW_PROFILE": "View Profile",
				"LAST_TOUCHED_BY": "Last Touched By",
				"LAST_NOTE": "Last Note",
				"organization": {
					"LINK_PRIMARY_CONTACT": "Search to link a primary contact",
					"UNLINK_PRIMARY_CONTACT": "Unlink primary contact",
					"UNLINK_PRIMARY_CONTACT_PROMPT": "Unlinking a primary contact will remove that individual as your customer's <strong>Primary Contact.</strong><br><br>Are you sure you want to unlink <strong>{contactName}</strong> from <strong>{companyName}</strong>?",
					"UNLINK_PRIMARY_CONTACT_TITLE": "You're about to unlink a primary contact...",
					"UNLINK_PRIMARY_CONTACT_CONFIRM": "Yes, unlink contact",
					"UNLINK_PRIMARY_CONTACT_CANCEL": "No, keep linked",
					"COMPANY": "Company",
					"COMPANY_INFO": "Company Info",
					"PRIMARY_CONTACT": "Primary Contact",
					"VIEW_PRIMARY": "View primary contact info",
					"NAME": "Company Name",
					"URL": "Company URL",
					"MAIN_PHONE": "Main Phone",
					"MAIN_PHONE_LETTER": "M",
					"TOLL_FREE": "Toll-free Phone",
					"TOLL_FREE_LETTER": "T",
					"FAX": "Fax",
					"FAX_LETTER": "F",
					"ADDRESS": "Company Address",
					"CONTACT_SOURCE": "Company Source",
					"CONTACT_STATUS": "Status",
					"CONTACT_TYPE": "Company Type",
					"CONTACT_SUBTYPE": "Company Subtype",
					"ADDRESS_NOTE": "Address Note",
					"EXTERNAL_REF_IDS": "External Reference IDs",
					"EXTERNAL_REF_ID": "External Reference ID"
				},
				"InvalidContactMessage": {
					"ALL": "Missing required info on <strong>BUYER</strong>, <strong>CO-BUYER</strong>, and <strong>CONNECTIONS</strong>.",
					"BUYER": "Missing required info on <strong>BUYER</strong>.",
					"COBUYER": "Missing required info on <strong>CO-BUYER</strong>.",
					"CONNECTIONS": "Missing required info on <strong>CONNECTIONS</strong>.",
					"BUYER_COBUYER": "Missing required info on <strong>BUYER</strong> and <strong>CO-BUYER</strong>.",
					"BUYER_CONNECTIONS": "Missing required info on <strong>BUYER</strong> and <strong>CONNECTIONS</strong>.",
					"COBUYER_CONNECTIONS": "Missing required info on <strong>CO-BUYER</strong> and <strong>CONNECTIONS</strong>.",
					"INDIVIDUAL": "Missing required info on the individual."
				},
				"InvalidCompanyMessage": {
					"ALL": "Missing required info on <strong>COMPANY</strong>, <strong>PRIMARY CONTACT</strong>, and <strong>CONNECTIONS</strong>.",
					"COMPANY": "Missing required info on <strong>COMPANY</strong>.",
					"PRIMARY_CONTACT": "Missing required info on <strong>PRIMARY CONTACT</strong>.",
					"CONNECTIONS": "Missing required info on <strong>CONNECTIONS</strong>.",
					"COMPANY_PRIMARY_CONTACT": "Missing required info on <strong>COMPANY</strong> and <strong>PRIMARY CONTACT</strong>.",
					"COMPANY_CONNECTIONS": "Missing required info on <strong>COMPANY</strong> and <strong>CONNECTIONS</strong>.",
					"PRIMARY_CONTACT_CONNECTIONS": "Missing required info on <strong>PRIMARY CONTACT</strong> and <strong>CONNECTIONS</strong>."
				},
				"duplicates": {
					"DUPLICATES": "Duplicates",
					"NO_DUPLICATES": "No duplicates found.",
					"DUPLICATES_FOUND": "duplicates found",
					"VIEW_DUPLICATES": "VIEW DUPLICATES",
					"ID": "ID #",
					"banner": {
						"DUPLICATE_WARNING1": "Heads up! We've found",
						"DUPLICATE_WARNING2": "potential duplicates",
						"VIEW_MATCHES": "VIEW DUPLICATE MATCHES"
					},
					"newContact": {
						"MODAL_TITLE": "It looks like there are duplicates. Please review possible matches...",
						"SELECTION_INSTRUCTIONS": "Select a customer instead of entering a duplicate",
						"SELECT_ACTION_TEXT": "Select Customer",
						"ADD_ANYWAYS_TEXT": "THIS CUSTOMER IS NOT A DUPLICATE"
					},
					"cobuyer": {
						"MODAL_TITLE": "It looks like there are duplicates. Please review possible matches...",
						"SELECTION_INSTRUCTIONS": "Find and select the duplicate to add",
						"SELECT_ACTION_TEXT": "Add Cobuyer",
						"ADD_ANYWAYS_TEXT": "THIS COBUYER IS NOT A DUPLICATE"
					},
					"connection": {
						"MODAL_TITLE": "It looks like there are duplicates. Please review possible matches...",
						"SELECTION_INSTRUCTIONS": "Find and select the duplicate to add",
						"SELECT_ACTION_TEXT": "Add As Connection",
						"ADD_ANYWAYS_TEXT": "THIS CONNECTION IS NOT A DUPLICATE"
					},
					"searchModal": {
						"MODAL_TITLE": "Duplicate Matches",
						"INSTRUCTIONS": "Find and select the duplicate to add the customer",
						"NOT_A_DUPLICATE": "THIS CUSTOMER IS NOT A DUPLICATE",
						"ADD_BUTTON_LABEL": "Select Customer"
					}
				},
				"modal": {
					"MODAL_TITLE": "You are about to delete this customer record...",
					"MODAL_PROMPT": "All customer information, including opportunities and history, will be removed for <strong>{customerName}</strong>.<br><br>Are you sure you want to continue?",
					"MODAL_CONFIRM": "",
					"MODAL_ACCEPT": "YES, DELETE RECORD",
					"MODAL_DECLINE": "NO, DON'T DELETE"
				},
				"actions": {
					"VIEW_AUDIT_LOG": "View Audit Log",
					"CUSTOMER_NOTES": "Customer Notes",
					"DELETE_CONTACT": "Delete Customer",
					"PULL_CREDIT_REPORT": "Pull Credit Report",
					"CUSTOMER_PREFERENCES": "Customer Preferences",
					"CREDIT_APPLICATION": "Credit App",
					"PRINT_DOCUMENT": "Print a Document",
					"EMAIL_DOCUMENT": "Email a Document",
					"EMAIL_RESET_LINK": "Email Reset Login Link",
					"MOBILE_LINK": "Email Mobile App Link",
					"TEXT_HISTORY": "View Text Message History",
					"COMMUNICATION_PREFERENCE": "Communication Preference"
				},
				"errors": {
					"DELETE_FAILED": "Unable to delete customer"
				},
				"marketing": {
					"NUMBER_OF_STEPS_PERFORMED": "{{stepsCompleted}} of {{totalSteps}} steps performed",
					"NUMBER_OF_STEPS_COMPLETED": "{{stepsCompleted}} steps completed",
					"LAST_STEP_COMPLETED": "Last step completed",
					"NO_STEPS_COMPLETED": "No steps completed",
					"DEACTIVATE_CAMPAIGN": "Deactivate campaign",
					"REACTIVATE_CAMPAIGN": "Reactivate campaign",
					"DELETE_CAMPAIGN": "Delete campaign",
					"reactivateCampaignModal": {
						"TITLE": "Are you sure you want to reactivate this campaign?",
						"PROMPT": "{{campaignName}} campaign steps will be run again for {{contactName}}.",
						"NOTE": "Note:",
						"NOTE_DESCRIPTION": "{{note}} You can always deactivate the campaign later",
						"ACCEPT": "Yes, Reactivate",
						"CANCEL": "No, Don't Reactivate"
					},
					"deactivateCampaignModal": {
						"TITLE": "Are you sure you want to deactivate this campaign?",
						"PROMPT": "{{campaignName}} campaign steps will no longer be run for {{contactName}}.",
						"NOTE": "Note:",
						"NOTE_DESCRIPTION": "{{note}} You can always reactivate the campaign later",
						"ACCEPT": "Yes, Deactivate",
						"CANCEL": "No, Don't Deactivate"
					},
					"deleteCampaignModal": {
						"TITLE": "You're about to delete this campaign from your customer's history...",
						"PROMPT": "All {{campaignName}} campaign info associated with {{contactName}} will be deleted.",
						"CONFIRMATION": "Are you sure you want to continue?",
						"ACCEPT": "Yes, Delete Campaign",
						"CANCEL": "No, Don't Delete"
					},
					"errors": {
						"LOADING": "An error occurred while loading the marketing campaigns.",
						"PERMISSIONS": "An error occurred while loading the marketing campaign permissions.",
						"ADD": "An error occurred while adding the campaign.",
						"REACTIVATION": "An error occurred while reactivating the campaign.",
						"DEACTIVATION": "An error occurred while deactivating the campaign.",
						"DELETION": "An error occurred while deleting the campaign.",
						"UNKNOWN": "An error occurred while retrieving data."
					}
				},
				"sorting": {
					"SORT": "Sort",
					"DATE_ADDED_NEWEST": "Date added (newest first)",
					"DATE_ADDED_OLDEST": "Date added (oldest first)",
					"LAST_UPDATED_NEWEST": "Last updated (newest first)",
					"LAST_UPDATED_OLDEST": "Last updated (oldest first)"
				}
			},
			"actions": {
				"CANCEL": "Cancel",
				"CLEAR": "Clear",
				"SAVE": "Save",
				"SUBMIT": "Submit",
				"SAVE_AS_DRAFT": "Save as Draft",
				"OKAY": "Ok",
				"SAVE_AND_ADD_OPPORTUNITY": "Save & Add Opportunity",
				"PUSH_TO_DMS": "Push to DMS",
				"SAVE_AND_FINISH": "Save & Continue"
			},
			"address": {
				"headers": {
					"ADDRESS": "Address",
					"USE_CUSTOMERS_ADDRESS": "Use Customer's Address",
					"USE_OOMPANy_ADDRESS": "Use Company's Address",
					"USE_DROP_DOWNS": "Use dropdowns to edit the address",
					"ENTER_MANUALLY": "I want to manually enter the address",
					"COMPLETE_ADDRESS": "Complete address",
					"INCOMPLETE_ADDRESS": "Incomplete address"
				},
				"fields": {
					"ADDRESS1": "Address 1",
					"ADDRESS2": "Address 2",
					"ADDRESS3": "Address 3",
					"CITY": "City",
					"STATE": "State",
					"POSTAL": "Zip Code",
					"COUNTY": "County",
					"COUNTRY": "Country"
				},
				"errors": {
					"INVALID_ENTRY": "Invalid entry!",
					"COUNTY_REQUIRED": "County is required for this contact"
				}
			},
			"otherInfo": {
				"headers": {
					"OTHER_INFO": "Other Info",
					"LANGUAGE": "Language",
					"NOTES": "Special Notes",
					"ORIGINAL_SOURCE": "Original Source",
					"PLACEHOLDER": "Add a note",
					"RELATIONSHIP": "Relationship",
					"RELATIONSHIP_CATEGORY": "Relationship Category",
					"RELATIONSHIP_TYPE": "Relationship Type",
					"CUSTOMER_TYPE": "Customer Type",
					"CUSTOMER_SUB_TYPE": "Customer Subtype",
					"COMPANY_SOURCE": "Company Source",
					"COMPANY_TYPE": "Company Type",
					"COMPANY_SUB_TYPE": "Company Subtype",
					"SOURCE": "Original Source"
				},
				"placeholders": {
					"RELATIONSHIP": "E.g. Brother-in-law"
				}
			},
			"cobuyer": {
				"RELATIONSHIP": "Relationship",
				"REMOVE_COBUYER": "Remove co-buyer",
				"CREATE": "Create",
				"CHOOSE_COBUYER": "Choose from existing customers",
				"COBUYER_EXISTS_QUESTION": "Does the co-buyer already exist?",
				"MANUAL_NEW_COBUYER": "Manually create co-buyer instead",
				"SEARCH_EXISTING": "Search Existing Customers",
				"SEARCH_TO_ADD_EXISTING": "Search to add existing customer",
				"ADD_COBUYER": "Add Co-Buyer",
				"FULL_PROFILE": "Full Profile",
				"modal": {
					"TITLE": "You're about to delete this co-buyer...",
					"PROMPT": "<strong>{cobuyer}</strong> will no longer be the co-buyer for sales opportunity <strong>{salesOppId}</strong>. Are you sure you want to continue?",
					"ACCEPT": "YES, DELETE CO-BUYER",
					"CANCEL": "NO, DON'T DELETE"
				}
			},
			"primaryContact": {
				"headers": {
					"PRIMARY_CONTACT_INFO": "Primary Contact Info",
					"FIRST_NAME": "First Name",
					"MIDDLE_NAME": "Middle Name",
					"LAST_NAME": "Last Name",
					"NICKNAME": "Nickname"
				},
				"RELATIONSHIP": "Relationship",
				"REMOVE": "Remove primary contact",
				"CREATE": "Create",
				"CHOOSE": "Choose from existing customers",
				"EXISTS_QUESTION": "Does the primary contact already exist?",
				"MANUAL_NEW": "Manually create primary contact instead",
				"SEARCH_EXISTING": "Search Existing Customers",
				"REMOVE_PROMPT": "Are you sure you want to remove {cobuyer} as the primary contact for {buyer}?"
			},
			"connections": {
				"MORE_ACTIONS": "More Actions",
				"REMOVE_CONNECTION": "Remove Connection",
				"REMOVE_CO_BUYER": "Remove Co-Buyer",
				"CONNECTION": "Connection",
				"ADD_CONNECTION": "Add Connection",
				"ADD_INDIVIDUAL": "Add Individual",
				"ADD_COMPANY": "Add Company",
				"CONNECTION_EXISTS_QUESTION": "Does the connection already exist?",
				"OR": "or",
				"SEARCH_TO_ADD": "search to add existing customer",
				"SEARCH_EXISTING": "Search Existing Customers",
				"CHOOSE_CONNECTION": "Choose from existing customers",
				"MANUAL_NEW_CONNECTION": "Manually create connection instead",
				"CO_BUYER": "Co-Buyer",
				"FULL_PROFILE": "Full Profile",
				"ID_NUMBER": "ID #",
				"RELATIONSHIP": "Relationship",
				"CANCEL": "Cancel",
				"modal": {
					"TITLE": "You're about to remove a connection...",
					"PROMPT": "Removing a connection will remove the relationship to <strong>{connection}</strong>. <br><br>Are you sure you want to remove relationship between <strong>{contact}</strong> and <strong>{connection}</strong>?",
					"ACCEPT": "YES, REMOVE CONNECTION",
					"CANCEL": "NO, KEEP CONNECTION"
				}
			},
			"masterList": {
				"CUSTOMERS": "Customers",
				"FILTER": "Filter",
				"MOST_RECENT": "Most Recent",
				"NEW_CUSTOMER": "New Customer",
				"NEW_ORGANIZATION": "New Company",
				"CUSTOMER": "Individual",
				"ORGANIZATION": "Company",
				"LAST_TWENTY": "Last 20 Customers",
				"MY_TASKS": "My Tasks"
			},
			"links": {
				"NEW_INDIVIDUAL": "New Sales Opportunity - Individual",
				"NEW_ORGANIZATION": "New Sales Opportunity - Organization",
				"OPEN_DRAFTS": "My Open Drafts",
				"MY_OPPORTUNITIES": "My Open Opportunities",
				"ALL_OPPORTUNITIES": "All Open Opportunities",
				"LINK_A_COMPANY": "Search to link a company",
				"UNLINK_COMPANY": "Unlink Company"
			},
			"openOpportunities": {
				"TITLE": "Open Opportunities"
			},
			"dateInput": {
				"DAY_ERROR_MESSAGE": "Invalid Day",
				"YEAR_ERROR_MESSAGE": "Invalid Year",
				"YEAR_PLACEHOLDER": "YYYY",
				"YEAR_TABINDEX": "3",
				"MONTH_PLACEHOLDER": "Month",
				"MONTH_TABINDEX": "1",
				"DAY_PLACEHOLDER": "DD",
				"DAY_TABINDEX": "2",
				"CLEAR": "Clear"
			},
			"dirtyForm": {
				"MODAL_TITLE": "Are you sure you want to cancel?",
				"MODAL_PROMPT": "All unsaved information will be discarded. Are you sure you want to cancel?",
				"MODAL_ACCEPT": "YES, CANCEL",
				"MODAL_DECLINE": "NO, DON'T LEAVE"
			},
			"modal": {
				"CONFIRM": "CONFIRM",
				"CONFIRM_DEACTIVATE": "Are you sure you want to deactivate this campaign?",
				"CONFIRM_REACTIVATE": "Are you sure you want to reactivate this campaign?",
				"ACCEPT": "I'm sure",
				"ACCEPT_DEACTIVATE": "Yes, deactivate",
				"ACCEPT_REACTIVATE": "Yes, reactivate",
				"CANCEL_REMOVE": "No, don't remove",
				"COBUYER_PROMPT": "Are you sure you want to remove {cobuyer} as the co-buyer for {buyer}?",
				"CONNECTION_PROMPT": "Are you sure you want to remove {connection} as a connection for {mainContact}?",
				"DEACTIVATE_PROMPT": "<strong>{campaign}</strong> campaign steps will no longer run for <strong>{contact}</strong> <br> <br> <strong>Note:</strong> You can always reactivate the campaign later.",
				"REACTIVATE_PROMPT": "<strong>{campaign}</strong> campaign steps will run again for <strong>{contact}</strong> <br> <br> <strong>Note:</strong> You can always deactivate the campaign later.",
				"CANCEL_DEACTIVATE": "No, don't deactivate",
				"CANCEL_REACTIVATE": "No, don't reactivate",
				"DISCARD_PROMPT": "Are you sure you want to discard your changes?",
				"DISCARD_CANCEL": "No, don't discard",
				"VEHICLE_DELETE_TITLE": "You're about to delete a customer's vehicle record and all of its service history...",
				"VEHICLE_DELETE_PROMPT": "All information associated with this vehicle, <strong>including any service opportunities</strong>, will be deleted.<br> Are you sure you want to continue?",
				"VEHICLE_DELETE_ACCEPT": "YES, DELETE VEHICLE RECORD",
				"VEHICLE_DELETE_CANCEL": "NO, DON'T DELETE",
				"VEHICLE_SERVICE_DELETE_TITLE": "You're about to delete this service opportunity from your customer's history...",
				"VEHICLE_SERVICE_DELETE_PROMPT": "All associated with service opportunity <strong>#{serviceId} for {customerName}</strong>, will be deleted.<br><br>Are you sure you want to continue?",
				"VEHICLE_SERVICE_DELETE_ACCEPT": "YES, DELETE OPPORTUNITY",
				"VEHICLE_SERVICE_DELETE_CANCEL": "NO, DON'T DELETE"
			},
			"vehicle": {
				"ID": "ID",
				"RO_CLOSED": "RO closed",
				"RO_CLOSED_ON": "RO closed on",
				"SEE": "See",
				"HIDE": "Hide",
				"CLOSED_ROS": "Closed ROs",
				"OPPCODE_COUNT": "opp codes",
				"PURCHASED_DATE_LABEL": "Purchased on",
				"LAST_SERVICED_DATE_LABEL": "Last serviced",
				"LAST_UPDATED": "Last updated",
				"NO_APPOINTMENT": "No scheduled appt",
				"ODOMETER_UNIT": "mi",
				"OWNED_STATUS": "Owned",
				"SERIES": "Series",
				"CURRENT_ODOMETER": "Current Odometer",
				"TRANSMISSION_AND_CYLINDER": "Transmission / Cylinder",
				"STOCK_NUMBER_LABEL": "Stock #",
				"NOT_OWNED_STATUS": "Not owned",
				"CHANGE_OWNERSHIP_STATUS": "Change ownership status",
				"CHOOSE_VEHICLE_OF_INTEREST": "Which vehicle of interest are you selling?",
				"NO_VEHICLES_OF_INTEREST": "You must select a vehicle of interest before pushing to the DMS",
				"SELL_THIS_VEHICLE": "Sell this Vehicle",
				"SAVE_VEHICLE_RECORD": "Save Vehicle Record",
				"VIN": "VIN",
				"CHANGE_OWNERSHIP_STATUS_ERROR": "An error occurred while changing the vehicle ownership status",
				"Odometer": "Odometer",
				"PHANTOM_VEHICLE_TITLE": "Services without a vehicle",
				"panel": {
					"VEHICLES": "VEHICLES",
					"TRADES": "TRADES",
					"VEHICLES_OF_INTEREST": "VEHICLES OF INTEREST",
					"SEARCH_INVENTORY": "Search Inventory",
					"FILTERS": "Filters",
					"SORT": "Sort",
					"BEST_MATCH": "Best match",
					"VEHICLES_FOUND": "vehicles found",
					"CANCEL": "CANCEL",
					"ADD_ANOTHER_VEHICLE": "ADD ANOTHER VEHICLE",
					"TRY_AGAIN": "Try again",
					"STATUS": "Status",
					"ASSIGNED_TO": "Assigned to",
					"DEALERSHIP": "Dealership",
					"GO_TO_INVENTORY": "Go To Inventory",
					"QUICK_SEARCH_RESULT": "Quick Results"
				},
				"tabs": {
					"SORT": "Sort",
					"VEHICLE_YEAR_NEWEST": "Vehicle year (newest first)",
					"VEHICLE_YEAR_OLDEST": "Vehicle year (oldest first)",
					"LAST_SERVICED_NEWEST": "Last serviced (newest first)",
					"LAST_SERVICED_OLDEST": "Last serviced (oldest first)"
				},
				"card": {
					"IN_STOCK": "In Stock",
					"UNAVAILABLE": "Unavailable",
					"PURCHASED": "Purchased",
					"PEOPLE_INTERESTED": "people interested",
					"ADD_THIS_VEHICLE": "Add This Vehicle",
					"REMOVE_VEHICLE": "Remove Vehicle",
					"VIN": "VIN",
					"CONDITION": "Condition",
					"YEAR": "Year",
					"MAKE": "Make",
					"MODEL": "Model",
					"TRIM": "Trim",
					"PRICE": "Price",
					"MSRP": "MSRP",
					"ODOMETER": "Odometer",
					"BODY_STYLE": "Body Style",
					"EXTERIOR_COLOR": "Exterior Color",
					"INTERIOR_COLOR": "Interior Color",
					"TRANSMISSION_TYPE": "Transmission Type",
					"FUEL_CONSUMPTION": "Fuel Consumption",
					"DAYS_ON_LOT": "Days on Lot",
					"FRANCHISE": "Franchise",
					"ENGINE_SIZE": "Engine Size",
					"DRIVETRAIN": "Drivetrain",
					"FUEL_TYPE": "Fuel Type",
					"ADDITIONAL_OPTIONS": "Additional Options",
					"MODEL_CODE": "Model Code",
					"CERTIFIED": "Certified #",
					"LOT_LOCATION": "Lot Location",
					"MILES": "mi",
					"DAYS": "days",
					"WARRANTY_MONTHS": "Months",
					"WARRANTY_MILES": "Miles",
					"SERVICE_MONTHS": "Months",
					"SERVICE_MILES": "Miles",
					"MORE_DETAILS": "More Details",
					"FEWER_DETAILS": "Fewer Details",
					"HIDE_DETAILS": "Hide Details",
					"SOLD": "SOLD"
				},
				"modal": {
					"ownershipStatusModal": {
						"REMOVE_OWNERSHIP_TITLE": "Does {contact} no longer own this vehicle?",
						"GRANT_OWNERSHIP_TITLE": "Does {contact} own this vehicle?",
						"PROMPT": "You're about to change the ownership status of the <strong>{vehicle}</strong> from <strong>{origin}</strong> to <strong>{target}</strong>. <br><br>Are you sure you want to change the ownership status?",
						"OWNED": "owned",
						"NOT_OWNED": "not owned",
						"ACCEPT": "Yes, change status",
						"CANCEL": "No, don't change"
					},
					"CONFIRM": "CONFIRM",
					"ACCEPT": "Yes, remove",
					"CANCEL": "No, keep vehicle",
					"VEHICLE_PROMPT": "Are you sure you want to remove the {vehicle} as a vehicle of interest?",
					"mergeModal": {
						"MERGE_RECORD": "Merge this record...",
						"INTO_RECORD": "Into one of the following available PRIMARY records:",
						"MERGE_HELP_TEXT": "What happens when I merge records?",
						"CANCEL": "Cancel",
						"ACCEPT": "Merge Record",
						"MERGE_FAILED_NO_PRIMARY": "Must choose a primary record to merge",
						"TOOLTIP_MERGE": "To understand what happens when two records are merged and what information gets retained, please refer to our help guide article.",
						"MERGE_FAIL_MESSAGE": "We are unable to merge the services. Please try again."
					}
				},
				"popover": {
					"DELETE_VEHICLE": "Delete vehicle",
					"DELETE_SERVICE": "Delete service",
					"MERGE_INTO": "Merge into...",
					"NO_MERGE_AVAILABLE": "No merge available"
				}
			},
			"workNote": {
				"VIEW_FORM": "View Form",
				"NOTE": "Note",
				"WROTE": " wrote: ",
				"SYSTEM_WROTE": "System wrote:",
				"add": {
					"ADD_NOTE": "Add a note",
					"SUBMIT": "submit"
				},
				"emailWorkNote": {
					"EMAIL_SENT": "Email Sent",
					"SUBJECT": "Subject: ",
					"SENT": "Sent",
					"ATTACHMENT": "Attachment",
					"ATTACHMENTS": "Attachments (",
					"COMPLETE": "Completed",
					"RECEIVED_ON": "Received on"
				}
			},
			"salesOpportunity": {
				"errors": {
					"CONCURRENT_EDIT_ERROR": "Sales Opportunity was edited by another user and cannot be saved. Please refresh your browser.",
					"VIN_REQUIRED_ERROR": "A VIN is required to set a sales opportunity to 'Sold'",
					"GENERIC_SAVE_ERROR": "Could not save the sales opportunity!",
					"VOI_ADD_ERROR": "Unable to add the selected vehicle of interest at this time. Please try again."
				},
				"actions": {
					"PRINT_FORMS": "Print Forms",
					"FILL_OUT_SURVEY": "Fill Out Existing Surveys",
					"SALES_CHECKLIST": "Sales Checklist",
					"FLIP_COBUYER": "Switch Buyer & Co-buyer",
					"CREDIT_APPLICATION": "View Credit App",
					"CONVERT_OPPORTUNITY_TYPE": "Convert Opportunity Type"
				},
				"flipCobuyer": {
					"MODAL_TITLE": "You're about to reassign this sales opportunity to the Co-buyer...",
					"MODAL_PROMPT1": "Are you sure that you want to reassign this sales opportunity from the current buyer",
					"MODAL_PROMPT2": "to co-buyer",
					"MODAL_PROMPT3": "?",
					"MODAL_ACCEPT": "YES, REASSIGN TO CO-BUYER",
					"MODAL_DECLINE": "NO, DON'T REASSIGN"
				},
				"statusState": {
					"TURN": "Turn",
					"LOST": "Lost",
					"SOLD": "Sold",
					"PROPOSAL": "Proposal",
					"CONFIRMED": "Confirmed",
					"DEMO": "Demo",
					"STORE_VISIT": "Store Visit",
					"QUALIFIED": "Qualified Contact",
					"PROSPECTING": "Prospecting"
				},
				"statusText": {
					"TURN": "Turn",
					"LOST": "Lost",
					"SOLD": "Sold",
					"PROPOSAL": "F&I",
					"CONFIRMED": "Write-up",
					"DEMO": "Demo",
					"STORE_VISIT": "Store Visit",
					"QUALIFIED": "Contacted",
					"PROSPECTING": "Unqualified"
				},
				"statusAthirdwayofsayingthesamething": {
					"QUALIFIED": "Contacted",
					"STORE_VISIT": "Store Visit",
					"DEMO": "Demoed vehicle(s)",
					"TURN": "Turn",
					"CONFIRMED": "Completed a write-up",
					"PROPOSAL": "Sent to F&I",
					"SOLD": "Sold a vehicle"
				},
				"auditLog": {
					"AUDIT_LOG": "View Audit Log",
					"UPDATED": "updated",
					"FROM": "from",
					"TO": "to",
					"OPEN_PARENTHESIS": "(",
					"CLOSE_PARENTHESIS": ")",
					"LOAD_ERROR": "Failed to retrieve audit logs..."
				},
				"surveys": {
					"FILL_OUT_SURVEY": "Choose a survey to fill out...",
					"LOAD_ERROR": "Failed to retrieve surveys..."
				},
				"checklist": {
					"LOAD_ERROR": "Failed to retrieve checklist...",
					"SALES_CHECKLIST": "Sales Checklist",
					"SELECT_ALL": "Select All",
					"PRINT": "Print",
					"SAVE": "Save",
					"SAVE_ERROR": "Could not save sales checklist",
					"FILE_TYPE_ERROR": "Unable to save {fileName}. The only supported file types are {fileTypes}"
				},
				"headers": {
					"SALES_STEPS_AND_INFO": "SALES STEPS & OPPORTUNITY INFO",
					"CAME_TO": "Came to",
					"AS_AN": "as an",
					"AS_A": "as a",
					"LEAD": "lead",
					"ASSIGNED_TO": "Assigned to",
					"OPPORTUNITY_INFO": "Opportunity Info",
					"SALES_OPPORTUNITY_ID": "Sales Opportunity ID",
					"SOURCE": "Source",
					"TRACKING_CODE": "Tracking Code",
					"PRIMARY": "Primary",
					"SECONDARY": "Secondary",
					"BDC": "BDC",
					"DMS": "DMS",
					"OPPORTUNITY_TYPE": "Opportunity Type",
					"PURCHASE_TYPE": "Purchase Type",
					"CLOSE_DATE": "Close Date",
					"RANKING": "Ranking",
					"DESCRIPTION": "Description",
					"SHOW_ALL_FIELDS": "Show All Fields",
					"HIDE_ADDITIONAL_FIELDS": "Hide Additional Fields",
					"SUBMIT": "Submit",
					"CREATE_MODAL_TITLE": "What action do you want to take or record with your customer?",
					"CREATE_MODAL_TITLE_PHONE_UP": "Got a phone-up opportunity?",
					"CREATE_MODAL_TITLE_FRESH_UP": "Got a fresh-up opportunity?",
					"CREATE_MODAL_PLACEHOLDER": "Add a note",
					"ADD_COBUYER": "Add a Cobuyer",
					"FRANCHISE": "Franchise",
					"DEALERSHIP": "Dealership",
					"COMPLETION_DATE": "Completion Date",
					"COMPLETED_SALES_STEPS": "COMPLETED SALES STEPS",
					"CUSTOMER_LOST": "My Customer is not in market",
					"PURCHASE_DATE": "Purchase Date",
					"SALES_MANAGER": "Sales Mgr",
					"FI_MANAGER": "F&I Mgr",
					"TYPE": "Sales Type",
					"STATUS": "Status",
					"OPPORTUNITY_ID": "Opp ID"
				},
				"popover": {
					"SET_PRIMARY_VEHICLE_OF_INTEREST": "Set as primary vehicle of interest"
				},
				"INVALID_SALES_OPPORTUNITY": "Cannot save the sales opportunity!",
				"LAST_UPDATED": "Last updated",
				"NO_PRIMARY_VEHICLE": "No primary vehicle of interest",
				"NO_REASON_SPECIFIED": "No Reason Specified",
				"SOURCE": "Source",
				"SURVEY": "Survey",
				"ID_NUMBER": "ID #",
				"status": {
					"ACTIVE": "Active",
					"NOT_IN_MARKET": "Not in Market",
					"IRRESOLVABLE": "Irresolvable",
					"SERVICE_NOT_NEEDED": "Service Not Needed",
					"CUSTOMER_NOT_BUYING_DUE_TO": "Customer is not in market due to",
					"modal": {
						"TITLE": "Why is the customer not in market?",
						"ACCEPT": "SAVE",
						"SELECT_LABEL": "Primary Reason",
						"SELECT_SUB_LABEL": "Additional Details",
						"SELECT_EMPTY": "Select",
						"VIN_REQUIRED": "A VIN is required to set the sales opportunity status to 'Sold'"
					}
				},
				"statusChangeWarning": {
					"BEEN_MOVED": "Opportunity has already been moved to",
					"TODAY": "today...",
					"MOVED_TO": "A logged task from earlier today moved the opportunity to",
					"STILL_SAVE": "Do you still want to save your current task?",
					"NO": "NO, DON'T SAVE TASK",
					"YES": "YES, SAVE TASK ANYWAY"
				},
				"dms": {
					"POST_TO_DMS": "Post to DMS",
					"REPOST_TO_DMS": "Repost to DMS",
					"modal": {
						"TITLE": "You're about to repost information to the DMS...",
						"PROMPT": "This sales opportunity has already been posted to the DMS.",
						"DO_YOU_WANT_TO_CONTINUE": "Are you sure you want to post this sales opportunity again?",
						"YES": "Yes",
						"NO": "No"
					}
				},
				"PURCHASED": "Purchased",
				"PRIMARY_ASSIGNED": "Primary Assigned",
				"BDC_ASSIGNED": "BDC Assigned",
				"SECONDARY_ASSIGNED": "Secondary Assigned",
				"TRACKING_CODE": "Tracking Code",
				"INVALID_USER_ASSIGNMENT": "A user can be assigned only 1 role",
				"OPPORTUNITY_INFO": "OPPORTUNITY INFO",
				"DMS_NUMBER": "DMS Number",
				"DESCRIPTION": "Description",
				"DRAFT": "DRAFT",
				"BUYER_INTEREST": "Buyer Interest",
				"EXPECTED_CLOSE": "Expected Close",
				"PURCHASE_TYPE": "Purchase Type",
				"LAST_UPDATED_LOST_SALES_OPPORTUNITY_TEXT": "as of {{lastUpdated}}",
				"toolTips": {
					"SOURCE": "How did the customer originally contact you?"
				},
				"marketing": {
					"START_ON": "Start on",
					"OF": "of",
					"STEPS_PERFORMED": "steps performed",
					"STEPS_COMPLETED": "steps completed",
					"LAST_STEP_COMPLETED": "Last step completed",
					"NO_STEPS_COMPLETED": "No steps completed",
					"NO_CAMPAIGN_TYPE": "No campaign type",
					"STATUS": "Status",
					"CAMPAIGN TYPE": "Campaign Type",
					"DEALERSHIP": "Dealership",
					"SORT": "Sort",
					"START_DATE": "Start date",
					"NEWEST_FIRST": "newest first",
					"ADD_CUSTOMER_TO_CAMPAIGN": "Add Customer to Campaign",
					"addCustomer": {
						"TITLE": "Which marketing campaign do you want to enroll your customer in?",
						"ACCEPT": "enroll customer",
						"CANCEL": "cancel",
						"STATUS": "Choose a status",
						"CATEGORY": "Choose a category",
						"CAMPAIGN": "Choose a campaign",
						"CAMPAIGN_LOAD_ERROR": "Failed to retriever campaigns..."
					},
					"details": {
						"CAMPAIGN_STATUS": "Campaign Status",
						"CAMPAIGN_ID": "Campaign ID",
						"CAMPAIGN_TRACKING": "Campaign Tracking Code",
						"CAMPAIGN_START_DATE": "Campaign Start Date",
						"CAMPAIGN_OBJECTIVE": "Campaign Objective",
						"CAMPAIGN_TYPE": "Campaign Type",
						"OPPORTUNITY_CATEGORY": "Opportunity Category",
						"STOP_STATUS": "\"Stop\" Status",
						"MILESTONE_TYPE": "Type",
						"MILESTONE_DESCRIPTION": "Step Description",
						"MILESTONE_RUN_TYPE": "Run Type",
						"MILESTONE_DAYS_AFTER": "Days After",
						"MILESTONE_STATUS": "Completion Status",
						"MILESTONE_NOT_FOUND": "This Campaign does not have any steps."
					},
					"popover": {
						"MORE_ACTIONS": "More actions",
						"DEACTIVATE": "Deactivate campaign",
						"ACTIVATE": "Reactivate campaign",
						"DELETE": "Delete campaign"
					},
					"deleteModal": {
						"TITLE": "You're about to delete this campaign from your customer's history",
						"ALL": "All ",
						"PROMPT_A": " campaign info associated with ",
						"PROMPT_B": " will be deleted.<br><br>Are you sure you want to continue?",
						"ACCEPT_BUTTON": "Yes, Delete Campaign",
						"CANCEL_BUTTON": "No, Don't Delete"
					}
				},
				"csi": {
					"HEADERS": {
						"ADD_NEW": "Add New CSI Case",
						"UPDATE": "CSI Case",
						"CSI_CASE_ADD_TAB": "CSI CASE INFO",
						"VEHICLE_INFO_TAB": "VEHICLE INFO",
						"SUMMARY": "Summary"
					},
					"ACTIONS": {
						"EMAIL": "Email from Document Manager",
						"PRINT": "Print from Document Manager",
						"VIEW": "View Audit Log"
					},
					"LABELS": {
						"DESCRIPTION": "Description",
						"ASSIGNED_TO": "Assigned To",
						"TYPE": "Type",
						"SERVICE_PRODUCT": "Service Product",
						"RESOLUTION_DATE": "Resolution Date",
						"BDC": "BDC",
						"RANKING": "Ranking",
						"SOURCE": "Source",
						"SELECT": "Select"
					},
					"ERROR_MESSAGE": {
						"REQUIRED": "Required",
						"INVALID_CSI_ADD": "Cannot save the CSI case!",
						"INVALID_CSI_ADD_BAD_VEHICLE": "Cannot save the CSI case, Vehicle is invalid!"
					},
					"PRINT_PROSPECT": "Print Prospect Sheet",
					"QA": "CSI",
					"QA_CARD_HEADER": "CSI Case",
					"SURVEY_HEADER": "Survey",
					"ADD_NEW_QA_TICKET": "Add New CSI Case",
					"STATUS": "Status",
					"CSI_TYPE": "CSI Type",
					"DEALERSHIP": "Dealership",
					"LAST_UPDATED": "Last updated",
					"RESPONDED": "Responded",
					"ON": "on",
					"GENERATED_FROM": "Generated from",
					"SALES_OPPORTUNITY": "sales opportunity",
					"SERVICE_OPPORTUNITY": "service opportunity",
					"SEE_SURVEY_RESULTS": "See survey results",
					"details": {
						"ID": "Survey ID",
						"PURCHASE_DATE": "Purchase Date",
						"RO_CLOSE_DATE": "RO Close Date",
						"VEHICLE": "Vehicle",
						"RECEIVED": "Survey Received",
						"DMS_NUMBER": "DMS Number",
						"SALESPERSON": "Salesperson",
						"SERVICE_ADVISOR": "Service Advisor",
						"VEHICLE_PRICE": "Vehicle Price",
						"RO_TOTAL": "RO Total",
						"SERVICE_TYPE": "Service Type",
						"VIN": "VIN",
						"ODOMETER": "Vehicle Odometer Reading",
						"SURVEY_QUESTION": "Question",
						"SURVEY_RESPONSE": "Response",
						"SURVEY_NO_QUESTIONS": "This survey contains no questions"
					},
					"popover": {
						"MORE_ACTIONS": "More actions",
						"MERGE_INTO": "Merge into...",
						"NO_MERGE_AVAILABLE": "No merge available",
						"DELETE_OPPORTUNITY": "Delete case"
					},
					"mergeModal": {
						"MERGE_RECORD": "Merge this record...",
						"INTO_RECORD": "Into one of the following available PRIMARY records:",
						"MERGE_HELP_TEXT": "What happens when I merge records?",
						"CANCEL": "Cancel",
						"ACCEPT": "Merge Records",
						"TOOLTIP_MERGE": "To understand what happens when two records are merged and what information gets retained, please refer to our help guide article."
					},
					"deleteModal": {
						"DELETE_TICKET": "You're about to delete this CSI case from your customer's history...",
						"ALL_INFORMATION": "All information associated with CSI case #",
						"FOR": "for",
						"DELETE": "will be deleted.",
						"CONFIRMATION": "Are you sure you want to continue?",
						"YES": "Yes, delete case",
						"NO": "No, don't delete"
					}
				},
				"tabs": {
					"SALES": "Sales",
					"OPEN": "open",
					"SOLD": "sold",
					"STATUS": "Status",
					"INCENTIVE_TYPE": "Incentive Type",
					"AVAILABILITY": "Availability",
					"BEST_MATCH": "Best match",
					"ADD_NEW_SALES_OPPORTUNITY": "Add New Sales Opportunity",
					"VEHICLE_RECORDS": "Vehicle records",
					"MARKETING": "Marketing",
					"RO": "RO",
					"ACTIVE": "active",
					"COMPLETED": "completed",
					"RESOLVED": "resolved",
					"CSI": "CSI",
					"SORT": "Sort",
					"DATE_ADDED_NEWEST": "Date added (newest first)",
					"DATE_ADDED_OLDEST": "Date added (oldest first)",
					"LAST_UPDATED_NEWEST": "Last updated (newest first)",
					"LAST_UPDATED_OLDEST": "Last updated (oldest first)",
					"OPEN_ROS": "open ROs",
					"CLOSED": "closed"
				},
				"sales": {
					"popover": {
						"MERGE_INTO": "Merge into...",
						"NO_MERGE_AVAILABLE": "No merge available",
						"DELETE_OPPORTUNITY": "Delete opportunity"
					},
					"deleteModal": {
						"TITLE": "You're about to delete this sales opportunity from your customer's history...",
						"PROMPT_A": "All activities, notes, and progress tracking associated with sales opportunity ",
						"FOR": " for ",
						"PROMPT_B": " will be deleted.<br><br>Are you sure you want to continue?",
						"ACCEPT_BUTTON": "Yes, Delete Opportunity",
						"CANCEL_BUTTON": "No, Don't Delete"
					},
					"mergeModal": {
						"MERGE_RECORD": "Merge this record...",
						"INTO_RECORD": "Into one of the following available PRIMARY records:",
						"MERGE_HELP_TEXT": "What happens when I merge records?",
						"CANCEL": "Cancel",
						"ACCEPT": "Merge Record",
						"MERGE_FAILED_45_DAYS": "Cannot merge sold event into another event or non-sold event into a sold event when non-sold insert date is greater than sold insert date by more than 45 days!",
						"MERGE_FAILED_DIFFERENT_OEM": "Cannot merge leads from different OEMs.",
						"TOOLTIP_MERGE": "To understand what happens when two records are merged and what information gets retained, please refer to our help guide article."
					},
					"filter": {
						"NO_SALES_OPP_TO_FILTER": "No sales opportunities"
					}
				},
				"trades": {
					"ADD_NEW_TRADE": "Add New Trade",
					"TOTAL_VALUE": "total value",
					"YES": "Yes",
					"NO": "No",
					"NOT_PUSHED": "NOT PUSHED",
					"VIN": "VIN",
					"ODOMETER": "Odometer",
					"EXTERIOR_COLOR": "Exterior Color",
					"NUMBER_OF_CYLINDERS": "# of Cylinders",
					"PAYOFF": "Payoff",
					"TRADE_AMOUNT": "Trade Amount",
					"ACV": "ACV",
					"CURRENCY_UNIT": "USD",
					"EXISTING_VSC": "Existing VSC",
					"TOTAL_RECON_COST": "Total Recon Cost",
					"INSPECTED_BY": "Inspected By",
					"BOOK": "Book",
					"BOOK_VALUE": "Book Value",
					"ODOMETER_ADJUSTMENT": "Odometer Adjustment",
					"APPRAISAL_VALUE": "Appraisal Value",
					"PUSH_TRADE": "Push Trade",
					"PUSH_ALL_TRADES": "Push All Trades",
					"NET_TRADE": "Net Trade",
					"YEAR": "Year",
					"MAKE": "Make",
					"MODEL": "Model",
					"TRIM": "Trim",
					"INVALID_VIN_ERROR": "VIN not recognized.  Try again or enter the vehicle manually.",
					"ENTER_VEHICLE_MANUALLY": "I want to manually enter a trade vehicle",
					"ENTER_VEHICLE_MANUALLY_SHORT": "Manual entry",
					"USE_DROPDOWNS_TO_ENTER_VEHICLE": "Use dropdowns to add a trade vehicle",
					"USE_DROPDOWNS_TO_ENTER_VEHICLE_SHORT": "Use dropdowns",
					"ENTER_VIN": "Enter VIN",
					"EXTERIOR_COLOR_PLACEHOLDER": "E.g., blue",
					"MUST_ENTER_ONE_VALUE": "Must enter at least one value before you can add.",
					"CANCEL": "Cancel",
					"SAVE_TRADE": "Save Trade",
					"SELECT": "Select",
					"ADD_EXISTING_VEHICLE_PROMPT": "This customer owns {count} other {vehicleText}. Want to ",
					"VEHICLE_SINGULAR": "vehicle",
					"VEHICLE_PLURAL": "vehicles",
					"TRADE_EXISTING_VEHICLE_LINK": "trade in an existing vehicle",
					"ADD_EXISTING_VEHICLE_PUNCTUATION": "?",
					"VEHICLE_OF_INTEREST_REQUIRED": "A vehicle of interest is required to generate a CarFax report.",
					"VIN_LOOKUP_BUTTON_LABEL": "Go",
					"ALLOWANCE": "Trade Allowance",
					"UNIT_NUMBER": "Unit Number",
					"modal": {
						"TITLE": "You're about to clear information from this trade...",
						"PROMPT": "Performing a VIN lookup will clear ",
						"AND": "and",
						"DO_YOU_WANT_TO_CONTINUE": "Are you sure you want to continue?",
						"YES": "Yes",
						"NO": "No"
					},
					"pushModal": {
						"TITLE": "Missing some required info...",
						"PROMPT_PREFIX_CARFAX": "To provide you with a car history report",
						"PROMPT_PREFIX_PUSH": "Before you push",
						"PROMPT": ", {integrationText} the following info:",
						"NEED_SINGULAR": "need",
						"NEED_PLURAL": "needs",
						"AND": "and",
						"CARFAX_SUBMIT": "Save & Get Report",
						"SUBMIT": "Save & Push",
						"PHONE_NUMBER_REQUIRED": "At least one phone number required"
					},
					"reconditionItemsModal": {
						"TITLE": "Calculate Total Recon Cost",
						"ADD_CUSTOM_ITEM": "Add Custom Item",
						"SAVE": "Save"
					},
					"popover": {
						"DELETE_TRADE": "Delete trade vehicle"
					},
					"existingVehicle": {
						"TITLE": "Trade in an existing customer vehicle:",
						"STOCK_NUMBER": "Stock # ",
						"TRADE_THIS_VEHICLE": "Trade This Vehicle"
					},
					"valuationModal": {
						"TITLE": "Appraisal",
						"ENGINE_TYPE": "Engine Type",
						"TRANSMISSION_TYPE": "Transmission Type",
						"DRIVETRAIN": "Drivetrain",
						"PRICE_TYPE": "Price Type",
						"CONDITION": "Condition",
						"STATE": "State",
						"SELECTED_EQUIPMENT": "Selected Equipment",
						"CALCULATE": "Calculate",
						"BOOK": "Book",
						"VIN_DECODED_ERROR": "The VIN must be decoded before calculating the trade value.",
						"INVALID_VIN": "Invalid VIN"
					},
					"pushThirdParty": {
						"SELECTION_PROMPT": "Where do you want to push this trade?",
						"PUSH": "Push",
						"CANCEL": "Cancel",
						"PUSHING_TO_THIRD_PARTY": "Pushing to {text}...",
						"PUSH_NUMBER": "{index+1} of {integrationResults.length}",
						"PUSH_SUCCESSFUL": "Trade successfully pushed!",
						"PUSH_FAILED": "An error occurred!",
						"YOUR_TRADE_IS_WAITING": "Your trade is waiting for you over at {text}.",
						"ERROR_OCCURRED": "The following error occurred while pushing to {text}:",
						"UNKNOWN_ERROR": "An unknown error occurred."
					},
					"deleteModal": {
						"TITLE": "You're about to delete a trade...",
						"PROMPT_PREFIX": "All information associated with the ",
						"PROMPT_SUFFIX": "trade will be removed.",
						"PROMPT_CONFIRMATION": "Are you sure you want to continue?",
						"ACCEPT_BUTTON": "Yes, Delete Trade",
						"CANCEL_BUTTON": "No, Don't Delete"
					}
				},
				"vehicleOfInterest": {
					"TOP": "TOP",
					"CHOICE": "CHOICE",
					"OUR_PRICE": "Our Price",
					"MSRP_SAVINGS": "MSRP Savings",
					"STOCK_NUMBER": "Stock #",
					"YEAR": "Year",
					"MAKE": "Make",
					"MODEL": "Model",
					"TRIM": "Trim",
					"VIN": "VIN",
					"DAYS_ON_LOT": "Days on Lot",
					"ODOMETER": "Odometer",
					"EXTERIOR_COLOR": "Exterior Color",
					"INTERIOR_COLOR": "Interior Color",
					"BODY_STYLE": "Body Style",
					"FUEL_TYPE": "Fuel",
					"FUEL_CONSUMPTION": "MPG",
					"FUEL_CONSUMPTION_CITY_HWY": "Fuel Consumption(City/Hwy)",
					"TRANSMISSION_TYPE": "Transmission",
					"ENGINE_SIZE": "Engine",
					"FRANCHISE": "Franchise",
					"LOT_LOCATION": "Lot Location",
					"VIEW_INCENTIVES": "View Incentives",
					"NOT_ON_LOT": "This Vehicle is currently not on the Lot",
					"NOT_IN_STOCK_QUESTION": "Not in Stock?",
					"NOT_IN_STOCK": "Not in Stock",
					"IN_STOCK": "In Stock",
					"MAX_PRICE": "Max Price",
					"MAX_ODOMETER": "Max Odometer",
					"MAX_DOWN_PAYMENT": "Max Down Payment",
					"DISTANCE_UNIT": "mi",
					"CURRENCY_UNIT": "USD",
					"SELECT": "Select",
					"KIND_OF_VEHICLE_CUSTOMER_WANTS": "What kind of vehicle does your customer want?",
					"CUSTOMER_PREFERRED_LIMITS": "What are your customer's preferred limits?",
					"PLACEHOLDER_CITY": "City",
					"PLACEHOLDER_CITY_LOWER": "city",
					"PLACEHOLDER_HIGHWAY": "Hwy",
					"PLACEHOLDER_HIGHWAY_LOWER": "hwy",
					"SAVE": "Save",
					"CANCEL": "CANCEL",
					"NEW": "New",
					"USED": "Used",
					"CERTIFIED_USED": "Certified Used",
					"YEAR_OR_MAKE_REQUIRED": "Year or Make required",
					"CONDITION": "Condition"
				},
				"statuses": {
					"0": "Unqualified",
					"1": "Contacted",
					"2": "Store Visit",
					"3": "Demo",
					"4": "Write-up",
					"5": "F&I",
					"6": "Sold"
				},
				"activities": {
					"START_THIS_TASK": "start this task",
					"CONFIRM_APPT": "confirm appt",
					"NO_COMMENT": "No Comment available",
					"APPOINTMENT_CONFIRMED": "Appointment confirmed!",
					"JUST_NOW": "Just now",
					"DUE": "Due: ",
					"EOD": "EOD",
					"NOT_IMPLEMENTED": "This feature is not implemented yet...",
					"NO_ACTIVITIES": "No activities",
					"VIEW_TASK_DETAILS": "View Task Details",
					"PRINT_TASK": "Print Task Sheet",
					"SKIP_TASK": "Skip Task",
					"DELETE_TASK": "Delete Task",
					"MORE_ACTIONS": "More Actions",
					"ACTIVITY_ALERT": "activityAlert",
					"ALERT_TYPE": "notification",
					"ACTIVITY_SKIPPED": " Task skipped",
					"ACTIVITY_DELETED": " Task deleted",
					"RESPOND": "RESPOND",
					"NO_RESPONSE_NEEDED": "THIS EMAIL DOES NOT NEED A RESPONSE",
					"deleteModal": {
						"TITLE": "You're about to delete this task...",
						"PROMPT": "Deleting this task will remove it from the system. Are you sure you want to continue?",
						"ACCEPT_BUTTON": "YES, DELETE TASK",
						"CANCEL_BUTTON": "NO, DON'T DELETE"
					},
					"skipModal": {
						"TITLE": "You're about to skip this task...",
						"PROMPT": "This task will be marked as skipped. Are you sure you want to continue?",
						"ACCEPT_BUTTON": "YES, SKIP TASK",
						"CANCEL_BUTTON": "NO, DON'T SKIP"
					},
					"dirtyModal": {
						"TITLE": "You have unsaved changes...",
						"PROMPT": "A task has not been completed. Are you sure you want to continue?",
						"ACCEPT_BUTTON": "YES",
						"CANCEL_BUTTON": "NO, LET ME FINISH"
					},
					"activity_bar": {
						"popovers": {
							"APPOINTMENT": "Set an appointment",
							"PHONE_CALL": "Log a phone call",
							"STORE_VISIT": "Log a store visit",
							"OTHER_TASK": "Log other task",
							"SET_APPOINTMENT": "Set an appointment",
							"FOLLOW_UP_REMINDER": "Set a follow-up reminder",
							"SEND_EMAIL": "Send an Email",
							"SEND_TEXT": "Send a text message"
						},
						"headers": {
							"SCHEDULE": "Schedule",
							"LOG": "Log",
							"CONNECT": "Connect"
						},
						"button_names": {
							"PHONE_CALL": "Phone Call",
							"APPOINTMENT": "Appt",
							"REMINDER": "Reminder",
							"STORE_VISIT": "Store Visit",
							"OTHER_TASK": "Other Task",
							"EMAIL": "Email",
							"TEXT_MESSAGE": "Text Msg"
						}
					},
					"TASK_DESCRIPTION_LABEL": "Task Description:",
					"WORK_NOTES_LABEL": "Work Notes:",
					"completed_task": {
						"COMPLETED": "What Do You Want To Do Next?",
						"ADDITIONAL_ACTION": "Want to take any kind of additional action?",
						"CAMPAIGN_STEPS": "If no additional action is taken, then we'll just run the following scheduled campaign steps:",
						"NO_CAMPAIGN_STEPS": "It looks like this customer doesn't have any scheduled campaign steps.",
						"campaign_steps": {
							"CAMPAIGN_NAME": "Campaign Name",
							"DESCRIPTION": "Description",
							"ASSIGNED_TO": "Assigned to",
							"SCHEDULED_DATE": "Scheduled Date"
						}
					}
				},
				"filter_bar": {
					"QUICK_FILTER": "Quick filter",
					"headers": {
						"OPPORTUNITY": "Opportunity",
						"TYPE": "Type",
						"ASSIGNED_TO": "Assigned to",
						"TASK_STATUS": "Task Status"
					},
					"SORT": "Sort",
					"sort_types": {
						"PRIORITY": "Priority",
						"LAST_UPDATED_NEWEST": "Last updated (newest first)",
						"LAST_UPDATED_OLDEST": "Last updated (oldest first)"
					},
					"WORKNOTE": "Note"
				},
				"recap": {
					"SOLD_DEAL_RECAP_LABEL": "View deal recap",
					"PRIMARY_BUYER_LABEL": "Primary Buyer",
					"PURCHASED_VEHICLE_LABEL": "Purchased Vehicle",
					"TRADES_LABEL": "Trades",
					"DEAL_RECAP_LABEL": "Deal Recap",
					"GROSS_RECAP_LABEL": "Gross Recap",
					"SALES_INFO_LABEL": "Sales Info",
					"WARRANTY_PRICES_LABEL": "Warranty Prices",
					"PAYMENT_INFO_LABEL": "Payment Info",
					"CO_BUYER_LABEL": "Co-buyer",
					"BANK_GROSS_LABEL": "Bank Gross",
					"FRONT_GROSS_LABEL": "Front Gross",
					"TOTAL_GROSS_LABEL": "Total Gross",
					"SOLD_SALES_OPPORTUNITY_CONGRATULATIONS_LABEL": "Congrats on the sale! Want to review the",
					"LOADING_RECAP_ERROR_MESSAGE": "We are sorry. The sales recap could not be loaded. Please contact the system administrator.",
					"SAVE_RECAP_BUTTON_TEXT": "Save",
					"CANCEL_SAVING_RECAP_BUTTON_TEXT": "Cancel",
					"EDIT_RECAP_BUTTON_TEXT": "Edit",
					"CANT_SAVE_SALES_RECAP_ERROR_MESSAGE_DESCRIPTION": "Could not save sales recap. Please try again. If the problem persists contact the system administrator.",
					"SOLD_LABEL": "Sold",
					"UNKNOWN_ERROR_OCCURRED": "An unknown error occurred"
				},
				"inlineEdit": {
					"SELECT": "Select",
					"TYPE": "Type",
					"PURCHASE_TYPE": "Purchase Type",
					"SOURCE": "Source",
					"TRACKING_CODE": "Tracking Code",
					"RANKING": "Ranking",
					"CLOSE_DATE": "Close Date",
					"PRIMARY_ASSIGNED": "Primary Assigned",
					"SECONDARY_ASSIGNED": "Secondary Assigned",
					"BDC_ASSIGNED": "BDC Assigned",
					"DESCRIPTION": "Description",
					"FRANCHISE": "Franchise",
					"STATUS": "Current Sales Step",
					"placeholders": {
						"TYPE": "Select Type",
						"CLOSE_DATE": "Select Ranking",
						"DESCRIPTION": "Sales Opportunity Description"
					}
				},
				"toggleExpand": {
					"MORE": "More...",
					"HIDE": "Hide"
				}
			},
			"bankGross": {
				"FINANCE_RESERVE": "Finance Reserve",
				"GAP": "GAP",
				"AH": "AH",
				"SVC_CONTRACT": "SVC Contract",
				"OTHER_BACK_GROSS": "Other Back Gross",
				"TOTAL_BACK_GROSS": "Total Back Gross",
				"FRONT_GROSS": "Front Gross",
				"TOTAL_GROSS": "Total Gross"
			},
			"warranty": {
				"EXTENDED_WARRANTY": "Extended Warranty",
				"EXISTING_VSC": "Existing VSC",
				"AH_INSURANCE": "A&H Insurance",
				"ODOMETER": "Odometer",
				"GAP": "GAP",
				"LIFE": "Life"
			},
			"payment": {
				"MSRP": "MSRP",
				"RESIDUAL_VALUE": "Residual Value",
				"SALES_PRICE": "Sales Price",
				"CASH_DOWN": "Cash Down",
				"TERM": "Term",
				"APR_MF": "APR / MF",
				"TERM_EXPIRATION": "Term Expiration",
				"PAYMENT": "Payment",
				"NUMBER_OF_PAYMENTS": "Number of Payments",
				"PAYMENT_INTERVAL": "Payment Interval",
				"LENDER": "Lender",
				"REBATE": "Rebate",
				"ODOMETER_ALLOWANCE": "Odometer Allowance"
			},
			"search": {
				"START_TYPING": "Start typing to search",
				"SESSION_EXPIRE_HEADER": "Your session has expired!",
				"SESSION_EXPIRE_HYPERLINK": "Click to login.",
				"ZERO_RESULTS_FOUND": "0 results found",
				"SEARCHING": "Searching...",
				"END_OF_RESULTS": "End of results"
			},
			"employee_dashboard": {
				"YES": "Yes",
				"NO": "No",
				"EMPTY": "It looks empty in here...",
				"RESULTS_FOUND": "Results Found",
				"FILTER_PLACEHOLDER": "Filter by keyword",
				"RENAME_THE_FILTER_EDIT": "Do you want to rename the filter?",
				"RENAME_THE_FILTER_DUPLICATE": "What do you want to call this new filter?",
				"YES_DELETE": "Yes, Delete Filter",
				"NO_DONT_DELETE": "No, Don't Delete",
				"task": {
					"ADJUST_FILTERS": "Try adjusting your filters to show more tasks.",
					"FOLLOW_UP_1": "You can follow up on your ",
					"FOLLOW_UP_2": "opportunities",
					"FOLLOW_UP_3": ", too!"
				},
				"opportunity": {
					"ADJUST_FILTERS": "Try adjusting your filters to show more opportunities."
				},
				"popover": {
					"MORE_ACTIONS": "More actions",
					"DELETE_TASK": "Delete Task",
					"PRINT_TASK_SHEET": "Print Task Sheet",
					"INITIATE_TASK": "Add new task",
					"VIEW_INCENTIVES": "View incentives"
				},
				"filter": {
					"THE_BASICS": "The basics...",
					"I_WANT_TO": "I want to",
					"action": {
						"CREATE": "create",
						"EDIT": "edit",
						"DELETE": "delete",
						"DUPLICATE": "duplicate"
					},
					"A": "a",
					"FILTER_CALLED": "filter called",
					"NAME_YOUR_FILTER": "Name your filter",
					"WHO_CAN_ACCESS": "Who can access this filter?",
					"FILTER_CAN_BE_ACCESSED_BY": "This new filter may be accessed by",
					"ALL_USERS": "All Users",
					"SET_YOUR_FILTER_CONDITIONS": "Set your filter conditions...",
					"FOR_ALL": "For all",
					"OPPORTUNITIES_CREATE_FILTER_CONDITIONS": "opportunities, create a filter using the following set of conditions:",
					"AND": "and",
					"SELECT_FIELD": "Select Field",
					"SELECT_VALUE": "Select Field Value",
					"FIELD_VALUE": "Field Value",
					"IS_EQUAL_TO": "is equal to",
					"ADD_CONDITION": "ADD CONDITION",
					"HOW_FILTER_SORTED": "How do you want your filtered results to be sorted?",
					"DEFAULT_FILTER_SORT": "By default, I want the filtered results to be sorted by",
					"ARE_YOU_SURE_DELETE": "Are you sure you want to delete this filter?",
					"CANCEL": "CANCEL",
					"SAVE": "SAVE",
					"SELECT_TYPE": "Select Opportunity Type",
					"ACCESS_FILTER_MANAGER": "Access Filter Manager"
				},
				"reports": {
					"CHOOSE_REPORT": "Choose a report to view...",
					"TASK_DETAILS": "Task Details",
					"EVENT_WITH_NOTES": "Event Details (With Notes)",
					"EVENT_WITHOUT_NOTES": "Event Details (Without Notes)",
					"DAILY_CHECKOUT": "Daily Checkout Report",
					"SALES_TRACKING": "Sales Tracking Report",
					"ACTIVITY_SUMMARY": "Activity Summary Report",
					"VIEW_A_REPORT": "View a Report"
				}
			},
			"convertOpportunityType": {
				"errorModal": {
					"TITLE": "Sorry, this opportunity cannot be converted...",
					"OK_GOT_IT": "OK, Got It",
					"UNKNOWN_ERROR_OCCURRED": "An unknown error occurred while trying to convert the opportunity type"
				},
				"SALES": "Sales",
				"SERVICE": "Service",
				"PARTS": "Parts",
				"OPPORTUNITY": "opportunity",
				"REQUIRED": "Required",
				"CONTINUE": "Continue",
				"CONVERT": "Convert",
				"OK_GOT_IT": "OK, Got It",
				"GO_BACK": "Go Back",
				"TITLE_STEP_1": "Step 1 of 2 - Choose an opportunity type to convert to...",
				"TITLE_STEP_2": "Step 2 of 2 - Confirm your conversion choice...",
				"TITLE_SUCCESS": "The opportunity was converted successfully...",
				"TITLE_FAILURE": "Sorry, this opportunity cannot be converted...",
				"CONVERT_TARGET_PROMPT": "Convert this {{type}} opportunity to a:",
				"CONFIRMATION_PROMPT": "You are about to convert this {{type}} opportunity to a {{newType}} opportunity.",
				"FAILURE_PROMPT": "An error occurred while converting the opportunity:",
				"CONFIRMATION_LIST_HEADER": "Important things to know:",
				"CONFIRMATION_LIST_1": "Converting opportunities cannot be reversed",
				"CONFIRMATION_LIST_2": "An opportunity can only be converted once",
				"CONFIRMATION_LIST_3": "The current opportunity will be deleted and replaced with a brand new converted opportunity",
				"CONFIRMATION_LIST_4": "Only commonly shared tasks from the timeline will be transferred over to the new converted opportunity",
				"ARE_YOU_SURE_YOU_WANT_TO_CONTINUE": "Are you sure you want to continue?",
				"YOU_WILL_BE_REDIRECTED": "You will now be redirected to the contact page."
			}
		},
		"vehicle": {
			"VIN": "VIN",
			"Odometer": "Current Odometer (mi)",
			"USE_EXISTING_VEHICLE_LINK": "use an existing customer vehicle",
			"ENTER_VEHICLE_MANUALLY": "I want to enter a non-standard vehicle (e.g., RVs, motorcycles, etc.)",
			"USE_DROPDOWNS_TO_ENTER_VEHICLE": "I want to enter a standard vehicle (i.e., more current or common cars)",
			"labels": {
				"BODY_STYLE": "Body Style",
				"SERIES": "Series",
				"INTERIOR_COLOR": "Interior Color",
				"EXTERIOR_COLOR": "Exterior Color",
				"FACTORY_WARRANTY": "Factory Warranty",
				"EXTENDED_SERVICE": "Extended Service",
				"PLATE": "Plate",
				"DRIVETRAIN": "Drivetrain",
				"ENGINE": "Engine",
				"MONTHS_MILES": "months / mi",
				"UNIT_NUMBER": "Unit Number"
			}
		},
		"csi": {
			"deleteModal": {
				"TITLE": "You're about to delete this vehicle from this CSI case...",
				"TEXT": "  will be removed from this CSI case.<br> <br>  Are you sure you want to continue?\n",
				"ACCEPT_BUTTON": "Yes, Remove Vehicle",
				"CANCEL_BUTTON": "No, Don't Remove"
			},
			"EXISTING_VEHICLE_TITLE": "Choose a vehicle to add to this CSI case...",
			"ADD_THIS_VEHICLE": "Add this vehicle"
		},
		"service": {
			"HEADERS": {
				"ADD_NEW": "Add New Service Opportunity",
				"UPDATE": "Service Opportunity",
				"SERVICE_ADD_TAB": "OPPORTUNITY INFO",
				"OPPORTUNITY_TIMELINE": "OPPORTUNITY TIMELINE",
				"REPAIR_ORDER": "REPAIR ORDER"
			},
			"ACTIONS": {
				"CONVERT": "Convert Opportunity Type",
				"SURVEY": "Fill Out Survey",
				"EMAIL": "Email from Document Manager",
				"PRINT": "Print from Document Manager",
				"VIEW": "View Audit Log",
				"PRINT_PROSPECT": "Print Prospect Sheet"
			},
			"LABELS": {
				"SERVICE_PRODUCT": "Service Product",
				"TARGET_SERVICE_DATE": "Target Service Date"
			},
			"ERRORS": {
				"INVALID_SERVICE_ADD": "Cannot save the Service opportunity!",
				"INVALID_SERVICE_ADD_BAD_VEHICLE": "Cannot save the Service opportunity, Vehicle is invalid!"
			}
		},
		"common": {
			"LABELS": {
				"DESCRIPTION": "Description",
				"ASSIGNED_TO": "Assigned To",
				"BDC": "BDC",
				"TYPE": "Type",
				"SOURCE": "Source",
				"RANKING": "Ranking",
				"SELECT": "Select",
				"TRACKING_CODE": "Tracking Code"
			},
			"ERRORS": {
				"REQUIRED_MESSAGE": "Required"
			}
		}
	};

/***/ },
/* 761 */
/***/ function(module, exports) {

	module.exports = {
		"crm": {
			"contact": {
				"ATTENTION": "Attention",
				"NICKNAME": "Attention",
				"JOINT_NAME": "Joint Name",
				"SSN": "ABN",
				"headers": {
					"CUSTOMER_SOURCE": "Origin",
					"SSN": "ABN",
					"DPID": "DPID"
				}
			},
			"address": {
				"fields": {
					"POSTAL": "Postcode"
				}
			},
			"external_references": {
				"EXTERNAL_REFERENCE_ID": "DMS Entity #",
				"EXTERNAL_REFERENCE_IDS": "DMS Entity #'s",
				"DEALERSHIP": "Department",
				"NO_REFERENCES_EXIST": "No Entity #'s Exist"
			},
			"salesOpportunity": {
				"vehicleOfInterest": {
					"DELIVERY_DATE": "Delivery Date",
					"MAX_DOWN_PAYMENT": "Max Deposit",
					"DISTANCE_UNIT": "km",
					"CURRENCY_UNIT": "AUD"
				}
			}
		}
	};

/***/ },
/* 762 */
/***/ function(module, exports) {

	angular.module('crm').run(['$templateCache', function($templateCache) {
	  'use strict';

	  $templateCache.put('app/activities/activitiesList/template.html',
	    "<div co-loading=\"ctrl.isWaiting\">\r" +
	    "\n" +
	    "    <div ng-transclude=\"\"></div>\r" +
	    "\n" +
	    "    <crm-activity-bar event-id=\"ctrl.event.id\" contact-id=\"ctrl.contact.id\" event-type=\"ctrl.eventType\"></crm-activity-bar>\r" +
	    "\n" +
	    "    <crm-add-work-note event-id=\"ctrl.event.id\" contact-id=\"ctrl.contact.id\"></crm-add-work-note>\r" +
	    "\n" +
	    "    <crm-activities-notes filtered-activity-timeline=\"ctrl.filteredActivityTimeline\"></crm-activities-notes>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/activities/activitiesList/templates/activityBarTemplate.html',
	    "<button co-icon-badge icon=\"fa-phone\"\r" +
	    "\n" +
	    "        ng-click=\"ctrl.createActivity(ctrl.ActivityButton.phoneCall)\"\r" +
	    "\n" +
	    "        name=\"createPhoneCall\"\r" +
	    "\n" +
	    "        tooltip-placement=\"top\"\r" +
	    "\n" +
	    "        tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "        tooltip-trigger\r" +
	    "\n" +
	    "        uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.PHONE_CALL' | translate }}\">\r" +
	    "\n" +
	    "</button>\r" +
	    "\n" +
	    "<button co-icon-badge icon=\"icon-store-visit-icon\" status=\"inactive\"\r" +
	    "\n" +
	    "        ng-click=\"ctrl.createActivity(ctrl.ActivityButton.storeVisit)\"\r" +
	    "\n" +
	    "        name=\"createStoreVisit\"\r" +
	    "\n" +
	    "        tooltip-placement=\"top\"\r" +
	    "\n" +
	    "        tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "        tooltip-trigger\r" +
	    "\n" +
	    "        uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.STORE_VISIT' | translate }}\">\r" +
	    "\n" +
	    "</button>\r" +
	    "\n" +
	    "<button co-icon-badge icon=\"fa-ellipsis-h\"\r" +
	    "\n" +
	    "        ng-click=\"ctrl.createActivity(ctrl.ActivityButton.other)\"\r" +
	    "\n" +
	    "        name=\"createOtherActivity\"\r" +
	    "\n" +
	    "        tooltip-placement=\"top\"\r" +
	    "\n" +
	    "        tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "        tooltip-trigger\r" +
	    "\n" +
	    "        uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.OTHER_TASK' | translate }}\">\r" +
	    "\n" +
	    "</button>\r" +
	    "\n" +
	    "<span>\r" +
	    "\n" +
	    "    <i class=\"fa fa-circle ws-button-separator\"></i>\r" +
	    "\n" +
	    "</span>\r" +
	    "\n" +
	    "<button co-icon-badge icon=\"fa-calendar\"\r" +
	    "\n" +
	    "        ng-click=\"ctrl.createActivity(ctrl.ActivityButton.appointment)\"\r" +
	    "\n" +
	    "        name=\"createAppointment\"\r" +
	    "\n" +
	    "        tooltip-placement=\"top\"\r" +
	    "\n" +
	    "        tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "        tooltip-trigger\r" +
	    "\n" +
	    "        uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.SET_APPOINTMENT' | translate }}\">\r" +
	    "\n" +
	    "</button>\r" +
	    "\n" +
	    "<button co-icon-badge icon=\"fa-clock-o\"\r" +
	    "\n" +
	    "        ng-click=\"ctrl.createActivity(ctrl.ActivityButton.reminder)\"\r" +
	    "\n" +
	    "        name=\"createFollowUp\"\r" +
	    "\n" +
	    "        tooltip-placement=\"top\"\r" +
	    "\n" +
	    "        tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "        tooltip-trigger\r" +
	    "\n" +
	    "        uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.FOLLOW_UP_REMINDER' | translate }}\">\r" +
	    "\n" +
	    "</button>\r" +
	    "\n" +
	    "<span>\r" +
	    "\n" +
	    "    <i class=\"fa fa-circle ws-button-separator\"></i>\r" +
	    "\n" +
	    "</span>\r" +
	    "\n" +
	    "<button co-icon-badge icon=\"fa-envelope-o\" status=\"inactive\"\r" +
	    "\n" +
	    "        ng-click=\"ctrl.createActivity(ctrl.ActivityButton.sendEmail)\"\r" +
	    "\n" +
	    "        name=\"createSendEmail\"\r" +
	    "\n" +
	    "        tooltip-placement=\"top\"\r" +
	    "\n" +
	    "        tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "        tooltip-trigger\r" +
	    "\n" +
	    "        uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.SEND_EMAIL' | translate }}\">\r" +
	    "\n" +
	    "</button>\r" +
	    "\n" +
	    "<button co-icon-badge icon=\"fa-comment\" status=\"inactive\"\r" +
	    "\n" +
	    "        ng-click=\"ctrl.createActivity(ctrl.ActivityButton.textMessage)\"\r" +
	    "\n" +
	    "        name=\"createMessage\"\r" +
	    "\n" +
	    "        tooltip-placement=\"top\"\r" +
	    "\n" +
	    "        tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "        tooltip-trigger\r" +
	    "\n" +
	    "        uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.SEND_TEXT' | translate }}\">\r" +
	    "\n" +
	    "</button>"
	  );


	  $templateCache.put('app/activities/activitiesNotes/template.html',
	    "<div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "    <crm-quick-filter-bar class=\"col-xs-12 filter-bar\"></crm-quick-filter-bar>\r" +
	    "\n" +
	    "    <div class=\"col-xs-12\" ng-class=\"{'col-xxl-6': !ctrl.isActivitiesDisabled()}\">\r" +
	    "\n" +
	    "        <crm-open-activities on-redirect=\"ctrl.onRedirect()\"></crm-open-activities>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"col-xs-12\" ng-class=\"{'col-xxl-6': !ctrl.isActivitiesDisabled()}\">\r" +
	    "\n" +
	    "        <div class=\"panel-title\">\r" +
	    "\n" +
	    "            <strong>\r" +
	    "\n" +
	    "                <crm-dynamic-translation\r" +
	    "\n" +
	    "                        model=\"ctrl.filteredActivityTimeline.filteredCollection\"\r" +
	    "\n" +
	    "                        translationKey=\"crm.activities.closedActivities.TITLE\">\r" +
	    "\n" +
	    "                </crm-dynamic-translation>\r" +
	    "\n" +
	    "            </strong>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <section ng-if=\"ctrl.filteredActivityTimeline.filteredCollection.length === 0\">\r" +
	    "\n" +
	    "            {{ ::\"crm.activities.closedActivities.EMPTY\" | translate }}\r" +
	    "\n" +
	    "        </section>\r" +
	    "\n" +
	    "        <div ng-repeat=\"activityTimelineItem in ctrl.filteredActivityTimeline.filteredCollection\" name=\"activityTimelineItem\" ng-click=\"ctrl.onCardClick(activityTimelineItem)\">\r" +
	    "\n" +
	    "            <crm-activity-card ng-if=\"activityTimelineItem.activity\"\r" +
	    "\n" +
	    "                activity-timeline-item=\"activityTimelineItem\">\r" +
	    "\n" +
	    "            </crm-activity-card>\r" +
	    "\n" +
	    "            <crm-work-note-card\r" +
	    "\n" +
	    "                ng-if=\"activityTimelineItem.workNote && !ctrl.isEmailSent(activityTimelineItem.workNote)\"\r" +
	    "\n" +
	    "                work-note=\"activityTimelineItem.workNote\"\r" +
	    "\n" +
	    "                event-id=\"{{activityTimelineItem.eventId}}\"\r" +
	    "\n" +
	    "                event-type=\"{{activityTimelineItem.eventType}}\"\r" +
	    "\n" +
	    "                entity-id=\"{{activityTimelineItem.customerId}}\">\r" +
	    "\n" +
	    "            </crm-work-note-card>\r" +
	    "\n" +
	    "            <crm-email-work-note-card\r" +
	    "\n" +
	    "                    ng-if=\"activityTimelineItem.workNote && ctrl.isEmailSent(activityTimelineItem.workNote)\"\r" +
	    "\n" +
	    "                work-note=\"activityTimelineItem.workNote\"\r" +
	    "\n" +
	    "                event-id=\"{{activityTimelineItem.eventId}}\"\r" +
	    "\n" +
	    "                event-type=\"{{activityTimelineItem.eventType}}\">\r" +
	    "\n" +
	    "            </crm-email-work-note-card>\r" +
	    "\n" +
	    "            <crm-event-status-log-group-card\r" +
	    "\n" +
	    "                    ng-if=\"activityTimelineItem.eventStatusLogGroup\"\r" +
	    "\n" +
	    "                    activity-timeline-item=\"activityTimelineItem\">\r" +
	    "\n" +
	    "            </crm-event-status-log-group-card>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/activities/activityBar/template.html',
	    "<div class=\"row col-xs-10\">\r" +
	    "\n" +
	    "    <div class=\"ws-activity-bar\">\r" +
	    "\n" +
	    "        <div class=\"col-xs-2 ws-activity-3-icon-group\">\r" +
	    "\n" +
	    "            <div class=\"row ws-activity-bar-row\">\r" +
	    "\n" +
	    "                <div class=\"ws-activity-button-header-text\">{{::'crm.salesOpportunity.activities.activity_bar.headers.SCHEDULE' | translate }}</div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row ws-activity-bar-row\">\r" +
	    "\n" +
	    "                <div class=\"ws-button-column\"\r" +
	    "\n" +
	    "                     ng-class=\"ctrl.eventType !== ctrl.OpportunityEventType.service ? 'col-xs-4' : 'col-xs-6'\">\r" +
	    "\n" +
	    "                    <button co-icon-badge\r" +
	    "\n" +
	    "                            icon=\"fa-phone\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.addActivityToTimeline(ctrl.ActivityButton.phoneCallReminder)\"\r" +
	    "\n" +
	    "                            status=\"{{ctrl.hasActivityTypePermission(ctrl.ActivityType.outboundCall) && ctrl.activityPermission.add ? '' : 'inactive'}}\"\r" +
	    "\n" +
	    "                            ng-disabled=\"!ctrl.hasActivityTypePermission(ctrl.ActivityType.outboundCall) || !ctrl.activityPermission.add\"\r" +
	    "\n" +
	    "                            name=\"createPhoneCall\"\r" +
	    "\n" +
	    "                            tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                            tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                            tooltip-trigger\r" +
	    "\n" +
	    "                            tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.PHONE_CALL' | translate }}\">\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-4 ws-button-column\"\r" +
	    "\n" +
	    "                     ng-if=\"ctrl.eventType !== ctrl.OpportunityEventType.service\">\r" +
	    "\n" +
	    "                    <button co-icon-badge\r" +
	    "\n" +
	    "                            icon=\"fa-calendar\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.addActivityToTimeline(ctrl.ActivityButton.appointment)\"\r" +
	    "\n" +
	    "                            status=\"{{ctrl.hasActivityTypePermission(ctrl.ActivityType.appointment) && ctrl.activityPermission.add ? '' : 'inactive'}}\"\r" +
	    "\n" +
	    "                            ng-disabled=\"!ctrl.hasActivityTypePermission(ctrl.ActivityType.appointment) || !ctrl.activityPermission.add\"\r" +
	    "\n" +
	    "                            name=\"createAppointment\"\r" +
	    "\n" +
	    "                            tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                            tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                            tooltip-trigger\r" +
	    "\n" +
	    "                            tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.SET_APPOINTMENT' | translate }}\">\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-button-column\"\r" +
	    "\n" +
	    "                     ng-class=\"ctrl.eventType !== ctrl.OpportunityEventType.service ? 'col-xs-4' : 'col-xs-6'\">\r" +
	    "\n" +
	    "                    <button co-icon-badge\r" +
	    "\n" +
	    "                            icon=\"fa-clock-o\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.addActivityToTimeline(ctrl.ActivityButton.reminder)\"\r" +
	    "\n" +
	    "                            ng-disabled=\"!ctrl.activityPermission.add\"\r" +
	    "\n" +
	    "                            name=\"createFollowUp\"\r" +
	    "\n" +
	    "                            status=\"{{ctrl.activityPermission.add ? '' : 'inactive'}}\"\r" +
	    "\n" +
	    "                            tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                            tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                            tooltip-trigger\r" +
	    "\n" +
	    "                            tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.FOLLOW_UP_REMINDER' | translate }}\">\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row ws-activity-bar-row\">\r" +
	    "\n" +
	    "                <div class=\"ws-button-column\"\r" +
	    "\n" +
	    "                     ng-class=\"ctrl.eventType !== ctrl.OpportunityEventType.service ? 'col-xs-4' : 'col-xs-6'\">\r" +
	    "\n" +
	    "                    <p class=\"ws-activity-button-text\">{{::'crm.salesOpportunity.activities.activity_bar.button_names.PHONE_CALL' | translate }}</p>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-4 ws-button-column\"\r" +
	    "\n" +
	    "                     ng-if=\"ctrl.eventType !== ctrl.OpportunityEventType.service\">\r" +
	    "\n" +
	    "                    <p class=\"ws-activity-button-text\">{{::'crm.salesOpportunity.activities.activity_bar.button_names.APPOINTMENT' | translate }}</p>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-button-column\"\r" +
	    "\n" +
	    "                     ng-class=\"ctrl.eventType !== ctrl.OpportunityEventType.service ? 'col-xs-4' : 'col-xs-6'\">\r" +
	    "\n" +
	    "                    <p class=\"ws-activity-button-text\">{{::'crm.salesOpportunity.activities.activity_bar.button_names.REMINDER' | translate }}</p>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <span>\r" +
	    "\n" +
	    "            <i class=\"fa fa-circle ws-button-separator ws-activity-button-separator\"></i>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <div class=\"col-xs-2 ws-activity-3-icon-group\">\r" +
	    "\n" +
	    "            <div class=\"row ws-activity-bar-row\">\r" +
	    "\n" +
	    "                <div class=\"ws-activity-button-header-text\">{{::'crm.salesOpportunity.activities.activity_bar.headers.LOG' | translate }}</div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row ws-activity-bar-row\">\r" +
	    "\n" +
	    "                <div class=\"ws-button-column\"\r" +
	    "\n" +
	    "                     ng-class=\"ctrl.eventType === ctrl.OpportunityEventType.sales ? 'col-xs-4' : 'col-xs-6'\">\r" +
	    "\n" +
	    "                    <button co-icon-badge\r" +
	    "\n" +
	    "                            icon=\"fa-phone\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.addActivityToTimeline(ctrl.ActivityButton.phoneCall)\"\r" +
	    "\n" +
	    "                            status=\"{{ctrl.hasActivityTypePermission(ctrl.ActivityType.outboundCall) && ctrl.activityPermission.add ? '' : 'inactive'}}\"\r" +
	    "\n" +
	    "                            ng-disabled=\"!ctrl.hasActivityTypePermission(ctrl.ActivityType.outboundCall) || !ctrl.activityPermission.add\"\r" +
	    "\n" +
	    "                            name=\"createPhoneCall\"\r" +
	    "\n" +
	    "                            tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                            tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                            tooltip-trigger\r" +
	    "\n" +
	    "                            tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.PHONE_CALL' | translate }}\">\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-4 ws-button-column\"\r" +
	    "\n" +
	    "                     ng-if=\"ctrl.eventType === ctrl.OpportunityEventType.sales\">\r" +
	    "\n" +
	    "                    <button co-icon-badge\r" +
	    "\n" +
	    "                            icon=\"icon-store-visit-icon\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.addActivityToTimeline(ctrl.ActivityButton.storeVisit)\"\r" +
	    "\n" +
	    "                            status=\"{{!ctrl.hasChangeFromSoldStatusPermission() && ctrl.eventStatusIsSold ? 'inactive' : ''}}\"\r" +
	    "\n" +
	    "                            ng-disabled=\"!ctrl.hasChangeFromSoldStatusPermission() && ctrl.eventStatusIsSold\"\r" +
	    "\n" +
	    "                            name=\"createStoreVisit\"\r" +
	    "\n" +
	    "                            tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                            tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                            tooltip-trigger\r" +
	    "\n" +
	    "                            tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.STORE_VISIT' | translate }}\">\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-button-column\"\r" +
	    "\n" +
	    "                     ng-class=\"ctrl.eventType === ctrl.OpportunityEventType.sales ? 'col-xs-4' : 'col-xs-6'\">\r" +
	    "\n" +
	    "                    <button co-icon-badge\r" +
	    "\n" +
	    "                            icon=\"fa-ellipsis-h\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.addActivityToTimeline(ctrl.ActivityButton.other)\"\r" +
	    "\n" +
	    "                            status=\"{{ctrl.activityPermission.add ? '' : 'inactive'}}\"\r" +
	    "\n" +
	    "                            ng-disabled=\"!ctrl.activityPermission.add\"\r" +
	    "\n" +
	    "                            name=\"createOtherActivity\"\r" +
	    "\n" +
	    "                            tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                            tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                            tooltip-trigger\r" +
	    "\n" +
	    "                            tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.OTHER_TASK' | translate }}\">\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row ws-activity-bar-row\">\r" +
	    "\n" +
	    "                <div class=\"ws-button-column\"\r" +
	    "\n" +
	    "                     ng-class=\"ctrl.eventType === ctrl.OpportunityEventType.sales ? 'col-xs-4' : 'col-xs-6'\">\r" +
	    "\n" +
	    "                    <p class=\"ws-activity-button-text\">{{::'crm.salesOpportunity.activities.activity_bar.button_names.PHONE_CALL' | translate }}</p>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-4 ws-button-column\"\r" +
	    "\n" +
	    "                     ng-if=\"ctrl.eventType === ctrl.OpportunityEventType.sales\">\r" +
	    "\n" +
	    "                    <p class=\"ws-activity-button-text\">{{::'crm.salesOpportunity.activities.activity_bar.button_names.STORE_VISIT' | translate }}</p>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-button-column\"\r" +
	    "\n" +
	    "                     ng-class=\"ctrl.eventType === ctrl.OpportunityEventType.sales ? 'col-xs-4' : 'col-xs-6'\">\r" +
	    "\n" +
	    "                    <p class=\"ws-activity-button-text\">{{::'crm.salesOpportunity.activities.activity_bar.button_names.OTHER_TASK' | translate }}</p>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <span>\r" +
	    "\n" +
	    "            <i class=\"fa fa-circle ws-button-separator ws-activity-button-separator\"></i>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <div class=\"col-xs-2 ws-activity-3-icon-group\">\r" +
	    "\n" +
	    "            <div class=\"row ws-activity-bar-row\">\r" +
	    "\n" +
	    "                <div class=\"ws-activity-button-header-text\">{{::'crm.salesOpportunity.activities.activity_bar.headers.CONNECT' | translate }}</div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row ws-activity-bar-row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-6 ws-button-column\">\r" +
	    "\n" +
	    "                    <button co-icon-badge\r" +
	    "\n" +
	    "                            icon=\"fa-envelope-o\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.addActivityToTimeline(ctrl.ActivityButton.sendEmail)\"\r" +
	    "\n" +
	    "                            name=\"createSendEmail\"\r" +
	    "\n" +
	    "                            tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                            tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                            tooltip-trigger\r" +
	    "\n" +
	    "                            tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.SEND_EMAIL' | translate }}\">\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-6 ws-button-column\">\r" +
	    "\n" +
	    "                    <button co-icon-badge\r" +
	    "\n" +
	    "                            icon=\"fa-comment\"\r" +
	    "\n" +
	    "                            status=\"inactive\"\r" +
	    "\n" +
	    "                            ng-disabled=\"true\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.addActivityToTimeline(ctrl.ActivityButton.textMessage)\"\r" +
	    "\n" +
	    "                            name=\"createMessage\"\r" +
	    "\n" +
	    "                            tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                            tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                            tooltip-trigger\r" +
	    "\n" +
	    "                            tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.SEND_TEXT' | translate }}\">\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row ws-activity-bar-row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-6 ws-button-column\">\r" +
	    "\n" +
	    "                    <p class=\"ws-activity-button-text\">{{::'crm.salesOpportunity.activities.activity_bar.button_names.EMAIL' | translate }}</p>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-6 ws-button-column\">\r" +
	    "\n" +
	    "                    <p class=\"ws-activity-button-text\">{{::'crm.salesOpportunity.activities.activity_bar.button_names.TEXT_MESSAGE' | translate }}</p>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/activities/activityCard/template.html',
	    "<div class=\"relative\">\r" +
	    "\n" +
	    "    <crm-default-activity-card ng-if=\"!ctrl.isActive || ctrl.showTaskCard(ctrl.ActivityActionType.default)\"\r" +
	    "\n" +
	    "                               activity-timeline-item=\"ctrl.activityTimelineItem\"\r" +
	    "\n" +
	    "                               status=\"ctrl.status\"></crm-default-activity-card>\r" +
	    "\n" +
	    "    <div ng-if=\"ctrl.isActive\">\r" +
	    "\n" +
	    "        <crm-confirm-appt ng-if=\"ctrl.showTaskCard(ctrl.ActivityActionType.confirmAppointment)\"\r" +
	    "\n" +
	    "                          activity=\"ctrl.activity\"\r" +
	    "\n" +
	    "                          status=\"ctrl.status\"\r" +
	    "\n" +
	    "                          on-save=\"ctrl.onSaveSuccess(activity, type)\"\r" +
	    "\n" +
	    "                          on-cancel=\"ctrl.onCancel()\"\r" +
	    "\n" +
	    "                          name=\"confirmAppointment\">\r" +
	    "\n" +
	    "        </crm-confirm-appt>\r" +
	    "\n" +
	    "        <crm-log-phone-call ng-if=\"ctrl.showTaskCard(ctrl.ActivityActionType.logPhoneCall)\"\r" +
	    "\n" +
	    "                            activity=\"ctrl.activity\"\r" +
	    "\n" +
	    "                            contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                            status=\"ctrl.status\"\r" +
	    "\n" +
	    "                            on-save=\"ctrl.onSaveSuccess(activity, type)\"\r" +
	    "\n" +
	    "                            on-cancel=\"ctrl.onCancel()\">\r" +
	    "\n" +
	    "        </crm-log-phone-call>\r" +
	    "\n" +
	    "        <crm-set-appt ng-if=\"ctrl.showTaskCard(ctrl.ActivityActionType.setAppointment)\"\r" +
	    "\n" +
	    "                      activity=\"ctrl.activity\"\r" +
	    "\n" +
	    "                      status=\"ctrl.status\"\r" +
	    "\n" +
	    "                      on-save=\"ctrl.onSaveSuccess(activity, type)\"\r" +
	    "\n" +
	    "                      on-cancel=\"ctrl.onCancel()\">\r" +
	    "\n" +
	    "        </crm-set-appt>\r" +
	    "\n" +
	    "        <crm-set-reminder ng-if=\"ctrl.showTaskCard(ctrl.ActivityActionType.setReminder)\"\r" +
	    "\n" +
	    "                          activity=\"ctrl.activity\"\r" +
	    "\n" +
	    "                          status=\"ctrl.status\"\r" +
	    "\n" +
	    "                          on-save=\"ctrl.onSaveSuccess(activity, type)\"\r" +
	    "\n" +
	    "                          on-cancel=\"ctrl.onCancel()\">\r" +
	    "\n" +
	    "        </crm-set-reminder>\r" +
	    "\n" +
	    "        <crm-log-appointment ng-if=\"ctrl.showTaskCard(ctrl.ActivityActionType.logAppointment)\"\r" +
	    "\n" +
	    "                             activity=\"ctrl.activity\"\r" +
	    "\n" +
	    "                             contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                             status=\"ctrl.status\"\r" +
	    "\n" +
	    "                             on-save=\"ctrl.onSaveSuccess(activity, type)\"\r" +
	    "\n" +
	    "                             on-cancel=\"ctrl.onCancel()\">\r" +
	    "\n" +
	    "        </crm-log-appointment>\r" +
	    "\n" +
	    "        <crm-log-other-task ng-if=\"ctrl.showTaskCard(ctrl.ActivityActionType.logOther)\"\r" +
	    "\n" +
	    "                            activity=\"ctrl.activity\"\r" +
	    "\n" +
	    "                            status=\"ctrl.status\"\r" +
	    "\n" +
	    "                            on-save=\"ctrl.onSaveSuccess(activity, type)\"\r" +
	    "\n" +
	    "                            on-cancel=\"ctrl.onCancel()\">\r" +
	    "\n" +
	    "        </crm-log-other-task>\r" +
	    "\n" +
	    "        <crm-web-lead-task ng-if=\"ctrl.showTaskCard(ctrl.ActivityActionType.webLead)\"\r" +
	    "\n" +
	    "                           activity=\"ctrl.activity\"\r" +
	    "\n" +
	    "                           status=\"ctrl.status\"\r" +
	    "\n" +
	    "                           on-save=\"ctrl.onSaveSuccess(activity, type)\"\r" +
	    "\n" +
	    "                           on-cancel=\"ctrl.onCancel()\">\r" +
	    "\n" +
	    "        </crm-web-lead-task>\r" +
	    "\n" +
	    "        <crm-complete-task-card ng-if=\"ctrl.showTaskCard(ctrl.ActivityActionType.completed)\"\r" +
	    "\n" +
	    "                                campaign-steps=\"ctrl.activityTimelineItem.campaignSteps\"\r" +
	    "\n" +
	    "                                event-type=\"ctrl.activityTimelineItem.eventType\"\r" +
	    "\n" +
	    "                                on-close=\"ctrl.onCloseComplete(type)\" >\r" +
	    "\n" +
	    "        </crm-complete-task-card>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/activities/activityCard/templates/detailsModalTemplate.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel panel panel-primary panel-modal\" name=\"modalPanel\">\r" +
	    "\n" +
	    "        <div class=\"panel-heading\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "                <h3 class=\"panel-title ws-flex-fill-even\" name=\"taskDetailsTitle\">\r" +
	    "\n" +
	    "                    {{ ::'crm.activities.detailsModal.TASK_DETAILS' | translate}}\r" +
	    "\n" +
	    "                </h3>\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.cancel($event)\" name=\"closeModal\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-body\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-6\">\r" +
	    "\n" +
	    "                    <span class=\"ws-panel-item-heading\">\r" +
	    "\n" +
	    "                        {{ ::'crm.activities.detailsModal.CREATED_BY' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <span name=\"activityCreatedBy\">{{ ctrl.activity.createdBy.text }}</span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-6\">\r" +
	    "\n" +
	    "                    <span class=\"ws-panel-item-heading\">\r" +
	    "\n" +
	    "                        {{ ::'crm.activities.detailsModal.UPDATED_BY' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <span name=\"activityUpdatedBy\">{{ ctrl.activity.updatedBy.text }}</span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-6\">\r" +
	    "\n" +
	    "                    <span class=\"ws-panel-item-heading\">\r" +
	    "\n" +
	    "                        {{ ::'crm.activities.detailsModal.CREATED_ON' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <span name=\"activityCreatedDate\">{{ ctrl.activity.createdDate.format('l') }}</span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-6\">\r" +
	    "\n" +
	    "                    <span class=\"ws-panel-item-heading\">\r" +
	    "\n" +
	    "                        {{ ::'crm.activities.detailsModal.UPDATED_ON' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <span name=\"activityUpdatedDate\">{{ ctrl.activity.updateDate.format('l') }}</span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-6\">\r" +
	    "\n" +
	    "                    <span class=\"ws-panel-item-heading\">\r" +
	    "\n" +
	    "                        {{ ::'crm.activities.detailsModal.TASK_ID' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <span name=\"activityID\">{{ ctrl.activity.activityId }}</span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/activities/activityCard/templates/statusWarningModalTemplate.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-primary panel-modal\" name=\"statusWarningModal\">\r" +
	    "\n" +
	    "        <div class=\"panel-heading ws-panel-heading-no-separator\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "                <h3 id=\"modalTitle\"\r" +
	    "\n" +
	    "                    class=\"panel-title ws-flex-fill-even\"\r" +
	    "\n" +
	    "                    name=\"modalTemplateTitle\">\r" +
	    "\n" +
	    "                    {{ ::'crm.salesOpportunity.statusChangeWarning.BEEN_MOVED' | translate}} <span class=\"warning-status\">{{ctrl.overlapStatusesString}}</span> {{ ::'crm.salesOpportunity.statusChangeWarning.TODAY' | translate}}\r" +
	    "\n" +
	    "                </h3>\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.cancel($event)\" name=\"closeModal\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-body\">\r" +
	    "\n" +
	    "            {{ ::'crm.salesOpportunity.statusChangeWarning.MOVED_TO' | translate}} <span class=\"warning-status\">{{ctrl.overlapStatusesString}}</span>:\r" +
	    "\n" +
	    "            <crm-default-event-status-log-group-card\r" +
	    "\n" +
	    "                    ng-if=\"ctrl.mostRecentIsStoreVisit(ctrl.mostRecentOverlapItem)\"\r" +
	    "\n" +
	    "                    editable=\"false\"\r" +
	    "\n" +
	    "                    activity-timeline-item=\"ctrl.mostRecentOverlapItem\"\r" +
	    "\n" +
	    "                    status=\"ctrl.completeStatus\">\r" +
	    "\n" +
	    "            </crm-default-event-status-log-group-card>\r" +
	    "\n" +
	    "            <crm-default-activity-card\r" +
	    "\n" +
	    "                    ng-if=\"ctrl.mostRecentIsAppointment(ctrl.mostRecentOverlapItem)\"\r" +
	    "\n" +
	    "                    uneditable=\"true\"\r" +
	    "\n" +
	    "                    activity-timeline-item=\"ctrl.mostRecentOverlapItem\"\r" +
	    "\n" +
	    "                    status=\"ctrl.completeStatus\">\r" +
	    "\n" +
	    "            </crm-default-activity-card>\r" +
	    "\n" +
	    "            {{ ::'crm.salesOpportunity.statusChangeWarning.STILL_SAVE' | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-footer\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                    <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                        <button class=\"btn btn-quaternary\" name=\"change-mind\" ng-click=\"ctrl.cancel($event)\">{{ ::'crm.salesOpportunity.statusChangeWarning.NO' | translate}}</button>\r" +
	    "\n" +
	    "                        <button class=\"btn btn-primary\" name=\"confirm\" ng-click=\"ctrl.accept()\">{{ ::'crm.salesOpportunity.statusChangeWarning.YES' | translate}}</button>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/activities/activityComment/template.html',
	    "<span ng-if=\"!ctrl.comment\" class=\"ws-deaccent-text ws-text-emphasis\">{{::'crm.salesOpportunity.activities.NO_COMMENT' | translate}}</span>\r" +
	    "\n" +
	    "<span>{{ctrl.comment}}</span>\r" +
	    "\n"
	  );


	  $templateCache.put('app/activities/completeTaskCard/template.html',
	    "<co-panel co-multi-transclusion\r" +
	    "\n" +
	    "          class=\"ds-card ds-card-hover-accent ds-card-complete-reverse\">\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-title\" name=\"completedTaskType\">\r" +
	    "\n" +
	    "            {{::'crm.salesOpportunity.activities.completed_task.COMPLETED' | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <i class=\"fa fa-close\" ng-click=\"ctrl.closeCompleteTaskCard()\" name=\"closeCompletedTaskCard\"></i>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <br>\r" +
	    "\n" +
	    "        <div class=\"ds-card-icon-bar\">\r" +
	    "\n" +
	    "            <div class=\"ws-icon-badge-lg\"\r" +
	    "\n" +
	    "                 name=\"createReminder\"\r" +
	    "\n" +
	    "                 ng-click=\"ctrl.createActivity(ctrl.ActivityButton.reminder)\"\r" +
	    "\n" +
	    "                 tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                 tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                 tooltip-trigger\r" +
	    "\n" +
	    "                 uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.FOLLOW_UP_REMINDER' | translate }}\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-clock-o\">\r" +
	    "\n" +
	    "                </i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-icon-badge-lg\"\r" +
	    "\n" +
	    "                 name=\"createPhoneCall\"\r" +
	    "\n" +
	    "                 ng-click=\"ctrl.createActivity(ctrl.ActivityButton.phoneCall)\"\r" +
	    "\n" +
	    "                 tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                 tooltip-append-to-body=\"false\"\r" +
	    "\n" +
	    "                 tooltip-trigger=\"mouseenter\"\r" +
	    "\n" +
	    "                 uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.PHONE_CALL' | translate }}\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-phone\">\r" +
	    "\n" +
	    "                </i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-icon-badge-lg\"\r" +
	    "\n" +
	    "                 name=\"createSendEmail\"\r" +
	    "\n" +
	    "                 ng-click=\"ctrl.createActivity(ctrl.ActivityButton.sendEmail)\"\r" +
	    "\n" +
	    "                 tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                 tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                 tooltip-trigger\r" +
	    "\n" +
	    "                 uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.SEND_EMAIL' | translate }}\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-envelope-o\">\r" +
	    "\n" +
	    "                </i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-icon-badge-lg\"\r" +
	    "\n" +
	    "                 ng-if=\"false\"\r" +
	    "\n" +
	    "                 name=\"createSendText\"\r" +
	    "\n" +
	    "                 ng-click=\"ctrl.createActivity(ctrl.ActivityButton.textMessage)\"\r" +
	    "\n" +
	    "                 tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                 tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                 tooltip-trigger\r" +
	    "\n" +
	    "                 uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.SEND_TEXT' | translate }}\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-comment\">\r" +
	    "\n" +
	    "                </i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-icon-badge-lg\"\r" +
	    "\n" +
	    "                 name=\"createAppointment\"\r" +
	    "\n" +
	    "                 ng-if=\"ctrl.eventType !== ctrl.OpportunityEventType.service\"\r" +
	    "\n" +
	    "                 ng-click=\"ctrl.createActivity(ctrl.ActivityButton.appointment)\"\r" +
	    "\n" +
	    "                 tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                 tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                 tooltip-trigger\r" +
	    "\n" +
	    "                 uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.APPOINTMENT' | translate }}\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-calendar\">\r" +
	    "\n" +
	    "                </i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-icon-badge-lg\"\r" +
	    "\n" +
	    "                 name=\"createOther\"\r" +
	    "\n" +
	    "                 ng-click=\"ctrl.createActivity(ctrl.ActivityButton.other)\"\r" +
	    "\n" +
	    "                 tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                 tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                 tooltip-trigger\r" +
	    "\n" +
	    "                 uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.OTHER_TASK' | translate }}\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-ellipsis-h\">\r" +
	    "\n" +
	    "                </i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"media-body\">\r" +
	    "\n" +
	    "        <br>\r" +
	    "\n" +
	    "        <div ng-if=\"ctrl.campaignSteps.length > 0\">\r" +
	    "\n" +
	    "            <p>{{::'crm.salesOpportunity.activities.completed_task.CAMPAIGN_STEPS' | translate}}</p>\r" +
	    "\n" +
	    "            <table class=\"table\">\r" +
	    "\n" +
	    "                <thead>\r" +
	    "\n" +
	    "                    <tr>\r" +
	    "\n" +
	    "                        <th>{{::'crm.salesOpportunity.activities.completed_task.campaign_steps.CAMPAIGN_NAME' | translate}}</th>\r" +
	    "\n" +
	    "                        <th>{{::'crm.salesOpportunity.activities.completed_task.campaign_steps.DESCRIPTION' | translate}}</th>\r" +
	    "\n" +
	    "                        <th>{{::'crm.salesOpportunity.activities.completed_task.campaign_steps.ASSIGNED_TO' | translate}}</th>\r" +
	    "\n" +
	    "                        <th>{{::'crm.salesOpportunity.activities.completed_task.campaign_steps.SCHEDULED_DATE' | translate}}</th>\r" +
	    "\n" +
	    "                    </tr>\r" +
	    "\n" +
	    "                </thead>\r" +
	    "\n" +
	    "                <tbody>\r" +
	    "\n" +
	    "                    <tr ng-repeat=\"campaignStep in ctrl.campaignSteps\">\r" +
	    "\n" +
	    "                        <td name=\"completedTaskCampaignName\">{{::campaignStep.campaignName}}</td>\r" +
	    "\n" +
	    "                        <td name=\"completedTaskMilestone\">{{::campaignStep.milestoneType}}</td>\r" +
	    "\n" +
	    "                        <td name=\"completedTaskMilestoneAssignedTo\">{{::campaignStep.assignedTo.getFullName()}}</td>\r" +
	    "\n" +
	    "                        <td name=\"completedTaskMilestoneDate\">{{::campaignStep.scheduledDate | date:'M/d/yyyy'}}</td>\r" +
	    "\n" +
	    "                </tbody>\r" +
	    "\n" +
	    "            </table>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div ng-if=\"!(ctrl.campaignSteps.length > 0)\" name=\"completedTaskNoCampaign\">\r" +
	    "\n" +
	    "            {{::'crm.salesOpportunity.activities.completed_task.NO_CAMPAIGN_STEPS' | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/activities/confirmAppt/template.html',
	    "<co-panel co-multi-transclusion\r" +
	    "\n" +
	    "          ribbon=\"true\"\r" +
	    "\n" +
	    "          class=\"ds-card ds-card-active ds-card-hover-accent\"\r" +
	    "\n" +
	    "          status=\"{{ ::ctrl.status }}\"\r" +
	    "\n" +
	    "          name=\"confirmAppointmentPanel\">\r" +
	    "\n" +
	    "    <span transclude-to=\"title\">\r" +
	    "\n" +
	    "        {{ ::\"crm.activities.confirmAppt.HEADER_QUESTION\" | translate }}\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "    <span transclude-to=\"main\">\r" +
	    "\n" +
	    "        <div class=\"panel-overlay ws-disabled-overlay\" ng-show=\"ctrl.isWaiting\">\r" +
	    "\n" +
	    "            <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                  md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-activity-bar\">\r" +
	    "\n" +
	    "            <button class=\"btn btn-primary btn-circle ws-activity-button\"\r" +
	    "\n" +
	    "                    name=\"confirmByPhone\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.confirmAppointment(ctrl.ActivityButton.phoneCall)\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-phone\"></i>\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "            <button class=\"btn btn-primary btn-circle ws-activity-button disabled\"\r" +
	    "\n" +
	    "                    name=\"confirmByEmail\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.confirmAppointment(ctrl.ActivityButton.sendEmail)\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-envelope\"></i>\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "            <button class=\"btn btn-primary btn-circle ws-activity-button disabled\"\r" +
	    "\n" +
	    "                    name=\"confirmByText\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.confirmAppointment(ctrl.ActivityButton.textMessage)\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-comment\"></i>\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-flex-row ws-align-center\">\r" +
	    "\n" +
	    "            <span class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                 <a ng-click=\"ctrl.confirmAppointment()\" name=\"confirmedByOther\">\r" +
	    "\n" +
	    "                     {{ ::\"crm.activities.confirmAppt.ALREADY_LOGGED\" | translate }}\r" +
	    "\n" +
	    "                 </a>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "            <div class=\"ws-flex-auto-size ws-panel-actions\">\r" +
	    "\n" +
	    "                <button class=\"btn btn-quaternary\" ng-click=\"ctrl.cancel()\" name=\"cancelConfirm\">\r" +
	    "\n" +
	    "                    {{ ::\"crm.activities.confirmAppt.CANCEL\" | translate }}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</co-panel>\r" +
	    "\n"
	  );


	  $templateCache.put('app/activities/defaultActivityCard/template.html',
	    "<co-panel co-multi-transclusion\r" +
	    "\n" +
	    "          ribbon=\"true\"\r" +
	    "\n" +
	    "          class=\"ds-card ds-card-hover-accent ds-card-{{ ctrl.status }}\">\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-icon-badge size=\"lg\"\r" +
	    "\n" +
	    "                       status=\"{{ ctrl.status }}\"\r" +
	    "\n" +
	    "                       bordered=\"true\"\r" +
	    "\n" +
	    "                       icon=\"{{ ctrl.getActivityIcon() }}\"></co-icon-badge>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        <span class=\"ws-panel-title\" name=\"oppActivityType:{{ctrl.activityTimelineItem.activity.type.text}}\">{{ ctrl.getTitle() }}</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <co-inline-editable on-edit=\"ctrl.startEdit()\"\r" +
	    "\n" +
	    "                            can-edit=\"ctrl.canEdit()\"\r" +
	    "\n" +
	    "                            name=\"edit:{{ ctrl.status }}:{{ctrl.activityTimelineItem.activity.type.text}}\">\r" +
	    "\n" +
	    "            <span class=\"text-{{ ctrl.status }}\" name=\"oppActivityStatus:{{ ctrl.status }}\">\r" +
	    "\n" +
	    "                {{ ctrl.activityTimelineItem.activity.status.text }}\r" +
	    "\n" +
	    "            </span> /\r" +
	    "\n" +
	    "            <span name=\"oppActivityAssigned\">\r" +
	    "\n" +
	    "                {{ ctrl.activityTimelineItem.activity.assignedTo.text }}\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </co-inline-editable>\r" +
	    "\n" +
	    "        <div ng-if=\"ctrl.singleEmailReceivedWorkNote\" class=\"ws-content-group\">\r" +
	    "\n" +
	    "            {{::'crm.workNote.emailWorkNote.RECEIVED_ON' | translate}} {{::ctrl.activityTimelineItem.workNotes[0].createdDate.format('L LTS')}} /\r" +
	    "\n" +
	    "            <co-checklist-item checked=\"ctrl.attachmentResult.hasAttachment\">\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.multipleAttachment\">\r" +
	    "\n" +
	    "                        {{ ::\"crm.workNote.emailWorkNote.ATTACHMENTS\" | translate }}{{ctrl.attachmentResult.attachmentCount}})\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <span ng-if=\"!ctrl.multipleAttachment\">{{ ::\"crm.workNote.emailWorkNote.ATTACHMENT\" | translate }}</span>\r" +
	    "\n" +
	    "            </co-checklist-item>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-content-group\"\r" +
	    "\n" +
	    "             name=\"oppActivityStatusLog\"\r" +
	    "\n" +
	    "             ng-if=\"ctrl.showStatusLog()\">\r" +
	    "\n" +
	    "            <co-inline-editable on-edit=\"ctrl.startEdit()\"\r" +
	    "\n" +
	    "                                can-edit=\"ctrl.canEdit()\"\r" +
	    "\n" +
	    "                                name=\"editActivity\">\r" +
	    "\n" +
	    "                <co-checklist-item ng-repeat=\"status in ctrl.mappedStatuses\"\r" +
	    "\n" +
	    "                                   ng-if=\"status.selected\"\r" +
	    "\n" +
	    "                                   checked=\"status.selected\">\r" +
	    "\n" +
	    "                    {{status.translationKey | translate}}\r" +
	    "\n" +
	    "                </co-checklist-item>\r" +
	    "\n" +
	    "            </co-inline-editable>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <div class=\"panel-overlay ws-disabled-overlay\" ng-show=\"ctrl.waiting\">\r" +
	    "\n" +
	    "            <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                  md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div ng-class=\"{'ws-deaccent-text' : !ctrl.singleEmailReceivedWorkNote}\">\r" +
	    "\n" +
	    "            <strong ng-if=\"!ctrl.singleEmailReceivedWorkNote\">{{::'crm.salesOpportunity.activities.TASK_DESCRIPTION_LABEL' | translate}}</strong>\r" +
	    "\n" +
	    "            <crm-activity-comment comment=\"ctrl.activityTimelineItem.activity.comment\"\r" +
	    "\n" +
	    "                                  name=\"oppActivityComment\">\r" +
	    "\n" +
	    "            </crm-activity-comment>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <crm-work-note-editor\r" +
	    "\n" +
	    "                ng-if=\"!ctrl.singleEmailReceivedWorkNote && ctrl.activityTimelineItem.workNotes && ctrl.activityTimelineItem.workNotes.length > 0\"\r" +
	    "\n" +
	    "                displayonly=\"true\"\r" +
	    "\n" +
	    "                event-id=\"ctrl.activityTimelineItem.eventId\"\r" +
	    "\n" +
	    "                customer-id=\"ctrl.activityTimelineItem.customerId\"\r" +
	    "\n" +
	    "                disable-info-text=\"ctrl.isWebLead()\"\r" +
	    "\n" +
	    "                work-notes=\"ctrl.activityTimelineItem.workNotes\"></crm-work-note-editor>\r" +
	    "\n" +
	    "        <div ng-if=\"ctrl.showActionButtons()\">\r" +
	    "\n" +
	    "            <br/>\r" +
	    "\n" +
	    "            <button ng-if=\"ctrl.showActionButtons()\"\r" +
	    "\n" +
	    "                    class=\"btn btn-primary\"\r" +
	    "\n" +
	    "                    ng-click=\"!ctrl.activityPermission.edit || ctrl.startTask()\"\r" +
	    "\n" +
	    "                    name=\"primaryActivityAction\"\r" +
	    "\n" +
	    "                    ng-class=\"{'disabled': !ctrl.activityPermission.edit}\">\r" +
	    "\n" +
	    "                {{ctrl.getPrimaryButtonText()}}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "            <button ng-if=\"ctrl.getSecondaryButtonText()\"\r" +
	    "\n" +
	    "                    class=\"btn btn-default\"\r" +
	    "\n" +
	    "                    ng-click=\"!ctrl.activityPermission.edit || ctrl.secondaryButtonClick()\"\r" +
	    "\n" +
	    "                    name=\"secondaryActivityAction\"\r" +
	    "\n" +
	    "                    ng-disabled=\"!ctrl.activityPermission.edit\">\r" +
	    "\n" +
	    "                {{ctrl.getSecondaryButtonText()}}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.isConfirmedAppt()\"\r" +
	    "\n" +
	    "                      class=\"ws-deaccent-text ds-label-appointment-confirmed\"\r" +
	    "\n" +
	    "                      name=\"appointmentConfirmed\">\r" +
	    "\n" +
	    "                    {{::'crm.salesOpportunity.activities.APPOINTMENT_CONFIRMED' | translate}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <a ng-if=\"ctrl.isEmailReceivedComplete() && ctrl.hasWorkNote()\"\r" +
	    "\n" +
	    "           ng-click=\"ctrl.startTask()\">\r" +
	    "\n" +
	    "            <br/>\r" +
	    "\n" +
	    "            <strong>{{ ::\"crm.workNote.emailWorkNote.SUBJECT\" | translate }}</strong>\r" +
	    "\n" +
	    "            <span>{{ctrl.emailSubject}}</span>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <co-inline-editable on-edit=\"ctrl.startEdit()\"\r" +
	    "\n" +
	    "                            can-edit=\"ctrl.canEdit()\"\r" +
	    "\n" +
	    "                            name=\"editActivity\">\r" +
	    "\n" +
	    "            <div class=\"text-muted\" name=\"oppActivityDueDate\">\r" +
	    "\n" +
	    "                <strong class=\"ds-card-date-text\">{{ ctrl.displayDueDate() }}</strong>\r" +
	    "\n" +
	    "                <crm-display-event-type-and-event-id\r" +
	    "\n" +
	    "                        event-type=\"{{ctrl.activityTimelineItem.eventType}}\"\r" +
	    "\n" +
	    "                        event-id=\"{{ctrl.activityTimelineItem.eventId}}\">\r" +
	    "\n" +
	    "                </crm-display-event-type-and-event-id>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </co-inline-editable>\r" +
	    "\n" +
	    "        <div class=\"text-muted\" ng-if=\"!ctrl.isCardDisabled()\">\r" +
	    "\n" +
	    "            <span ng-if=\"ctrl.activityTimelineItem.activity.toDoCode.text\" name=\"oppActivityCode\">\r" +
	    "\n" +
	    "                {{ ctrl.activityTimelineItem.activity.toDoCode.text }} /\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "            <span name=\"oppActivityRanking\">{{ ctrl.activityTimelineItem.activity.rank.text }}</span>\r" +
	    "\n" +
	    "            <i class=\"fa fa-fire\" ng-class=\"{'ws-active': ctrl.isLowRanked()}\"></i>\r" +
	    "\n" +
	    "            <i class=\"fa fa-fire\" ng-class=\"{'ws-active': ctrl.isMediumRanked()}\"></i>\r" +
	    "\n" +
	    "            <i class=\"fa fa-fire\" ng-class=\"{'ws-active': ctrl.isHighRanked()}\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <co-panel-actions-menu ng-if=\"!ctrl.isCardDisabled() && !ctrl.uneditable\"\r" +
	    "\n" +
	    "                               items=\"ctrl.actionItems\"\r" +
	    "\n" +
	    "                               transclude-to=\"actions\"\r" +
	    "\n" +
	    "                               tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                               tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                               tooltip-trigger\r" +
	    "\n" +
	    "                               name=\"oppActivityMenu\"\r" +
	    "\n" +
	    "                               tooltip=\"{{::'crm.salesOpportunity.activities.MORE_ACTIONS' | translate }}\">\r" +
	    "\n" +
	    "        </co-panel-actions-menu>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>\r" +
	    "\n"
	  );


	  $templateCache.put('app/activities/defaultEventStatusLogGroupCard/template.html',
	    "<co-panel co-multi-transclusion\r" +
	    "\n" +
	    "          ribbon=\"true\"\r" +
	    "\n" +
	    "          class=\"ds-card ds-card-hover-accent ds-card-{{ ctrl.status }}\">\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-icon-badge size=\"lg\"\r" +
	    "\n" +
	    "                       status=\"{{ ctrl.status }}\"\r" +
	    "\n" +
	    "                       bordered=\"true\"\r" +
	    "\n" +
	    "                       icon=\"icon-store-visit-icon\">\r" +
	    "\n" +
	    "        </co-icon-badge>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        <span class=\"ws-panel-title\" name=\"oppActivityType:{{ ::ctrl.title }}\">{{ ::ctrl.title }}</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <co-inline-editable on-edit=\"ctrl.startEdit()\"\r" +
	    "\n" +
	    "                            can-edit=\"true\"\r" +
	    "\n" +
	    "                            name=\"edit:{{ ctrl.status }}:{{ctrl.activityTimelineItem.activity.type.text}}\">\r" +
	    "\n" +
	    "            <span class=\"text-{{ ctrl.status }}\" name=\"oppActivityStatus:{{ ctrl.status }}\">\r" +
	    "\n" +
	    "                {{ ::'crm.activities.logStoreVisit.COMPLETED' | translate }}\r" +
	    "\n" +
	    "            </span> /\r" +
	    "\n" +
	    "            <span name=\"oppActivityAssigned\">\r" +
	    "\n" +
	    "                {{ ctrl.activityTimelineItem.eventStatusLogGroup.CreatedBy }}\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </co-inline-editable>\r" +
	    "\n" +
	    "        <div class=\"ws-content-group\"\r" +
	    "\n" +
	    "             name=\"oppActivityStatusLog\">\r" +
	    "\n" +
	    "            <co-inline-editable on-edit=\"ctrl.startEdit()\"\r" +
	    "\n" +
	    "                                can-edit=\"ctrl.editable\"\r" +
	    "\n" +
	    "                                name=\"editActivity\">\r" +
	    "\n" +
	    "                <co-checklist-item ng-repeat=\"status in ctrl.mappedStatuses\"\r" +
	    "\n" +
	    "                                   ng-if=\"status.selected\"\r" +
	    "\n" +
	    "                                   checked=\"status.selected\">\r" +
	    "\n" +
	    "                    {{status.translationKey | translate}}\r" +
	    "\n" +
	    "                </co-checklist-item>\r" +
	    "\n" +
	    "            </co-inline-editable>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <div class=\"panel-overlay ws-disabled-overlay\" ng-show=\"ctrl.waiting\">\r" +
	    "\n" +
	    "            <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                  md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <crm-work-note-editor\r" +
	    "\n" +
	    "                ng-if=\"ctrl.activityTimelineItem.workNotes && ctrl.activityTimelineItem.workNotes.length > 0\"\r" +
	    "\n" +
	    "                displayonly=\"true\"\r" +
	    "\n" +
	    "                event-id=\"ctrl.activityTimelineItem.eventId\"\r" +
	    "\n" +
	    "                customer-id=\"ctrl.activityTimelineItem.customerId\"\r" +
	    "\n" +
	    "                disable-info-text=\"ctrl.isWebLead()\"\r" +
	    "\n" +
	    "                work-notes=\"ctrl.activityTimelineItem.workNotes\">\r" +
	    "\n" +
	    "        </crm-work-note-editor>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <co-inline-editable on-edit=\"ctrl.startEdit()\"\r" +
	    "\n" +
	    "                            can-edit=\"ctrl.editable\"\r" +
	    "\n" +
	    "                            name=\"editActivity\">\r" +
	    "\n" +
	    "            <div class=\"text-muted\" name=\"oppActivityDueDate\">\r" +
	    "\n" +
	    "                <strong class=\"ds-card-date-text\">{{ctrl.displayDueDate()}}</strong>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </co-inline-editable>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>\r" +
	    "\n"
	  );


	  $templateCache.put('app/activities/displayEventTypeAndEventId/template.html',
	    "<div ng-if=\"ctrl.isEventTypeDisplayed()\">\r" +
	    "\n" +
	    "    {{::ctrl.displayEventType()}} #{{::ctrl.eventId}}\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/activities/eventStatusCheckboxes/template.html',
	    "<div class=\"ws-flex-row\">\r" +
	    "\n" +
	    "    <div class=\"ws-flex-auto-size ws-content-group-horizontal\">\r" +
	    "\n" +
	    "        <div class=\"checkbox\" ng-repeat=\"status in ctrl.statuses.slice(0,3)\">\r" +
	    "\n" +
	    "            <input id=\"checkbox-{{status.statusName}}\"\r" +
	    "\n" +
	    "                   type=\"checkbox\"\r" +
	    "\n" +
	    "                   ng-model=\"status.selected\">\r" +
	    "\n" +
	    "            <label for=\"checkbox-{{status.statusName}}\" name=\"eventStatus{{status.statusName}}\">\r" +
	    "\n" +
	    "                            <span class=\"fake-checkbox\">\r" +
	    "\n" +
	    "                                <div class=\"checkbox-selection-mark\"></div>\r" +
	    "\n" +
	    "                            </span>{{ status.translationKey | translate}}\r" +
	    "\n" +
	    "            </label>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "        <div class=\"checkbox\"\r" +
	    "\n" +
	    "             ng-repeat=\"status in ctrl.statuses.slice(3, ctrl.salesOppStatuses.length)\">\r" +
	    "\n" +
	    "            <input id=\"checkbox-{{status.statusName}}\"\r" +
	    "\n" +
	    "                   type=\"checkbox\"\r" +
	    "\n" +
	    "                   ng-model=\"status.selected\">\r" +
	    "\n" +
	    "            <label for=\"checkbox-{{status.statusName}}\" name=\"eventStatus{{status.statusName}}\">\r" +
	    "\n" +
	    "                            <span class=\"fake-checkbox\">\r" +
	    "\n" +
	    "                                <div class=\"checkbox-selection-mark\"></div>\r" +
	    "\n" +
	    "                            </span>{{ status.translationKey | translate}}\r" +
	    "\n" +
	    "            </label>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/activities/eventStatusLogGroupCard/template.html',
	    "<div class=\"relative\">\r" +
	    "\n" +
	    "    <crm-default-event-status-log-group-card\r" +
	    "\n" +
	    "            ng-if=\"!ctrl.isActive\"\r" +
	    "\n" +
	    "            can-edit=\"true\"\r" +
	    "\n" +
	    "            activity-timeline-item=\"ctrl.activityTimelineItem\"\r" +
	    "\n" +
	    "            status=\"ctrl.getStatus()\"\r" +
	    "\n" +
	    "            editable=\"true\">\r" +
	    "\n" +
	    "    </crm-default-event-status-log-group-card>\r" +
	    "\n" +
	    "    <div ng-if=\"ctrl.isActive\">\r" +
	    "\n" +
	    "        <crm-log-store-visit\r" +
	    "\n" +
	    "                ng-if=\"ctrl.showTaskCard(ctrl.ActivityActionType.logStoreVisit)\"\r" +
	    "\n" +
	    "                contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                activity-timeline-item=\"ctrl.activityTimelineItem\"\r" +
	    "\n" +
	    "                on-save=\"ctrl.onSaveSuccess(timelineItem, type)\"\r" +
	    "\n" +
	    "                on-cancel=\"ctrl.onCancel()\">\r" +
	    "\n" +
	    "        </crm-log-store-visit>\r" +
	    "\n" +
	    "        <crm-complete-task-card\r" +
	    "\n" +
	    "                ng-if=\"ctrl.showTaskCard(ctrl.ActivityActionType.completed)\"\r" +
	    "\n" +
	    "                campaignSteps=\"ctrl.activityTimelineItem.campaignSteps\"\r" +
	    "\n" +
	    "                on-close=\"ctrl.onCloseComplete(type)\">\r" +
	    "\n" +
	    "        </crm-complete-task-card>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/activities/logAppointment/template.html',
	    "<form name=\"ctrl.form\" novalidate>\r" +
	    "\n" +
	    "    <co-panel co-multi-transclusion ribbon=\"true\"\r" +
	    "\n" +
	    "              class=\"ds-card ds-card-active ds-card-hover-accent\"\r" +
	    "\n" +
	    "              status=\"{{ ::ctrl.status }}\">\r" +
	    "\n" +
	    "        <div transclude-to=\"title\">\r" +
	    "\n" +
	    "            <span class=\"ws-panel-title\" name=\"logApptTitle\">\r" +
	    "\n" +
	    "                {{ ::ctrl.title | translate }}\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"main\">\r" +
	    "\n" +
	    "            <div class=\"panel-overlay ws-disabled-overlay\" ng-show=\"ctrl.isWaiting\">\r" +
	    "\n" +
	    "                <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                      md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-content-group ws-deaccent-text ws-text-emphasis\">\r" +
	    "\n" +
	    "                <span>{{ ::\"crm.activities.logCall.TASK_COMMENT_LABEL\" | translate }}: </span>\r" +
	    "\n" +
	    "                <crm-activity-comment comment=\"ctrl.activity.comment\" name=\"logApptComment\"></crm-activity-comment>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                <div class=\"ws-flex-row\">\r" +
	    "\n" +
	    "                    <div class=\"ws-flex-auto-size ws-panel-actions\" name=\"appointmentMadeItToStoreQuestion\">\r" +
	    "\n" +
	    "                        <strong>\r" +
	    "\n" +
	    "                            <crm-dynamic-translation\r" +
	    "\n" +
	    "                                    model=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                    translationkey=\"crm.activities.logAppointment.MAKE_IT_TO_STORE_QUESTION\">\r" +
	    "\n" +
	    "                            </crm-dynamic-translation>\r" +
	    "\n" +
	    "                        </strong>\r" +
	    "\n" +
	    "                            <span class=\"ws-status-bad\" ng-if=\"ctrl.showMadeItToStoreRequired(ctrl.form, ctrl.submitted)\">\r" +
	    "\n" +
	    "                                <span class=\"ws-status-text\">\r" +
	    "\n" +
	    "                                    {{ ::\"crm.activities.logAppointment.REQUIRED\" | translate}}\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"radio-inline\">\r" +
	    "\n" +
	    "                    <input id=\"madeItToStore_yes\" name=\"madeItToStore\" type=\"radio\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.madeItToStore\" ng-change=\"ctrl.clearStatuses(ctrl.madeItToStore)\"\r" +
	    "\n" +
	    "                           value=\"Y\" required>\r" +
	    "\n" +
	    "                    <label for=\"madeItToStore_yes\" name=\"madeItToStore_yes\">\r" +
	    "\n" +
	    "                        <span class=\"fake-radio\"></span>{{::\"crm.activities.logAppointment.YES\" | translate}}\r" +
	    "\n" +
	    "                    </label>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"radio-inline\">\r" +
	    "\n" +
	    "                    <input id=\"madeItToStore_no\" name=\"madeItToStore\" type=\"radio\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.madeItToStore\" ng-change=\"ctrl.clearStatuses(ctrl.madeItToStore)\"\r" +
	    "\n" +
	    "                           value=\"N\" required>\r" +
	    "\n" +
	    "                    <label for=\"madeItToStore_no\" name=\"madeItToStore_no\">\r" +
	    "\n" +
	    "                        <span class=\"fake-radio\"></span>{{::\"crm.activities.logAppointment.NO\" | translate}}\r" +
	    "\n" +
	    "                    </label>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"radio-inline\" ng-if=\"ctrl.hasUnreportedShowStatus()\">\r" +
	    "\n" +
	    "                    <input id=\"madeItToStore_unreportedShow\" name=\"madeItToStore\" type=\"radio\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.madeItToStore\" ng-change=\"ctrl.clearStatuses(ctrl.madeItToStore)\"\r" +
	    "\n" +
	    "                           value=\"U\" required>\r" +
	    "\n" +
	    "                    <label for=\"madeItToStore_unreportedShow\" name=\"madeItToStore_unreportedShow\">\r" +
	    "\n" +
	    "                        <span class=\"fake-radio\"></span>{{::\"crm.activities.logAppointment.UNREPORTED_SHOW\" | translate}}\r" +
	    "\n" +
	    "                    </label>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-content-group\" ng-if=\"ctrl.madeAppointment && ctrl.isSalesOpportunityType()\">\r" +
	    "\n" +
	    "                <strong>\r" +
	    "\n" +
	    "                    <crm-dynamic-translation\r" +
	    "\n" +
	    "                            model=\"ctrl.contact\"\r" +
	    "\n" +
	    "                            translationkey=\"crm.activities.logAppointment.DURING_APPOINTMENT_QUESTION\"\r" +
	    "\n" +
	    "                            name=\"duringAppointmentQuestion\">\r" +
	    "\n" +
	    "                    </crm-dynamic-translation>\r" +
	    "\n" +
	    "                </strong>\r" +
	    "\n" +
	    "                <crm-event-status-checkboxes\r" +
	    "\n" +
	    "                        initial-statuses=\"ctrl.activity.eventStatuses\"\r" +
	    "\n" +
	    "                        initial-sales-opp-statuses=\"ctrl.initialSalesOppStatuses\"\r" +
	    "\n" +
	    "                        statuses=\"ctrl.salesOppStatuses\">\r" +
	    "\n" +
	    "                </crm-event-status-checkboxes>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-content-group\" ng-if=\"ctrl.missedAppointment\">\r" +
	    "\n" +
	    "                <div class=\"ws-flex-row\">\r" +
	    "\n" +
	    "                    <div class=\"ws-flex-auto-size ws-panel-actions\">\r" +
	    "\n" +
	    "                        <strong>\r" +
	    "\n" +
	    "                            <crm-dynamic-translation\r" +
	    "\n" +
	    "                                    model=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                    translationkey=\"crm.activities.logAppointment.WHY_NOT_QUESTION\"\r" +
	    "\n" +
	    "                                    name=\"appointmentWhyNotQuestion\">\r" +
	    "\n" +
	    "                            </crm-dynamic-translation>\r" +
	    "\n" +
	    "                        </strong>\r" +
	    "\n" +
	    "                            <span class=\"ws-status-bad\" ng-if=\"ctrl.showWhyNotRequired(ctrl.form, ctrl.submitted)\">\r" +
	    "\n" +
	    "                                <span class=\"ws-status-text\">{{ ::\"crm.activities.logAppointment.REQUIRED\" | translate}}</span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"radio-inline\">\r" +
	    "\n" +
	    "                    <input id=\"didNotShowReason_noShow\" name=\"didNotShowReason\" type=\"radio\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.didNotShowReason\" value=\"no_show\" ng-required=\"ctrl.missedAppointment\">\r" +
	    "\n" +
	    "                    <label for=\"didNotShowReason_noShow\" name=\"didNotShowReason_noShow\">\r" +
	    "\n" +
	    "                        <span class=\"fake-radio\"></span>{{::\"crm.activities.logAppointment.NO_SHOW\" | translate}}\r" +
	    "\n" +
	    "                    </label>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"radio-inline\">\r" +
	    "\n" +
	    "                    <input id=\"didNotShowReason_cancelled\" name=\"didNotShowReason\" type=\"radio\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.didNotShowReason\" value=\"cancelled\" ng-required=\"ctrl.missedAppointment\">\r" +
	    "\n" +
	    "                    <label for=\"didNotShowReason_cancelled\" name=\"didNotShowReason_cancelled\">\r" +
	    "\n" +
	    "                        <span class=\"fake-radio\"></span>{{::\"crm.activities.logAppointment.CANCELLED\" | translate}}\r" +
	    "\n" +
	    "                    </label>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-content-group form-group\" ng-if=\"ctrl.madeAppointment && ctrl.isInOpenStatus() && ctrl.isSalesOpportunityType()\">\r" +
	    "\n" +
	    "                <strong>\r" +
	    "\n" +
	    "                    <crm-dynamic-translation\r" +
	    "\n" +
	    "                            model=\"ctrl.contact\"\r" +
	    "\n" +
	    "                            translationkey=\"crm.activities.logAppointment.SHOWED_UP_ON\">\r" +
	    "\n" +
	    "                    </crm-dynamic-translation>\r" +
	    "\n" +
	    "                </strong>\r" +
	    "\n" +
	    "                <div class=\"ws-flex-row\">\r" +
	    "\n" +
	    "                    <md-datepicker ng-model=\"ctrl.showedUpDate\"\r" +
	    "\n" +
	    "                                   ng-required=\"true\"\r" +
	    "\n" +
	    "                                   md-max-date=\"ctrl.maxShowedUpDate\"\r" +
	    "\n" +
	    "                                   required\r" +
	    "\n" +
	    "                                   name=\"logAppointmentVisitDateInput\"\r" +
	    "\n" +
	    "                                   ng-disabled=\"!ctrl.canEditEventDate\"></md-datepicker>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-flex-row\">\r" +
	    "\n" +
	    "                    <span class=\"form-invalid-message form-invalid-visibility-override\" ng-show=\"ctrl.form.logAppointmentVisitDateInput.$error.maxdate\">{{ ::'crm.activities.logStoreVisit.MAX_DATE_ERROR' | translate}}</span>\r" +
	    "\n" +
	    "                    <span class=\"form-invalid-message form-invalid-visibility-override\" ng-show=\"ctrl.form.logAppointmentVisitDateInput.$error.valid\">{{ ::'crm.activities.logStoreVisit.INVALID_DATE' | translate}}</span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                    <crm-work-note-editor\r" +
	    "\n" +
	    "                            event-id=\"ctrl.activity.eventId\"\r" +
	    "\n" +
	    "                            customer-id=\"ctrl.activity.customerId\"\r" +
	    "\n" +
	    "                            worknote=\"ctrl.newWorkNote\"\r" +
	    "\n" +
	    "                            work-notes=\"ctrl.activity.workNotes\"\r" +
	    "\n" +
	    "                            name=\"workNoteEditor\"></crm-work-note-editor>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\"></div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-flex-row\">\r" +
	    "\n" +
	    "                <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-flex-auto-size ws-panel-actions\">\r" +
	    "\n" +
	    "                    <button class=\"btn btn-quaternary\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.cancel()\" name=\"logApptCancel\">{{ ::\"crm.activities.logCall.CANCEL\" | translate }}\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                    <button class=\"btn btn-secondary\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.save(ctrl.form)\" name=\"logApptSave\">{{ ::\"crm.activities.logCall.SAVE\" | translate }}\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </co-panel>\r" +
	    "\n" +
	    "</form>"
	  );


	  $templateCache.put('app/activities/logOtherTask/template.html',
	    "<form name=\"ctrl.form\" novalidate>\r" +
	    "\n" +
	    "    <co-panel co-multi-transclusion ribbon=\"true\"\r" +
	    "\n" +
	    "              class=\"ds-card ds-card-active ds-card-hover-accent\"\r" +
	    "\n" +
	    "              status=\"{{ ::ctrl.status }}\"\r" +
	    "\n" +
	    "              name=\"createOtherActivityPanel\">\r" +
	    "\n" +
	    "        <div transclude-to=\"title\">\r" +
	    "\n" +
	    "            <span class=\"ws-panel-title\">{{ ::ctrl.title | translate }}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"main\">\r" +
	    "\n" +
	    "            <div class=\"panel-overlay ws-disabled-overlay\" ng-show=\"ctrl.isWaiting\">\r" +
	    "\n" +
	    "                <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                      md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                <label>{{ ::'crm.activities.logOtherTask.OTHER_TASK' | translate}}</label>\r" +
	    "\n" +
	    "                <span class=\"ws-status-bad\" ng-if=\"ctrl.invalidTaskType(ctrl.form.otherTaskType)\">\r" +
	    "\n" +
	    "                    <span class=\"ws-status-text\">{{ ::\"crm.activities.logAppointment.REQUIRED\" | translate}}</span>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <div class=\"ws-flex-row\">\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            name=\"otherTaskType\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.activity.type\"\r" +
	    "\n" +
	    "                            ng-options=\"refDef.text for refDef in ctrl.taskTypes track by refDef.value\"\r" +
	    "\n" +
	    "                            required>\r" +
	    "\n" +
	    "                        <option class=\"ds-card-select-dropdown-default-option\"\r" +
	    "\n" +
	    "                                value=\"\">{{ ::\"crm.activities.logOtherTask.SELECT\" | translate }}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                <crm-work-note-editor\r" +
	    "\n" +
	    "                        event-id=\"ctrl.activity.eventId\"\r" +
	    "\n" +
	    "                        customer-id=\"ctrl.activity.customerId\"\r" +
	    "\n" +
	    "                        worknote=\"ctrl.newWorkNote\"\r" +
	    "\n" +
	    "                        work-notes=\"ctrl.activity.workNotes\">\r" +
	    "\n" +
	    "                </crm-work-note-editor>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-flex-row\">\r" +
	    "\n" +
	    "                <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-flex-auto-size ws-panel-actions\">\r" +
	    "\n" +
	    "                    <button class=\"btn btn-quaternary\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.cancel()\" name=\"logOtherTaskCancel\">{{ ::\"crm.activities.logCall.CANCEL\" | translate\r" +
	    "\n" +
	    "                        }}\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                    <button class=\"btn btn-secondary\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.save()\" name=\"logOtherTaskSave\">{{ ::\"crm.activities.logCall.SAVE\" | translate }}\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </co-panel>\r" +
	    "\n" +
	    "</form>"
	  );


	  $templateCache.put('app/activities/logPhoneCall/phoneScript/phoneScriptModal.html',
	    "<crm-phone-script site-id=\"ctrl.DataApiSettings.getSiteId()\"\r" +
	    "\n" +
	    "                  document-id=\"ctrl.activity.phoneScript.value\"\r" +
	    "\n" +
	    "                  entity-id=\"ctrl.activity.contactId\"\r" +
	    "\n" +
	    "                  event-id=\"ctrl.activity.eventId\"></crm-phone-script>"
	  );


	  $templateCache.put('app/activities/logPhoneCall/phoneScript/phoneScriptTemplate.html',
	    "<iframe id=\"phoneScriptFrame\"\r" +
	    "\n" +
	    "        class=\"ws-absolute-fill\"\r" +
	    "\n" +
	    "        ng-src=\"{{ctrl.buildPhoneScriptUrl()}}\"\r" +
	    "\n" +
	    "        height=\"600\"\r" +
	    "\n" +
	    "        width=\"800\">\r" +
	    "\n" +
	    "</iframe>"
	  );


	  $templateCache.put('app/activities/logPhoneCall/template.html',
	    "<form name=\"ctrl.form\" ng-load=\"ctrl.formLoaded\" novalidate>\r" +
	    "\n" +
	    "    <co-panel co-multi-transclusion ribbon=\"true\"\r" +
	    "\n" +
	    "              class=\"ds-card ds-card-active ds-card-hover-accent\"\r" +
	    "\n" +
	    "              status=\"{{ ::ctrl.status }}\"\r" +
	    "\n" +
	    "              name=\"createPhoneCallPanel\">\r" +
	    "\n" +
	    "        <div transclude-to=\"title\" name=\"activityTitle\">{{::ctrl.title | translate}}</div>\r" +
	    "\n" +
	    "        <section transclude-to=\"main\">\r" +
	    "\n" +
	    "            <div class=\"panel-overlay ws-disabled-overlay\" ng-show=\"ctrl.isWaiting\">\r" +
	    "\n" +
	    "                <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                      md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "                <div class=\"ws-content-group ws-deaccent-text ws-text-emphasis\" ng-if=\"!ctrl.isPersisted\">\r" +
	    "\n" +
	    "                    <span>{{ ::\"crm.activities.logCall.TASK_COMMENT_LABEL\" | translate }}: </span>\r" +
	    "\n" +
	    "                    <crm-activity-comment comment=\"ctrl.activity.comment\"\r" +
	    "\n" +
	    "                                          name=\"oppActivityComment\">\r" +
	    "\n" +
	    "                    </crm-activity-comment>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\" ng-if=\"ctrl.activity.listenToCallInfo\">\r" +
	    "\n" +
	    "                    <div ng-repeat=\"infoField in ctrl.activity.listenToCallInfo.callInfoFields\">\r" +
	    "\n" +
	    "                        <strong>{{::infoField.title}}: </strong>\r" +
	    "\n" +
	    "                        {{::infoField.value}}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div>\r" +
	    "\n" +
	    "                        <button class=\"btn btn-primary\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.openListenToCallWindow()\">{{ ::\"crm.activities.logCall.LISTEN_TO_CALL\" | translate }}</button>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\" ng-if=\"ctrl.hasPhoneScript()\">\r" +
	    "\n" +
	    "                    <a ng-click=\"ctrl.showPhoneScriptModal()\" name=\"viewPhoneScript\">\r" +
	    "\n" +
	    "                        {{ ::\"crm.activities.logCall.VIEW_PHONE_SCRIPT\" | translate }}\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                    <strong>\r" +
	    "\n" +
	    "                        <crm-dynamic-translation\r" +
	    "\n" +
	    "                                ng-if=\"!ctrl.contact.isOrganization()\"\r" +
	    "\n" +
	    "                                model=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                translationkey=\"crm.activities.logCall.PHONE_LIST_LABEL\">\r" +
	    "\n" +
	    "                        </crm-dynamic-translation>\r" +
	    "\n" +
	    "                        <crm-dynamic-translation\r" +
	    "\n" +
	    "                                ng-if=\"ctrl.contact.isOrganization()\"\r" +
	    "\n" +
	    "                                model=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                translationkey=\"crm.activities.logCall.COMPANY_PHONE_LIST_LABEL\">\r" +
	    "\n" +
	    "                        </crm-dynamic-translation>\r" +
	    "\n" +
	    "                    </strong>\r" +
	    "\n" +
	    "                    <crm-contact-phone-numbers\r" +
	    "\n" +
	    "                            letter-only=\"true\"\r" +
	    "\n" +
	    "                            contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                            event-id=\"ctrl.activity.eventId\">\r" +
	    "\n" +
	    "                    </crm-contact-phone-numbers>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\" ng-hide=\"ctrl.isPersisted\">\r" +
	    "\n" +
	    "                    <strong name=\"inboundCallLabel\">\r" +
	    "\n" +
	    "                        {{ ::\"crm.activities.logCall.INBOUND_OUTBOUND_LABEL\" | translate}}\r" +
	    "\n" +
	    "                    </strong>\r" +
	    "\n" +
	    "                    <span class=\"ws-status-bad\" ng-if=\"ctrl.submitted && ctrl.form.inboundOutbound.$error.required\">\r" +
	    "\n" +
	    "                        <span class=\"ws-status-text\">{{ ::\"crm.activities.logAppointment.REQUIRED\" | translate}}</span>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <div name=\"inboundCallRadioButtons\">\r" +
	    "\n" +
	    "                        <div class=\"radio-inline\">\r" +
	    "\n" +
	    "                            <input id=\"inbound_outbound_outbound\" name=\"inboundOutbound\" type=\"radio\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.callType\" ng-value=\"ctrl.activityType.outboundCall\" required>\r" +
	    "\n" +
	    "                            <label for=\"inbound_outbound_outbound\" name=\"inbound_outbound_outbound\">\r" +
	    "\n" +
	    "                                <span class=\"fake-radio\"></span>{{::\"crm.activities.logCall.OUTBOUND_LABEL\" | translate}}\r" +
	    "\n" +
	    "                            </label>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"radio-inline\">\r" +
	    "\n" +
	    "                            <input id=\"inbound_outbound_inbound\" name=\"inboundOutbound\" type=\"radio\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.callType\" ng-value=\"ctrl.activityType.inboundCall\" required>\r" +
	    "\n" +
	    "                            <label for=\"inbound_outbound_inbound\" name=\"inbound_outbound_inbound\">\r" +
	    "\n" +
	    "                                <span class=\"fake-radio\"></span>{{::\"crm.activities.logCall.INBOUND_LABEL\" | translate}}\r" +
	    "\n" +
	    "                            </label>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\" ng-if=\"ctrl.isInbound() || ctrl.isOutbound()\">\r" +
	    "\n" +
	    "                    <strong>\r" +
	    "\n" +
	    "                        <crm-dynamic-translation\r" +
	    "\n" +
	    "                                model=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                translationkey=\"crm.activities.logCall.CALL_RESULT_LABEL\"\r" +
	    "\n" +
	    "                                name=\"resultTitle\">\r" +
	    "\n" +
	    "                        </crm-dynamic-translation>\r" +
	    "\n" +
	    "                    </strong>\r" +
	    "\n" +
	    "                    <span class=\"ws-status-bad\" ng-if=\"ctrl.submitted && ctrl.form.callResult.$error.required\">\r" +
	    "\n" +
	    "                        <span class=\"ws-status-text\">{{ ::\"crm.activities.logAppointment.REQUIRED\" | translate}}</span>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <div name=\"phoneCallRadioButtons\">\r" +
	    "\n" +
	    "                        <div class=\"radio-inline\">\r" +
	    "\n" +
	    "                            <input id=\"call_result_spoke_to_customer\" name=\"callResult\" type=\"radio\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.callStatus\" ng-value=\"ctrl.activityStatus.completed\" required>\r" +
	    "\n" +
	    "                            <label for=\"call_result_spoke_to_customer\" name=\"spokeToCustomer\">\r" +
	    "\n" +
	    "                                <span class=\"fake-radio\"></span>{{::\"crm.activities.logCall.CALL_RESULT_SPOKE\" | translate}}\r" +
	    "\n" +
	    "                            </label>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"radio-inline\" ng-if=\"ctrl.isInbound()\">\r" +
	    "\n" +
	    "                            <input id=\"call_result_missed_call\" name=\"callResult\" type=\"radio\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.callStatus\" ng-value=\"ctrl.activityStatus.noAnswer\" required>\r" +
	    "\n" +
	    "                            <label for=\"call_result_missed_call\" name=\"missedCall\">\r" +
	    "\n" +
	    "                                <span class=\"fake-radio\"></span>{{::\"crm.activities.logCall.CALL_RESULT_MISSED_CALL\" | translate}}\r" +
	    "\n" +
	    "                            </label>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"radio-inline\" ng-if=\"ctrl.isOutbound()\">\r" +
	    "\n" +
	    "                            <input id=\"call_result_left_message\" name=\"callResult\" type=\"radio\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.callStatus\" ng-value=\"ctrl.activityStatus.leftMessage\" required>\r" +
	    "\n" +
	    "                            <label for=\"call_result_left_message\" name=\"leftMessage\">\r" +
	    "\n" +
	    "                                <span class=\"fake-radio\"></span>{{::\"crm.activities.logCall.CALL_RESULT_LEFT_MESSAGE\" | translate}}\r" +
	    "\n" +
	    "                            </label>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"radio-inline\" ng-if=\"ctrl.isOutbound()\">\r" +
	    "\n" +
	    "                            <input id=\"call_result_cant_leave_message\" name=\"callResult\" type=\"radio\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.callStatus\" ng-value=\"ctrl.activityStatus.noAnswer\" required>\r" +
	    "\n" +
	    "                            <label for=\"call_result_cant_leave_message\" name=\"unableLeaveMessage\">\r" +
	    "\n" +
	    "                                <span class=\"fake-radio\"></span>{{::\"crm.activities.logCall.CALL_RESULT_CANT_EVEN_LEAVE_MESSAGE\" | translate}}\r" +
	    "\n" +
	    "                            </label>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"radio-inline\"  ng-if=\"ctrl.isOutbound()\">\r" +
	    "\n" +
	    "                            <input id=\"call_result_bad_number\" name=\"callResult\" type=\"radio\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.callStatus\" ng-value=\"ctrl.activityStatus.badNumber\" required>\r" +
	    "\n" +
	    "                            <label for=\"call_result_bad_number\" name=\"badPhoneNumber\">\r" +
	    "\n" +
	    "                                <span class=\"fake-radio\"></span>{{::\"crm.activities.logCall.CALL_RESULT_BAD_PHONE_NUMBER\" | translate}}\r" +
	    "\n" +
	    "                            </label>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                    <crm-work-note-editor\r" +
	    "\n" +
	    "                            event-id=\"ctrl.activity.eventId\"\r" +
	    "\n" +
	    "                            customer-id=\"ctrl.activity.customerId\"\r" +
	    "\n" +
	    "                            worknote=\"ctrl.newWorkNote\"\r" +
	    "\n" +
	    "                            work-notes=\"ctrl.activity.workNotes\"\r" +
	    "\n" +
	    "                            name=\"workNotes\"></crm-work-note-editor>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\"></div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-flex-row\">\r" +
	    "\n" +
	    "                <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-flex-auto-size ws-panel-actions\">\r" +
	    "\n" +
	    "                    <button class=\"btn btn-quaternary\"\r" +
	    "\n" +
	    "                            name=\"createPhoneCallCancel\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.cancel()\"\r" +
	    "\n" +
	    "                            ng-if=\"ctrl.canCancel\">{{ ::\"crm.activities.logCall.CANCEL\" | translate }}\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                    <button class=\"btn btn-secondary\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.savePhoneCall()\" name=\"createPhoneCallSave\">{{ ::\"crm.activities.logCall.SAVE\" |\r" +
	    "\n" +
	    "                        translate }}\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </section>\r" +
	    "\n" +
	    "        <section transclude-to=\"secondary\" class=\"ws-content-group\">\r" +
	    "\n" +
	    "            <div class=\"form-group ws-inline-group ws-no-gutters\">\r" +
	    "\n" +
	    "                <label>{{ ::'crm.activities.setAppointment.ASSIGNED_TO' | translate}}</label>\r" +
	    "\n" +
	    "                <select class=\"form-control\"\r" +
	    "\n" +
	    "                        name=\"createPhoneCallAssignedTo\"\r" +
	    "\n" +
	    "                        ng-model=\"ctrl.activity.assignedTo\"\r" +
	    "\n" +
	    "                        ng-options=\"refDef.text for refDef in ctrl.assignedTos track by refDef.value\"\r" +
	    "\n" +
	    "                        required>\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </section>\r" +
	    "\n" +
	    "    </co-panel>\r" +
	    "\n" +
	    "</form>"
	  );


	  $templateCache.put('app/activities/logStoreVisit/template.html',
	    "<form novalidate name=\"ctrl.form\">\r" +
	    "\n" +
	    "    <co-panel co-multi-transclusion ribbon=\"true\"\r" +
	    "\n" +
	    "              class=\"ds-card ds-card-active ds-card-hover-accent\"\r" +
	    "\n" +
	    "              status=\"{{ ::ctrl.getStatus() }}\"\r" +
	    "\n" +
	    "              name=\"createStoreVisitPanel\">\r" +
	    "\n" +
	    "        <div transclude-to=\"title\">\r" +
	    "\n" +
	    "            <span class=\"ws-panel-title\" name=\"logStoreVisitTitle\" ng-if=\"!ctrl.isPersisted()\">{{ ::\"crm.activities.logStoreVisit.LOG_A_STORE_VISIT\" | translate }}</span>\r" +
	    "\n" +
	    "            <span class=\"ws-panel-title\" name=\"editStoreVisitTitle\" ng-if=\"ctrl.isPersisted()\">{{ ::\"crm.activities.logStoreVisit.EDIT_LOGGED_STORE_VISIT\" | translate }}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"main\">\r" +
	    "\n" +
	    "            <div class=\"panel-overlay ws-disabled-overlay\" ng-show=\"ctrl.isWaiting\">\r" +
	    "\n" +
	    "                <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-content-group form-group\" ng-if=\"!ctrl.isPersisted()\">\r" +
	    "\n" +
	    "                <label>{{ ::'crm.activities.logStoreVisit.STORE_VISIT_OCCURRED_ON' | translate}}</label>\r" +
	    "\n" +
	    "                <div class=\"ws-flex-row\">\r" +
	    "\n" +
	    "                    <md-datepicker ng-model=\"ctrl.newDueDate\"\r" +
	    "\n" +
	    "                                   ng-required=\"true\"\r" +
	    "\n" +
	    "                                   md-max-date=\"ctrl.maxDueDate\"\r" +
	    "\n" +
	    "                                   required\r" +
	    "\n" +
	    "                                   name=\"editStoreVisitDateInput\"\r" +
	    "\n" +
	    "                                    ng-disabled=\"!ctrl.canEditEventDate\"></md-datepicker>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-flex-row\">\r" +
	    "\n" +
	    "                    <span class=\"form-invalid-message form-invalid-visibility-override\" ng-show=\"ctrl.form.editStoreVisitDateInput.$error.maxdate\">{{ ::'crm.activities.logStoreVisit.MAX_DATE_ERROR' | translate}}</span>\r" +
	    "\n" +
	    "                    <span class=\"form-invalid-message form-invalid-visibility-override\" ng-show=\"ctrl.form.editStoreVisitDateInput.$error.valid\">{{ ::'crm.activities.logStoreVisit.INVALID_DATE' | translate}}</span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                <strong>\r" +
	    "\n" +
	    "                    <crm-dynamic-translation\r" +
	    "\n" +
	    "                            model=\"ctrl.contact\"\r" +
	    "\n" +
	    "                            translationkey=\"crm.activities.logStoreVisit.DURING_STORE_VISIT_QUESTION\">\r" +
	    "\n" +
	    "                    </crm-dynamic-translation>\r" +
	    "\n" +
	    "                </strong>\r" +
	    "\n" +
	    "                <crm-event-status-checkboxes\r" +
	    "\n" +
	    "                        initial-statuses=\"ctrl.activityTimelineItem.eventStatuses\"\r" +
	    "\n" +
	    "                        initial-sales-opp-statuses=\"ctrl.initialSalesOppStatuses\"\r" +
	    "\n" +
	    "                        statuses=\"ctrl.salesOppStatuses\">\r" +
	    "\n" +
	    "                </crm-event-status-checkboxes>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                <crm-work-note-editor\r" +
	    "\n" +
	    "                        worknote=\"ctrl.newWorkNote\"\r" +
	    "\n" +
	    "                        event-id=\"ctrl.activityTimelineItem.eventId\"\r" +
	    "\n" +
	    "                        customer-id=\"ctrl.activityTimelineItem.customerId\"\r" +
	    "\n" +
	    "                        work-notes=\"ctrl.activityTimelineItem.workNotes\">\r" +
	    "\n" +
	    "                </crm-work-note-editor>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-flex-row\">\r" +
	    "\n" +
	    "                <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-flex-auto-size ws-panel-actions\">\r" +
	    "\n" +
	    "                    <button class=\"btn btn-quaternary\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.cancel()\"\r" +
	    "\n" +
	    "                            ng-if=\"ctrl.canCancel\"\r" +
	    "\n" +
	    "                            name=\"logStoreVisitCancel\">{{ ::\"crm.activities.logCall.CANCEL\" | translate }}\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                    <button class=\"btn btn-secondary\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.save()\"\r" +
	    "\n" +
	    "                            name=\"logStoreVisitSave\">{{ ::\"crm.activities.logCall.SAVE\" | translate }}\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </co-panel>\r" +
	    "\n" +
	    "</form>"
	  );


	  $templateCache.put('app/activities/openActivities/template.html',
	    "<div class=\"panel-title\">\r" +
	    "\n" +
	    "    <strong>\r" +
	    "\n" +
	    "        <crm-dynamic-translation\r" +
	    "\n" +
	    "                model=\"ctrl.openActivityTimelineItems\"\r" +
	    "\n" +
	    "                name=\"openActivitiesTitle\"\r" +
	    "\n" +
	    "                translationKey=\"crm.activities.openActivities.TITLE\">\r" +
	    "\n" +
	    "        </crm-dynamic-translation>\r" +
	    "\n" +
	    "    </strong>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "<section ng-if=\"ctrl.openActivityTimelineItems.length === 0\">\r" +
	    "\n" +
	    "    {{ ::\"crm.activities.openActivities.EMPTY\" | translate }}\r" +
	    "\n" +
	    "</section>\r" +
	    "\n" +
	    "<div ng-repeat=\"activityTimelineItem in ctrl.openActivityTimelineItems\" ng-click=\"ctrl.onCardClick(activityTimelineItem)\">\r" +
	    "\n" +
	    "    <crm-activity-card\r" +
	    "\n" +
	    "            activity-timeline-item=\"activityTimelineItem\"\r" +
	    "\n" +
	    "            ng-if=\"activityTimelineItem.activity\">\r" +
	    "\n" +
	    "    </crm-activity-card>\r" +
	    "\n" +
	    "    <crm-event-status-log-group-card\r" +
	    "\n" +
	    "            ng-if=\"activityTimelineItem.eventStatusLogGroup\"\r" +
	    "\n" +
	    "            activity-timeline-item=\"activityTimelineItem\">\r" +
	    "\n" +
	    "    </crm-event-status-log-group-card>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/activities/quickFilterBar/template.html',
	    "<div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "    <ul class=\"ws-advanced-search-options\">\r" +
	    "\n" +
	    "        <li>\r" +
	    "\n" +
	    "            <div>\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.showOpportunityFilter()\" class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a ns-popover\r" +
	    "\n" +
	    "                       ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                       ns-popover-template=\"app/activities/quickFilterBar/templates/opportunityTypePopup.html\"\r" +
	    "\n" +
	    "                       ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "                       ns-popover-timeout=\"100000\"\r" +
	    "\n" +
	    "                       class=\"toggle-inner-panel-link ws-link\">\r" +
	    "\n" +
	    "                        {{::'crm.salesOpportunity.filter_bar.headers.OPPORTUNITY' | translate}}\r" +
	    "\n" +
	    "                        {{ ctrl.activityCounts.selectedTypeFiltersCount }}\r" +
	    "\n" +
	    "                        <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a ns-popover\r" +
	    "\n" +
	    "                       ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                       ns-popover-template=\"app/activities/quickFilterBar/templates/typePopup.html\"\r" +
	    "\n" +
	    "                       ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "                       ns-popover-timeout=\"100000\"\r" +
	    "\n" +
	    "                       class=\"toggle-inner-panel-link ws-link\" name=\"activityFilterByType\">\r" +
	    "\n" +
	    "                        {{::'crm.salesOpportunity.filter_bar.headers.TYPE' | translate}}\r" +
	    "\n" +
	    "                        {{ ctrl.activityCounts.selectedTypeFiltersCount }}\r" +
	    "\n" +
	    "                        <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a ns-popover\r" +
	    "\n" +
	    "                       ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                       ns-popover-template=\"app/activities/quickFilterBar/templates/assignedToPopup.html\"\r" +
	    "\n" +
	    "                       ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "                       ns-popover-timeout=\"100000\"\r" +
	    "\n" +
	    "                       class=\"toggle-inner-panel-link ws-link\" name=\"activityFilterByAssignedTo\">\r" +
	    "\n" +
	    "                        {{::'crm.salesOpportunity.filter_bar.headers.ASSIGNED_TO' | translate}}\r" +
	    "\n" +
	    "                        {{ ctrl.activityCounts.selectedAssignedToFiltersCount }}\r" +
	    "\n" +
	    "                        <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a ns-popover\r" +
	    "\n" +
	    "                       ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                       ns-popover-template=\"app/activities/quickFilterBar/templates/statusPopup.html\"\r" +
	    "\n" +
	    "                       ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "                       ns-popover-timeout=\"100000\"\r" +
	    "\n" +
	    "                       class=\"toggle-inner-panel-link ws-link\" name=\"activityFilterByStatus\">\r" +
	    "\n" +
	    "                        {{::'crm.salesOpportunity.filter_bar.headers.TASK_STATUS' | translate}}\r" +
	    "\n" +
	    "                        {{ ctrl.activityCounts.selectedStatusFiltersCount }}\r" +
	    "\n" +
	    "                        <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <a class=\"fa fa-refresh\" ng-click=\"ctrl.refreshTimeline()\"></a>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </li>\r" +
	    "\n" +
	    "        <li class=\"ws-advanced-search-option quick-search-sort-dropdown\">\r" +
	    "\n" +
	    "            <a ns-popover name=\"sort-dropdown\"\r" +
	    "\n" +
	    "               ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "               ns-popover-template=\"app/activities/quickFilterBar/templates/sortOptions.html\"\r" +
	    "\n" +
	    "               ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "               ns-popover-timeout=\"100000\"\r" +
	    "\n" +
	    "               ns-popover-placement=\"auto|center\"\r" +
	    "\n" +
	    "               class=\"toggle-inner-panel-link ws-link\">\r" +
	    "\n" +
	    "                {{::'crm.salesOpportunity.tabs.SORT' | translate}}: {{ ctrl.selectedSort.name }}\r" +
	    "\n" +
	    "                <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "            </a>\r" +
	    "\n" +
	    "        </li>\r" +
	    "\n" +
	    "    </ul>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/activities/quickFilterBar/templates/assignedToPopup.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div ng-if=\"!isMapEmpty(ctrl.activityCounts.assignedToCountMap)\"\r" +
	    "\n" +
	    "         ng-repeat=\"(key, value) in ctrl.activityCounts.assignedToCountMap\">\r" +
	    "\n" +
	    "        <div class=\"ws-popover-item\">\r" +
	    "\n" +
	    "            <div class=\"checkbox\">\r" +
	    "\n" +
	    "                <input id=\"checkbox-id-status-filter-{{key}}\"\r" +
	    "\n" +
	    "                       type=\"checkbox\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.selectedAssignedToFilters[key]\"\r" +
	    "\n" +
	    "                       ng-click=\"hidePopover();ctrl.toggleFilterListValue(ctrl.selectedAssignedToFilters, key);\">\r" +
	    "\n" +
	    "                <label for=\"checkbox-id-status-filter-{{key}}\" name=\"activityFilterAssignedToCheckbox\">\r" +
	    "\n" +
	    "                        <span class=\"fake-checkbox\">\r" +
	    "\n" +
	    "                            <div class=\"checkbox-selection-mark\"></div>\r" +
	    "\n" +
	    "                        </span> {{key}} ({{value}})\r" +
	    "\n" +
	    "                </label>\r" +
	    "\n" +
	    "                <div/>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div ng-if=\"ctrl.isMapEmpty(ctrl.activityCounts.assignedToCountMap)\">\r" +
	    "\n" +
	    "        <div class=\"ws-popover-item\"\r" +
	    "\n" +
	    "             ng-click=\"hidePopover()\">\r" +
	    "\n" +
	    "            {{::'crm.salesOpportunity.activities.NO_ACTIVITIES' | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/activities/quickFilterBar/templates/opportunityTypePopup.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div ng-if=\"!isMapEmpty(ctrl.activityCounts.opportunityCountMap)\"\r" +
	    "\n" +
	    "         ng-repeat=\"(key, value) in ctrl.activityCounts.opportunityCountMap\">\r" +
	    "\n" +
	    "        <div class=\"ws-popover-item\">\r" +
	    "\n" +
	    "            <div class=\"checkbox\">\r" +
	    "\n" +
	    "                <input id=\"checkbox-id-status-filter-{{key}}\"\r" +
	    "\n" +
	    "                       type=\"checkbox\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.selectedOpportunityFilters[key]\"\r" +
	    "\n" +
	    "                       ng-click=\"hidePopover();ctrl.toggleFilterListValue(ctrl.selectedOpportunityFilters, key);\">\r" +
	    "\n" +
	    "                <label for=\"checkbox-id-status-filter-{{key}}\">\r" +
	    "\n" +
	    "                        <span class=\"fake-checkbox\">\r" +
	    "\n" +
	    "                            <div class=\"checkbox-selection-mark\"></div>\r" +
	    "\n" +
	    "                        </span> {{ctrl.displayOpportunityLabel(key)}} ({{value}})\r" +
	    "\n" +
	    "                </label>\r" +
	    "\n" +
	    "                <div/>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div ng-if=\"ctrl.isMapEmpty(ctrl.activityCounts.opportunityCountMap)\">\r" +
	    "\n" +
	    "        <div class=\"ws-popover-item\"\r" +
	    "\n" +
	    "             ng-click=\"hidePopover()\">\r" +
	    "\n" +
	    "            {{::'crm.salesOpportunity.activities.NO_ACTIVITIES' | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "\r" +
	    "\n"
	  );


	  $templateCache.put('app/activities/quickFilterBar/templates/sortOptions.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"updated-new\" ng-click=\"hidePopover();ctrl.setSelectedSort(ctrl.CrmConstants.LAST_UPDATED_NEWEST)\">\r" +
	    "\n" +
	    "        {{::'crm.salesOpportunity.filter_bar.sort_types.LAST_UPDATED_NEWEST' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"updated-old\" ng-click=\"hidePopover();ctrl.setSelectedSort(ctrl.CrmConstants.LAST_UPDATED_OLDEST)\">\r" +
	    "\n" +
	    "        {{::'crm.salesOpportunity.filter_bar.sort_types.LAST_UPDATED_OLDEST' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/activities/quickFilterBar/templates/statusPopup.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div ng-if=\"!isMapEmpty(ctrl.activityCounts.statusCountMap)\"\r" +
	    "\n" +
	    "         ng-repeat=\"(key, value) in ctrl.activityCounts.statusCountMap\">\r" +
	    "\n" +
	    "        <div class=\"ws-popover-item\">\r" +
	    "\n" +
	    "            <div class=\"checkbox\">\r" +
	    "\n" +
	    "                <input id=\"checkbox-id-status-filter-{{key}}\"\r" +
	    "\n" +
	    "                       type=\"checkbox\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.selectedStatusFilters[key]\"\r" +
	    "\n" +
	    "                       ng-click=\"hidePopover();ctrl.toggleFilterListValue(ctrl.selectedStatusFilters, key);\">\r" +
	    "\n" +
	    "                <label for=\"checkbox-id-status-filter-{{key}}\" name=\"activityFilterStatus{{key}}\">\r" +
	    "\n" +
	    "                        <span class=\"fake-checkbox\">\r" +
	    "\n" +
	    "                            <div class=\"checkbox-selection-mark\"></div>\r" +
	    "\n" +
	    "                        </span> {{key}} ({{value}})\r" +
	    "\n" +
	    "                </label>\r" +
	    "\n" +
	    "                <div/>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div ng-if=\"ctrl.isMapEmpty(ctrl.activityCounts.statusCountMap)\">\r" +
	    "\n" +
	    "        <div class=\"ws-popover-item\"\r" +
	    "\n" +
	    "             ng-click=\"hidePopover()\">\r" +
	    "\n" +
	    "            {{::'crm.salesOpportunity.activities.NO_ACTIVITIES' | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/activities/quickFilterBar/templates/typePopup.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div ng-if=\"!isMapEmpty(ctrl.activityCounts.typeCountMap)\"\r" +
	    "\n" +
	    "         ng-repeat=\"(key, value) in ctrl.activityCounts.typeCountMap\">\r" +
	    "\n" +
	    "        <div class=\"ws-popover-item\">\r" +
	    "\n" +
	    "            <div class=\"checkbox\">\r" +
	    "\n" +
	    "                <input id=\"checkbox-id-status-filter-{{key}}\"\r" +
	    "\n" +
	    "                       type=\"checkbox\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.selectedTypeFilters[key]\"\r" +
	    "\n" +
	    "                       ng-click=\"hidePopover();ctrl.toggleFilterListValue(ctrl.selectedTypeFilters, key);\">\r" +
	    "\n" +
	    "                <label for=\"checkbox-id-status-filter-{{key}}\" name=\"activityFilterType{{key}}\">\r" +
	    "\n" +
	    "                        <span class=\"fake-checkbox\">\r" +
	    "\n" +
	    "                            <div class=\"checkbox-selection-mark\"></div>\r" +
	    "\n" +
	    "                        </span> {{key}} ({{value}})\r" +
	    "\n" +
	    "                </label>\r" +
	    "\n" +
	    "                <div/>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div ng-if=\"ctrl.isMapEmpty(ctrl.activityCounts.typeCountMap)\">\r" +
	    "\n" +
	    "        <div class=\"ws-popover-item\"\r" +
	    "\n" +
	    "             ng-click=\"hidePopover()\">\r" +
	    "\n" +
	    "            {{::'crm.salesOpportunity.activities.NO_ACTIVITIES' | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/activities/setAppt/template.html',
	    "<form name=\"ctrl.form\" novalidate>\r" +
	    "\n" +
	    "    <co-panel co-multi-transclusion\r" +
	    "\n" +
	    "              ribbon=\"true\"\r" +
	    "\n" +
	    "              class=\"ds-card ds-card-active ds-card-hover-accent\"\r" +
	    "\n" +
	    "              status=\"open\"\r" +
	    "\n" +
	    "              name=\"createActivityPanel\">\r" +
	    "\n" +
	    "        <span transclude-to=\"title\" name=\"appointmentTitle\">{{ ::ctrl.title | translate}}</span>\r" +
	    "\n" +
	    "        <span transclude-to=\"main\">\r" +
	    "\n" +
	    "            <div class=\"panel-overlay ws-disabled-overlay\" ng-show=\"ctrl.isWaiting\">\r" +
	    "\n" +
	    "                <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                      md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{ ::'crm.activities.setAppointment.DATE' | translate}}</label>\r" +
	    "\n" +
	    "                    <p class=\"transparent-input-group\">\r" +
	    "\n" +
	    "                        <input class=\"form-control\"\r" +
	    "\n" +
	    "                            type=\"text\"\r" +
	    "\n" +
	    "                            uib-datepicker-popup\r" +
	    "\n" +
	    "                            name=\"createActivityDateInput\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.newDueDate\"\r" +
	    "\n" +
	    "                            show-button-bar=\"false\"\r" +
	    "\n" +
	    "                            is-open=\"ctrl.datePickerOpen\"\r" +
	    "\n" +
	    "                            required>\r" +
	    "\n" +
	    "                        <span class=\"input-group-addon\" ng-click=\"ctrl.openDatePicker()\">\r" +
	    "\n" +
	    "                            <i class=\"fa fa-calendar master-panel-icon\"></i>\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                    </p>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{ ::'crm.activities.setAppointment.START_TIME' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control crm-required\"\r" +
	    "\n" +
	    "                         name=\"createActivityStartTime\"\r" +
	    "\n" +
	    "                         ng-model=\"ctrl.newDueTime\"\r" +
	    "\n" +
	    "                         ng-options=\"refDef.text for refDef in ctrl.startTimes() track by refDef.value\"\r" +
	    "\n" +
	    "                         required>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-6 form-group\">\r" +
	    "\n" +
	    "                    <label>{{ ::'crm.activities.setAppointment.ASSIGNED_TO' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                        name=\"createActivityAssignedTo\"\r" +
	    "\n" +
	    "                        ng-model=\"ctrl.activity.assignedTo\"\r" +
	    "\n" +
	    "                        ng-options=\"refDef.text for refDef in ctrl.assignedTos() track by refDef.value\"\r" +
	    "\n" +
	    "                        required>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-12 form-group\">\r" +
	    "\n" +
	    "                    <label>{{ ::'crm.activities.setAppointment.TASK_COMMENTS' | translate}}</label>\r" +
	    "\n" +
	    "                    {{ ::'crm.activities.setAppointment.OPTIONAL' | translate}}\r" +
	    "\n" +
	    "                    <textarea class=\"form-control\"\r" +
	    "\n" +
	    "                              rows=\"3\"\r" +
	    "\n" +
	    "                              maxlength=\"{{::ctrl.MAX_COMMENT_LENGTH}}\"\r" +
	    "\n" +
	    "                              placeholder=\"{{ ::'crm.activities.setAppointment.ADD_A_COMMENT' | translate}}\"\r" +
	    "\n" +
	    "                              ng-model=\"ctrl.activity.comment\"\r" +
	    "\n" +
	    "                              name=\"createActivityComments\"></textarea>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-if=\"ctrl.showAllFields\">\r" +
	    "\n" +
	    "                <div class=\"row\">\r" +
	    "\n" +
	    "                    <div class=\"col-xs-6 form-group\">\r" +
	    "\n" +
	    "                        <label>{{ ::'crm.activities.setAppointment.RANKING' | translate}}</label>\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.activity.rank\"\r" +
	    "\n" +
	    "                                ng-options=\"rank.text for rank in ctrl.ranks() track by rank.value\"\r" +
	    "\n" +
	    "                                name=\"createActivityRanking\">\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-xs-6 form-group\">\r" +
	    "\n" +
	    "                        <label>{{ ::'crm.activities.setAppointment.TASK_CATEGORY' | translate}}</label>\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.activity.toDoCode\"\r" +
	    "\n" +
	    "                                ng-options=\"task.text for task in ctrl.taskCategories() track by task.value\"\r" +
	    "\n" +
	    "                                name=\"createActivityCategory\">\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"row\" ng-if=\"!ctrl.isPersisted && !ctrl.isReminder()\">\r" +
	    "\n" +
	    "                    <div class=\"col-xs-6 form-group\">\r" +
	    "\n" +
	    "                        <label>{{ ::'crm.activities.setAppointment.CREATED_BY' | translate}}</label>\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.activity.createdBy\"\r" +
	    "\n" +
	    "                                ng-options=\"assignedTo.text for assignedTo in ctrl.assignedTos() track by assignedTo.value\"\r" +
	    "\n" +
	    "                                name=\"createActivityCreatedBy\">\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-panel-actions\">\r" +
	    "\n" +
	    "              <button class=\"btn btn-quaternary\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.cancel()\"\r" +
	    "\n" +
	    "                      name=\"createActivityCancel\">{{ ::'crm.activities.setAppointment.CANCEL' | translate}}</button>\r" +
	    "\n" +
	    "            <button ng-if=\"!ctrl.isPersisted\"\r" +
	    "\n" +
	    "                    class=\"btn btn-primary\"\r" +
	    "\n" +
	    "                      ng-click=\"ctrl.saveAppt()\"\r" +
	    "\n" +
	    "                    name=\"createActivityAdd\">{{ ::'crm.activities.setAppointment.ADD' | translate}}</button>\r" +
	    "\n" +
	    "            <button ng-if=\"ctrl.isPersisted\"\r" +
	    "\n" +
	    "                    class=\"btn btn-save\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.saveAppt()\"\r" +
	    "\n" +
	    "                    name=\"createActivitySave\">{{ ::'crm.activities.setAppointment.SAVE' | translate}}</button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <span transclude-to=\"footer\">\r" +
	    "\n" +
	    "          <a ng-if=\"!ctrl.showAllFields\"\r" +
	    "\n" +
	    "             ng-click=\"ctrl.toggleShow()\"\r" +
	    "\n" +
	    "             name=\"showExtraFields\">\r" +
	    "\n" +
	    "              <i class=\"fa fa-fw fa-caret-down\"></i>\r" +
	    "\n" +
	    "              {{ ::'crm.activities.setAppointment.SHOW_EXTRA_FIELDS' | translate}}\r" +
	    "\n" +
	    "              <i class=\"fa fa-fw fa-caret-down\"></i>\r" +
	    "\n" +
	    "          </a>\r" +
	    "\n" +
	    "          <a ng-if=\"ctrl.showAllFields\"\r" +
	    "\n" +
	    "             ng-click=\"ctrl.toggleShow()\"\r" +
	    "\n" +
	    "             name=\"hideExtraFields\">\r" +
	    "\n" +
	    "              <i class=\"fa fa-fw fa-caret-up\"></i>\r" +
	    "\n" +
	    "              {{ ::'crm.activities.setAppointment.HIDE_EXTRA_FIELDS' | translate}}\r" +
	    "\n" +
	    "              <i class=\"fa fa-fw fa-caret-up\"></i></a>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "    </co-panel>\r" +
	    "\n" +
	    "</form>"
	  );


	  $templateCache.put('app/activities/setReminder/template.html',
	    "<form name=\"ctrl.form\" novalidate>\r" +
	    "\n" +
	    "    <co-panel co-multi-transclusion\r" +
	    "\n" +
	    "              ribbon=\"true\"\r" +
	    "\n" +
	    "              class=\"ds-card ds-card-active ds-card-hover-accent\"\r" +
	    "\n" +
	    "              status=\"open\"\r" +
	    "\n" +
	    "              name=\"createActivityPanel\">\r" +
	    "\n" +
	    "        <span transclude-to=\"title\" name=\"reminderTitle\">{{ ::ctrl.title | translate}}</span>\r" +
	    "\n" +
	    "        <span transclude-to=\"main\">\r" +
	    "\n" +
	    "            <div class=\"panel-overlay ws-disabled-overlay\" ng-show=\"ctrl.isWaiting\">\r" +
	    "\n" +
	    "                <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                      md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{ ::'crm.activities.setAppointment.DATE' | translate}}</label>\r" +
	    "\n" +
	    "                    <p class=\"transparent-input-group\">\r" +
	    "\n" +
	    "                        <input class=\"form-control\"\r" +
	    "\n" +
	    "                               type=\"text\"\r" +
	    "\n" +
	    "                               uib-datepicker-popup\r" +
	    "\n" +
	    "                               name=\"createActivityDateInput\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.newDueDate\"\r" +
	    "\n" +
	    "                               show-button-bar=\"false\"\r" +
	    "\n" +
	    "                               is-open=\"ctrl.datePickerOpen\"\r" +
	    "\n" +
	    "                               required>\r" +
	    "\n" +
	    "                        <span class=\"input-group-addon\" ng-click=\"ctrl.openDatePicker()\">\r" +
	    "\n" +
	    "                            <i class=\"fa fa-calendar master-panel-icon\"></i>\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                    </p>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{ ::'crm.activities.setAppointment.START_TIME' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control crm-required\"\r" +
	    "\n" +
	    "                            name=\"createActivityStartTime\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.newDueTime\"\r" +
	    "\n" +
	    "                            ng-options=\"refDef.text for refDef in ctrl.startTimes() track by refDef.value\"\r" +
	    "\n" +
	    "                            required>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-6 form-group\">\r" +
	    "\n" +
	    "                    <label>{{ ::'crm.activities.setAppointment.ASSIGNED_TO' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            name=\"createActivityAssignedTo\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.activity.assignedTo\"\r" +
	    "\n" +
	    "                            ng-options=\"refDef.text for refDef in ctrl.assignedTos() track by refDef.value\"\r" +
	    "\n" +
	    "                            required>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\"\r" +
	    "\n" +
	    "                 ng-if=\"!ctrl.isPhoneCall()\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-12 form-group\">\r" +
	    "\n" +
	    "                    <label>{{ ::'crm.activities.setAppointment.REMINDER' | translate}}</label>\r" +
	    "\n" +
	    "                    <span class=\"ws-status-bad\" ng-show=\"ctrl.invalidActivityType(ctrl.form.createActivityType)\">\r" +
	    "\n" +
	    "                        <span class=\"ws-status-text\">{{ ::\"crm.activities.setAppointment.REQUIRED\" | translate}}</span>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <select\r" +
	    "\n" +
	    "                            class=\"form-control\"\r" +
	    "\n" +
	    "                            name=\"createActivityType\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.activity.type\"\r" +
	    "\n" +
	    "                            ng-options=\"refDef.text for refDef in ctrl.reminderActivityTypes track by refDef.value\"\r" +
	    "\n" +
	    "                            required>\r" +
	    "\n" +
	    "                        <option value=\"\"\r" +
	    "\n" +
	    "                                disabled\r" +
	    "\n" +
	    "                                selected\r" +
	    "\n" +
	    "                                class=\"ds-card-select-dropdown-default-option\">{{ ::\"crm.activities.setAppointment.SELECT\" | translate }}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-12 form-group\">\r" +
	    "\n" +
	    "                    <label>{{ ::'crm.activities.setAppointment.TASK_COMMENTS' | translate}}</label>\r" +
	    "\n" +
	    "                    {{ ::'crm.activities.setAppointment.OPTIONAL' | translate}}\r" +
	    "\n" +
	    "                    <textarea class=\"form-control\"\r" +
	    "\n" +
	    "                              rows=\"3\"\r" +
	    "\n" +
	    "                              maxlength=\"{{::ctrl.MAX_COMMENT_LENGTH}}\"\r" +
	    "\n" +
	    "                              placeholder=\"{{ ::'crm.activities.setAppointment.ADD_A_COMMENT' | translate}}\"\r" +
	    "\n" +
	    "                              ng-model=\"ctrl.activity.comment\"\r" +
	    "\n" +
	    "                              name=\"createActivityComments\"></textarea>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-if=\"ctrl.showAllFields\">\r" +
	    "\n" +
	    "                <div class=\"row\">\r" +
	    "\n" +
	    "                    <div class=\"col-xs-6 form-group\">\r" +
	    "\n" +
	    "                        <label>{{ ::'crm.activities.setAppointment.RANKING' | translate}}</label>\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.activity.rank\"\r" +
	    "\n" +
	    "                                ng-options=\"rank.text for rank in ctrl.ranks() track by rank.value\"\r" +
	    "\n" +
	    "                                name=\"createActivityRanking\">\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-xs-6 form-group\">\r" +
	    "\n" +
	    "                        <label>{{ ::'crm.activities.setAppointment.TASK_CATEGORY' | translate}}</label>\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.activity.toDoCode\"\r" +
	    "\n" +
	    "                                ng-options=\"task.text for task in ctrl.taskCategories() track by task.value\"\r" +
	    "\n" +
	    "                                name=\"createActivityCategory\">\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-panel-actions\">\r" +
	    "\n" +
	    "                <button class=\"btn btn-quaternary\"\r" +
	    "\n" +
	    "                        ng-click=\"ctrl.cancel()\"\r" +
	    "\n" +
	    "                        name=\"createActivityCancel\">{{ ::'crm.activities.setAppointment.CANCEL' | translate}}</button>\r" +
	    "\n" +
	    "                <button ng-if=\"!ctrl.isPersisted\"\r" +
	    "\n" +
	    "                        class=\"btn btn-primary\"\r" +
	    "\n" +
	    "                        ng-click=\"ctrl.saveReminder()\"\r" +
	    "\n" +
	    "                        name=\"createActivityAdd\">{{ ::'crm.activities.setAppointment.ADD' | translate}}</button>\r" +
	    "\n" +
	    "                <button ng-if=\"ctrl.isPersisted\"\r" +
	    "\n" +
	    "                        class=\"btn btn-save\"\r" +
	    "\n" +
	    "                        ng-click=\"ctrl.saveReminder()\"\r" +
	    "\n" +
	    "                        name=\"createActivitySave\">{{ ::'crm.activities.setAppointment.SAVE' | translate}}</button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <span transclude-to=\"footer\">\r" +
	    "\n" +
	    "          <a ng-if=\"!ctrl.showAllFields\"\r" +
	    "\n" +
	    "             ng-click=\"ctrl.toggleShow()\"\r" +
	    "\n" +
	    "             name=\"showExtraFields\">\r" +
	    "\n" +
	    "              <i class=\"fa fa-fw fa-caret-down\"></i>\r" +
	    "\n" +
	    "              {{ ::'crm.activities.setAppointment.SHOW_EXTRA_FIELDS' | translate}}\r" +
	    "\n" +
	    "              <i class=\"fa fa-fw fa-caret-down\"></i>\r" +
	    "\n" +
	    "          </a>\r" +
	    "\n" +
	    "          <a ng-if=\"ctrl.showAllFields\"\r" +
	    "\n" +
	    "             ng-click=\"ctrl.toggleShow()\"\r" +
	    "\n" +
	    "             name=\"hideExtraFields\">\r" +
	    "\n" +
	    "              <i class=\"fa fa-fw fa-caret-up\"></i>\r" +
	    "\n" +
	    "              {{ ::'crm.activities.setAppointment.HIDE_EXTRA_FIELDS' | translate}}\r" +
	    "\n" +
	    "              <i class=\"fa fa-fw fa-caret-up\"></i></a>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "    </co-panel>\r" +
	    "\n" +
	    "</form>"
	  );


	  $templateCache.put('app/activities/webLead/template.html',
	    "<co-panel co-multi-transclusion ribbon=\"true\"\r" +
	    "\n" +
	    "          class=\"ds-card ds-card-active ds-card-hover-accent\"\r" +
	    "\n" +
	    "          status=\"{{ ::ctrl.status }}\"\r" +
	    "\n" +
	    "          name=\"webLeadActivityPanel\">\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        <span class=\"ws-panel-title\" name=\"webLeadTaskTitle\">{{ ::\"crm.activities.webLeadTask.WEB_LEAD\" | translate }}</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <div class=\"panel-overlay ws-disabled-overlay\" ng-show=\"ctrl.isWaiting\">\r" +
	    "\n" +
	    "            <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                  md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "            <label>{{ ::'crm.activities.webLeadTask.CONTACT_QUESTION' | translate}}</label>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "            <button co-icon-badge icon=\"fa-phone\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.createActivity(ctrl.activityButton.phoneCall)\"\r" +
	    "\n" +
	    "                    name=\"createPhoneCall\"\r" +
	    "\n" +
	    "                    tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                    tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                    tooltip-trigger\r" +
	    "\n" +
	    "                    uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.PHONE_CALL' | translate }}\">\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "            <button co-icon-badge icon=\"fa-envelope-o\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.createActivity(ctrl.activityButton.sendEmail)\"\r" +
	    "\n" +
	    "                    name=\"createSendEmail\"\r" +
	    "\n" +
	    "                    tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                    tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                    tooltip-trigger\r" +
	    "\n" +
	    "                    uib-tooltip=\"{{::'crm.salesOpportunity.activities.activity_bar.popovers.SEND_EMAIL' | translate }}\">\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-flex-row\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-flex-auto-size ws-panel-actions\">\r" +
	    "\n" +
	    "                <button class=\"btn btn-quaternary\"\r" +
	    "\n" +
	    "                        ng-click=\"ctrl.cancel()\" name=\"logOtherTaskCancel\">{{ ::\"crm.activities.logCall.CANCEL\" | translate }}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/activities/workNoteEditor/template.html',
	    "<div>\r" +
	    "\n" +
	    "    <strong>{{ ::'crm.activities.workNotes.NOTES_LABEL' | translate}}</strong>\r" +
	    "\n" +
	    "    <span ng-if=\"!ctrl.displayonly\">{{ ::'crm.activities.workNotes.OPTIONAL_LABEL' | translate }}</span>\r" +
	    "\n" +
	    "    <a ng-if=\"!ctrl.addOpen && !ctrl.displayonly\"\r" +
	    "\n" +
	    "       ng-click=\"ctrl.addWorkNote()\">\r" +
	    "\n" +
	    "        <span class=\"fa fa-plus-circle\"></span>\r" +
	    "\n" +
	    "        <span name=\"activityAddWorkNote\">{{ ::'crm.activities.workNotes.ADD_LINK' | translate}}</span>\r" +
	    "\n" +
	    "    </a>\r" +
	    "\n" +
	    "    <div class=\"ws-flex-row ws-content-group\"\r" +
	    "\n" +
	    "         ng-show=\"ctrl.addOpen\"\r" +
	    "\n" +
	    "         ng-if=\"!ctrl.displayonly\">\r" +
	    "\n" +
	    "        <textarea rows=\"3\"\r" +
	    "\n" +
	    "                  placeholder=\"{{ ::'crm.activities.workNotes.PLACEHOLDER' | translate }}\"\r" +
	    "\n" +
	    "                  ng-model=\"ctrl.worknote.note\"\r" +
	    "\n" +
	    "                  class=\"ws-flex-fill-even ws-multiline-text-area\"\r" +
	    "\n" +
	    "                  name=\"activityAddWorkNoteArea\"></textarea>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"relative ws-content-group ws-multiline-text-area\"\r" +
	    "\n" +
	    "         ng-show=\"ctrl.workNotes && ctrl.workNotes.length > 0\"\r" +
	    "\n" +
	    "         name=\"activityViewWorkNotesArea\"\r" +
	    "\n" +
	    "         ng-click=\"ctrl.toggleExpand()\"\r" +
	    "\n" +
	    "         ng-disabled=\"!ctrl.displayonly\"\r" +
	    "\n" +
	    "         ng-class=\"{'ws-normal-cursor': !ctrl.canExpand}\">\r" +
	    "\n" +
	    "        <section class=\"ws-vertical-expander\"\r" +
	    "\n" +
	    "                 ng-class=\"{'ws-expanded': ctrl.expanded}\">\r" +
	    "\n" +
	    "            <div class=\"ws-expand-section\">\r" +
	    "\n" +
	    "                <div ng-repeat=\"workNote in ctrl.workNotes\"\r" +
	    "\n" +
	    "                     class=\"ws-content-group\"\r" +
	    "\n" +
	    "                     ng-class=\"{'ws-expandable': !$first}\"\r" +
	    "\n" +
	    "                     ng-if=\"$first || ctrl.expanded\">\r" +
	    "\n" +
	    "                    <crm-work-note-view\r" +
	    "\n" +
	    "                            worknote=\"workNote\"\r" +
	    "\n" +
	    "                            disable-info-text=\"ctrl.disableInfoText\">\r" +
	    "\n" +
	    "                    </crm-work-note-view>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <button class=\"ws-expander-button ws-compact\"\r" +
	    "\n" +
	    "                    ng-if=\"ctrl.canExpand\"\r" +
	    "\n" +
	    "                    ng-class=\"{'ws-expanded': ctrl.expanded}\">\r" +
	    "\n" +
	    "                <span class=\"ws-expander-button-content\"\r" +
	    "\n" +
	    "                      ng-if=\"ctrl.expanded\" name=\"activityWorkNoteToggle\">{{::'crm.expander.SHOW_LESS' | translate}}</span>\r" +
	    "\n" +
	    "                <span class=\"ws-expander-button-content\"\r" +
	    "\n" +
	    "                      ng-if=\"!ctrl.expanded\" name=\"activityWorkNoteToggle\">{{::'crm.expander.SHOW_MORE' | translate}}</span>\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "        </section>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/activities/workNoteView/template.html',
	    "<div>\r" +
	    "\n" +
	    "    <strong ng-if=\"!ctrl.disableInfoText\">\r" +
	    "\n" +
	    "        <crm-dynamic-translation\r" +
	    "\n" +
	    "            model=\"ctrl.worknote\"\r" +
	    "\n" +
	    "            name=\"activityWorkNoteTitle\"\r" +
	    "\n" +
	    "            translationKey=\"crm.activities.workNotes.INTRO\">\r" +
	    "\n" +
	    "        </crm-dynamic-translation>\r" +
	    "\n" +
	    "    </strong>\r" +
	    "\n" +
	    "    <div ng-bind-html=\"ctrl.worknote.note\" name=\"activityWorkNoteText\"></div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/admin/adminMenuTemplate.html',
	    "<div class=\"ws-absolute-fill ws-flex-container\">\r" +
	    "\n" +
	    "    <iframe ng-src=\"{{ctrl.getAdminMenuUrl()}}\" height=\"100%\" width=\"100%\" name=\"data\" frameborder=\"0\"></iframe>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/auditLog/plainText/plainTextAuditLogTemplate.html',
	    "<co-panel co-multi-transclusion class=\"ds-card\" name=\"auditLogModalCard\">\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <div ng-cloak ng-repeat=\"entry in ctrl.cleanedLogEntries\"\r" +
	    "\n" +
	    "             name=\"log-entry-{{ctrl.cleanedLogEntries.indexOf(entry)}}\" ptor-name=\"auditLogModalCardLogEntry\">\r" +
	    "\n" +
	    "            {{entry}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\" class=\"ds-audit-card-time\">\r" +
	    "\n" +
	    "        <span ng-cloak class=\"ws-deaccent-text\" name=\"log-entry-date-time\">\r" +
	    "\n" +
	    "            {{ctrl.auditLog.entryDateTime | date : \"M/dd/yyyy, h:mm a\"}}\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/auditLog/plainTextAuditLogModalTemplate.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-primary panel-modal\" name=\"modelPanel\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "            <h3 ng-cloak class=\"panel-title ws-flex-fill-even\" name=\"auditLogModalTitle\">\r" +
	    "\n" +
	    "                {{::'crm.contact.audit_logs.AUDIT_LOGS' | translate}}\r" +
	    "\n" +
	    "                {{::'crm.contact.audit_logs.OPEN_PARENTHESIS' | translate}}{{ctrl.auditLogs.length}}{{::'crm.contact.audit_logs.CLOSE_PARENTHESIS' | translate}}\r" +
	    "\n" +
	    "            </h3>\r" +
	    "\n" +
	    "            <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.modal.cancel()\" name=\"closeModal\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-card-panel\">\r" +
	    "\n" +
	    "            <md-virtual-repeat-container class=\"ws-modal-virtual-repeat-md\">\r" +
	    "\n" +
	    "                <div md-virtual-repeat=\"auditLog in ctrl.auditLogs\" md-item-size=\"1\">\r" +
	    "\n" +
	    "                    <crm-plain-text-audit-log-card audit-log=\"auditLog\"></crm-plain-text-audit-log-card>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </md-virtual-repeat-container>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/auditLog/updateAuditLogModalTemplate.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-primary panel-modal\" name=\"modalPanel\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "            <h3 ng-cloak class=\"panel-title ws-flex-fill-even\" name=\"auditLogPanelTitle\">\r" +
	    "\n" +
	    "                {{::'crm.salesOpportunity.auditLog.AUDIT_LOG' | translate}}\r" +
	    "\n" +
	    "                {{::'crm.salesOpportunity.auditLog.OPEN_PARENTHESIS' | translate}}{{::ctrl.auditLogs.length}}{{::'crm.salesOpportunity.auditLog.CLOSE_PARENTHESIS' | translate}}\r" +
	    "\n" +
	    "            </h3>\r" +
	    "\n" +
	    "            <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.modal.cancel()\" name=\"closeModal\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-card-panel\">\r" +
	    "\n" +
	    "            <md-virtual-repeat-container ng-if=\"ctrl.retrievedAuditLogs\" class=\"ws-modal-virtual-repeat-md\">\r" +
	    "\n" +
	    "                <div md-virtual-repeat=\"auditLog in ctrl.auditLogs\" md-item-size=\"1\">\r" +
	    "\n" +
	    "                    <crm-update-audit-log-card audit-log=\"auditLog\"></crm-update-audit-log-card>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </md-virtual-repeat-container>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/auditLog/updateLog/updateAuditLogTemplate.html',
	    "<co-panel co-multi-transclusion class=\"ds-card\">\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <div ng-repeat=\"field in ctrl.auditLog.updatedFields\" name=\"updateField\">\r" +
	    "\n" +
	    "            <span class=\"ds-card-bold\">{{::ctrl.auditLog.insertBy}}</span> {{::'crm.salesOpportunity.auditLog.UPDATED' | translate}}\r" +
	    "\n" +
	    "            <span class=\"ds-card-bold\">{{::field.UpdateFieldName}}</span> {{::'crm.salesOpportunity.auditLog.FROM' | translate}}\r" +
	    "\n" +
	    "            <span class=\"ds-card-changed-value\" ng-class=\"ctrl.getValueCssClasses(field.PriorValue)\">{{::field.PriorValue}}</span> {{::'crm.salesOpportunity.auditLog.TO' | translate}}\r" +
	    "\n" +
	    "            <span class=\"ds-card-changed-value\" ng-class=\"ctrl.getValueCssClasses(field.NewValue)\">{{::field.NewValue}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\" class=\"ds-audit-card-time\">\r" +
	    "\n" +
	    "        <span ng-cloak class=\"ws-deaccent-text\" name=\"logEntryDateTime\">\r" +
	    "\n" +
	    "            {{::ctrl.auditLog.entryDateTime | date : \"M/dd/yyyy, h:mm a\"}}\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/connections/add/addConnectionTemplate.html',
	    "<div co-loading=\"ctrl.isLoading\" class=\"ws-panel\">\r" +
	    "\n" +
	    "    <duplicate-contact-banner contact=\"ctrl.contact\" on-select=\"ctrl.saveConnection(contact)\"></duplicate-contact-banner>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-content-main ws-content-group\">\r" +
	    "\n" +
	    "       <form name=\"ctrl.addConnectionForm\" novalidate>\r" +
	    "\n" +
	    "        <div class=\"row\" ng-if=\"!ctrl.isOrganization\">\r" +
	    "\n" +
	    "            <crm-contact-info contact=\"ctrl.contact\" expanded=\"ctrl.expanded\" form=\"ctrl.addConnectionForm\"\r" +
	    "\n" +
	    "                              prefix-ref-defs=\"ctrl.individualRefDefs['individual.salutation']\">\r" +
	    "\n" +
	    "            </crm-contact-info>\r" +
	    "\n" +
	    "            <crm-address title=\"{{ ::'crm.address.headers.ADDRESS' | translate}}\" contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                         expanded=\"ctrl.expanded\" form=\"ctrl.addConnectionForm\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            </crm-address>\r" +
	    "\n" +
	    "            <crm-individual-other-info contact=\"ctrl.contact\" expanded=\"ctrl.expanded\"\r" +
	    "\n" +
	    "                                       preferred-language-ref-defs=\"ctrl.individualRefDefs['pref.languages']\"\r" +
	    "\n" +
	    "                                       contact-types=\"ctrl.individualRefDefs['individual.type']\"\r" +
	    "\n" +
	    "                                       contact-sources=\"ctrl.individualRefDefs['individual.source']\"\r" +
	    "\n" +
	    "                                       show-relationship=\"true\"\r" +
	    "\n" +
	    "                                       relationship-ref-defs=\"ctrl.connectionRefDefs\"\r" +
	    "\n" +
	    "                                       relationship-type-limited=\"true\">\r" +
	    "\n" +
	    "            </crm-individual-other-info>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "       <div class=\"row\" ng-if=\"ctrl.isOrganization\">\r" +
	    "\n" +
	    "           <crm-organization-info\r" +
	    "\n" +
	    "                   contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                   expanded=\"ctrl.expanded\"\r" +
	    "\n" +
	    "                   form=\"ctrl.addOrganizationForm\"\r" +
	    "\n" +
	    "                   prefix-ref-defs=\"ctrl.companyRefDefs['individual.salutation']\">\r" +
	    "\n" +
	    "           </crm-organization-info>\r" +
	    "\n" +
	    "           <crm-address\r" +
	    "\n" +
	    "                   title=\"{{ ::'crm.address.headers.ADDRESS' | translate}}\"\r" +
	    "\n" +
	    "                   contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                   expanded=\"ctrl.expanded\"\r" +
	    "\n" +
	    "                   form=\"ctrl.addOrganizationForm\">\r" +
	    "\n" +
	    "           </crm-address>\r" +
	    "\n" +
	    "           <crm-organization-other-info\r" +
	    "\n" +
	    "                   contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                   expanded=\"ctrl.expanded\"\r" +
	    "\n" +
	    "                   contact-sources=\"ctrl.companyRefDefs['company.source']\"\r" +
	    "\n" +
	    "                   contact-types=\"ctrl.companyRefDefs['company.type']\">\r" +
	    "\n" +
	    "           </crm-organization-other-info>\r" +
	    "\n" +
	    "       </div>\r" +
	    "\n" +
	    "       </form>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "        <div class=\"col-md-6 col-lg-6 form-group\">\r" +
	    "\n" +
	    "            <label>{{::'crm.otherInfo.headers.RELATIONSHIP_CATEGORY' | translate}}</label>\r" +
	    "\n" +
	    "            <select name=\"relationshipCategory\"\r" +
	    "\n" +
	    "                    class=\"form-control\"\r" +
	    "\n" +
	    "                    ng-model=\"ctrl.connectionType\"\r" +
	    "\n" +
	    "                    ng-options=\"type.value as type.text for type in ctrl.connectionRefDefs['contact.type']\"></select>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-lg-6 form-group\">\r" +
	    "\n" +
	    "            <label>{{::'crm.otherInfo.headers.RELATIONSHIP_TYPE' | translate}}</label>\r" +
	    "\n" +
	    "            <select name=\"relationshipType\"\r" +
	    "\n" +
	    "                    class=\"form-control\"\r" +
	    "\n" +
	    "                    ng-model=\"ctrl.connectionSubType\"\r" +
	    "\n" +
	    "                    ng-disabled=\"!ctrl.connectionType\"\r" +
	    "\n" +
	    "                    ng-options=\"subtype.value as subtype.text for subtype in ctrl.getSubTypeConnectionRefDefs(ctrl.connectionType)\"></select>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"row ws-bootstrap-panel-row ws-content-group\">\r" +
	    "\n" +
	    "        <div class=\"col-md-12\">\r" +
	    "\n" +
	    "            <div class=\"pull-right\">\r" +
	    "\n" +
	    "                <button class=\"btn btn-tertiary\"\r" +
	    "\n" +
	    "                        name=\"cancelButton\"\r" +
	    "\n" +
	    "                        ng-click=\"ctrl.cancelAdd()\">\r" +
	    "\n" +
	    "                    {{::'crm.connections.CANCEL' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "                <button class=\"btn btn-secondary\"\r" +
	    "\n" +
	    "                        name=\"addConnectionButton\"\r" +
	    "\n" +
	    "                        ng-click=\"ctrl.onSave()\"\r" +
	    "\n" +
	    "                        ng-disabled=\"ctrl.isSaveButtonDisabled\"\r" +
	    "\n" +
	    "                        ng-disabled=\"!ctrl.addConnectionForm.$valid\">\r" +
	    "\n" +
	    "                    {{::'crm.connections.ADD_CONNECTION' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <footer>\r" +
	    "\n" +
	    "        <button class=\"ws-expander-button\" ng-class=\"{'ws-expanded': ctrl.expanded}\"\r" +
	    "\n" +
	    "                ng-click=\"ctrl.expanded = !ctrl.expanded\">\r" +
	    "\n" +
	    "                <span class=\"ws-expander-button-content\" name=\"viewToggle\">\r" +
	    "\n" +
	    "                    <span ng-if=\"!ctrl.expanded\" name=\"viewToggleExpand\">{{ ::\"crm.contact.MORE_DETAILS\" | translate }}</span>\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.expanded\">{{ ::\"crm.contact.FEWER_DETAILS\" | translate }}</span>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "        </button>\r" +
	    "\n" +
	    "    </footer>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/connections/card/connectionCardPopoverTemplate.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <a class=\"ws-popover-item ng-scope\" ng-click=\"ctrl.onRemoveConnection()\" name=\"removeIndividualConnection\">\r" +
	    "\n" +
	    "        <span ng-if=\"::ctrl.isCobuyer\">{{ ::\"crm.connections.REMOVE_CO_BUYER\" | translate }}</span>\r" +
	    "\n" +
	    "        <span ng-if=\"::!ctrl.isCobuyer\">{{ ::\"crm.connections.REMOVE_CONNECTION\" | translate }}</span>\r" +
	    "\n" +
	    "    </a>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/connections/card/connectionCardTemplate.html',
	    "<co-panel co-multi-transclusion class=\"ds-card-contact\">\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-profile-image class=\"contact-image-donut-67\"\r" +
	    "\n" +
	    "                          ng-if=\"::!ctrl.connection.contact.isOrganization()\"\r" +
	    "\n" +
	    "                          image-url=\"{{::ctrl.connection.contact.img}}\"\r" +
	    "\n" +
	    "                          initials=\"{{::ctrl.connection.contact.getInitials()}}\"></co-profile-image>\r" +
	    "\n" +
	    "        <co-profile-image class=\"contact-image-donut-67\"\r" +
	    "\n" +
	    "                          ng-if=\"::ctrl.connection.contact.isOrganization()\"\r" +
	    "\n" +
	    "                          image-url=\"{{::ctrl.connection.contact.imgUrl}}\"\r" +
	    "\n" +
	    "                          is-organization=\"ctrl.connection.contact.isOrganization()\"></co-profile-image>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\" name=\"connection-full-name\">{{ ::ctrl.connection.contact.getFullName() }}</div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <div class=\"muted\">\r" +
	    "\n" +
	    "            <span ng-if=\"::ctrl.isCobuyer\" name=\"connection-relationship\">{{ ::\"crm.connections.CO_BUYER\" | translate }}</span>\r" +
	    "\n" +
	    "            <span ng-if=\"::!ctrl.isCobuyer\" name=\"connection-relationship\">\r" +
	    "\n" +
	    "                <crm-inline-edit-connection-relationship\r" +
	    "\n" +
	    "                        facade=\"ctrl.relationshipFacade\"\r" +
	    "\n" +
	    "                        ref-defs=\"ctrl.refDefs\"\r" +
	    "\n" +
	    "                        has-value=\"!!ctrl.connection.primary.text || !!ctrl.connection.secondary.text\">\r" +
	    "\n" +
	    "                    <span ng-if=\"!!ctrl.connection.primary.text || !!ctrl.connection.secondary.text\" name=\"connectionRelationshipSubtitle\">\r" +
	    "\n" +
	    "                        {{ ctrl.connection.primary.text }}\r" +
	    "\n" +
	    "                        <span ng-if=\"ctrl.connection.secondary.text\"> ({{ ctrl.connection.secondary.text }})</span>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.connection.primary.text && !ctrl.connection.secondary.text\">\r" +
	    "\n" +
	    "                        {{ ::\"crm.connections.RELATIONSHIP\" | translate }}\r" +
	    "\n" +
	    "                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                </crm-inline-edit-connection-relationship>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <div class=\"row\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-11 col-sm-5 col-md-4\" ng-if=\"::!ctrl.connection.contact.isOrganization()\">\r" +
	    "\n" +
	    "                <ul class=\"list-group\">\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\"\r" +
	    "\n" +
	    "                        ng-if=\"::ctrl.connection.contact.contactPoints.mobile.value\"\r" +
	    "\n" +
	    "                        name=\"individualConnectionPhoneMobile\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{ ::'crm.contact.contact_points.MOBILE_LETTER' | translate }}: </span>\r" +
	    "\n" +
	    "                        {{ ::ctrl.connection.contact.contactPoints.mobile.value | crmPhone:'mobile' }}\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\"\r" +
	    "\n" +
	    "                        ng-if=\"::ctrl.connection.contact.contactPoints.other.value\"\r" +
	    "\n" +
	    "                        name=\"individualConnectionPhoneHome\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{ ::'crm.contact.contact_points.HOME_LETTER' | translate }}: </span>\r" +
	    "\n" +
	    "                        {{ ::ctrl.connection.contact.contactPoints.other.value | crmPhone }}\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\"\r" +
	    "\n" +
	    "                        ng-if=\"::ctrl.connection.contact.contactPoints.work.value\"\r" +
	    "\n" +
	    "                        name=\"individualConnectionOther\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{ ::'crm.contact.contact_points.WORK_LETTER' | translate }}: </span>\r" +
	    "\n" +
	    "                        {{ ::ctrl.connection.contact.contactPoints.work.value | crmPhone }}\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                </ul>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-xs-11 col-sm-5 col-md-4\" ng-if=\"::ctrl.connection.contact.isOrganization()\">\r" +
	    "\n" +
	    "                <ul class=\"list-group\">\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\"\r" +
	    "\n" +
	    "                        ng-if=\"::ctrl.connection.contact.contactPoints.mainNumber.value\"\r" +
	    "\n" +
	    "                        name=\"organizationConnectionMainPhone\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{ ::'crm.contact.organization.MAIN_PHONE_LETTER' | translate }}: </span>\r" +
	    "\n" +
	    "                        {{ ::ctrl.connection.contact.contactPoints.mainNumber.value | crmPhone }}\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\"\r" +
	    "\n" +
	    "                        ng-if=\"::ctrl.connection.contact.contactPoints.tollFree.value\"\r" +
	    "\n" +
	    "                        name=\"organizationConnectionTollFreePhone\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{ ::'crm.contact.organization.TOLL_FREE_LETTER' | translate }}: </span>\r" +
	    "\n" +
	    "                        {{ ::ctrl.connection.contact.contactPoints.tollFree.value | crmPhone }}\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\"\r" +
	    "\n" +
	    "                        ng-if=\"::ctrl.connection.contact.contactPoints.fax.value\"\r" +
	    "\n" +
	    "                        name=\"organizationConnectionFaxPhone\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{ ::'crm.contact.organization.FAX_LETTER' | translate }}: </span>\r" +
	    "\n" +
	    "                        {{ ::ctrl.connection.contact.contactPoints.fax.value | crmPhone }}\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                </ul>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-xs-11 col-sm-6 col-md-7\">\r" +
	    "\n" +
	    "                <ul class=\"list-group\">\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\"\r" +
	    "\n" +
	    "                        ng-if=\"::ctrl.connection.contact.contactPoints.email.value\"\r" +
	    "\n" +
	    "                        name=\"connectionEmail\">\r" +
	    "\n" +
	    "                        {{ ctrl.connection.contact.contactPoints.email.value }}\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <span name=\"connection-address\">\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\"\r" +
	    "\n" +
	    "                            ng-if=\"::ctrl.connection.contact.address.address1\">\r" +
	    "\n" +
	    "                            {{ ctrl.connection.contact.address.address1 }}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                            <span ng-if=\"::ctrl.connection.contact.address.city\">{{ ::ctrl.connection.contact.address.city }}</span><span\r" +
	    "\n" +
	    "                                ng-if=\"::(ctrl.connection.contact.address.city && ctrl.connection.contact.address.state)\">, </span>\r" +
	    "\n" +
	    "                            <span ng-if=\"::ctrl.connection.contact.address.state\">{{ ::ctrl.connection.contact.address.state }}</span>\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </ul>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-xs-1\">\r" +
	    "\n" +
	    "                <span class=\"ws-dots\" ng-if=\"ctrl.connectionPermission.delete\">\r" +
	    "\n" +
	    "                    <a ns-popover\r" +
	    "\n" +
	    "                       ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                       ns-popover-placement=\"bottom\"\r" +
	    "\n" +
	    "                       ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "                       ns-popover-template=\"app/connections/card/connectionCardPopoverTemplate.html\">\r" +
	    "\n" +
	    "                        <i class=\"fa fa-ellipsis-h\"\r" +
	    "\n" +
	    "                           tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                           tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                           tooltip-trigger uib-tooltip=\"{{ ::'crm.connections.MORE_ACTIONS' | translate }}\"\r" +
	    "\n" +
	    "                           name=\"IndividualConnectionsOptionsIcon\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <div><a ng-if=\"!ctrl.disableEditCrossSite\" ng-click=\"ctrl.viewProfile()\" name=\"connectionFullProfile\">{{ ::\"crm.connections.FULL_PROFILE\" | translate }}</a></div>\r" +
	    "\n" +
	    "        <div class=\"muted\" name=\"connectionId\">{{ ::\"crm.connections.ID_NUMBER\" | translate }}{{ ::ctrl.connection.contact.id }}</div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/connections/connectionsTemplate.html',
	    "<div ng-if=\"!ctrl.addingIndividual && !ctrl.addingOrganization\">\r" +
	    "\n" +
	    "    <section co-loading=\"ctrl.isLoading\" class=\"ws-panel\">\r" +
	    "\n" +
	    "        <div class=\"ws-control-group\" ng-class=\"{'invisible': ctrl.isLoading}\" ng-if=\"!ctrl.addingIndividual && !ctrl.addingOrganization && ctrl.connectionPermission.add\">\r" +
	    "\n" +
	    "            <button ng-if=\"!ctrl.disableEditCrossSite\" class=\"btn btn-tertiary ws-flex-fill-even\" ng-click=\"ctrl.onAddIndividualClick()\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-plus-circle\"></i>\r" +
	    "\n" +
	    "                <span name=\"addIndividualConnection\">{{ ::'crm.connections.ADD_CONNECTION' | translate }}</span>\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "            <!--<button class=\"btn btn-tertiary ws-flex-fill-even\" ng-click=\"ctrl.onAddOrganizationClick()\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-plus-circle\"></i>\r" +
	    "\n" +
	    "                <span name=\"addCompanyConnection\">{{ ::'crm.connections.ADD_COMPANY' | translate }}</span>\r" +
	    "\n" +
	    "            </button>-->\r" +
	    "\n" +
	    "            <span ng-if=\"!ctrl.disableEditCrossSite\" class=\"ws-flex-auto-size ws-text-container\">\r" +
	    "\n" +
	    "                <div name=\"searchToAddConnection\">\r" +
	    "\n" +
	    "                    {{ ::'crm.connections.OR' | translate }}\r" +
	    "\n" +
	    "                    <a name=\"searchToAddConnection\" ng-click=\"ctrl.openSearchModal()\">\r" +
	    "\n" +
	    "                        {{ ::'crm.connections.SEARCH_TO_ADD' | translate }}\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        <crm-connection-card ng-repeat=\"connection in ctrl.connections\"\r" +
	    "\n" +
	    "                             ng-show=\"connection\"\r" +
	    "\n" +
	    "                             contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                             disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                             connection=\"connection\"\r" +
	    "\n" +
	    "                             remove-connection=\"ctrl.removeConnection(connection)\"></crm-connection-card>\r" +
	    "\n" +
	    "    </section>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "<crm-add-connection ng-if=\"ctrl.addingIndividual || ctrl.addingOrganization\"\r" +
	    "\n" +
	    "                    is-organization=\"ctrl.addingOrganization\"\r" +
	    "\n" +
	    "                    sales-opportunity-contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                    on-cancel=\"ctrl.onAddCancel()\"\r" +
	    "\n" +
	    "                    on-save-completed=\"ctrl.onAddCompleted()\"></crm-add-connection>\r" +
	    "\n"
	  );


	  $templateCache.put('app/contact/add/contactInfo/contactInfoTemplateIndividual.html',
	    "<div class=\"panel panel-primary contact-info-panel\">\r" +
	    "\n" +
	    "    <div class=\"panel-body panel-no-padding-bottom\" ng-if=\"ctrl.expanded\">\r" +
	    "\n" +
	    "        <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "            <div class=\"col-md-12\">\r" +
	    "\n" +
	    "                <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "                    <div class=\"col-lg-3 col-md-6 form-group\">\r" +
	    "\n" +
	    "                        <label name=\"prefixLabel\">{{::'crm.contact.headers.SALUTATION' | translate}}</label>\r" +
	    "\n" +
	    "                        <select class=\"form-control\" ng-model=\"ctrl.contact.salutation\" name=\"prefix\"\r" +
	    "\n" +
	    "                                ng-options=\"refDef.text for refDef in ctrl.prefixRefDefs track by refDef.value\">\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-lg-6 col-md-6 form-group\">\r" +
	    "\n" +
	    "                        <label name=\"firstNameLabel\">{{::'crm.contact.FIRST_NAME' | translate}}</label>\r" +
	    "\n" +
	    "                        <input type=\"text\" class=\"form-control\" name=\"firstName\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.contact.firstName\"\r" +
	    "\n" +
	    "                               maxlength=\"50\"\r" +
	    "\n" +
	    "                               ng-required=\"true\"\r" +
	    "\n" +
	    "                               autocomplete=\"off\">\r" +
	    "\n" +
	    "                        <span class=\"form-invalid-message\" ng-show=\"ctrl.form.firstName.$error.required\" name=\"firstNameRequiredMessage\">{{ ::'crm.contact.headers.REQUIRED' | translate}}</span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-lg-3 col-md-6 form-group\">\r" +
	    "\n" +
	    "                        <label name=\"middleNameLabel\">{{::'crm.contact.MIDDLE_NAME' | translate}}</label>\r" +
	    "\n" +
	    "                        <input type=\"text\" class=\"form-control\" name=\"middleName\" ng-model=\"ctrl.contact.middleName\"\r" +
	    "\n" +
	    "                               maxlength=\"50\" autocomplete=\"false\">\r" +
	    "\n" +
	    "                        <span class=\"error\" ng-show=\"ctrl.form.middleName.$error.maxlength\">{{::'crm.contact.headers.ERROR_50_LENGTH' | translate}}</span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-md-6 form-group\">\r" +
	    "\n" +
	    "                        <label name=\"lastNameLabel\">{{::'crm.contact.LAST_NAME' | translate}}</label>\r" +
	    "\n" +
	    "                        <input type=\"text\" class=\"form-control crm-required\" name=\"lastName\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.contact.lastName\"\r" +
	    "\n" +
	    "                               maxlength=\"50\"\r" +
	    "\n" +
	    "                               ng-required=\"true\"\r" +
	    "\n" +
	    "                               autocomplete=\"off\">\r" +
	    "\n" +
	    "                        <span class=\"form-invalid-message\" ng-show=\"ctrl.form.lastName.$error.required\" name=\"firstNameRequiredMessage\">{{ ::'crm.contact.headers.REQUIRED' | translate}}</span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-md-6 form-group\">\r" +
	    "\n" +
	    "                        <label name=\"nickNameLabel\">{{::'crm.contact.NICKNAME' | translate}}</label>\r" +
	    "\n" +
	    "                        <input type=\"text\" class=\"form-control\" name=\"nickname\" ng-model=\"ctrl.contact.friendlyName\"\r" +
	    "\n" +
	    "                               maxlength=\"50\" autocomplete=\"false\">\r" +
	    "\n" +
	    "                        <span class=\"error\" ng-show=\"ctrl.form.nickname.$error.maxlength\">{{::'crm.contact.headers.ERROR_50_LENGTH' | translate}}</span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-lg-4 col-md-6 form-group\">\r" +
	    "\n" +
	    "                <label name=\"mobilePhoneLabel\">{{::'crm.contact.contact_points.MOBILE' | translate}}</label>\r" +
	    "\n" +
	    "                <crm-intl-phone contact=\"ctrl.contact\" model=\"mobile\" form=\"ctrl.form\"></crm-intl-phone>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-lg-4 col-md-6 form-group\">\r" +
	    "\n" +
	    "                <label name=\"homePhoneLabel\">{{::'crm.contact.contact_points.HOME' | translate}}</label>\r" +
	    "\n" +
	    "                <crm-intl-phone contact=\"ctrl.contact\" model=\"other\" form=\"ctrl.form\"></crm-intl-phone>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-lg-4 col-md-6 form-group\">\r" +
	    "\n" +
	    "                <label name=\"workPhoneLabel\">{{::'crm.contact.contact_points.WORK' | translate}}</label>\r" +
	    "\n" +
	    "                <crm-intl-phone contact=\"ctrl.contact\" model=\"work\" form=\"ctrl.form\"></crm-intl-phone>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-lg-8 col-md-6 form-group\">\r" +
	    "\n" +
	    "                <label name=\"emailLabel\">{{ ::'crm.contact.EMAIL' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.contact.contactPoints.email.value\"\r" +
	    "\n" +
	    "                       co-is-valid=\"ctrl.contact.contactPoints.email.isValidOrEmpty()\"\r" +
	    "\n" +
	    "                       name=\"email\"\r" +
	    "\n" +
	    "                       maxlength=\"254\"\r" +
	    "\n" +
	    "                       autocomplete=\"false\"\r" +
	    "\n" +
	    "                       pattern=\"[A-Za-z0-9\\@\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\.]{1,}\"\r" +
	    "\n" +
	    "                       ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.contact.contactPoints.isValid() && !ctrl.contact.address.isValid()}\">\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.form.$submitted && !ctrl.contact.contactPoints.email.isValidOrEmpty() && ctrl.contact.contactPoints.isValid()\" class=\"form-invalid-message\" name=\"emailInvalidError\">{{ ::'crm.contact.headers.INVALID_EMAIL' | translate}}</span>\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.form.$submitted && !ctrl.contact.contactPoints.isValid() && !ctrl.contact.address.isValid()\" class=\"form-invalid-message\" name=\"pointOfContactEmailError\">{{ ::'crm.contact.headers.ONE_POINT_OF_CONTACT' | translate}}</span>\r" +
	    "\n" +
	    "                <span class=\"invalid-message-static\" ng-show=\"ctrl.form.email.$error.pattern\">{{ ::'crm.contact.headers.INVALID_CHARACTERS' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-body panel-no-padding-bottom\" ng-if=\"!ctrl.expanded\">\r" +
	    "\n" +
	    "        <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "            <div class=\"form-group\" ng-class=\"ctrl.isFullScreen ? 'col-md-3' : 'col-md-6'\">\r" +
	    "\n" +
	    "                <label name=\"firstNameLabel\">{{ ::'crm.contact.FIRST_NAME' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control crm-required\" name=\"firstName\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.contact.firstName\"\r" +
	    "\n" +
	    "                       ng-change=\"ctrl.checkForDuplicates(ctrl.contact)\"\r" +
	    "\n" +
	    "                       maxlength=\"50\"\r" +
	    "\n" +
	    "                       ng-required=\"true\"\r" +
	    "\n" +
	    "                       autocomplete=\"off\">\r" +
	    "\n" +
	    "                <span class=\"form-invalid-message\" ng-show=\"ctrl.form.firstName.$error.required\" name=\"firstNameRequiredMessage\">{{ ::'crm.contact.headers.REQUIRED' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-6 form-group\" ng-class=\"ctrl.isFullScreen ? 'col-md-3' : 'col-md-6'\">\r" +
	    "\n" +
	    "                <label name=\"lastNameLabel\">{{ ::'crm.contact.LAST_NAME' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control crm-required\" name=\"lastName\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.contact.lastName\"\r" +
	    "\n" +
	    "                       ng-change=\"ctrl.checkForDuplicates(ctrl.contact)\"\r" +
	    "\n" +
	    "                       maxlength=\"50\"\r" +
	    "\n" +
	    "                       ng-required=\"true\"\r" +
	    "\n" +
	    "                       autocomplete=\"off\">\r" +
	    "\n" +
	    "                <span class=\"form-invalid-message\" ng-show=\"ctrl.form.lastName.$error.required\" name=\"lastNameRequiredMessage\">{{ ::'crm.contact.headers.REQUIRED' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-lg-1 col-md-3 form-group\" ng-if=\"ctrl.isFullScreen\">\r" +
	    "\n" +
	    "                <label name=\"phoneDropdownLabel\">Phone Number</label>\r" +
	    "\n" +
	    "                <select ng-model=\"ctrl.phoneType\" class=\"form-control\" name=\"phoneNumberDropdown\">\r" +
	    "\n" +
	    "                    <option value=\"mobile\">{{::'crm.contact.contact_points.MOBILE_TYPE' | translate}}</option>\r" +
	    "\n" +
	    "                    <option value=\"home\">{{::'crm.contact.contact_points.HOME_TYPE' | translate}}</option>\r" +
	    "\n" +
	    "                    <option value=\"work\">{{::'crm.contact.contact_points.WORK_TYPE' | translate}}</option>\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"form-group\" ng-class=\"{'col-md-3 col-lg-2':ctrl.isFullScreen,'col-md-6':!ctrl.isFullScreen}\">\r" +
	    "\n" +
	    "                <div ng-show=\"ctrl.phoneType === 'mobile'\">\r" +
	    "\n" +
	    "                    <label name=\"mobilePhoneLabel\">{{::'crm.contact.contact_points.MOBILE' | translate}}</label>\r" +
	    "\n" +
	    "                    <crm-intl-phone contact=\"ctrl.contact\" model=\"mobile\" form=\"ctrl.form\"></crm-intl-phone>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div ng-show=\"ctrl.phoneType === 'home'\">\r" +
	    "\n" +
	    "                    <label name=\"homePhoneLabel\">{{::'crm.contact.contact_points.HOME' | translate}}</label>\r" +
	    "\n" +
	    "                    <crm-intl-phone contact=\"ctrl.contact\" model=\"other\" form=\"ctrl.form\"></crm-intl-phone>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div ng-show=\"ctrl.phoneType === 'work'\">\r" +
	    "\n" +
	    "                    <label name=\"workPhoneLabel\">{{::'crm.contact.contact_points.WORK' | translate}}</label>\r" +
	    "\n" +
	    "                    <crm-intl-phone contact=\"ctrl.contact\" model=\"work\" form=\"ctrl.form\"></crm-intl-phone>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-6 form-group\" ng-class=\"ctrl.isFullScreen ? 'col-lg-3' : 'col-lg-6'\">\r" +
	    "\n" +
	    "                <label name=\"emailLabel\">{{::'crm.contact.EMAIL' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\" ng-model=\"ctrl.contact.contactPoints.email.value\"\r" +
	    "\n" +
	    "                       name=\"email\"\r" +
	    "\n" +
	    "                       maxlength=\"255\"\r" +
	    "\n" +
	    "                       autocomplete=\"false\"\r" +
	    "\n" +
	    "                       ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.contact.contactPoints.isValid(), 'ng-valid': !ctrl.form.$submitted && ctrl.contact.contactPoints.isValid()}\">\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.form.$submitted && !ctrl.contact.contactPoints.email.isValidOrEmpty() && !ctrl.contact.contactPoints.isValid()\" class=\"form-invalid-message\" name=\"emailInvalidError\">{{ ::'crm.contact.headers.INVALID_EMAIL' | translate}}</span>\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.form.$submitted && ctrl.contact.contactPoints.email.isValidOrEmpty() && !ctrl.contact.contactPoints.isValid()\" class=\"form-invalid-message\" name=\"pointOfContactEmailError\">{{ ::'crm.contact.headers.ONE_POINT_OF_CONTACT' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/add/emailVerify/emailVerifyModalTemplate.html',
	    "<section class=\"ws-panel\" name=\"emailVerifyPanel\" ng-click=\"$event.stopPropagation()\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row ws-flex-row\">\r" +
	    "\n" +
	    "        <header class=\"ws-flex-fill-even ws-panel-title\" name=\"emailVerifyModalTitle\">{{'crm.emailVerify.EMAIL_VERIFY_TITLE' | translate}}</header>\r" +
	    "\n" +
	    "        <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.close()\" role=\"button\" tabindex=\"0\"\r" +
	    "\n" +
	    "           name=\"emailVerifyClose\"></i>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <form class=\"form-group\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <div class=\"radio\" ng-repeat=\"controlItem in ctrl.formControl\">\r" +
	    "\n" +
	    "                <input id=\"radio-id-{{controlItem.label | translate}}\" type=\"radio\" name=\"radio-group-1\" ng-value=\"controlItem\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.selected\">\r" +
	    "\n" +
	    "                <label for=\"radio-id-{{controlItem.label | translate}}\">\r" +
	    "\n" +
	    "                    <span class=\"fake-radio\"></span>{{controlItem.label | translate}}\r" +
	    "\n" +
	    "                </label>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <button class=\"btn btn-primary pull-right\" ng-click=\"ctrl.submit()\">\r" +
	    "\n" +
	    "                Continue\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "        </form>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/contact/add/individual/addIndividualTemplate.html',
	    "<duplicate-contact-banner contact=\"ctrl.contact\" on-select=\"ctrl.selectDuplicate(contact)\"></duplicate-contact-banner>\r" +
	    "\n" +
	    "<form name=\"ctrl.addContactForm\" ng-submit=\"ctrl.submit(ctrl.addContactForm)\"\r" +
	    "\n" +
	    "      co-on-focusout=\"ctrl.updateAlert(ctrl.addContactForm)\" novalidate>\r" +
	    "\n" +
	    "    <div class=\"panel\">\r" +
	    "\n" +
	    "        <crm-contact-info contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                          expanded=\"ctrl.expanded\"\r" +
	    "\n" +
	    "                          form=\"ctrl.addContactForm\"\r" +
	    "\n" +
	    "                          prefix-ref-defs=\"ctrl.individualRefDefs['individual.salutation']\"\r" +
	    "\n" +
	    "                          is-full-screen=\"true\">\r" +
	    "\n" +
	    "        </crm-contact-info>\r" +
	    "\n" +
	    "        <crm-address title=\"{{ctrl.getAddressTitle()}}\"\r" +
	    "\n" +
	    "                     contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                     expanded=\"true\"\r" +
	    "\n" +
	    "                     form=\"ctrl.addContactForm\">\r" +
	    "\n" +
	    "        </crm-address>\r" +
	    "\n" +
	    "        <crm-individual-other-info contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                   expanded=\"ctrl.expanded\"\r" +
	    "\n" +
	    "                                   preferred-language-ref-defs=\"ctrl.individualRefDefs['pref.languages']\"\r" +
	    "\n" +
	    "                                   contact-sources=\"ctrl.individualRefDefs['individual.source']\"\r" +
	    "\n" +
	    "                                   contact-types=\"ctrl.individualRefDefs['individual.type']\">\r" +
	    "\n" +
	    "        </crm-individual-other-info>\r" +
	    "\n" +
	    "        <div class=\"ws-expander-button panel-footer\"\r" +
	    "\n" +
	    "             ng-class=\"{'ws-expanded': ctrl.expanded}\"\r" +
	    "\n" +
	    "             ng-click=\"ctrl.expanded = !ctrl.expanded\">\r" +
	    "\n" +
	    "            <a class=\"ws-expander-button-content\" name=\"viewToggle\">\r" +
	    "\n" +
	    "                <span ng-hide=\"ctrl.expanded\">{{::'crm.contact.SHOW_ALL_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "                <span ng-show=\"ctrl.expanded\">{{::'crm.contact.HIDE_EXTRA_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "            </a>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</form>\r" +
	    "\n"
	  );


	  $templateCache.put('app/contact/add/individualOtherInfo/individualOtherInfoTemplate.html',
	    "<div ng-cloak\r" +
	    "\n" +
	    "     ng-show=\"ctrl.expanded\"\r" +
	    "\n" +
	    "     class=\"panel panel-primary\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading panel-no-padding-top\">\r" +
	    "\n" +
	    "        <div class=\"panel-title\" name=\"otherInfoPanelTitle\">\r" +
	    "\n" +
	    "            {{::'crm.otherInfo.headers.OTHER_INFO' | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-body panel-no-padding-bottom panel-no-padding-top\">\r" +
	    "\n" +
	    "        <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "            <div class=\"col-lg-6 col-md-6 form-group\">\r" +
	    "\n" +
	    "                <label name=\"birthdateLabel\">{{ ::'crm.contact.BIRTH_DATE' | translate}}</label>\r" +
	    "\n" +
	    "                <crm-date-input full-date=\"ctrl.contact.dateOfBirth\"></crm-date-input>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-lg-3 col-md-6 form-group\">\r" +
	    "\n" +
	    "                <label name=\"driversLicenseLabel\">{{ ::'crm.contact.DL' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\" name=\"driversLicense\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.contact.driversLicenseNumber\"\r" +
	    "\n" +
	    "                       maxlength=\"100\"\r" +
	    "\n" +
	    "                       autocomplete=\"false\">\r" +
	    "\n" +
	    "                <span class=\"error\" ng-show=\"form.driversLicense.$error.maxlength\">{{::'crm.contact.headers.ERROR_25_LENGTH' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-lg-3 col-md-6 form-group\">\r" +
	    "\n" +
	    "                <label name=\"genderLabel\">{{ ::'crm.contact.headers.GENDER' | translate}}</label>\r" +
	    "\n" +
	    "                <crm-gender contact=\"ctrl.contact\"></crm-gender>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "            <div class=\"col-lg-6 col-md-6 form-group\">\r" +
	    "\n" +
	    "                <label>{{::'crm.contact.TWITTER' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.contact.contactPoints.twitterHandle.value\"\r" +
	    "\n" +
	    "                       autocomplete=\"false\" name=\"twitter\">\r" +
	    "\n" +
	    "                <span class=\"invalid-message-static\" ng-show=\"ctrl.form.twitter.$error.pattern\">{{ ::'crm.contact.headers.INVALID_CHARACTERS' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-lg-6 col-md-6 form-group\">\r" +
	    "\n" +
	    "                <label>{{::'crm.contact.FACEBOOK' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.contact.contactPoints.facebookHandle.value\"\r" +
	    "\n" +
	    "                       autocomplete=\"false\" name=\"facebook\">\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"languageLabel\">{{::'crm.otherInfo.headers.LANGUAGE' | translate}}</label>\r" +
	    "\n" +
	    "                <select class=\"form-control\" ng-model=\"ctrl.contact.language\" name=\"language\"\r" +
	    "\n" +
	    "                        ng-options=\"refDef.text for refDef in ctrl.preferredLanguageRefDefs track by refDef.value\" >\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"customerTypeLabel\">{{::'crm.otherInfo.headers.CUSTOMER_TYPE' | translate}}</label>\r" +
	    "\n" +
	    "                <select class=\"form-control\" ng-model=\"ctrl.contact.contactType\" name=\"contactType\" ng-change=\"ctrl.updateSubTypes()\"\r" +
	    "\n" +
	    "                        ng-options=\"refDef.text for refDef in ctrl.contactTypes track by refDef.value\" >\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"customerSubtypeLabel\">{{::'crm.otherInfo.headers.CUSTOMER_SUB_TYPE' | translate}}</label>\r" +
	    "\n" +
	    "                <select class=\"form-control\" ng-model=\"ctrl.contact.contactSubType\" name=\"contactSubType\" ng-disabled=\"isLoading\"\r" +
	    "\n" +
	    "                        ng-options=\"refDef.text for refDef in ctrl.contactSubTypes track by refDef.value\" >\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"originalSourceLabel\">{{::'crm.otherInfo.headers.ORIGINAL_SOURCE' | translate}}</label>\r" +
	    "\n" +
	    "                <select class=\"form-control\" ng-model=\"ctrl.contact.source\" name=\"originalSource\"\r" +
	    "\n" +
	    "                        ng-options=\"refDef.text for refDef in ctrl.contactSources track by refDef.value\"></select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-8 form-group\">\r" +
	    "\n" +
	    "                <label name=\"notesLabel\">{{::'crm.otherInfo.headers.NOTES' | translate}}</label>\r" +
	    "\n" +
	    "                <textarea class=\"form-control\" ng-model=\"ctrl.contact.notes\"\r" +
	    "\n" +
	    "                          placeholder=\"{{::'crm.otherInfo.headers.PLACEHOLDER' | translate}}\" name=\"notes\"></textarea>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/add/organization/addOrganizationTemplate.html',
	    "<form name=\"ctrl.addOrganizationForm\"\r" +
	    "\n" +
	    "      ng-submit=\"ctrl.submit(ctrl.addOrganizationForm)\"\r" +
	    "\n" +
	    "      novalidate\r" +
	    "\n" +
	    "      co-on-focusout=\"ctrl.updateAlert(ctrl.addOrganizationForm)\" >\r" +
	    "\n" +
	    "    <div class=\"panel\">\r" +
	    "\n" +
	    "        <crm-organization-info\r" +
	    "\n" +
	    "                contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                expanded=\"ctrl.expanded\"\r" +
	    "\n" +
	    "                form=\"ctrl.addOrganizationForm\"\r" +
	    "\n" +
	    "                prefix-ref-defs=\"ctrl.organizationRefDefs['individual.salutation']\">\r" +
	    "\n" +
	    "        </crm-organization-info>\r" +
	    "\n" +
	    "        <crm-organization-primary-contact-info\r" +
	    "\n" +
	    "                contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                expanded=\"true\">\r" +
	    "\n" +
	    "        </crm-organization-primary-contact-info>\r" +
	    "\n" +
	    "        <crm-address\r" +
	    "\n" +
	    "                title=\"{{ ::'crm.address.headers.ADDRESS' | translate}}\"\r" +
	    "\n" +
	    "                contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                expanded=\"ctrl.expanded\"\r" +
	    "\n" +
	    "                form=\"ctrl.addOrganizationForm\">\r" +
	    "\n" +
	    "        </crm-address>\r" +
	    "\n" +
	    "        <crm-organization-other-info\r" +
	    "\n" +
	    "                contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                expanded=\"ctrl.expanded\"\r" +
	    "\n" +
	    "                contact-sources=\"ctrl.organizationRefDefs['company.source']\"\r" +
	    "\n" +
	    "                contact-types=\"ctrl.organizationRefDefs['company.type']\">\r" +
	    "\n" +
	    "        </crm-organization-other-info>\r" +
	    "\n" +
	    "        <div name=\"viewToggle\"\r" +
	    "\n" +
	    "             class=\"ws-expander-button panel-footer\"\r" +
	    "\n" +
	    "             ng-class=\"{'ws-expanded': ctrl.expanded}\"\r" +
	    "\n" +
	    "             ng-click=\"ctrl.expanded = !ctrl.expanded\">\r" +
	    "\n" +
	    "            <a class=\"ws-expander-button-content\"\r" +
	    "\n" +
	    "               name=\"viewExpand\">\r" +
	    "\n" +
	    "                <span ng-hide=\"ctrl.expanded\">{{::'crm.contact.SHOW_ALL_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "                <span ng-show=\"ctrl.expanded\">{{::'crm.contact.HIDE_EXTRA_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "            </a>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</form>\r" +
	    "\n"
	  );


	  $templateCache.put('app/contact/add/organizationInfo/organizationInfoTemplate.html',
	    "<div class=\"panel panel-primary contact-info-panel\">\r" +
	    "\n" +
	    "    <div class=\"panel-body\" ng-if=\"!ctrl.expanded\">\r" +
	    "\n" +
	    "        <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"companyNameLabel\">{{::'crm.contact.organization.NAME' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control crm-required\" name=\"name\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.contact.name\"\r" +
	    "\n" +
	    "                       maxlength=\"50\"\r" +
	    "\n" +
	    "                       ng-required=\"true\"\r" +
	    "\n" +
	    "                       autocomplete=\"off\">\r" +
	    "\n" +
	    "                <span class=\"form-invalid-message\"\r" +
	    "\n" +
	    "                      name=\"nameInvalid\">{{ ::'crm.contact.headers.REQUIRED' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"mainPhoneLabel\">{{ ::'crm.contact.organization.MAIN_PHONE' | translate}}</label>\r" +
	    "\n" +
	    "                <crm-intl-phone contact=\"ctrl.contact\" model=\"mainNumber\" form=\"ctrl.form\"></crm-intl-phone>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"emailLabel\">{{ ::'crm.contact.EMAIL' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\" name=\"email\" ng-model=\"ctrl.contact.contactPoints.email.value\"\r" +
	    "\n" +
	    "                       co-is-valid=\"ctrl.contact.contactPoints.email.isValidOrEmpty()\"\r" +
	    "\n" +
	    "                       maxlength=\"254\"\r" +
	    "\n" +
	    "                       autocomplete=\"off\"\r" +
	    "\n" +
	    "                       pattern=\"[A-Za-z0-9\\@\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\.]{1,}\"\r" +
	    "\n" +
	    "                       ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.contact.contactPoints.isValid()}\">\r" +
	    "\n" +
	    "                <span class=\"invalid-message-static\" ng-show=\"ctrl.form.email.$error.pattern\">{{ ::'crm.contact.headers.INVALID_CHARACTERS' | translate}}</span>\r" +
	    "\n" +
	    "                <span ng-show=\"ctrl.form.$submitted && !ctrl.contact.contactPoints.email.isValidOrEmpty() && ctrl.contact.contactPoints.isValid()\" class=\"form-invalid-message\" name=\"emailInvalid\">{{ ::'crm.contact.headers.INVALID_EMAIL' | translate}}</span>\r" +
	    "\n" +
	    "                <span ng-show=\"ctrl.form.$submitted && !ctrl.contact.contactPoints.email.isValidOrEmpty() && !ctrl.contact.contactPoints.isValid()\" class=\"form-invalid-message\" name=\"pointOfContactMissingError\">{{ ::'crm.contact.headers.ONE_POINT_OF_CONTACT' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-body\" ng-if=\"ctrl.expanded\">\r" +
	    "\n" +
	    "        <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"expandedCompanyNameLabel\">{{::'crm.contact.organization.NAME' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control crm-required\" name=\"name\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.contact.name\"\r" +
	    "\n" +
	    "                       ng-change=\"ctrl.checkForDuplicates(ctrl.contact)\"\r" +
	    "\n" +
	    "                       maxlength=\"50\"\r" +
	    "\n" +
	    "                       ng-required=\"true\"\r" +
	    "\n" +
	    "                       autocomplete=\"off\">\r" +
	    "\n" +
	    "                <span class=\"form-invalid-message\" ng-show=\"ctrl.form.name.$error.required\" name=\"nameInvalid\">{{ ::'crm.contact.headers.REQUIRED' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"expandedMainPhoneLabel\">{{ ::'crm.contact.organization.MAIN_PHONE' | translate}}</label>\r" +
	    "\n" +
	    "                <crm-intl-phone contact=\"ctrl.contact\" model=\"mainNumber\" form=\"ctrl.form\"></crm-intl-phone>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"expandedEmailLabel\">{{ ::'crm.contact.EMAIL' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\" name=\"email\" ng-model=\"ctrl.contact.contactPoints.email.value\"\r" +
	    "\n" +
	    "                       co-is-valid=\"ctrl.contact.contactPoints.email.isValidOrEmpty()\"\r" +
	    "\n" +
	    "                       maxlength=\"254\"\r" +
	    "\n" +
	    "                       autocomplete=\"off\"\r" +
	    "\n" +
	    "                       pattern=\"[A-Za-z0-9\\@\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\.]{1,}\"\r" +
	    "\n" +
	    "                       ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.contact.contactPoints.isValid()}\">\r" +
	    "\n" +
	    "                <span class=\"invalid-message-static\" ng-show=\"ctrl.form.email.$error.pattern\">{{ ::'crm.contact.headers.INVALID_CHARACTERS' | translate}}</span>\r" +
	    "\n" +
	    "                <span ng-show=\"ctrl.form.$submitted && !ctrl.contact.contactPoints.email.isValidOrEmpty() && ctrl.contact.contactPoints.isValid()\" class=\"form-invalid-message\" name=\"emailInvalid\">{{ ::'crm.contact.headers.INVALID_EMAIL' | translate}}</span>\r" +
	    "\n" +
	    "                <span ng-show=\"ctrl.form.$submitted && !ctrl.contact.contactPoints.email.isValidOrEmpty() && !ctrl.contact.contactPoints.isValid()\" class=\"form-invalid-message\" name=\"pointOfContactMissingError\">{{ ::'crm.contact.headers.ONE_POINT_OF_CONTACT' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\" name=\"phoneTollFree\">\r" +
	    "\n" +
	    "                <label name=\"expandedTollFreePhoneLabel\">{{ ::'crm.contact.organization.TOLL_FREE' | translate}}</label>\r" +
	    "\n" +
	    "                <crm-intl-phone contact=\"ctrl.contact\" model=\"tollFree\" form=\"ctrl.form\"></crm-intl-phone>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\" name=\"fax\">\r" +
	    "\n" +
	    "                <label name=\"expandedFaxLabel\">{{ ::'crm.contact.organization.FAX' | translate}}</label>\r" +
	    "\n" +
	    "                <crm-intl-phone contact=\"ctrl.contact\" model=\"fax\" form=\"ctrl.form\"></crm-intl-phone>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"expandedCompanyUrlLabel\">{{ ::'crm.contact.organization.URL' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\"\r" +
	    "\n" +
	    "                       class=\"form-control\"\r" +
	    "\n" +
	    "                       name=\"website\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.contact.websiteUrl\"\r" +
	    "\n" +
	    "                       autocomplete=\"false\"/>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"expandedTwitterLabel\">{{ ::'crm.contact.TWITTER' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\" name=\"twitter\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.contact.contactPoints.twitterHandle.value\"\r" +
	    "\n" +
	    "                       maxlength=\"15\"\r" +
	    "\n" +
	    "                       pattern=\"[A-Za-z0-9\\_]{1,}\"\r" +
	    "\n" +
	    "                       autocomplete=\"false\"/>\r" +
	    "\n" +
	    "                <span class=\"invalid-message-static\" ng-show=\"ctrl.form.twitter.$error.pattern\">{{ ::'crm.contact.headers.INVALID_CHARACTERS' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"expandedFacebookLabel\">{{ ::'crm.contact.FACEBOOK' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\" name=\"facebook\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.contact.contactPoints.facebookHandle.value\"\r" +
	    "\n" +
	    "                       maxlength=\"50\"\r" +
	    "\n" +
	    "                       pattern=\"[A-Za-z0-9\\.]{1,}\"\r" +
	    "\n" +
	    "                       autocomplete=\"false\"/>\r" +
	    "\n" +
	    "                <span class=\"invalid-message-static\" ng-show=\"ctrl.form.facebook.$error.pattern\">{{ ::'crm.contact.headers.INVALID_CHARACTERS' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/add/organizationOtherInfo/organizationOtherInfoTemplate.html',
	    "<div ng-cloak ng-show=\"ctrl.expanded\"\r" +
	    "\n" +
	    "     class=\"panel panel-primary\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "        <div class=\"panel-title\" name=\"otherInfoHeader\">\r" +
	    "\n" +
	    "            {{::'crm.otherInfo.headers.OTHER_INFO' | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-body\">\r" +
	    "\n" +
	    "        <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"expandedCompanySourceLabel\">{{::'crm.otherInfo.headers.COMPANY_SOURCE' | translate}}</label>\r" +
	    "\n" +
	    "                <select class=\"form-control\" ng-model=\"ctrl.contact.source\" name=\"contactSource\"\r" +
	    "\n" +
	    "                        ng-options=\"refDef.text for refDef in ctrl.contactSources track by refDef.value\" >\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"expandedCompanyTypeLabel\">{{::'crm.otherInfo.headers.COMPANY_TYPE' | translate}}</label>\r" +
	    "\n" +
	    "                <select class=\"form-control\" ng-model=\"ctrl.contact.contactType\" name=\"contactType\" ng-change=\"ctrl.updateSubTypes()\"\r" +
	    "\n" +
	    "                        ng-options=\"refDef.text for refDef in ctrl.contactTypes track by refDef.value\" >\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label name=\"expandedCompanySubTypeLabel\">{{::'crm.otherInfo.headers.COMPANY_SUB_TYPE' | translate}}</label>\r" +
	    "\n" +
	    "                <select class=\"form-control\" ng-model=\"ctrl.contact.contactSubType\" name=\"contactSubType\" ng-disabled=\"ctrl.isLoading\"\r" +
	    "\n" +
	    "                        ng-options=\"refDef.text for refDef in ctrl.contactSubTypes track by refDef.value\" >\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"row\">\r" +
	    "\n" +
	    "            <div class=\"col-md-12 form-group\">\r" +
	    "\n" +
	    "                <label name=\"expandedSpecialNotesLabel\">{{::'crm.otherInfo.headers.NOTES' | translate}}</label>\r" +
	    "\n" +
	    "                <textarea class=\"form-control\" ng-model=\"ctrl.contact.notes\"\r" +
	    "\n" +
	    "                          placeholder=\"{{::'crm.otherInfo.headers.PLACEHOLDER' | translate}}\" name=\"notes\"></textarea>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/add/organizationPrimaryContactInfo/organizationPrimaryContactInfoTemplate.html',
	    "<div ng-cloak ng-show=\"expanded\"\r" +
	    "\n" +
	    "     class=\"panel panel-primary\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "        <div class=\"panel-title\" name=\"primaryContactInfoHeader\">\r" +
	    "\n" +
	    "            {{::'crm.primaryContact.headers.PRIMARY_CONTACT_INFO' | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-body\">\r" +
	    "\n" +
	    "        <div class=\"row\">\r" +
	    "\n" +
	    "            <div class=\"col-lg-3 col-md-6 form-group\">\r" +
	    "\n" +
	    "                <label name=\"firstNameLabel\">{{::'crm.primaryContact.headers.FIRST_NAME' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" name=\"primaryContactFirstName\" class=\"form-control\" autocomplete=\"false\" ng-model=\"contact.primaryContact.First\"/>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-lg-3 col-md-6 form-group\"ng-model=\"contact.primaryContact.First\">\r" +
	    "\n" +
	    "                <label name=\"middleNameLabel\">{{::'crm.primaryContact.headers.MIDDLE_NAME' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" name=\"primaryContactMiddleName\" class=\"form-control\" autocomplete=\"false\" ng-model=\"contact.primaryContact.Middle\"/>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-lg-3 col-md-6 form-group\">\r" +
	    "\n" +
	    "                <label name=\"lastNameLabel\">{{::'crm.primaryContact.headers.LAST_NAME' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" name=\"primaryContactLastName\" class=\"form-control\" autocomplete=\"false\" ng-model=\"contact.primaryContact.Last\"/>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-lg-3 col-md-6 form-group\">\r" +
	    "\n" +
	    "                <label name=\"nicknameLabel\">{{::'crm.primaryContact.headers.NICKNAME' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" name=\"primaryContactNickname\" class=\"form-control\" autocomplete=\"false\" ng-model=\"contact.primaryContact.Friendly\"/>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/contactSplitPane.html',
	    "<div class=\"ws-absolute-fill ws-flex-container\">\r" +
	    "\n" +
	    "    <crm-last-twenty-customers class='ws-flex-auto-size master-list'></crm-last-twenty-customers>\r" +
	    "\n" +
	    "    <div class=\"app-content-body ws-flex-columns ws-flex-fill-even\" co-loading=\"ctrl.isLoading\">\r" +
	    "\n" +
	    "        <ui-view></ui-view>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/duplicates/duplicateSelectionModalTemplate.html',
	    "<section class=\"ws-panel\" name=\"duplicatePanel\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row ws-flex-row\">\r" +
	    "\n" +
	    "        <header class=\"ws-flex-fill-even ws-panel-title\" name=\"duplicateModalTitle\">{{ ::ctrl.modalTitleKey | translate }}</header>\r" +
	    "\n" +
	    "        <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.close()\" role=\"button\" tabindex=\"0\" name=\"duplicateClose\"></i>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <span class=\"ws-flex-fill-even\" name=\"duplicateModalSelectCustomer\">{{ ::ctrl.selectionInstructionsKey | translate }}</span>\r" +
	    "\n" +
	    "        <strong><a ng-click=\"ctrl.addAnyways()\" ng-show=\"ctrl.canAddDuplicate\" name=\"notADuplicateLink\">{{ ::ctrl.addAnywaysTextKey | translate }}</a></strong>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\" name=\"duplicateModalContactCard\" ng-repeat=\"duplicate in ctrl.duplicates\">\r" +
	    "\n" +
	    "        <crm-contact-summary-card contact=\"duplicate\" class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "            <button ng-click=\"ctrl.selectExistingContact(duplicate)\" name=\"selectCustomer\"\r" +
	    "\n" +
	    "                    class=\"btn ws-secondary-action\">{{ ::ctrl.selectActionTextKey | translate}}</button>\r" +
	    "\n" +
	    "        </crm-contact-summary-card>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/contact/gmLookup/gmLookupTemplate.html',
	    "<iframe id=\"gmLookupFrame\" class=\"ws-absolute-fill\" ng-src=\"{{ctrl.getUrl()}}\" height=\"684\" width=\"100%\"></iframe>\r" +
	    "\n" +
	    "<button class=\"pull-right ws-quinary-action\" ng-click=\"ctrl.scopeModel.onClose()\">\r" +
	    "\n" +
	    "    <i class=\"fa fa-close\"></i>\r" +
	    "\n" +
	    "</button>"
	  );


	  $templateCache.put('app/contact/marketing/card/contact-marketing-card.component.actions.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" ng-if=\"!ctrl.isActive\" ng-click=\"ctrl.showReactivateCampaignModal()\">\r" +
	    "\n" +
	    "        <a>{{::\"crm.contact.marketing.REACTIVATE_CAMPAIGN\" | translate}}</a>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" ng-if=\"ctrl.isActive\" ng-click=\"ctrl.showDeactivateCampaignModal()\">\r" +
	    "\n" +
	    "        <a>{{::\"crm.contact.marketing.DEACTIVATE_CAMPAIGN\" | translate}}</a>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" ng-click=\"ctrl.showDeleteCampaignModal()\">\r" +
	    "\n" +
	    "        <a ng-disabled=\"!ctrl.permissions || !ctrl.permissions.remove\">{{::\"crm.contact.marketing.DELETE_CAMPAIGN\" | translate}}</a>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/marketing/card/contact-marketing-card.component.html',
	    "<co-panel co-multi-transclusion class=\"ds-card ws-status-ribbon\" ng-class=\"ctrl.getStatusClass()\" ng-click=\"ctrl.showCampaignSummaryModal()\">\r" +
	    "\n" +
	    "    <div transclude-to=\"title\" name=\"campaign-title\">\r" +
	    "\n" +
	    "        {{::ctrl.campaign.name}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <div>\r" +
	    "\n" +
	    "            <ul class=\"ws-slash-separated-list ws-separated-list-default-separator-color\">\r" +
	    "\n" +
	    "                <li class=\"ws-separated-list-item ws-status-text\" name=\"campaign-status\">\r" +
	    "\n" +
	    "                    {{ctrl.campaign.status}}\r" +
	    "\n" +
	    "                </li>\r" +
	    "\n" +
	    "                <li class=\"ws-separated-list-item\" name=\"campaign-type\">\r" +
	    "\n" +
	    "                    {{::ctrl.campaign.type}}\r" +
	    "\n" +
	    "                </li>\r" +
	    "\n" +
	    "            </ul>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div>\r" +
	    "\n" +
	    "            <ul class=\"ws-slash-separated-list\">\r" +
	    "\n" +
	    "                <li class=\"ws-separated-list-item\" name=\"campaign-start-date\">\r" +
	    "\n" +
	    "                    {{::ctrl.campaign.startDate}}\r" +
	    "\n" +
	    "                </li>\r" +
	    "\n" +
	    "                <li class=\"ws-separated-list-item\"\r" +
	    "\n" +
	    "                    translate=\"crm.contact.marketing.NUMBER_OF_STEPS_PERFORMED\"\r" +
	    "\n" +
	    "                    translate-value-steps-completed=\"{{::ctrl.completedMilestoneCount}}\"\r" +
	    "\n" +
	    "                    translate-value-total-steps=\"{{::ctrl.campaign.milestones.length}}\"\r" +
	    "\n" +
	    "                    name=\"campaign-step-info\">\r" +
	    "\n" +
	    "                </li>\r" +
	    "\n" +
	    "            </ul>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <div ng-if=\"::ctrl.isCompleted\" name=\"campaign-last-step-completed-date\">\r" +
	    "\n" +
	    "            {{::\"crm.contact.marketing.LAST_STEP_COMPLETED\" | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div ng-if=\"ctrl.isActive\"\r" +
	    "\n" +
	    "             translate=\"crm.contact.marketing.NUMBER_OF_STEPS_COMPLETED\"\r" +
	    "\n" +
	    "             translate-value-steps-completed=\"{{::ctrl.completedMilestoneCount}}\"\r" +
	    "\n" +
	    "             name=\"campaign-last-step-completed-date\">\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div ng-if=\"ctrl.isInactive\" name=\"campaign-last-step-completed-date\">\r" +
	    "\n" +
	    "            {{::\"crm.contact.marketing.NO_STEPS_COMPLETED\" | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div name=\"campaign-last-step-completed-date-value\">\r" +
	    "\n" +
	    "            {{::ctrl.lastCompletedMilestoneDate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div>\r" +
	    "\n" +
	    "            <a ns-popover\r" +
	    "\n" +
	    "               ns-popover-placement=\"bottom|right\"\r" +
	    "\n" +
	    "               ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "               ns-popover-template=\"app/contact/marketing/card/contact-marketing-card.component.actions.html\"\r" +
	    "\n" +
	    "               ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "               ns-popover-hide-on-inside-click=\"true\"\r" +
	    "\n" +
	    "               ng-click=\"$event.stopPropagation()\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-ellipsis-h ws-dots ws-dots-inline\" name=\"campaign-dropdown\"></i>\r" +
	    "\n" +
	    "            </a>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/contact/marketing/card/contact-marketing-card.component.modal.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-primary panel-modal ng-scope\">\r" +
	    "\n" +
	    "        <div class=\"panel-heading ws-panel-heading-no-separator\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "                <h3 class=\"panel-title ws-flex-fill-even\" name=\"campaignModalTitle\">{{::ctrl.campaign.name}}</h3>\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.cancel()\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-body ws-customer-marketing-campaign-details\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-lg-6\">\r" +
	    "\n" +
	    "                    <ul class=\"list-group\">\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"campaignModalStatus\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{::\"crm.salesOpportunity.marketing.details.CAMPAIGN_STATUS\" | translate}}: </span>\r" +
	    "\n" +
	    "                            {{::ctrl.campaign.status}}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"campaignModalCampaignId\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{::\"crm.salesOpportunity.marketing.details.CAMPAIGN_ID\" | translate}}: </span>\r" +
	    "\n" +
	    "                            {{::ctrl.campaign.id}}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"campaignModalTrackingCode\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{::\"crm.salesOpportunity.marketing.details.CAMPAIGN_TRACKING\" | translate}}: </span>\r" +
	    "\n" +
	    "                            {{::ctrl.campaign.tracking}}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"campaignModalStartDate\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{::\"crm.salesOpportunity.marketing.details.CAMPAIGN_START_DATE\" | translate}}: </span>\r" +
	    "\n" +
	    "                            <crm-date date-time=\"ctrl.campaign.validDate\" mode=\"dateNumeric\" extend=\"true\"></crm-date>\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                    </ul>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-lg-6\">\r" +
	    "\n" +
	    "                    <ul class=\"list-group\">\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"campaignModalCampaignType\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{::\"crm.salesOpportunity.marketing.details.CAMPAIGN_TYPE\" | translate}}: </span>\r" +
	    "\n" +
	    "                            {{::ctrl.campaign.type}}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"campaignModalOpportunityCategory\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{::\"crm.salesOpportunity.marketing.details.OPPORTUNITY_CATEGORY\" | translate}}: </span>\r" +
	    "\n" +
	    "                            {{::ctrl.campaign.eventCategory}}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"campaignModalStopStatus\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{::\"crm.salesOpportunity.marketing.details.STOP_STATUS\" | translate}}: </span>\r" +
	    "\n" +
	    "                            {{::ctrl.campaign.stopStatus}}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                    </ul>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-lg-12\">\r" +
	    "\n" +
	    "                    <ul class=\"list-group\">\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"campaignModalCampaignObjective\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{::\"crm.salesOpportunity.marketing.details.CAMPAIGN_OBJECTIVE\" | translate}}: </span>\r" +
	    "\n" +
	    "                            {{::ctrl.campaign.objective}}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                    </ul>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-lg-12\" ng-show=\"ctrl.campaign.milestones.length\">\r" +
	    "\n" +
	    "                    <table class=\"table\" co-scrollable-table visible-rows=\"5\">\r" +
	    "\n" +
	    "                        <thead>\r" +
	    "\n" +
	    "                        <tr>\r" +
	    "\n" +
	    "                            <th>{{::\"crm.salesOpportunity.marketing.details.MILESTONE_TYPE\" | translate}}</th>\r" +
	    "\n" +
	    "                            <th>{{::\"crm.salesOpportunity.marketing.details.MILESTONE_DESCRIPTION\" | translate}}</th>\r" +
	    "\n" +
	    "                            <th>{{::\"crm.salesOpportunity.marketing.details.MILESTONE_RUN_TYPE\" | translate}}</th>\r" +
	    "\n" +
	    "                            <th>{{::\"crm.salesOpportunity.marketing.details.MILESTONE_DAYS_AFTER\" | translate}}</th>\r" +
	    "\n" +
	    "                            <th>{{::\"crm.salesOpportunity.marketing.details.MILESTONE_STATUS\" | translate}}</th>\r" +
	    "\n" +
	    "                        </tr>\r" +
	    "\n" +
	    "                        </thead>\r" +
	    "\n" +
	    "                        <tbody>\r" +
	    "\n" +
	    "                        <tr ng-repeat=\"milestone in ctrl.campaign.milestones\">\r" +
	    "\n" +
	    "                            <td name=\"campaignModalMilestoneType\">{{::milestone.type}}</td>\r" +
	    "\n" +
	    "                            <td name=\"campaignModalMilestoneDescription\">{{::milestone.description}}</td>\r" +
	    "\n" +
	    "                            <td name=\"campaignModalMilestoneRunType\">{{::milestone.runType}}</td>\r" +
	    "\n" +
	    "                            <td name=\"campaignModalMilestoneDaysAfter\">{{::milestone.day}}</td>\r" +
	    "\n" +
	    "                            <td name=\"campaignModalMilestoneStatus\">{{::milestone.status}}</td>\r" +
	    "\n" +
	    "                        </tr>\r" +
	    "\n" +
	    "                        </tbody>\r" +
	    "\n" +
	    "                    </table>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-lg-12\" ng-hide=\"ctrl.campaign.milestones.length\" name=\"campaignModalNoMilestonesMessage\">\r" +
	    "\n" +
	    "                    {{::\"crm.salesOpportunity.marketing.details.MILESTONE_NOT_FOUND\" | translate}}\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/marketing/panel/contact-marketing-panel.component.add-modal.html',
	    "<div class=\"modal-content ws-modal-contrast\" co-loading=\"ctrl.isAddModalLoading\" loading-show-children=\"true\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-primary panel-modal\">\r" +
	    "\n" +
	    "        <div class=\"panel-heading\">\r" +
	    "\n" +
	    "            <h3 class=\"panel-title\">{{::\"crm.salesOpportunity.marketing.addCustomer.TITLE\" | translate}}</h3>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-body\">\r" +
	    "\n" +
	    "            <crm-alert alert-names=\"[ctrl.CrmConstants.CONTACT.MARKETING.ADD_MODAL.ERROR_OCCURRED]\"></crm-alert>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-4\">\r" +
	    "\n" +
	    "                    <div class=\"form-group\">\r" +
	    "\n" +
	    "                        <label>{{::\"crm.salesOpportunity.marketing.addCustomer.STATUS\" | translate}}</label>\r" +
	    "\n" +
	    "                        <select class=\"form-control\" name=\"choose-status\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.selectedStatusId\"\r" +
	    "\n" +
	    "                                ng-change=\"ctrl.tryLoadCampaignRefDefs()\"\r" +
	    "\n" +
	    "                                ng-options=\"status.value as status.text for status in ctrl.refDefs.statuses\">\r" +
	    "\n" +
	    "                            <option value=\"\">{{::\"crm.salesOpportunity.status.modal.SELECT_EMPTY\" | translate}}</option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-4\">\r" +
	    "\n" +
	    "                    <div class=\"form-group\">\r" +
	    "\n" +
	    "                        <label>{{::\"crm.salesOpportunity.marketing.addCustomer.CATEGORY\" | translate}}</label>\r" +
	    "\n" +
	    "                        <select class=\"form-control\" name=\"choose-category\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.selectedCategoryId\"\r" +
	    "\n" +
	    "                                ng-change=\"ctrl.tryLoadCampaignRefDefs()\"\r" +
	    "\n" +
	    "                                ng-options=\"category.value as category.text for category in ctrl.refDefs.categories\">\r" +
	    "\n" +
	    "                            <option value=\"\">{{::\"crm.salesOpportunity.status.modal.SELECT_EMPTY\" | translate}}</option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-4\">\r" +
	    "\n" +
	    "                    <div class=\"form-group\">\r" +
	    "\n" +
	    "                        <label>{{::\"crm.salesOpportunity.marketing.addCustomer.CAMPAIGN\" | translate}}</label>\r" +
	    "\n" +
	    "                        <select class=\"form-control\" name=\"choose-campaign\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.selectedCampaignId\"\r" +
	    "\n" +
	    "                                ng-disabled=\"!ctrl.campaignRefDefs\"\r" +
	    "\n" +
	    "                                ng-options=\"campaign.value as campaign.text for campaign in ctrl.campaignRefDefs\">\r" +
	    "\n" +
	    "                            <option value=\"\">{{::\"crm.salesOpportunity.status.modal.SELECT_EMPTY\" | translate}}</option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-footer\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                    <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                        <button class=\"btn btn-quaternary\" ng-click=\"ctrl.cancel()\">\r" +
	    "\n" +
	    "                            {{::\"crm.salesOpportunity.marketing.addCustomer.CANCEL\" | translate}}\r" +
	    "\n" +
	    "                        </button>\r" +
	    "\n" +
	    "                        <button class=\"btn btn-primary\" name=\"enroll-customer\" ng-click=\"ctrl.accept()\" ng-disabled=\"!ctrl.selectedCampaignId\">\r" +
	    "\n" +
	    "                            {{::\"crm.salesOpportunity.marketing.addCustomer.ACCEPT\" | translate}}\r" +
	    "\n" +
	    "                        </button>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/marketing/panel/contact-marketing-panel.component.html',
	    "<div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "        <ul class=\"ws-advanced-search-options\">\r" +
	    "\n" +
	    "            <li>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a class=\"toggle-inner-panel-link ws-link\" disabled name=\"campaignStatusFilter\">\r" +
	    "\n" +
	    "                        {{::\"crm.salesOpportunity.marketing.STATUS\" | translate}}\r" +
	    "\n" +
	    "                        <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a class=\"toggle-inner-panel-link ws-link\" disabled name=\"campaignTypeFilter\">\r" +
	    "\n" +
	    "                        {{::\"crm.salesOpportunity.marketing.CAMPAIGN TYPE\" | translate}}\r" +
	    "\n" +
	    "                        <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                 </span>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a class=\"toggle-inner-panel-link ws-link\" disabled name=\"campaignDealershipFilter\">\r" +
	    "\n" +
	    "                        {{::\"crm.salesOpportunity.marketing.DEALERSHIP\" | translate}}\r" +
	    "\n" +
	    "                        <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                 </span>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "        <ul class=\"ws-advanced-search-options\">\r" +
	    "\n" +
	    "            <li class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                <a ns-popover\r" +
	    "\n" +
	    "                   ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                   ns-popover-template=\"app/contact/shared/contact-sort-options.html\"\r" +
	    "\n" +
	    "                   ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "                   ns-popover-hide-on-inside-click=\"true\"\r" +
	    "\n" +
	    "                   ns-popover-timeout=\"100000\"\r" +
	    "\n" +
	    "                   class=\"toggle-inner-panel-link ws-link\"\r" +
	    "\n" +
	    "                   name=\"campaignSort\">\r" +
	    "\n" +
	    "                    {{::\"crm.contact.sorting.SORT\" | translate}}: {{ctrl.selectedSort.text}}\r" +
	    "\n" +
	    "                    <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "<div class=\"ws-panel-row ws-small-margin\">\r" +
	    "\n" +
	    "    <div class=\"btn btn-tertiary btn-full-width\"\r" +
	    "\n" +
	    "         ng-class=\"{'disabled': !ctrl.permissions.add}\"\r" +
	    "\n" +
	    "         name=\"addCustomerToCampaignButton\"\r" +
	    "\n" +
	    "         ng-click=\"ctrl.showAddCampaign()\">\r" +
	    "\n" +
	    "        <i class=\"fa fa-plus-circle\"></i> {{::\"crm.salesOpportunity.marketing.ADD_CUSTOMER_TO_CAMPAIGN\" | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "<ds-contact-marketing-card\r" +
	    "\n" +
	    "    ng-repeat=\"campaign in ctrl.campaigns\"\r" +
	    "\n" +
	    "    contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "    campaign=\"campaign\"\r" +
	    "\n" +
	    "    permissions=\"ctrl.permissions\"\r" +
	    "\n" +
	    "    on-delete=\"ctrl.onDelete(campaign)\">\r" +
	    "\n" +
	    "</ds-contact-marketing-card>"
	  );


	  $templateCache.put('app/contact/phoneNumbers/template.html',
	    "<div ng-if=\"ctrl.phoneNumbers.length > 0\" name=\"phoneNumbers\">\r" +
	    "\n" +
	    "    <div class=\"ws-ellipsis\"\r" +
	    "\n" +
	    "         ng-repeat=\"phone in ctrl.phoneNumbers\">\r" +
	    "\n" +
	    "        <a ng-if=\"ctrl.permission\">\r" +
	    "\n" +
	    "            <crm-phone-number-view\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.makeClickToCall(phone.value)\"\r" +
	    "\n" +
	    "                    phone-number=\"phone\"\r" +
	    "\n" +
	    "                    letter-only=\"true\"\r" +
	    "\n" +
	    "                    do-not-call=\"false\">\r" +
	    "\n" +
	    "            </crm-phone-number-view>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "        <crm-phone-number-view\r" +
	    "\n" +
	    "                ng-if=\"!ctrl.permission\"\r" +
	    "\n" +
	    "                phone-number=\"phone\"\r" +
	    "\n" +
	    "                letter-only=\"true\"\r" +
	    "\n" +
	    "                do-not-call=\"ctrl.doNotCall\">\r" +
	    "\n" +
	    "        </crm-phone-number-view>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/shared/contact-sort-options.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"date-added-new\" ng-click=\"ctrl.setSelectedSort(ctrl.CrmConstants.DATE_ADDED_NEWEST);\">\r" +
	    "\n" +
	    "        {{::\"crm.salesOpportunity.tabs.DATE_ADDED_NEWEST\" | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"date-added-old\" ng-click=\"ctrl.setSelectedSort(ctrl.CrmConstants.DATE_ADDED_OLDEST)\">\r" +
	    "\n" +
	    "        {{::\"crm.salesOpportunity.tabs.DATE_ADDED_OLDEST\" | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"updated-new\" ng-click=\"ctrl.setSelectedSort(ctrl.CrmConstants.LAST_UPDATED_NEWEST)\">\r" +
	    "\n" +
	    "        {{::\"crm.salesOpportunity.tabs.LAST_UPDATED_NEWEST\" | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"updated-old\" ng-click=\"ctrl.setSelectedSort(ctrl.CrmConstants.LAST_UPDATED_OLDEST)\">\r" +
	    "\n" +
	    "        {{::\"crm.salesOpportunity.tabs.LAST_UPDATED_OLDEST\" | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/contact/summaryCard/contactSummaryAddressTemplate.html',
	    "<div class=\"ws-ellipsis\" name=\"cityStatePostal\">\r" +
	    "\n" +
	    "    <span ng-show=\"ctrl.contact.address.address1\">\r" +
	    "\n" +
	    "        {{ ctrl.contact.address.address1 }},\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "    <span ng-show=\"ctrl.contact.address.city\">\r" +
	    "\n" +
	    "        {{ ctrl.contact.address.city }},\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "    <span ng-show=\"ctrl.contact.address.state\">\r" +
	    "\n" +
	    "        {{ ctrl.contact.address.state }}\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "    <span ng-show=\"ctrl.contact.address.postal\">\r" +
	    "\n" +
	    "        {{ ctrl.contact.address.postal }}\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/summaryCard/contactSummaryCardTemplate.html',
	    "<section class=\"ws-panel\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-media\">\r" +
	    "\n" +
	    "            <div class=\"ws-content-group ws-center-content-h\" name=\"contactImage\">\r" +
	    "\n" +
	    "                <co-profile-image class=\"contact-image-donut-50\"\r" +
	    "\n" +
	    "                                  image-url=\"{{ctrl.contact.imgUrl}}\"\r" +
	    "\n" +
	    "                                  initials=\"{{ctrl.contact.getInitials()}}\"\r" +
	    "\n" +
	    "                                  is-organization=\"ctrl.contact.isOrganization()\"></co-profile-image>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <ng-include ng-if=\"!ctrl.contact.isOrganization()\"\r" +
	    "\n" +
	    "                        src=\"'app/contact/summaryCard/individualSummaryCardTemplate.html'\"></ng-include>\r" +
	    "\n" +
	    "            <ng-include ng-if=\"ctrl.contact.isOrganization()\"\r" +
	    "\n" +
	    "                        src=\"'app/contact/summaryCard/organizationSummaryCardTemplate.html'\"></ng-include>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-deaccent-text ws-content-group\" name=\"contactIdNumber\">{{ ::'crm.contact.duplicates.ID' | translate }} {{ctrl.contact.id}}</div>\r" +
	    "\n" +
	    "            <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                <div ng-transclude=\"\"></div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/contact/summaryCard/individualSummaryCardTemplate.html',
	    "<div class=\"ws-content-group\">\r" +
	    "\n" +
	    "    <header>\r" +
	    "\n" +
	    "        <div class=\"ws-panel-title\" name=\"individualSummaryCardCustomerName\">{{ctrl.contact.getFullName()}}</div>\r" +
	    "\n" +
	    "    </header>\r" +
	    "\n" +
	    "    <div>{{ ctrl.contact.notes }}</div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "<div class=\"ws-panel-row ws-content-group ws-flex-row\">\r" +
	    "\n" +
	    "    <div class=\"ws-flex-auto-size ws-content-group-horizontal\" ng-if=\"ctrl.phoneNumbers.length > 0\">\r" +
	    "\n" +
	    "        <div class=\"ws-ellipsis\"\r" +
	    "\n" +
	    "             ng-repeat=\"phone in ctrl.phoneNumbers\">\r" +
	    "\n" +
	    "                <crm-phone-number-view phone-number=\"phone\" letter-only=\"true\" name=\"phoneNumber\"></crm-phone-number-view>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-flex-auto-size ws-content-group-horizontal\">\r" +
	    "\n" +
	    "        <div class=\"ws-ellipsis\" name=\"duplicateContactEmail\">{{ ctrl.contact.contactPoints.email.value }}</div>\r" +
	    "\n" +
	    "        <ng-include src=\"'app/contact/summaryCard/contactSummaryAddressTemplate.html'\"></ng-include>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/contact/summaryCard/organizationSummaryCardTemplate.html',
	    "<div class=\"ws-content-group\">\r" +
	    "\n" +
	    "    <header>\r" +
	    "\n" +
	    "        <div class=\"ws-panel-title\">{{ctrl.contact.name}}</div>\r" +
	    "\n" +
	    "    </header>\r" +
	    "\n" +
	    "    <div>{{ ctrl.contact.notes }}</div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "<div class=\"ws-panel-row ws-content-group ws-flex-row\">\r" +
	    "\n" +
	    "    <div class=\"ws-flex-auto-size ws-content-group-horizontal\" ng-if=\"ctrl.phoneNumbers.length > 0\">\r" +
	    "\n" +
	    "        <div class=\"ws-ellipsis\"\r" +
	    "\n" +
	    "             ng-repeat=\"phone in ctrl.phoneNumbers\">\r" +
	    "\n" +
	    "            <crm-phone-number-view phone-number=\"phone\" letter-only=\"true\"></crm-phone-number-view>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-flex-auto-size ws-content-group-horizontal\">\r" +
	    "\n" +
	    "        <div>\r" +
	    "\n" +
	    "            <span>{{ctrl.contact.primaryContact.First}}</span>\r" +
	    "\n" +
	    "            <span ng-show=\"ctrl.hasPrimaryContactFriendlyName()\">\"{{ctrl.contact.primaryContact.Friendly}}\"</span>\r" +
	    "\n" +
	    "            <span ng-show=\"ctrl.hasPrimaryContactMiddleName()\">{{ctrl.contact.primaryContact.Middle[0]}}.</span>\r" +
	    "\n" +
	    "            <span>{{ctrl.contact.primaryContact.Last}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <ng-include src=\"'app/contact/summaryCard/contactSummaryAddressTemplate.html'\"></ng-include>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/contact/views/card/contact/contactCardTemplate.html',
	    "<uib-tabset class=\"ws-detail-view-content-group\" ng-cloak>\r" +
	    "\n" +
	    "    <uib-tab>\r" +
	    "\n" +
	    "        <uib-tab-heading name=\"customerTab\">\r" +
	    "\n" +
	    "            <div class=\"tab-title\">{{ ::'crm.contact.headers.CUSTOMER' | translate }}</div>\r" +
	    "\n" +
	    "        </uib-tab-heading>\r" +
	    "\n" +
	    "        <div ng-if=\"ctrl.isOrganization\">\r" +
	    "\n" +
	    "            <crm-organization-card contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                   contact-type=\"{{ctrl.contactType}}\"\r" +
	    "\n" +
	    "                                   show-full-profile=\"ctrl.shouldShowFullProfile()\"></crm-organization-card>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div ng-if=\"!ctrl.isOrganization\">\r" +
	    "\n" +
	    "            <crm-individual-card contact=\"ctrl.contact\" contact-type=\"{{ctrl.contactType}}\"\r" +
	    "\n" +
	    "                                 show-full-profile=\"ctrl.shouldShowFullProfile()\"></crm-individual-card>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </uib-tab>\r" +
	    "\n" +
	    "    <uib-tab>\r" +
	    "\n" +
	    "        <uib-tab-heading name=\"connectionsTab\">\r" +
	    "\n" +
	    "            <i ng-hide=\"ctrl.connectionsCount > 0\" class=\"fa fa-plus-circle\"></i>\r" +
	    "\n" +
	    "                                <span class=\"tab-title\">\r" +
	    "\n" +
	    "                                    {{::'crm.contact.headers.CONNECTIONS' | translate}}\r" +
	    "\n" +
	    "                                    <span ng-show=\"ctrl.connectionsCount > 0\"> ({{ ctrl.connectionsCount }})</span>\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "        </uib-tab-heading>\r" +
	    "\n" +
	    "        <md-progress-circular class=\"ws-progress-circular ws-progress-centered\"\r" +
	    "\n" +
	    "                              ng-show=\"ctrl.updatingConnections\"\r" +
	    "\n" +
	    "                              md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "        <crm-connections ng-hide=\"ctrl.updatingConnections\" contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                         connections=\"ctrl.connections\"></crm-connections>\r" +
	    "\n" +
	    "    </uib-tab>\r" +
	    "\n" +
	    "    <uib-tab>\r" +
	    "\n" +
	    "        <uib-tab-heading name=\"loyaltySummaryTab\">\r" +
	    "\n" +
	    "            <span class=\"tab-title\">\r" +
	    "\n" +
	    "                <span>{{ ::'crm.contact.headers.LOYALTY_SUMMARY' | translate }}</span>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </uib-tab-heading>\r" +
	    "\n" +
	    "        <crm-loyalty-summary contact=\"ctrl.contact\"></crm-loyalty-summary>\r" +
	    "\n" +
	    "    </uib-tab>\r" +
	    "\n" +
	    "</uib-tabset>"
	  );


	  $templateCache.put('app/contact/views/card/contact/vehicle/contactVehicleCardTemplate.html',
	    "<div class=\"panel panel-primary\">\r" +
	    "\n" +
	    "    <co-panel co-multi-transclusion ribbon=\"true\" class=\"ds-card-vehicle\">\r" +
	    "\n" +
	    "        <div transclude-to=\"media\">\r" +
	    "\n" +
	    "            <div class=\"ds-card-thumbnail-small\">\r" +
	    "\n" +
	    "                <img id=\"vehicleImage\" ng-src=\"{{::ctrl.vehicle.imageUrls[0] || 'http://i.imgur.com/xny7HIb.png'}}\">\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        <span name=\"vehicleTitle\">\r" +
	    "\n" +
	    "            <span ng-bind-html=\"::ctrl.vehicle.year\"> </span>\r" +
	    "\n" +
	    "            <span ng-bind-html=\"::ctrl.vehicle.make\"> </span>\r" +
	    "\n" +
	    "            <span ng-bind-html=\"::ctrl.vehicle.model\"></span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "            <co-panel-actions-menu\r" +
	    "\n" +
	    "                    items=\"ctrl.actionItems\"\r" +
	    "\n" +
	    "                    transclude-to=\"actions\"\r" +
	    "\n" +
	    "                    tooltip-placement=\"top\"\r" +
	    "\n" +
	    "                    tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "                    tooltip-trigger\r" +
	    "\n" +
	    "                    name=\"oppActivityMenu\"\r" +
	    "\n" +
	    "                    tooltip=\"{{::'crm.salesOpportunity.activities.MORE_ACTIONS' | translate }}\">\r" +
	    "\n" +
	    "            </co-panel-actions-menu>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        <div transclude-to=\"main\">\r" +
	    "\n" +
	    "            <div class=\"panel-body service-event-vehicle-info\">\r" +
	    "\n" +
	    "                <div class=\"row\">\r" +
	    "\n" +
	    "                    <div class=\"col-xs-12 col-md-6\">\r" +
	    "\n" +
	    "                        <div class=\"ws-vehicle-stats-primary-group\">\r" +
	    "\n" +
	    "                            <ul class=\"list-group\">\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <crm-inline-edit facade=\"ctrl.vinFacade\" has-value=\"!!(ctrl.vehicle.vin)\"\r" +
	    "\n" +
	    "                                                     name=\"editVin\">\r" +
	    "\n" +
	    "                                                <span id=\"vinText\" ng-if=\"ctrl.vehicle.vin\">\r" +
	    "\n" +
	    "                                                    <span class=\"item-heading\">{{ ::'vehicle.VIN' | translate }}:</span>\r" +
	    "\n" +
	    "                                                    <span>{{ctrl.vehicle.vin}}</span>\r" +
	    "\n" +
	    "                                                </span>\r" +
	    "\n" +
	    "                                        <i class=\"fa fa-check text-success\" ng-show=\"ctrl.vinSaved\"\r" +
	    "\n" +
	    "                                           aria-hidden=\"false\" style=\"\"></i>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.vehicle.vin\">\r" +
	    "\n" +
	    "                                            {{ ::'vehicle.VIN' | translate }}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-edit>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <crm-inline-edit facade=\"ctrl.odometerFacade\" has-value=\"!!(ctrl.vehicle.odometer)\"\r" +
	    "\n" +
	    "                                                     name=\"editOdometer\">\r" +
	    "\n" +
	    "                                                <span id=\"odometerText\" ng-if=\"ctrl.vehicle.odometer\">\r" +
	    "\n" +
	    "                                                    <span class=\"item-heading\">{{ ::'vehicle.Odometer' | translate }}:</span>\r" +
	    "\n" +
	    "                                                    <span>{{ctrl.vehicle.odometer}}</span>\r" +
	    "\n" +
	    "                                                </span>\r" +
	    "\n" +
	    "                                        <i class=\"fa fa-check text-success\" ng-show=\"ctrl.odometerSaved\"\r" +
	    "\n" +
	    "                                           aria-hidden=\"false\" style=\"\"></i>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.vehicle.odometer\">\r" +
	    "\n" +
	    "                                            {{ ::'vehicle.Odometer' | translate }}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-edit>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                            </ul>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-xs-12 col-md-6\">\r" +
	    "\n" +
	    "                        <div class=\"ws-vehicle-stats-secondary-group\">\r" +
	    "\n" +
	    "                            <ul class=\"list-group\">\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <crm-inline-edit facade=\"ctrl.bodyStyleFacade\"\r" +
	    "\n" +
	    "                                                     has-value=\"!!(ctrl.vehicle.bodyStyle)\"\r" +
	    "\n" +
	    "                                                     name=\"editBodyStyle\">\r" +
	    "\n" +
	    "                                                <span class=\"item-heading\" ng-if=\"ctrl.vehicle.bodyStyle\">\r" +
	    "\n" +
	    "                                                    {{ ::'vehicle.labels.BODY_STYLE' | translate }}:\r" +
	    "\n" +
	    "                                                </span>\r" +
	    "\n" +
	    "                                        {{ctrl.vehicle.bodyStyle}}\r" +
	    "\n" +
	    "                                        <i class=\"fa fa-check text-success\" ng-show=\"ctrl.bodyStyleSaved\"\r" +
	    "\n" +
	    "                                           aria-hidden=\"false\" style=\"\"></i>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.vehicle.bodyStyle\">\r" +
	    "\n" +
	    "                                            {{ ::'vehicle.labels.BODY_STYLE' | translate }}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-edit>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <crm-inline-edit facade=\"ctrl.interiorColorFacade\"\r" +
	    "\n" +
	    "                                                     has-value=\"!!(ctrl.vehicle.interiorColor)\"\r" +
	    "\n" +
	    "                                                     name=\"editInteriorColor\">\r" +
	    "\n" +
	    "                                                <span class=\"item-heading\" ng-if=\"ctrl.vehicle.interiorColor\">\r" +
	    "\n" +
	    "                                                    {{ ::'vehicle.labels.INTERIOR_COLOR' | translate }}:\r" +
	    "\n" +
	    "                                                </span>\r" +
	    "\n" +
	    "                                        {{ctrl.vehicle.interiorColor}}\r" +
	    "\n" +
	    "                                        <i class=\"fa fa-check text-success\" ng-show=\"ctrl.interiorColorSaved\"\r" +
	    "\n" +
	    "                                           aria-hidden=\"false\" style=\"\"></i>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.vehicle.interiorColor\">\r" +
	    "\n" +
	    "                                            {{ ::'vehicle.labels.INTERIOR_COLOR' | translate }}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-edit>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                            </ul>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"row\">\r" +
	    "\n" +
	    "                    <div class=\"collapsible\" ng-show=\"isCollapsed\">\r" +
	    "\n" +
	    "                        <div class=\"col-xs-12 col-md-6\">\r" +
	    "\n" +
	    "                            <div class=\"ws-vehicle-stats-primary-group\">\r" +
	    "\n" +
	    "                                <ul class=\"list-group\">\r" +
	    "\n" +
	    "                                    <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                        <crm-inline-edit facade=\"ctrl.plateFacade\" has-value=\"!!(ctrl.vehicle.plate)\"\r" +
	    "\n" +
	    "                                                         name=\"editPlate\">\r" +
	    "\n" +
	    "                                                <span class=\"item-heading\" ng-if=\"ctrl.vehicle.plate\">\r" +
	    "\n" +
	    "                                                    {{ ::'vehicle.labels.PLATE' | translate }}:\r" +
	    "\n" +
	    "                                                </span>\r" +
	    "\n" +
	    "                                            {{ctrl.vehicle.plate}}\r" +
	    "\n" +
	    "                                            <i class=\"fa fa-check text-success\" ng-show=\"ctrl.plateSaved\"\r" +
	    "\n" +
	    "                                               aria-hidden=\"false\" style=\"\"></i>\r" +
	    "\n" +
	    "                                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.vehicle.plate\">\r" +
	    "\n" +
	    "                                                {{ ::'vehicle.labels.PLATE' | translate }}\r" +
	    "\n" +
	    "                                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                        </crm-inline-edit>\r" +
	    "\n" +
	    "                                    </li>\r" +
	    "\n" +
	    "                                    <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                        <crm-inline-edit facade=\"ctrl.unitNumberFacade\"\r" +
	    "\n" +
	    "                                                         has-value=\"!!(ctrl.vehicle.unitNumber)\"\r" +
	    "\n" +
	    "                                                         name=\"editunitNumber\">\r" +
	    "\n" +
	    "                                                <span class=\"item-heading\" ng-if=\"ctrl.vehicle.unitNumber\">\r" +
	    "\n" +
	    "                                                    {{ ::'vehicle.labels.UNIT_NUMBER' | translate }}:\r" +
	    "\n" +
	    "                                                </span>\r" +
	    "\n" +
	    "                                            {{ctrl.vehicle.unitNumber}}\r" +
	    "\n" +
	    "                                            <i class=\"fa fa-check text-success\" ng-show=\"ctrl.unitNumberSaved\"\r" +
	    "\n" +
	    "                                               aria-hidden=\"false\" style=\"\"></i>\r" +
	    "\n" +
	    "                                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.vehicle.unitNumber\">\r" +
	    "\n" +
	    "                                                {{ ::'vehicle.labels.UNIT_NUMBER' | translate }}\r" +
	    "\n" +
	    "                                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                        </crm-inline-edit>\r" +
	    "\n" +
	    "                                    </li>\r" +
	    "\n" +
	    "                                    <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                        <crm-inline-edit facade=\"ctrl.factoryWarrantyFacade\"\r" +
	    "\n" +
	    "                                                         has-value=\"!!(ctrl.vehicle.factoryWarranty.months && ctrl.vehicle.factoryWarranty.miles)\"\r" +
	    "\n" +
	    "                                                         name=\"editFactoryWarranty\">\r" +
	    "\n" +
	    "                                                <span class=\"item-heading\"\r" +
	    "\n" +
	    "                                                      ng-if=\"ctrl.vehicle.factoryWarranty.months && ctrl.vehicle.factoryWarranty.miles\">\r" +
	    "\n" +
	    "                                                    {{ ::'vehicle.labels.FACTORY_WARRANTY' | translate }} ({{ ::'vehicle.labels.MONTHS_MILES' | translate }}):\r" +
	    "\n" +
	    "                                                </span>\r" +
	    "\n" +
	    "                                            <span ng-if=\"ctrl.vehicle.factoryWarranty.months && ctrl.vehicle.factoryWarranty.miles\">\r" +
	    "\n" +
	    "                                                {{ctrl.vehicle.factoryWarranty.months}} / {{ ctrl.vehicle.factoryWarranty.miles}}\r" +
	    "\n" +
	    "                                                <i class=\"fa fa-check text-success\" ng-show=\"ctrl.factoryWarrantySaved\"\r" +
	    "\n" +
	    "                                                   aria-hidden=\"false\" style=\"\"></i>\r" +
	    "\n" +
	    "                                            </span>\r" +
	    "\n" +
	    "                                            <crm-inline-editing-edit-empty\r" +
	    "\n" +
	    "                                                    ng-if=\"!(ctrl.vehicle.factoryWarranty.months && ctrl.vehicle.factoryWarranty.miles)\">\r" +
	    "\n" +
	    "                                                {{ ::'vehicle.labels.FACTORY_WARRANTY' | translate }}\r" +
	    "\n" +
	    "                                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                        </crm-inline-edit>\r" +
	    "\n" +
	    "                                    </li>\r" +
	    "\n" +
	    "                                    <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                        <crm-inline-edit facade=\"ctrl.extendedServiceFacade\"\r" +
	    "\n" +
	    "                                                         has-value=\"!!(ctrl.vehicle.extendedService.months && ctrl.vehicle.extendedService.miles)\"\r" +
	    "\n" +
	    "                                                         name=\"editExtendedService\">\r" +
	    "\n" +
	    "                                                <span class=\"item-heading\"\r" +
	    "\n" +
	    "                                                      ng-if=\"ctrl.vehicle.extendedService.months && ctrl.vehicle.extendedService.miles\">\r" +
	    "\n" +
	    "                                                    {{ ::'vehicle.labels.EXTENDED_SERVICE' | translate }} ({{ ::'vehicle.labels.MONTHS_MILES' | translate }}):\r" +
	    "\n" +
	    "                                                </span>\r" +
	    "\n" +
	    "                                            <span ng-if=\"ctrl.vehicle.extendedService.months && ctrl.vehicle.extendedService.miles\">\r" +
	    "\n" +
	    "                                                {{ctrl.vehicle.extendedService.months}} / {{ctrl.vehicle.extendedService.miles}}\r" +
	    "\n" +
	    "                                                <i class=\"fa fa-check text-success\" ng-show=\"ctrl.extendedServiceSaved\"\r" +
	    "\n" +
	    "                                                   aria-hidden=\"false\" style=\"\"></i>\r" +
	    "\n" +
	    "                                            </span>\r" +
	    "\n" +
	    "                                            <crm-inline-editing-edit-empty\r" +
	    "\n" +
	    "                                                    ng-if=\"!(ctrl.vehicle.extendedService.months && ctrl.vehicle.extendedService.miles)\">\r" +
	    "\n" +
	    "                                                {{ ::'vehicle.labels.EXTENDED_SERVICE' | translate }}\r" +
	    "\n" +
	    "                                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                        </crm-inline-edit>\r" +
	    "\n" +
	    "                                    </li>\r" +
	    "\n" +
	    "                                </ul>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"col-xs-12 col-md-6\">\r" +
	    "\n" +
	    "                            <div class=\"ws-vehicle-stats-secondary-group\">\r" +
	    "\n" +
	    "                                <ul class=\"list-group\">\r" +
	    "\n" +
	    "                                    <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                        <crm-inline-edit facade=\"ctrl.exteriorColorFacade\"\r" +
	    "\n" +
	    "                                                         has-value=\"!!(ctrl.vehicle.exteriorColor)\"\r" +
	    "\n" +
	    "                                                         name=\"editExteriorColor\">\r" +
	    "\n" +
	    "                                                <span class=\"item-heading\" ng-if=\"ctrl.vehicle.exteriorColor\">\r" +
	    "\n" +
	    "                                                    {{ ::'vehicle.labels.EXTERIOR_COLOR' | translate }}:\r" +
	    "\n" +
	    "                                                </span>\r" +
	    "\n" +
	    "                                            {{ctrl.vehicle.exteriorColor}}\r" +
	    "\n" +
	    "                                            <i class=\"fa fa-check text-success\" ng-show=\"ctrl.exteriorColorSaved\"\r" +
	    "\n" +
	    "                                               aria-hidden=\"false\" style=\"\"></i>\r" +
	    "\n" +
	    "                                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.vehicle.exteriorColor\">\r" +
	    "\n" +
	    "                                                {{ ::'vehicle.labels.EXTERIOR_COLOR' | translate }}\r" +
	    "\n" +
	    "                                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                        </crm-inline-edit>\r" +
	    "\n" +
	    "                                    </li>\r" +
	    "\n" +
	    "                                    <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                        <crm-inline-edit facade=\"ctrl.seriesFacade\" has-value=\"!!(ctrl.vehicle.series)\"\r" +
	    "\n" +
	    "                                                         name=\"editSeries\">\r" +
	    "\n" +
	    "                                                <span ng-if=\"ctrl.vehicle.series\">\r" +
	    "\n" +
	    "                                                    <span class=\"item-heading\">\r" +
	    "\n" +
	    "                                                        {{ ::'vehicle.labels.SERIES' | translate }}:\r" +
	    "\n" +
	    "                                                    </span>\r" +
	    "\n" +
	    "                                                    {{ctrl.vehicle.series}}\r" +
	    "\n" +
	    "                                                    <i class=\"fa fa-check text-success\" ng-show=\"ctrl.seriesSaved\"\r" +
	    "\n" +
	    "                                                       aria-hidden=\"false\" style=\"\"></i>\r" +
	    "\n" +
	    "                                                </span>\r" +
	    "\n" +
	    "                                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.vehicle.series\">\r" +
	    "\n" +
	    "                                                {{ ::'vehicle.labels.SERIES' | translate }}\r" +
	    "\n" +
	    "                                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                                        </crm-inline-edit>\r" +
	    "\n" +
	    "                                    </li>\r" +
	    "\n" +
	    "                                    <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                        <crm-inline-edit facade=\"ctrl.driveTrainFacade\"\r" +
	    "\n" +
	    "                                                         has-value=\"!!(ctrl.vehicle.drivetrainRefDef && ctrl.vehicle.drivetrainRefDef.text)\"\r" +
	    "\n" +
	    "                                                         name=\"editDriveTrain\">\r" +
	    "\n" +
	    "                                                <span class=\"item-heading\"\r" +
	    "\n" +
	    "                                                      ng-if=\"ctrl.vehicle.drivetrainRefDef && ctrl.vehicle.drivetrainRefDef.text\">\r" +
	    "\n" +
	    "                                                    {{ ::'vehicle.labels.DRIVETRAIN' | translate }}:\r" +
	    "\n" +
	    "                                                </span>\r" +
	    "\n" +
	    "                                            {{ctrl.vehicle.drivetrainRefDef.text}}\r" +
	    "\n" +
	    "                                            <i class=\"fa fa-check text-success\" ng-show=\"ctrl.drivetrainSaved\"\r" +
	    "\n" +
	    "                                               aria-hidden=\"false\" style=\"\"></i>\r" +
	    "\n" +
	    "                                            <crm-inline-editing-edit-empty\r" +
	    "\n" +
	    "                                                    ng-if=\"!(ctrl.vehicle.drivetrainRefDef && ctrl.vehicle.drivetrainRefDef.text)\">\r" +
	    "\n" +
	    "                                                {{ ::'vehicle.labels.DRIVETRAIN' | translate }}\r" +
	    "\n" +
	    "                                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                        </crm-inline-edit>\r" +
	    "\n" +
	    "                                    </li>\r" +
	    "\n" +
	    "                                    <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                        <crm-inline-edit facade=\"ctrl.engineFacade\"\r" +
	    "\n" +
	    "                                                         has-value=\"!!(ctrl.vehicle.engineSize)\"\r" +
	    "\n" +
	    "                                                         name=\"editEngineSize\">\r" +
	    "\n" +
	    "                                                <span class=\"item-heading\" ng-if=\"ctrl.vehicle.engineSize\">\r" +
	    "\n" +
	    "                                                    {{ ::'vehicle.labels.ENGINE' | translate }}:\r" +
	    "\n" +
	    "                                                </span>\r" +
	    "\n" +
	    "                                            {{ctrl.vehicle.engineSize}}\r" +
	    "\n" +
	    "                                            <i class=\"fa fa-check text-success\" ng-show=\"ctrl.engineSaved\"\r" +
	    "\n" +
	    "                                               aria-hidden=\"false\" style=\"\"></i>\r" +
	    "\n" +
	    "                                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.vehicle.engineSize\">\r" +
	    "\n" +
	    "                                                {{ ::'vehicle.labels.ENGINE' | translate }}\r" +
	    "\n" +
	    "                                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                        </crm-inline-edit>\r" +
	    "\n" +
	    "                                    </li>\r" +
	    "\n" +
	    "                                </ul>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        <div transclude-to=\"footer\">\r" +
	    "\n" +
	    "            <div class=\"ws-expander-button ws-expander-card-button panel-footer\" ng-class=\"{'ws-expanded': isCollapsed}\"\r" +
	    "\n" +
	    "                 ng-click=\"isCollapsed = !isCollapsed\">\r" +
	    "\n" +
	    "                <a class=\"ws-expander-button-content\" name=\"viewToggle\">\r" +
	    "\n" +
	    "                    <span ng-show=\"isCollapsed\">{{::'crm.contact.HIDE_EXTRA_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "                    <span ng-hide=\"isCollapsed\">{{::'crm.contact.SHOW_ALL_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </co-panel>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/views/card/duplicateIndividual/duplicateContactTemplate.html',
	    "<div name=\"duplicatesDropDown\"\r" +
	    "\n" +
	    "     class=\"ws-action-item-right\"\r" +
	    "\n" +
	    "     ng-class=\"{'ws-active': ctrl.expanded}\"\r" +
	    "\n" +
	    "     ng-click=\"ctrl.toggleDuplicateExpanded($event)\"\r" +
	    "\n" +
	    "     co-click-off-close\r" +
	    "\n" +
	    "     co-click-off-close-function=\"ctrl.closeDuplicateExpanded\"\r" +
	    "\n" +
	    "     co-click-off-close-event-name=\"duplicateContact\">\r" +
	    "\n" +
	    "    {{::'crm.contact.duplicates.DUPLICATES' | translate}}\r" +
	    "\n" +
	    "        <span class=\"badge\" name=\"duplicateCount\"\r" +
	    "\n" +
	    "              ng-if=\"ctrl.duplicateList.length\">{{ctrl.duplicateList.length}}</span>\r" +
	    "\n" +
	    "    <i class=\"fa fa-chevron-down\"></i>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "    <div class=\"ws-action-menu\">\r" +
	    "\n" +
	    "        <section class=\"ws-duplicates-section\">\r" +
	    "\n" +
	    "            <div class=\"ws-action-menu-item panel panel-dark panel-duplicate panel-duplicate-not-found\"\r" +
	    "\n" +
	    "                 name=\"NoDuplicates\" ng-if=\"!ctrl.duplicateList.length\">\r" +
	    "\n" +
	    "                <div class=\"panel-body\">\r" +
	    "\n" +
	    "                    <div class=\"panel-body-message\">{{ ::'crm.contact.duplicates.NO_DUPLICATES' | translate}}</div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-action-menu-item panel panel-dark panel-duplicate\" name=\"duplicateRepeat\"\r" +
	    "\n" +
	    "                 ng-repeat=\"duplicate in ctrl.duplicateList  | orderBy:'firstName'\">\r" +
	    "\n" +
	    "                <a class=\"panel-media-container\" ng-click=\"ctrl.selectDuplicate(duplicate)\">\r" +
	    "\n" +
	    "                    <div class=\"panel-media\">\r" +
	    "\n" +
	    "                        <co-profile-image class=\"contact-image-donut-67\"\r" +
	    "\n" +
	    "                                          imageUrl=\"{{duplicate.img}}\"\r" +
	    "\n" +
	    "                                          initials=\"{{duplicate.getInitials()}}\"></co-profile-image>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel\">\r" +
	    "\n" +
	    "                        <div class=\"panel-heading\">\r" +
	    "\n" +
	    "                            <h3 class=\"panel-title\" name=\"fullName\">\r" +
	    "\n" +
	    "                                <span>{{duplicate.firstName}}</span>\r" +
	    "\n" +
	    "                                <span ng-if=\"duplicate.friendlyName\">{{duplicate.friendlyName}}</span>\r" +
	    "\n" +
	    "                                <span>{{duplicate.lastName}}</span>\r" +
	    "\n" +
	    "                            </h3>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"panel-body\">\r" +
	    "\n" +
	    "                            <ul class=\"list-group\">\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\" ng-if=\"duplicate.address.isValid()\">\r" +
	    "\n" +
	    "                                    <address class=\"address\">\r" +
	    "\n" +
	    "                                        <p class=\"address-info\" name=\"duplicateAddress\">\r" +
	    "\n" +
	    "                                            {{duplicate.address.city}}, {{duplicate.address.state}} {{duplicate.address.zipcode}}\r" +
	    "\n" +
	    "                                        </p>\r" +
	    "\n" +
	    "                                    </address>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\" name=\"duplicatePhoneMain\">\r" +
	    "\n" +
	    "                                    <div ng-if=\"duplicate.contactPoints.getFirstPrioritizedContactPointType() == 'mobile'\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\">{{ ::'crm.contact.contact_points.MOBILE_LETTER' | translate}}: </span>\r" +
	    "\n" +
	    "                                        {{duplicate.contactPoints.mobile.value}}\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\" name=\"duplicatePhoneOther\">\r" +
	    "\n" +
	    "                                    <div ng-if=\"duplicate.contactPoints.getFirstPrioritizedContactPointType() == 'other'\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\">{{ ::'crm.contact.contact_points.HOME_LETTER' | translate}}: </span>\r" +
	    "\n" +
	    "                                        {{duplicate.contactPoints.other.value}}\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\" name=\"duplicatePhoneWork\">\r" +
	    "\n" +
	    "                                    <div ng-if=\"duplicate.contactPoints.getFirstPrioritizedContactPointType() == 'work'\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\">{{ ::'crm.contact.contact_points.WORK_LETTER' | translate}}: </span>\r" +
	    "\n" +
	    "                                        {{duplicate.contactPoints.work.value}}\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\" name=\"emailLine\">\r" +
	    "\n" +
	    "                                    <div ng-if=\"duplicate.contactPoints.getFirstPrioritizedContactPointType() == 'email'\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\">{{ ::'crm.contact.EMAIL' | translate}}: </span>\r" +
	    "\n" +
	    "                                        {{duplicate.contactPoints.email.value}}\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                            </ul>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </section>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/contact/views/card/duplicateOrganization/duplicateOrganizationTemplate.html',
	    "<div name=\"duplicatesDropDown\"\r" +
	    "\n" +
	    "     class=\"ws-action-item-right\"\r" +
	    "\n" +
	    "     ng-class=\"{'ws-active': ctrl.expanded}\"\r" +
	    "\n" +
	    "     ng-click=\"ctrl.toggleDuplicateExpanded($event)\"\r" +
	    "\n" +
	    "     co-click-off-close\r" +
	    "\n" +
	    "     co-click-off-close-function=\"ctrl.closeDuplicateExpanded\"\r" +
	    "\n" +
	    "     co-click-off-close-event-name=\"duplicateOrganization\">\r" +
	    "\n" +
	    "    {{::'crm.contact.duplicates.DUPLICATES' | translate}}\r" +
	    "\n" +
	    "    <span class=\"badge\" name=\"duplicateCount\" ng-if=\"ctrl.duplicateList.length > 0\">{{ctrl.duplicateList.length}}</span>\r" +
	    "\n" +
	    "    <i class=\"fa fa-chevron-down\"></i>\r" +
	    "\n" +
	    "    <div class=\"ws-action-menu\">\r" +
	    "\n" +
	    "        <div class=\"ws-action-menu-item panel panel-dark panel-duplicate panel-duplicate-not-found\" name=\"NoDuplicates\"\r" +
	    "\n" +
	    "             ng-if=\"!ctrl.duplicateList.length\">\r" +
	    "\n" +
	    "            <div class=\"panel-body\">\r" +
	    "\n" +
	    "                <div class=\"panel-body-message\">{{ ::'crm.contact.duplicates.NO_DUPLICATES' | translate}}</div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-action-menu-item panel panel-dark panel-duplicate\" name=\"duplicateRepeat\"\r" +
	    "\n" +
	    "             ng-repeat=\"duplicate in ctrl.duplicateList | orderBy:'name'\">\r" +
	    "\n" +
	    "            <div class=\"panel-media-container\" ng-click=\"ctrl.selectDuplicate(duplicate)\">\r" +
	    "\n" +
	    "                <div class=\"panel-media\">\r" +
	    "\n" +
	    "                    <co-profile-image class=\"contact-image-donut-67\"\r" +
	    "\n" +
	    "                                      imageUrl=\"{{duplicate.img}}\"\r" +
	    "\n" +
	    "                                      is-organization=\"duplicate.isOrganization()\"\r" +
	    "\n" +
	    "                                      initials=\"{{duplicate.getInitial()}}\"></co-profile-image>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"panel\">\r" +
	    "\n" +
	    "                    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "                            <span class=\"panel-heading-options pull-right btn btn-default\" name=\"viewProfile\">{{\r" +
	    "\n" +
	    "                                ::'crm.contact.VIEW_PROFILE' | translate}}</span>\r" +
	    "\n" +
	    "                        <h3 class=\"panel-title\">\r" +
	    "\n" +
	    "                            <span>{{duplicate.name}}</span>\r" +
	    "\n" +
	    "                        </h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-body\">\r" +
	    "\n" +
	    "                        <ul class=\"list-group\">\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\" ng-if=\"duplicate.primaryContact.isValid()\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{::'crm.contact.organization.PRIMARY_CONTACT' | translate}}</span>\r" +
	    "\n" +
	    "                                {{duplicate.primaryContact.fullName()}}\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\" ng-if=\"duplicate.address.isValid()\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{ ::'crm.address.headers.ADDRESS' | translate}}</span>\r" +
	    "\n" +
	    "                                <address class=\"address\">\r" +
	    "\n" +
	    "                                    <p class=\"address-info\" name=\"duplicateAddress\">\r" +
	    "\n" +
	    "                                        {{duplicate.address.city}}, {{duplicate.address.state}} {{duplicate.address.zipcode}}\r" +
	    "\n" +
	    "                                    </p>\r" +
	    "\n" +
	    "                                </address>\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\" name=\"duplicatePhoneMain\">\r" +
	    "\n" +
	    "                                <div ng-if=\"duplicate.contactPoints.getFirstPrioritizedContactPointType() == 'mainNumber'\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\">{{ ::'crm.contact.organization.MAIN_PHONE_LETTER' | translate}}: </span>\r" +
	    "\n" +
	    "                                    {{duplicate.contactPoints.mainNumber.value}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\" name=\"duplicatePhoneTollFree\">\r" +
	    "\n" +
	    "                                <div ng-if=\"duplicate.contactPoints.getFirstPrioritizedContactPointType() == 'tollFree'\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\">{{ ::'crm.contact.organization.TOLL_FREE_LETTER' | translate}}: </span>\r" +
	    "\n" +
	    "                                    {{duplicate.contactPoints.tollFree.value}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                <div ng-if=\"duplicate.contactPoints.getFirstPrioritizedContactPointType() == 'fax'\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\">{{ ::'crm.contact.organization.FAX_LETTER' | translate}}: </span>\r" +
	    "\n" +
	    "                                    {{duplicate.contactPoints.fax.value}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\" name=\"emailLine\">\r" +
	    "\n" +
	    "                                <div ng-if=\"duplicate.contactPoints.getFirstPrioritizedContactPointType() == 'email'\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\">{{ ::'crm.contact.EMAIL' | translate}}: </span>\r" +
	    "\n" +
	    "                                    {{duplicate.contactPoints.email.value}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\" name=\"lastTouched\">{{ ::'crm.contact.LAST_TOUCHED_BY' | translate}}: </span>\r" +
	    "\n" +
	    "                                {{duplicate.lastTouchedBy}}\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\"\r" +
	    "\n" +
	    "                                      name=\"lastNote\">{{ ::'crm.contact.LAST_NOTE' | translate}}: </span>\r" +
	    "\n" +
	    "                                {{duplicate.notes}}\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                        </ul>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/contact/views/card/getContactCard/getContactCardTemplate.html',
	    "<error-card ng-if=\"ctrl.showError\" class=\"ws-error-card\"></error-card>\r" +
	    "\n" +
	    "<div ng-if=\"!ctrl.showError\">\r" +
	    "\n" +
	    "    <div class=\"detail-view-container\" co-loading=\"ctrl.isLoading\" loading-overlay-class=\"ws-loading-full-overlay\">\r" +
	    "\n" +
	    "        <crm-alert alert-names=\"[ctrl.CrmConstants.UNKNOWN_ERROR_OCCURRED,\r" +
	    "\n" +
	    "                                 ctrl.CrmConstants.CREDIT_REPORT.CREDIT_REPORT_ERROR,\r" +
	    "\n" +
	    "                                 ctrl.CrmConstants.CONTACT.MARKETING.ERROR_OCCURRED]\"\r" +
	    "\n" +
	    "                   class=\"ws-sales-opportunity-push-to-dms-alert\"></crm-alert>\r" +
	    "\n" +
	    "        <div class=\"detail-view-header\">\r" +
	    "\n" +
	    "            <div class=\"ws-action-bar\">\r" +
	    "\n" +
	    "                <h1 class=\"detail-view-title\">{{ ::'crm.contact.headers.CUSTOMER' | translate }}:\r" +
	    "\n" +
	    "                    {{ctrl.contact.getFullTitleName()}} / <span class=\"customer-id\" name=\"customerId\">{{::'crm.contact.CUSTOMER_ID' | translate}} {{ ctrl.contact.id}}</span>\r" +
	    "\n" +
	    "                </h1>\r" +
	    "\n" +
	    "                <action-bar-item position=\"right\" co-multi-transclusion>\r" +
	    "\n" +
	    "                    <div transclude-to=\"title\" ng-click=\"ctrl.openCommunicationPreferences()\" name=\"menuCommunicationPreference\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.actions.COMMUNICATION_PREFERENCE' | translate}}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </action-bar-item>\r" +
	    "\n" +
	    "                <action-bar-item ng-show=\"ctrl.creditApplicationUrl && ctrl.creditAppPermission.view\" position=\"right\" co-multi-transclusion>\r" +
	    "\n" +
	    "                    <div transclude-to=\"title\" ng-click=\"ctrl.openCreditApplication()\" name=\"creditApplication\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.actions.CREDIT_APPLICATION' | translate }}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </action-bar-item>\r" +
	    "\n" +
	    "                <action-bar-item position=\"right\" co-multi-transclusion name=\"customerActionsMenuButton\">\r" +
	    "\n" +
	    "                    <div transclude-to=\"title\"><i class=\"fa fa-ellipsis-h\" name=\"contactMenuButton\"></i></div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-click=\"ctrl.openDocumentForAction(false)\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.actions.PRINT_DOCUMENT' | translate}}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-click=\"ctrl.openDocumentForAction(true)\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.actions.EMAIL_DOCUMENT' | translate}}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-click=\"ctrl.openCustomerNotes()\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.actions.CUSTOMER_NOTES' | translate}}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-click=\"ctrl.openAuditLog()\" name=\"customerNotesButton\" ng-show=\"ctrl.touchesPermission.view\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.actions.VIEW_AUDIT_LOG' | translate}}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-show=\"ctrl.showDeleteContact()\"\r" +
	    "\n" +
	    "                         ng-click=\"ctrl.showDeleteConfirmationModal()\" name=\"deleteContactButton\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.actions.DELETE_CONTACT' | translate }}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-click=\"ctrl.openPullCreditReport()\" name=\"pullCreditReportButton\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.actions.PULL_CREDIT_REPORT' | translate}}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-click=\"ctrl.ClickResetLoginLink()\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.actions.EMAIL_RESET_LINK' | translate}}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-click=\"ctrl.ClickEmailMobileAppLink()\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.actions.MOBILE_LINK' | translate}}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </action-bar-item>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"detail-view-content\" ng-if=\"ctrl.contact\">\r" +
	    "\n" +
	    "            <crm-alert alert-names=\"['CONTACT_DELETE_FAILED','EMAIL_DELETE_ERROR']\"></crm-alert>\r" +
	    "\n" +
	    "            <div class=\"row ws-layout-row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-12 col-lg-5\">\r" +
	    "\n" +
	    "                <div class=\"row ws-layout-row\">\r" +
	    "\n" +
	    "                    <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                \t\t<crm-contact-card contact=\"ctrl.contact\"></crm-contact-card>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-lg-12\" co-responsive-if=\"gt-md\">\r" +
	    "\n" +
	    "                        <div class=\"ws-detail-view-content-group\">\r" +
	    "\n" +
	    "                            <section class=\"ws-panel\">\r" +
	    "\n" +
	    "                                <crm-open-activities></crm-open-activities>\r" +
	    "\n" +
	    "                            </section>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-12 col-lg-7\">\r" +
	    "\n" +
	    "                    <crm-customer-details-tabs class=\"ws-detail-view-content-group\"\r" +
	    "\n" +
	    "                                               contact=\"ctrl.contact\"></crm-customer-details-tabs>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/views/card/getContactCard/templates/customerNotesModalTemplate.html',
	    "<div class=\"panel panel-primary panel-modal\" name=\"modelPanel\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading ws-panel-heading-no-separator\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\" ng-cloak>\r" +
	    "\n" +
	    "            <h3  class=\"panel-title ws-flex-fill-even\" >\r" +
	    "\n" +
	    "                {{::'crm.contact.actions.CUSTOMER_NOTES' | translate}}\r" +
	    "\n" +
	    "                ({{ctrl.customerNotes.baseCollection.length}})\r" +
	    "\n" +
	    "            </h3>\r" +
	    "\n" +
	    "            <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.modal.cancel()\" name=\"closeModal\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-body\">\r" +
	    "\n" +
	    "        <div class=\"ws-vertical-expandable-container\">\r" +
	    "\n" +
	    "            <crm-activities-notes filtered-activity-timeline=\"ctrl.customerNotes\"\r" +
	    "\n" +
	    "                                  on-redirect=\"ctrl.modal.cancel()\"></crm-activities-notes>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/views/card/getContactCard/templates/pullCreditReportModalTemplate.html',
	    "<div class=\"panel panel-primary panel-modal\" name=\"modelPanel\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading ws-panel-heading-no-separator\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\" ng-cloak>\r" +
	    "\n" +
	    "            <h3  class=\"panel-title ws-flex-fill-even\" name=\"pullCreditReportTitle\">\r" +
	    "\n" +
	    "                {{::'crm.contact.actions.PULL_CREDIT_REPORT' | translate}}\r" +
	    "\n" +
	    "            </h3>\r" +
	    "\n" +
	    "            <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.modal.cancel()\" name=\"closeModal\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-body\">\r" +
	    "\n" +
	    "        <div class=\"ws-vertical-expandable-container\">\r" +
	    "\n" +
	    "            <form name=\"ctrl.pullCreditForm\" novalidate>\r" +
	    "\n" +
	    "                <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "                    <div class=\"col-md-6 form-group\">\r" +
	    "\n" +
	    "                        <label name=\"socialSecurityNumberLabel\">{{::'crm.contact.SOCIAL_SECURITY_NUMBER' | translate}}</label>\r" +
	    "\n" +
	    "                        <crm-ssn-input model=\"ctrl.ssn\"></crm-ssn-input>\r" +
	    "\n" +
	    "                        <div class=\"ws-text-bad\" ng-if=\"ctrl.pullCreditInvalid && !ctrl.ssn.value\">\r" +
	    "\n" +
	    "                            {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-md-6\">\r" +
	    "\n" +
	    "                        <label name=\"birthDateLabel\">{{::'crm.contact.headers.DATE_OF_BIRTH' | translate}}</label>\r" +
	    "\n" +
	    "                        <crm-date-input\r" +
	    "\n" +
	    "                                name=\"individual-card-dob\"\r" +
	    "\n" +
	    "                                api-service=\"ctrl.ContactService\"\r" +
	    "\n" +
	    "                                contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                field-heading=\"{{ ::'crm.contact.headers.DATE_OF_BIRTH' | translate }}\"\r" +
	    "\n" +
	    "                                full-date=\"ctrl.contact.dateOfBirth\"\r" +
	    "\n" +
	    "                                validation=\"moment(ctrl.contact.dateOfBirth).isValid()\"\r" +
	    "\n" +
	    "                                invalid-message=\"{{ ::'crm.contact.headers.INVALID_DATE_OF_BIRTH' | translate}}\"\r" +
	    "\n" +
	    "                                contact-type=\"{{ctrl.contactType}}\"\r" +
	    "\n" +
	    "                                disabled=\"true\">\r" +
	    "\n" +
	    "                        </crm-date-input>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "                    <div class=\"col-md-6 form-group\">\r" +
	    "\n" +
	    "                        <label name=\"firstNameLabel\">{{::'crm.contact.FIRST_NAME' | translate}}</label>\r" +
	    "\n" +
	    "                        <input type=\"text\" class=\"form-control\" name=\"firstName\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.contact.firstName\"\r" +
	    "\n" +
	    "                               maxlength=\"50\"\r" +
	    "\n" +
	    "                               ng-disabled=\"true\"\r" +
	    "\n" +
	    "                               ng-required=\"true\"\r" +
	    "\n" +
	    "                               autocomplete=\"off\">\r" +
	    "\n" +
	    "                        <span class=\"form-invalid-message\" ng-show=\"ctrl.form.firstName.$error.required\" name=\"firstNameRequiredMessage\">{{ ::'crm.contact.headers.REQUIRED' | translate}}</span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-md-6 form-group\">\r" +
	    "\n" +
	    "                        <label name=\"lastNameLabel\">{{::'crm.contact.LAST_NAME' | translate}}</label>\r" +
	    "\n" +
	    "                        <input type=\"text\" class=\"form-control crm-required\" name=\"lastName\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.contact.lastName\"\r" +
	    "\n" +
	    "                               maxlength=\"50\"\r" +
	    "\n" +
	    "                               ng-disabled=\"true\"\r" +
	    "\n" +
	    "                               ng-required=\"true\"\r" +
	    "\n" +
	    "                               autocomplete=\"off\">\r" +
	    "\n" +
	    "                        <span class=\"form-invalid-message\" ng-show=\"ctrl.form.lastName.$error.required\" name=\"firstNameRequiredMessage\">{{ ::'crm.contact.headers.REQUIRED' | translate}}</span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <crm-address class=\"panel-no-padding\" contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                             expanded=\"true\" form=\"ctrl.addConnectionForm\" disabled=\"true\">\r" +
	    "\n" +
	    "                </crm-address>\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <div class=\"row\">\r" +
	    "\n" +
	    "                        <div class=\"col-md-2\">\r" +
	    "\n" +
	    "                            <label name=\"bureauLabel\">{{::'crm.contact.BUREAU' | translate}}</label>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"row\">\r" +
	    "\n" +
	    "                        <div class=\"col-md-1\">\r" +
	    "\n" +
	    "                            <input type=\"radio\" ng-disabled=\"!ctrl.creditReportData.transunion.enabled\" name=\"transUnionBureauRadioButton\" ng-model=\"ctrl.bureau\" value=\"TU\" required>\r" +
	    "\n" +
	    "                            T.U.\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"col-md-1\">\r" +
	    "\n" +
	    "                            <input type=\"radio\" ng-disabled=\"!ctrl.creditReportData.equifax.enabled\" name=\"equifaxBureauRadioButton\" ng-model=\"ctrl.bureau\" value=\"EFX\" required>\r" +
	    "\n" +
	    "                            Eqfx\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"col-md-2\">\r" +
	    "\n" +
	    "                            <input type=\"radio\" ng-disabled=\"!ctrl.creditReportData.experian.enabled\" name=\"experianBureauRadioButton\" ng-model=\"ctrl.bureau\" value=\"XPN\" required>\r" +
	    "\n" +
	    "                            Exprn\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"row col-md-12 ws-text-bad\" ng-if=\"ctrl.pullCreditInvalid && !ctrl.pullCreditForm.bureau.$valid\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "                    <div class=\"col-md-6 form-group\">\r" +
	    "\n" +
	    "                        <label name=\"accountNameLabel\">Account Name</label>\r" +
	    "\n" +
	    "                        <input type=\"text\" class=\"form-control crm-required\" name=\"accountName\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.creditReportData.accountName\"\r" +
	    "\n" +
	    "                               maxlength=\"255\"\r" +
	    "\n" +
	    "                               required\r" +
	    "\n" +
	    "                               autocomplete=\"off\">\r" +
	    "\n" +
	    "                        <div class=\"ws-text-bad\" ng-if=\"ctrl.pullCreditInvalid && !ctrl.pullCreditForm.accountName.$valid\">\r" +
	    "\n" +
	    "                            {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-md-6 form-group\">\r" +
	    "\n" +
	    "                        <label name=\"passwordLabel\">Password</label>\r" +
	    "\n" +
	    "                        <input type=\"password\" class=\"form-control crm-required\" name=\"password\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.creditReportData.password\"\r" +
	    "\n" +
	    "                               maxlength=\"255\"\r" +
	    "\n" +
	    "                               required\r" +
	    "\n" +
	    "                               autocomplete=\"off\">\r" +
	    "\n" +
	    "                        <div class=\"ws-text-bad\" ng-if=\"ctrl.pullCreditInvalid && !ctrl.pullCreditForm.password.$valid\">\r" +
	    "\n" +
	    "                            {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"row\">\r" +
	    "\n" +
	    "                    <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                        <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                            <button class=\"btn btn-quaternary\" name=\"cancel\" ng-click=\"ctrl.modal.cancel()\">{{::'crm.actions.CANCEL' | translate}}</button>\r" +
	    "\n" +
	    "                            <input type=\"submit\"\r" +
	    "\n" +
	    "                                   class=\"btn btn-primary\"\r" +
	    "\n" +
	    "                                   name=\"save\"\r" +
	    "\n" +
	    "                                   ng-click=\"ctrl.pullCreditIfValid()\"/>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </form>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/views/card/individual/individualCardTemplate.html',
	    "<div class=\"panel panel-primary\">\r" +
	    "\n" +
	    "    <co-panel co-multi-transclusion name=\"contactCard\" class=\"ds-card-contact\">\r" +
	    "\n" +
	    "        <div transclude-to=\"media\">\r" +
	    "\n" +
	    "            <co-profile-image class=\"contact-image-donut-65\"\r" +
	    "\n" +
	    "                              image-url=\"{{ctrl.contact.imgUrl}}\"\r" +
	    "\n" +
	    "                              initials=\"{{ctrl.contact.getInitials()}}\"></co-profile-image>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "            <div ng-if=\"ctrl.showFullProfile && !ctrl.disableEditCrossSite\">\r" +
	    "\n" +
	    "                <a ui-sref=\"view.contact({ contactId: ctrl.contact.id })\" name=\"fullProfile\">{{\r" +
	    "\n" +
	    "                    ::'crm.contact.headers.FULL_PROFILE' | translate}}</a>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"title\">\r" +
	    "\n" +
	    "            <crm-inline-edit class=\"ws-contact-name\" facade=\"ctrl.nameFacade\" has-value=\"true\">\r" +
	    "\n" +
	    "                    <span class=\"panel-title\" name=\"editName\">\r" +
	    "\n" +
	    "                    {{ ctrl.contact.salutation ? ctrl.contact.salutation.text + \" \" : \"\" }}{{ ctrl.contact.firstName }}\r" +
	    "\n" +
	    "                    <span ng-if=\"!ctrl.southwestPacificLocalizationPermission.view\">{{ ctrl.contact.friendlyName ? \" \\\"\" +  ctrl.contact.friendlyName + \"\\\"\" : \"\"}}</span>\r" +
	    "\n" +
	    "                    {{ ctrl.contact.middleName ? \" \" +  ctrl.contact.middleName : \"\"}}{{ \" \" + ctrl.contact.lastName}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "            </crm-inline-edit>\r" +
	    "\n" +
	    "            <crm-inline-editing-select-contact-types facade=\"ctrl.badgeTypeSubTypeFacade\" contact=\"ctrl.contact\" has-value=\"!!ctrl.contact.contactSubType\">\r" +
	    "\n" +
	    "                <span class=\"ws-subtype\" ng-class=\"ctrl.getContactSubtypeClass()\" name=\"contactTypeAndSubtypeSelector\">{{ctrl.contact.contactSubType.text}}</span>\r" +
	    "\n" +
	    "            </crm-inline-editing-select-contact-types>\r" +
	    "\n" +
	    "            <!--\r" +
	    "\n" +
	    "            <span class=\"ws-5-stars pull-left\">\r" +
	    "\n" +
	    "                <i class=\"icon-star active\"></i>\r" +
	    "\n" +
	    "                <i class=\"icon-star active\"></i>\r" +
	    "\n" +
	    "                <i class=\"icon-star active\"></i>\r" +
	    "\n" +
	    "                <i class=\"icon-star active\"></i>\r" +
	    "\n" +
	    "                <i class=\"icon-star\"></i>\r" +
	    "\n" +
	    "            </span>-->\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "            <ul class=\"panel-title-details list-group\">\r" +
	    "\n" +
	    "                <li class=\"list-group-item\" ng-if=\"ctrl.southwestPacificLocalizationPermission.view\">\r" +
	    "\n" +
	    "                    <span class=\"item-heading\">{{::\"crm.contact.ATTENTION\" | translate}}:</span>\r" +
	    "\n" +
	    "                    {{ctrl.contact.friendlyName}}\r" +
	    "\n" +
	    "                </li>\r" +
	    "\n" +
	    "                <li class=\"list-group-item\" ng-if=\"ctrl.southwestPacificLocalizationPermission.view\">\r" +
	    "\n" +
	    "                    <span class=\"item-heading\">{{::\"crm.contact.JOINT_NAME\" | translate}}:</span>\r" +
	    "\n" +
	    "                    {{ctrl.contact.jointName}}\r" +
	    "\n" +
	    "                </li>\r" +
	    "\n" +
	    "                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                    <crm-inline-edit facade=\"ctrl.notesFacade\" has-value=\"!!ctrl.contact.notes\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.contact.notes\" name=\"editNotes\">\r" +
	    "\n" +
	    "                            {{ ctrl.contact.notes }}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.notes\" name=\"editNotes\">\r" +
	    "\n" +
	    "                            {{ ::'crm.otherInfo.headers.NOTES' | translate }}\r" +
	    "\n" +
	    "                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                    </crm-inline-edit>\r" +
	    "\n" +
	    "                </li>\r" +
	    "\n" +
	    "            </ul>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "            <co-icon-badge class=\"co-icon-badge ws-radar-badge\" ng-show=\"ctrl.contact.hasPings && ctrl.revRadarPermission.view\" ng-click=\"ctrl.showPingsModal($event)\">\r" +
	    "\n" +
	    "                <button class=\"btn btn-url btn-md btn-primary btn-circle btn-icon\">\r" +
	    "\n" +
	    "                    <i class=\"icon-radar\"></i>\r" +
	    "\n" +
	    "                    <!--<div class=\"ws-icon-radar-alert\"><span></span></div>-->\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </co-icon-badge>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"main\">\r" +
	    "\n" +
	    "            <div class=\"panel-body customer-summary-info\">\r" +
	    "\n" +
	    "                <div class=\"row\">\r" +
	    "\n" +
	    "                    <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                        <div class=\"ws-phone-group\">\r" +
	    "\n" +
	    "                            <ul class=\"list-group\" name=\"expandedContactPoints\">\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\" ng-class=\"ctrl.checkDncOptionsForStyle() ? 'invalid' : ''\">\r" +
	    "\n" +
	    "                                    <crm-inline-editing-individual-phone facade=\"ctrl.phonesFacade\"\r" +
	    "\n" +
	    "                                                                         has-value=\"!!(ctrl.contact.contactPoints.mobile.value || ctrl.contact.contactPoints.dncOption)\"\r" +
	    "\n" +
	    "                                                                         name=\"editMobilePhone\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.contactPoints.mobile.value || ctrl.contact.contactPoints.dncOption\"\r" +
	    "\n" +
	    "                          class=\"item-heading\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.contact_points.MOBILE_LETTER' | translate }}: </span>\r" +
	    "\n" +
	    "                                        {{ctrl.displayPhone(ctrl.contact.contactPoints.mobile.value) | crmPhone:'mobile'}}\r" +
	    "\n" +
	    "                                        <i class=\"fa fa-check text-success\"\r" +
	    "\n" +
	    "                                           ng-show=\"ctrl.contact.contactPoints.mobile.preferred\"></i>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty\r" +
	    "\n" +
	    "                                                ng-if=\"!ctrl.contact.contactPoints.mobile.value && !ctrl.contact.contactPoints.dncOption\">\r" +
	    "\n" +
	    "                                            {{ ::'crm.contact.contact_points.MOBILE' | translate }}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-editing-individual-phone>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\" ng-class=\"ctrl.checkDncOptionsForStyle() ? 'invalid' : ''\">\r" +
	    "\n" +
	    "                                    <crm-inline-editing-individual-phone facade=\"ctrl.phonesFacade\"\r" +
	    "\n" +
	    "                                                                         has-value=\"!!(ctrl.contact.contactPoints.other.value || ctrl.contact.contactPoints.dncOption)\"\r" +
	    "\n" +
	    "                                                                         name=\"editHomePhone\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.contactPoints.other.value || ctrl.contact.contactPoints.dncOption\"\r" +
	    "\n" +
	    "                          class=\"item-heading\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.contact_points.HOME_LETTER' | translate }}: </span>\r" +
	    "\n" +
	    "                                        {{ctrl.displayPhone(ctrl.contact.contactPoints.other.value) | crmPhone}}\r" +
	    "\n" +
	    "                                        <i class=\"fa fa-check text-success\"\r" +
	    "\n" +
	    "                                           ng-show=\"ctrl.contact.contactPoints.other.preferred\"></i>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty\r" +
	    "\n" +
	    "                                                ng-if=\"!ctrl.contact.contactPoints.other.value && !ctrl.contact.contactPoints.dncOption\">\r" +
	    "\n" +
	    "                                            {{ ::'crm.contact.contact_points.HOME' | translate }}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-editing-individual-phone>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\" ng-class=\"ctrl.checkDncOptionsForStyle() ? 'invalid' : ''\">\r" +
	    "\n" +
	    "                                    <crm-inline-editing-individual-phone facade=\"ctrl.phonesFacade\"\r" +
	    "\n" +
	    "                                                                         has-value=\"!!(ctrl.contact.contactPoints.work.value || ctrl.contact.contactPoints.dncOption)\"\r" +
	    "\n" +
	    "                                                                         name=\"editWorkPhone\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.contactPoints.work.value || ctrl.contact.contactPoints.dncOption\"\r" +
	    "\n" +
	    "                          class=\"item-heading\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.contact_points.WORK_LETTER' | translate }}: </span>\r" +
	    "\n" +
	    "                                        {{ctrl.displayPhone(ctrl.contact.contactPoints.work.value) | crmPhone}}\r" +
	    "\n" +
	    "                                        <i class=\"fa fa-check text-success\"\r" +
	    "\n" +
	    "                                           ng-show=\"ctrl.contact.contactPoints.work.preferred\"></i>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty\r" +
	    "\n" +
	    "                                                ng-if=\"!ctrl.contact.contactPoints.work.value && !ctrl.contact.contactPoints.dncOption\">\r" +
	    "\n" +
	    "                                            {{ ::'crm.contact.contact_points.WORK' | translate }}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                                    </crm-inline-editing-individual-phone>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                            </ul>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"ws-email-group\">\r" +
	    "\n" +
	    "                            <ul class=\"list-group\">\r" +
	    "\n" +
	    "                                <li class=\"list-group-item ws-email-section\">\r" +
	    "\n" +
	    "                                    <crm-inline-editing-individual-email class=\"ws-email-inline ws-email-1\" facade=\"ctrl.emailFacade\" name=\"editEmail\"\r" +
	    "\n" +
	    "                                                                         has-value=\"!!ctrl.contact.contactPoints.email.value\">\r" +
	    "\n" +
	    "                                        {{ ctrl.contact.contactPoints.email.value}}\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.contactPoints.email.value\">\r" +
	    "\n" +
	    "                                            {{ ::'crm.contact.EMAIL' | translate }}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-editing-individual-email>\r" +
	    "\n" +
	    "                                    <i class=\"fa fa-check text-success\"\r" +
	    "\n" +
	    "                                       ng-show=\"ctrl.contact.contactPoints.email.preferred\"></i>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <crm-inline-edit-address contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                                             facade=\"ctrl.addressFacade\"\r" +
	    "\n" +
	    "                                                             has-value=\"!ctrl.contact.address.isEmpty()\"\r" +
	    "\n" +
	    "                                                             name=\"editAddress\">\r" +
	    "\n" +
	    "                                        <div ng-hide=\"ctrl.contact.address.isEmpty()\">\r" +
	    "\n" +
	    "                                            <div class=\"view-mode inline-address\">\r" +
	    "\n" +
	    "                                                <address class=\"address\">\r" +
	    "\n" +
	    "                                                    <div ng-show=\"ctrl.contact.address.address1 || ctrl.contact.address.address2 || ctrl.contact.address.address3\">\r" +
	    "\n" +
	    "                                                        <span class=\"address-info\" name=\"address1\">{{ctrl.contact.address.address1}}</span>\r" +
	    "\n" +
	    "                                                    <span ng-show=\"ctrl.contact.address.address2\" class=\"address-info\"\r" +
	    "\n" +
	    "                                                          name=\"address2\"> {{ctrl.contact.address.address2}}</span>\r" +
	    "\n" +
	    "                                                    <span ng-show=\"ctrl.contact.address.address3\" class=\"address-info\"\r" +
	    "\n" +
	    "                                                          name=\"address3\"> {{ctrl.contact.address.address3}}</span>\r" +
	    "\n" +
	    "                                                    </div>\r" +
	    "\n" +
	    "                                                <span class=\"address-info\" name=\"cityStatePostal\">\r" +
	    "\n" +
	    "                                                    <span ng-show=\"ctrl.contact.address.city\">{{ctrl.contact.address.city}},</span>\r" +
	    "\n" +
	    "                                                    <span ng-show=\"ctrl.contact.address.state\">{{ctrl.contact.address.state}}</span>\r" +
	    "\n" +
	    "                                                    <span ng-show=\"ctrl.contact.address.postal\">{{ctrl.contact.address.postal}}</span>\r" +
	    "\n" +
	    "                                                </span>\r" +
	    "\n" +
	    "                                                <span ng-show=\"ctrl.contact.address.county\" class=\"address-info\"\r" +
	    "\n" +
	    "                                                      name=\"county\"> ({{ctrl.contact.address.county}} County)</span>\r" +
	    "\n" +
	    "                                                </address>\r" +
	    "\n" +
	    "                                                <i class=\"fa fa-check-square address-complete\"\r" +
	    "\n" +
	    "                                                   ng-show=\"ctrl.contact.address.isComplete\" title=\"{{ ::'crm.address.headers.COMPLETE_ADDRESS' | translate }}\"></i>\r" +
	    "\n" +
	    "                                                <i class=\"fa fa-check-square address-incomplete\"\r" +
	    "\n" +
	    "                                                   ng-show=\"!ctrl.contact.address.isComplete\" title=\"{{ ::'crm.address.headers.INCOMPLETE_ADDRESS' | translate }}\"></i>\r" +
	    "\n" +
	    "                                            </div>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                        <div ng-hide=\"!ctrl.contact.address.isEmpty()\" name=\"editAddress\">\r" +
	    "\n" +
	    "                                            <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                                {{ ::'crm.contact.HOME_ADDRESS' | translate }}\r" +
	    "\n" +
	    "                                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </crm-inline-edit-address>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                            </ul>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                        <div class=\"collapsible\" ng-hide=\"ctrl.isCollapsed\">\r" +
	    "\n" +
	    "                            <crm-social-media-contact contact=\"ctrl.contact\" class=\"ws-social-media\"></crm-social-media-contact>\r" +
	    "\n" +
	    "                            <ul class=\"list-group\">\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                                    <crm-inline-editing-birthdate\r" +
	    "\n" +
	    "                                            name=\"individual-card-dob\"\r" +
	    "\n" +
	    "                                            api-service=\"ctrl.ContactApiService\"\r" +
	    "\n" +
	    "                                            contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                            disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                            field-heading=\"{{ ::'crm.contact.headers.DATE_OF_BIRTH' | translate }}\"\r" +
	    "\n" +
	    "                                            ng-model=\"ctrl.contact.dateOfBirth\"\r" +
	    "\n" +
	    "                                            validation=\"moment(ctrl.contact.dateOfBirth).isValid()\"\r" +
	    "\n" +
	    "                                            invalid-message=\"{{ ::'crm.contact.headers.INVALID_DATE_OF_BIRTH' | translate}}\"\r" +
	    "\n" +
	    "                                            contact-type=\"{{ctrl.contactType}}\">\r" +
	    "\n" +
	    "                                    </crm-inline-editing-birthdate>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <crm-inline-edit facade=\"ctrl.driversLicenseNumberFacade\" name=\"individual-card-dl\"\r" +
	    "\n" +
	    "                                                     has-value=\"!!ctrl.contact.driversLicenseNumber\">\r" +
	    "\n" +
	    "                                        <span ng-if=\"ctrl.contact.driversLicenseNumber\">\r" +
	    "\n" +
	    "                                            <span class=\"item-heading\">{{::'crm.contact.headers.DRIVERS_LICENSE_NUMBER_SHORT' | translate}}: </span>\r" +
	    "\n" +
	    "                                            {{ctrl.contact.driversLicenseNumber}}\r" +
	    "\n" +
	    "                                        </span>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.driversLicenseNumber\">\r" +
	    "\n" +
	    "                                            {{::'crm.contact.headers.DRIVERS_LICENSE_NUMBER_SHORT' | translate}}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-edit>\r" +
	    "\n" +
	    "                                    <span ng-if=\"ctrl.driversLicensePermission.view && !!ctrl.contact.driversLicenseNumber\">\r" +
	    "\n" +
	    "                                        <i class=\"fa fa-credit-card\" ng-click=\"ctrl.openDriversLicenseModal()\"></i>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                                    <crm-inline-editing-individual-ssn\r" +
	    "\n" +
	    "                                            api-service=\"ctrl.ContactSsnService\"\r" +
	    "\n" +
	    "                                            entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                            disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                            field-heading=\"{{ ::'crm.contact.headers.SSN' | translate}}\"\r" +
	    "\n" +
	    "                                            contact-type=\"{{ctrl.contactType}}\">\r" +
	    "\n" +
	    "                                    </crm-inline-editing-individual-ssn>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <crm-inline-edit facade=\"ctrl.genderFacade\" has-value=\"!!ctrl.contact.gender\">\r" +
	    "\n" +
	    "                                        <span ng-if=\"ctrl.contact.gender\">\r" +
	    "\n" +
	    "                                            <span class=\"item-heading\">{{ ::'crm.contact.headers.GENDER' | translate}}: </span>\r" +
	    "\n" +
	    "                                            {{ctrl.contact.gender}}\r" +
	    "\n" +
	    "                                        </span>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.gender\">\r" +
	    "\n" +
	    "                                            {{ ::'crm.contact.headers.GENDER' | translate}}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-edit>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\" ng-if=\"ctrl.northAmericaLocalizationPermission.view\">\r" +
	    "\n" +
	    "                                    <crm-inline-edit facade=\"ctrl.incomeFacade\" has-value=\"!!ctrl.contact.income\">\r" +
	    "\n" +
	    "                                        <span ng-if=\"ctrl.contact.income\">\r" +
	    "\n" +
	    "                                            <span class=\"item-heading\">{{ ::'crm.contact.headers.INCOME' | translate }}: </span>\r" +
	    "\n" +
	    "                                            {{ ctrl.contact.income.text }}\r" +
	    "\n" +
	    "                                        </span>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.income\">\r" +
	    "\n" +
	    "                                            {{ ::'crm.contact.headers.INCOME' | translate }}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-edit>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <crm-inline-edit facade=\"ctrl.preferredLanguageFacade\"\r" +
	    "\n" +
	    "                                                     has-value=\"!!ctrl.contact.preferredLanguage\">\r" +
	    "\n" +
	    "                                        <span ng-if=\"ctrl.contact.preferredLanguage\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\">{{ ::'crm.contact.headers.PREFERRED_LANGUAGE' | translate }}: </span>\r" +
	    "\n" +
	    "                                            {{ ctrl.contact.preferredLanguage.text }}\r" +
	    "\n" +
	    "                                        </span>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.preferredLanguage\">\r" +
	    "\n" +
	    "                                            {{ ::'crm.contact.headers.PREFERRED_LANGUAGE' | translate }}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-edit>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                            </ul>\r" +
	    "\n" +
	    "                            <ul class=\"list-group\">\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <crm-inline-edit-individual-company facade=\"ctrl.employerFacade\"\r" +
	    "\n" +
	    "                                                                        has-value=\"!!ctrl.contact.employer\">\r" +
	    "\n" +
	    "                                        <span ng-if=\"ctrl.contact.employer\">\r" +
	    "\n" +
	    "                                            <span class=\"item-heading\">{{ ::'crm.contact.headers.PRIMARY_COMPANY' | translate}}: </span>\r" +
	    "\n" +
	    "                                    {{ ctrl.contact.employer }}\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.employer\">\r" +
	    "\n" +
	    "                                            {{ ::'crm.contact.headers.PRIMARY_COMPANY' | translate}}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-edit-individual-company>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\" ng-if=\"ctrl.gmCustomerSearchPermission.view\">\r" +
	    "\n" +
	    "                                    <a ng-click=\"ctrl.showGMModal()\" href=\"#\">\r" +
	    "\n" +
	    "                                        {{ ::'crm.contact.headers.GM_CUSTOMER_INFO' | translate}}\r" +
	    "\n" +
	    "                                    </a>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <crm-inline-edit facade=\"ctrl.neverContactViaFacade\"\r" +
	    "\n" +
	    "                                                     has-value=\"!!ctrl.contact.neverContactVia.text\">\r" +
	    "\n" +
	    "                                        <span ng-if=\"ctrl.contact.neverContactVia.text\" name=\"editNeverContactVia\">\r" +
	    "\n" +
	    "                                            <span class=\"item-heading\">\r" +
	    "\n" +
	    "                                                {{ ::'crm.contact.headers.NEVER_CONTACT_VIA' | translate}}:\r" +
	    "\n" +
	    "                                            </span>\r" +
	    "\n" +
	    "                                            {{ ctrl.contact.neverContactVia.text }}\r" +
	    "\n" +
	    "                                        </span>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.neverContactVia.text\"\r" +
	    "\n" +
	    "                                                                       name=\"editNeverContactVia\">\r" +
	    "\n" +
	    "                                            {{ ::'crm.contact.headers.NEVER_CONTACT_VIA' | translate}}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-edit>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                                    <crm-inline-editing-social-media\r" +
	    "\n" +
	    "                                            entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                            type=\"Facebook\"\r" +
	    "\n" +
	    "                                            disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                            field-heading=\"{{ ::'crm.contact.FACEBOOK' | translate}}\"\r" +
	    "\n" +
	    "                                            ng-model=\"ctrl.contact.contactPoints.facebookHandle.value\"\r" +
	    "\n" +
	    "                                            maxlength=\"50\"\r" +
	    "\n" +
	    "                                            contact-type=\"{{ctrl.contactType}}\">\r" +
	    "\n" +
	    "                                    </crm-inline-editing-social-media>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                                    <crm-inline-editing-social-media\r" +
	    "\n" +
	    "                                            entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                            type=\"Twitter\"\r" +
	    "\n" +
	    "                                            disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                            field-heading=\"{{ ::'crm.contact.TWITTER' | translate}}\"\r" +
	    "\n" +
	    "                                            maxlength=\"15\"\r" +
	    "\n" +
	    "                                            ng-model=\"ctrl.contact.contactPoints.twitterHandle.value\"\r" +
	    "\n" +
	    "                                            contact-type=\"{{ctrl.contactType}}\">\r" +
	    "\n" +
	    "                                    </crm-inline-editing-social-media>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                            </ul>\r" +
	    "\n" +
	    "                            <ul class=\"list-group\">\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <crm-inline-edit ng-disabled = \"!ctrl.canEditSource\" facade=\"ctrl.sourceFacade\" has-value=\"!!ctrl.contact.source\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.source\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{ ::'crm.contact.headers.CUSTOMER_SOURCE' | translate}}: </span>\r" +
	    "\n" +
	    "                        {{ ctrl.contact.source.text }}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.source\">\r" +
	    "\n" +
	    "                                            {{ ::'crm.contact.headers.CUSTOMER_SOURCE' | translate}}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-edit>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <crm-inline-edit facade=\"ctrl.statusFacade\" has-value=\"!!ctrl.contact.status\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.status\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{ ::'crm.contact.headers.STATUS' | translate}}: </span>\r" +
	    "\n" +
	    "                        {{ ctrl.contact.status.text }}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.status\">\r" +
	    "\n" +
	    "                                            {{ ::'crm.contact.headers.STATUS' | translate}}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-edit>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <crm-inline-editing-select-contact-types facade=\"ctrl.typeSubTypeFacade\" contact=\"ctrl.contact\" has-value=\"!!ctrl.contact.contactType\" name=\"contactType\">\r" +
	    "\n" +
	    "                                        <span ng-if=\"ctrl.contact.contactType\">\r" +
	    "\n" +
	    "                                            <span class=\"item-heading\">{{::\"crm.contact.headers.CUSTOMER_TYPE\" | translate}}: </span>\r" +
	    "\n" +
	    "                                            {{ctrl.contact.contactType.text}}\r" +
	    "\n" +
	    "                                        </span>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.contactType\">\r" +
	    "\n" +
	    "                                            {{::\"crm.contact.headers.CUSTOMER_TYPE\" | translate}}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-editing-select-contact-types>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <crm-inline-editing-select-contact-types facade=\"ctrl.typeSubTypeFacade\" contact=\"ctrl.contact\" has-value=\"!!ctrl.contact.contactSubType\" name=\"contactSubType\">\r" +
	    "\n" +
	    "                                        <span ng-if=\"ctrl.contact.contactSubType\">\r" +
	    "\n" +
	    "                                            <span class=\"item-heading\">{{::\"crm.contact.headers.CUSTOMER_SUBTYPE\" | translate}}: </span>\r" +
	    "\n" +
	    "                                            {{ctrl.contact.contactSubType.text}}\r" +
	    "\n" +
	    "                                        </span>\r" +
	    "\n" +
	    "                                        <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.contactSubType\">\r" +
	    "\n" +
	    "                                            {{::\"crm.contact.headers.CUSTOMER_SUBTYPE\" | translate}}\r" +
	    "\n" +
	    "                                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                    </crm-inline-editing-select-contact-types>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\" ng-if=\"ctrl.southwestPacificLocalizationPermission.view\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\">{{::\"crm.contact.headers.DPID\" | translate}}: </span>\r" +
	    "\n" +
	    "                                    {{ctrl.contact.dpid}}\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                    <span ng-if=\"ctrl.southwestPacificLocalizationPermission.view\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\">{{::\"crm.external_references.EXTERNAL_REFERENCE_IDS\" | translate}}:</span>\r" +
	    "\n" +
	    "                                        {{ctrl.getExternalReferenceIds()}}\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                    <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                                    <crm-inline-external-reference\r" +
	    "\n" +
	    "                                            api-service=\"ctrl.ContactService\"\r" +
	    "\n" +
	    "                                            entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                            disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                            field-heading=\"{{ ::'crm.external_references.EXTERNAL_REFERENCE_IDS' | translate}}\"\r" +
	    "\n" +
	    "                                            ng-model=\"ctrl.contact.externalReferenceId\"\r" +
	    "\n" +
	    "                                            available-franchises=\"ctrl.availableFranchises\"\r" +
	    "\n" +
	    "                                            ng-if=\"!ctrl.southwestPacificLocalizationPermission.view\"\r" +
	    "\n" +
	    "                                    >\r" +
	    "\n" +
	    "                                    </crm-inline-external-reference>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                            </ul>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"footer\">\r" +
	    "\n" +
	    "            <div class=\"ws-expander-button panel-footer\"\r" +
	    "\n" +
	    "                 ng-class=\"{'ws-expanded': !ctrl.isCollapsed}\"\r" +
	    "\n" +
	    "                 ng-click=\"ctrl.isCollapsed = !ctrl.isCollapsed\">\r" +
	    "\n" +
	    "                <a class=\"ws-expander-button-content\"\r" +
	    "\n" +
	    "                   name=\"viewToggle\">\r" +
	    "\n" +
	    "                    <span ng-show=\"ctrl.isCollapsed\">{{::'crm.contact.SHOW_ALL_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "                    <span ng-hide=\"ctrl.isCollapsed\">{{::'crm.contact.HIDE_EXTRA_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </co-panel>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/views/card/individual/templates/contactBody.html',
	    "<div class=\"row\">\r" +
	    "\n" +
	    "    <div class=\"col-md-4 col-lg-12\">\r" +
	    "\n" +
	    "        <ul class=\"list-group\" name=\"expandedContactPoints\">\r" +
	    "\n" +
	    "            <li class=\"list-group-item\" ng-class=\"ctrl.checkDncOptionsForStyle() ? 'invalid' : ''\">\r" +
	    "\n" +
	    "                <crm-inline-edit facade=\"ctrl.phonesFacade\" has-value=\"!!(ctrl.contact.contactPoints.mobile.value || ctrl.contact.contactPoints.dncOption)\" name=\"editMobilePhone\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.contactPoints.mobile.value || ctrl.contact.contactPoints.dncOption\" class=\"item-heading\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.contact_points.MOBILE' | translate }}: </span>\r" +
	    "\n" +
	    "                    {{ctrl.displayPhone(ctrl.contact.contactPoints.mobile.value)}}\r" +
	    "\n" +
	    "                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.contactPoints.mobile.value && !ctrl.contact.contactPoints.dncOption\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.contact_points.MOBILE' | translate }}\r" +
	    "\n" +
	    "                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                </crm-inline-edit>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\" ng-class=\"ctrl.checkDncOptionsForStyle() ? 'invalid' : ''\">\r" +
	    "\n" +
	    "                <crm-inline-edit facade=\"ctrl.phonesFacade\" has-value=\"!!(ctrl.contact.contactPoints.other.value || ctrl.contact.contactPoints.dncOption)\" name=\"editHomePhone\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.contactPoints.other.value || ctrl.contact.contactPoints.dncOption\" class=\"item-heading\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.contact_points.HOME' | translate }}: </span>\r" +
	    "\n" +
	    "                    {{ctrl.displayPhone(ctrl.contact.contactPoints.other.value)}}\r" +
	    "\n" +
	    "                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.contactPoints.other.value && !ctrl.contact.contactPoints.dncOption\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.contact_points.HOME' | translate }}\r" +
	    "\n" +
	    "                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                </crm-inline-edit>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\" ng-class=\"ctrl.checkDncOptionsForStyle() ? 'invalid' : ''\">\r" +
	    "\n" +
	    "                <crm-inline-edit facade=\"ctrl.phonesFacade\" has-value=\"!!(ctrl.contact.contactPoints.work.value || ctrl.contact.contactPoints.dncOption)\" name=\"editWorkPhone\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.contactPoints.work.value || ctrl.contact.contactPoints.dncOption\" class=\"item-heading\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.contact_points.WORK' | translate }}: </span>\r" +
	    "\n" +
	    "                    {{ctrl.displayPhone(ctrl.contact.contactPoints.work.value)}}\r" +
	    "\n" +
	    "                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.contactPoints.work.value && !ctrl.contact.contactPoints.dncOption\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.contact_points.WORK' | translate }}\r" +
	    "\n" +
	    "                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                </crm-inline-edit>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"col-md-4 col-lg-12\">\r" +
	    "\n" +
	    "        <ul class=\"list-group\">\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-edit facade=\"ctrl.emailFacade\" name=\"editEmail\" has-value=\"!!ctrl.contact.contactPoints.email.value\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.contactPoints.email.value\" class=\"item-heading\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.EMAIL' | translate }}:</span>\r" +
	    "\n" +
	    "                        {{ ctrl.contact.contactPoints.email.value}}</span>\r" +
	    "\n" +
	    "                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.contactPoints.email.value\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.EMAIL' | translate }}\r" +
	    "\n" +
	    "                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                </crm-inline-edit>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-edit-address contact=\"ctrl.contact\" facade=\"ctrl.addressFacade\" has-value=\"!ctrl.contact.address.isEmpty()\" name=\"editAddress\">\r" +
	    "\n" +
	    "                    <div ng-hide=\"ctrl.contact.address.isEmpty()\">\r" +
	    "\n" +
	    "                        <div class=\"view-mode\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{ ::'crm.contact.HOME_ADDRESS' | translate}}\r" +
	    "\n" +
	    "                                <i class=\"fa fa-check-circle text-success\" ng-show=\"ctrl.contact.address.isComplete\"></i>\r" +
	    "\n" +
	    "                                <i class=\"fa fa-exclamation-circle text-danger\" ng-show=\"!ctrl.contact.address.isComplete\"></i>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <address class=\"address\">\r" +
	    "\n" +
	    "                                <div ng-show=\"ctrl.contact.address.address1 || ctrl.contact.address.address2 || ctrl.contact.address.address3\">\r" +
	    "\n" +
	    "                                    <span class=\"address-info\" name=\"address1\">{{ctrl.contact.address.address1}}</span>\r" +
	    "\n" +
	    "                                    <span ng-show=\"ctrl.contact.address.address2\" class=\"address-info\" name=\"address2\"> {{ctrl.contact.address.address2}}</span>\r" +
	    "\n" +
	    "                                    <span ng-show=\"ctrl.contact.address.address3\" class=\"address-info\" name=\"address3\"> {{ctrl.contact.address.address3}}</span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <span class=\"address-info\" name=\"cityStatePostal\">\r" +
	    "\n" +
	    "                                    <span ng-show=\"ctrl.contact.address.city\">{{ctrl.contact.address.city}},</span>\r" +
	    "\n" +
	    "                                    <span ng-show=\"ctrl.contact.address.state\">{{ctrl.contact.address.state}}</span>\r" +
	    "\n" +
	    "                                    <span ng-show=\"ctrl.contact.address.postal\">{{ctrl.contact.address.postal}}</span>\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                                <span ng-show=\"ctrl.contact.address.county\" class=\"address-info\" name=\"county\"> ({{ctrl.contact.address.county}})</span>\r" +
	    "\n" +
	    "                                <span class=\"address-info\" name=\"cityStatePostal\">{{ctrl.contact.address.country}}</span>\r" +
	    "\n" +
	    "                            </address>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-hide=\"!ctrl.contact.address.isEmpty()\" name=\"editAddress\">\r" +
	    "\n" +
	    "                        <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                            {{ ::'crm.contact.HOME_ADDRESS' | translate }}\r" +
	    "\n" +
	    "                        </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </crm-inline-edit-address>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"col-md-4\" co-gt-md-class=\"ws-social-media-container\" co-responsive-if=\"gt-sm\" ng-cloak>\r" +
	    "\n" +
	    "        <crm-social-media-contact contact=\"ctrl.contact\"></crm-social-media-contact>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/contact/views/card/individual/templates/contactHeader.html',
	    "<div class=\"panel-heading\" name=\"fullNameHeading\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading-options pull-right\">\r" +
	    "\n" +
	    "        <div class=\"customer-id\" name=\"customerId\" ng-if=\"ctrl.showFullProfile\">\r" +
	    "\n" +
	    "            {{ ::'crm.contact.CUSTOMER_ID' | translate}}: {{ ctrl.contact.getCustomerId() }}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div ng-if=\"!ctrl.showFullProfile\">\r" +
	    "\n" +
	    "            <a ui-sref=\"view.contact({ contactId: ctrl.contact.id })\" name=\"fullProfile\">{{ ::'crm.contact.headers.FULL_PROFILE' | translate}}</a>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <crm-inline-edit facade=\"ctrl.nameFacade\" has-value=\"true\">\r" +
	    "\n" +
	    "        <span class=\"panel-title\" name=\"editName\">\r" +
	    "\n" +
	    "            {{ ctrl.contact.salutation ? ctrl.contact.salutation.text + \" \" : \"\" }}{{ ctrl.contact.firstName }}\r" +
	    "\n" +
	    "            {{ ctrl.contact.friendlyName ? \" \\\"\" +  ctrl.contact.friendlyName + \"\\\"\" : \"\"}}\r" +
	    "\n" +
	    "            {{ ctrl.contact.middleName ? \" \" +  ctrl.contact.middleName : \"\"}}{{ \" \" + ctrl.contact.lastName}}\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "    </crm-inline-edit>\r" +
	    "\n" +
	    "    <ul class=\"panel-title-details list-group\">\r" +
	    "\n" +
	    "        <crm-inline-edit facade=\"ctrl.notesFacade\" has-value=\"!!ctrl.contact.notes\">\r" +
	    "\n" +
	    "            <span ng-if=\"ctrl.contact.notes\" name=\"editNotes\">\r" +
	    "\n" +
	    "                {{ ctrl.contact.notes }}\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "            <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.notes\" name=\"editNotes\">\r" +
	    "\n" +
	    "                {{ ::'crm.otherInfo.headers.NOTES' | translate }}\r" +
	    "\n" +
	    "            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "        </crm-inline-edit>\r" +
	    "\n" +
	    "    </ul>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "<div class=\"panel-body customer-summary-info\"\r" +
	    "\n" +
	    "     ng-include=\"'app/contact/views/card/individual/templates/contactBody.html'\"></div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/contact/views/card/individual/templates/details.html',
	    "<div class=\"panel panel-primary collapsible\" ng-hide=\"ctrl.isCollapsed\">\r" +
	    "\n" +
	    "    <div class=\"panel-body\" co-lt-lg-class=\"ws-image-badge-spacing-placeholder\">\r" +
	    "\n" +
	    "        <ul class=\"list-group\">\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-editing-birthdate\r" +
	    "\n" +
	    "                        name=\"individual-card-dob\"\r" +
	    "\n" +
	    "                        api-service=\"ctrl.ContactService\"\r" +
	    "\n" +
	    "                        contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                        field-heading=\"{{ ::'crm.contact.headers.DATE_OF_BIRTH' | translate }}\"\r" +
	    "\n" +
	    "                        ng-model=\"ctrl.contact.dateOfBirth\"\r" +
	    "\n" +
	    "                        validation=\"moment(ctrl.contact.dateOfBirth).isValid()\"\r" +
	    "\n" +
	    "                        invalid-message=\"{{ ::'crm.contact.headers.INVALID_DATE_OF_BIRTH' | translate}}\"\r" +
	    "\n" +
	    "                        contact-type=\"{{ctrl.contactType}}\">\r" +
	    "\n" +
	    "                </crm-inline-editing-birthdate>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-edit facade=\"ctrl.driversLicenseNumberFacade\" name=\"individual-card-dl\" has-value=\"!!ctrl.contact.driversLicenseNumber\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.driversLicenseNumber\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{::'crm.contact.headers.DRIVERS_LICENSE_NUMBER_SHORT' | translate}}: </span>\r" +
	    "\n" +
	    "                        {{ctrl.contact.driversLicenseNumber}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.driversLicenseNumber\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.headers.DRIVERS_LICENSE_NUMBER_SHORT' | translate}}\r" +
	    "\n" +
	    "                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                </crm-inline-edit>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-editing-individual-ssn\r" +
	    "\n" +
	    "                        api-service=\"ctrl.ContactSsnService\"\r" +
	    "\n" +
	    "                        entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                        field-heading=\"{{ ::'crm.contact.headers.SSN' | translate}}\"\r" +
	    "\n" +
	    "                        contact-type=\"{{ctrl.contactType}}\">\r" +
	    "\n" +
	    "                </crm-inline-editing-individual-ssn>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-edit facade=\"ctrl.genderFacade\" has-value=\"!!ctrl.contact.gender\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.gender\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{ ::'crm.contact.headers.GENDER' | translate}}: </span>\r" +
	    "\n" +
	    "                        {{ctrl.contact.gender}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.gender\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.headers.GENDER' | translate}}\r" +
	    "\n" +
	    "                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                </crm-inline-edit>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-edit facade=\"ctrl.incomeFacade\" has-value=\"!!ctrl.contact.income\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.income\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{ ::'crm.contact.headers.INCOME' | translate }}: </span>\r" +
	    "\n" +
	    "                        {{ ctrl.contact.income.text }}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.income\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.headers.INCOME' | translate }}\r" +
	    "\n" +
	    "                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                </crm-inline-edit>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-edit facade=\"ctrl.preferredLanguageFacade\" has-value=\"!!ctrl.contact.preferredLanguage\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.preferredLanguage\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{ ::'crm.contact.headers.PREFERRED_LANGUAGE' | translate }}: </span>\r" +
	    "\n" +
	    "                        {{ ctrl.contact.preferredLanguage.text }}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.preferredLanguage\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.headers.PREFERRED_LANGUAGE' | translate }}\r" +
	    "\n" +
	    "                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                </crm-inline-edit>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "        <ul class=\"list-group\">\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-edit facade=\"ctrl.employerFacade\" has-value=\"!!ctrl.contact.employer\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.employer\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{ ::'crm.contact.headers.PRIMARY_COMPANY' | translate}}: </span>\r" +
	    "\n" +
	    "                        {{ ctrl.contact.employer }}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.employer\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.headers.PRIMARY_COMPANY' | translate}}\r" +
	    "\n" +
	    "                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                </crm-inline-edit>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\" style=\"display: none\" ng-if=\"ctrl.canGmLookup\">\r" +
	    "\n" +
	    "                <a ng-click=\"ctrl.showGMModal()\" href=\"#\">\r" +
	    "\n" +
	    "                    {{ ::'crm.contact.headers.GM_CUSTOMER_INFO' | translate}}\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-edit facade=\"ctrl.neverContactViaFacade\" has-value=\"!!ctrl.contact.neverContactVia.text\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.contact.neverContactVia.text\" name=\"editNeverContactVia\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">\r" +
	    "\n" +
	    "                                    {{ ::'crm.contact.headers.NEVER_CONTACT_VIA' | translate}}:\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                                {{ ctrl.contact.neverContactVia.text }}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.neverContactVia.text\" name=\"editNeverContactVia\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.headers.NEVER_CONTACT_VIA' | translate}}\r" +
	    "\n" +
	    "                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                </crm-inline-edit>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-editing-social-media\r" +
	    "\n" +
	    "                        entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                        type=\"Facebook\"\r" +
	    "\n" +
	    "                        field-heading=\"{{ ::'crm.contact.FACEBOOK' | translate}}\"\r" +
	    "\n" +
	    "                        ng-model=\"ctrl.contact.contactPoints.facebookHandle.value\"\r" +
	    "\n" +
	    "                        maxlength=\"50\"\r" +
	    "\n" +
	    "                        contact-type=\"{{ctrl.contactType}}\">\r" +
	    "\n" +
	    "                </crm-inline-editing-social-media>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-editing-social-media\r" +
	    "\n" +
	    "                        entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                        type=\"Twitter\"\r" +
	    "\n" +
	    "                        field-heading=\"{{ ::'crm.contact.TWITTER' | translate}}\"\r" +
	    "\n" +
	    "                        maxlength=\"15\"\r" +
	    "\n" +
	    "                        ng-model=\"ctrl.contact.contactPoints.twitterHandle.value\"\r" +
	    "\n" +
	    "                        contact-type=\"{{ctrl.contactType}}\">\r" +
	    "\n" +
	    "                </crm-inline-editing-social-media>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "        <ul class=\"list-group\">\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-edit facade=\"ctrl.sourceFacade\" has-value=\"!!ctrl.contact.source\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.source\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{ ::'crm.contact.headers.CUSTOMER_SOURCE' | translate}}: </span>\r" +
	    "\n" +
	    "                        {{ ctrl.contact.source.text }}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.source\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.headers.CUSTOMER_SOURCE' | translate}}\r" +
	    "\n" +
	    "                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                </crm-inline-edit>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-edit facade=\"ctrl.statusFacade\" has-value=\"!!ctrl.contact.status\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.contact.status\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{ ::'crm.contact.headers.STATUS' | translate}}: </span>\r" +
	    "\n" +
	    "                        {{ ctrl.contact.status.text }}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.status\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.headers.STATUS' | translate}}\r" +
	    "\n" +
	    "                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                </crm-inline-edit>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-editing-select-contact-types\r" +
	    "\n" +
	    "                        api-service=\"ctrl.ContactService\"\r" +
	    "\n" +
	    "                        entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                        ref-defs=\"ctrl.individualRefDefs\"\r" +
	    "\n" +
	    "                        type=\"ctrl.contact.contactType\"\r" +
	    "\n" +
	    "                        sub-type=\"ctrl.contact.contactSubType\">\r" +
	    "\n" +
	    "                </crm-inline-editing-select-contact-types>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                <crm-inline-external-reference\r" +
	    "\n" +
	    "                        api-service=\"ctrl.ContactService\"\r" +
	    "\n" +
	    "                        entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                        field-heading=\"{{ ::'crm.external_references.EXTERNAL_REFERENCE_IDS' | translate}}\"\r" +
	    "\n" +
	    "                        ng-model=\"ctrl.contact.externalReferenceId\"\r" +
	    "\n" +
	    "                        available-franchises=\"ctrl.availableFranchises\"\r" +
	    "\n" +
	    "                >\r" +
	    "\n" +
	    "                </crm-inline-external-reference>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/views/card/individual/templates/footer.html',
	    "<div class=\"ws-expander-button panel-footer\"\r" +
	    "\n" +
	    "     ng-class=\"{'ws-expanded': !ctrl.isCollapsed}\"\r" +
	    "\n" +
	    "     ng-click=\"ctrl.isCollapsed = !ctrl.isCollapsed\">\r" +
	    "\n" +
	    "    <a class=\"ws-expander-button-content\"\r" +
	    "\n" +
	    "       name=\"viewToggle\">\r" +
	    "\n" +
	    "        <span ng-show=\"ctrl.isCollapsed\">{{::'crm.contact.SHOW_ALL_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "        <span ng-hide=\"ctrl.isCollapsed\">{{::'crm.contact.HIDE_EXTRA_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "    </a>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/contact/views/card/individual/templates/gmContactModal.html',
	    "<crm-gm-lookup scope-model=\"ctrl.gmLookupScopeModel\"></crm-gm-lookup>"
	  );


	  $templateCache.put('app/contact/views/card/organization/organizationCardTemplate.html',
	    "<div class=\"panel panel-relative\">\r" +
	    "\n" +
	    "    <co-panel co-multi-transclusion name=\"contactCard\" class=\"ds-card-contact\">\r" +
	    "\n" +
	    "        <div transclude-to=\"media\">\r" +
	    "\n" +
	    "            <co-profile-image class=\"contact-image-donut-65\"\r" +
	    "\n" +
	    "                              image-url=\"{{ctrl.contact.imgUrl}}\"\r" +
	    "\n" +
	    "                              is-organization=\"ctrl.contact.isOrganization()\"></co-profile-image>\r" +
	    "\n" +
	    "            <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "            <div ng-if=\"ctrl.showFullProfile && !ctrl.disableEditCrossSite\">\r" +
	    "\n" +
	    "                <a ui-sref=\"view.contact({ contactId: ctrl.contact.id })\" name=\"fullProfile\">{{\r" +
	    "\n" +
	    "                    ::'crm.contact.headers.FULL_PROFILE' | translate}}</a>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"title\">\r" +
	    "\n" +
	    "            <crm-inline-edit class=\"ws-contact-name\" facade=\"ctrl.nameFacade\" has-value=\"true\">\r" +
	    "\n" +
	    "                <span class=\"panel-title\" name=\"editName\">{{ctrl.contact.name}}</span>\r" +
	    "\n" +
	    "            </crm-inline-edit>\r" +
	    "\n" +
	    "            <crm-inline-editing-select-contact-types facade=\"ctrl.badgeTypeSubTypeFacade\" contact=\"ctrl.contact\" has-value=\"!!ctrl.contact.contactSubType\">\r" +
	    "\n" +
	    "                <span class=\"ws-subtype\" ng-class=\"ctrl.getContactSubtypeClass()\" >{{ctrl.contact.contactSubType.text}}</span>\r" +
	    "\n" +
	    "            </crm-inline-editing-select-contact-types>\r" +
	    "\n" +
	    "                <!--\r" +
	    "\n" +
	    "                <span class=\"ws-5-stars pull-left\">\r" +
	    "\n" +
	    "                    <i class=\"icon-star active\"></i>\r" +
	    "\n" +
	    "                    <i class=\"icon-star active\"></i>\r" +
	    "\n" +
	    "                    <i class=\"icon-star active\"></i>\r" +
	    "\n" +
	    "                    <i class=\"icon-star active\"></i>\r" +
	    "\n" +
	    "                    <i class=\"icon-star\"></i>\r" +
	    "\n" +
	    "                </span>-->\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"subtitle\" class=\"ws-card-organization-secondary\">\r" +
	    "\n" +
	    "            <div name=\"organizationPrimaryContact\">\r" +
	    "\n" +
	    "                <crm-inline-edit-organization-primary-contact class=\"inline-edit-display-inline-block\" facade=\"ctrl.primaryContactFacade\" has-value=\"!!ctrl.primaryContactName\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.primaryContactName\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\" name=\"primaryContact\">{{ ::'crm.contact.organization.PRIMARY_CONTACT' | translate}}: </span>\r" +
	    "\n" +
	    "                        {{ctrl.primaryContactName}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.primaryContactName\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.organization.PRIMARY_CONTACT' | translate}}\r" +
	    "\n" +
	    "                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                </crm-inline-edit-organization-primary-contact>\r" +
	    "\n" +
	    "                <span ng-show=\"ctrl.isPrimaryContactLinked()\">\r" +
	    "\n" +
	    "                    (<a href=\"\" ng-click=\"ctrl.unlinkPrimaryContact()\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.organization.UNLINK_PRIMARY_CONTACT' | translate}}\r" +
	    "\n" +
	    "                    </a>)\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "            <crm-inline-editing-field\r" +
	    "\n" +
	    "                    type=\"textarea\"\r" +
	    "\n" +
	    "                    api-service=\"ctrl.contactService\"\r" +
	    "\n" +
	    "                    entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                    disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                    ng-model=\"ctrl.contact.notes\"\r" +
	    "\n" +
	    "                    omit-heading=\"true\"\r" +
	    "\n" +
	    "                    add-heading=\"{{ ::'crm.otherInfo.headers.NOTES' | translate }}\"\r" +
	    "\n" +
	    "                    name=\"specialNotes\"\r" +
	    "\n" +
	    "                    validation=\"true\"\r" +
	    "\n" +
	    "                    maxlength=\"255\"\r" +
	    "\n" +
	    "            >\r" +
	    "\n" +
	    "            </crm-inline-editing-field>\r" +
	    "\n" +
	    "            <co-icon-badge class=\"co-icon-badge ws-radar-badge\" ng-show=\"ctrl.contact.hasPings\" ng-click=\"ctrl.showPingsModal($event)\">\r" +
	    "\n" +
	    "                <a>\r" +
	    "\n" +
	    "                    <i class=\"icon-radar\"></i>\r" +
	    "\n" +
	    "                    <!--<div class=\"ws-icon-radar-alert\"><span></span></div>-->\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </co-icon-badge>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"main\">\r" +
	    "\n" +
	    "            <div class=\"panel-body customer-summary-info\">\r" +
	    "\n" +
	    "                <div class=\"ws-phone-group\">\r" +
	    "\n" +
	    "                    <ul class=\"list-group\">\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                            <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                            <crm-inline-editing-organization-phone contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                                                   field-heading=\"{{ ::'crm.contact.organization.MAIN_PHONE_LETTER' | translate}}\"\r" +
	    "\n" +
	    "                                                                   disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                                                   ng-model=\"ctrl.contact.contactPoints.mainNumber.value\"\r" +
	    "\n" +
	    "                                                                   add-heading=\"{{ ::'crm.contact.organization.MAIN_PHONE' | translate}}\"\r" +
	    "\n" +
	    "                                                                   name=\"phoneMain\"\r" +
	    "\n" +
	    "                            ></crm-inline-editing-organization-phone>\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                            <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                            <crm-inline-editing-organization-phone contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                                                   field-heading=\"{{ ::'crm.contact.organization.TOLL_FREE_LETTER' | translate}}\"\r" +
	    "\n" +
	    "                                                                   disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                                                   ng-model=\"ctrl.contact.contactPoints.tollFree.value\"\r" +
	    "\n" +
	    "                                                                   add-heading=\"{{ ::'crm.contact.organization.TOLL_FREE' | translate}}\"\r" +
	    "\n" +
	    "                                                                   name=\"phoneTollFree\"\r" +
	    "\n" +
	    "                            ></crm-inline-editing-organization-phone>\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                            <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                            <crm-inline-editing-organization-phone contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                                                   field-heading=\"{{ ::'crm.contact.organization.FAX_LETTER' | translate}}\"\r" +
	    "\n" +
	    "                                                                   disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                                                   ng-model=\"ctrl.contact.contactPoints.fax.value\"\r" +
	    "\n" +
	    "                                                                   add-heading=\"{{ ::'crm.contact.organization.FAX' | translate}}\"\r" +
	    "\n" +
	    "                                                                   name=\"fax\"\r" +
	    "\n" +
	    "                            ></crm-inline-editing-organization-phone>\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                    </ul>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-email-group\">\r" +
	    "\n" +
	    "                    <ul class=\"list-group\">\r" +
	    "\n" +
	    "                        <li class=\"list-group-item ws-email-section\">\r" +
	    "\n" +
	    "                            <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                            <crm-inline-editing-field\r" +
	    "\n" +
	    "                                    name=\"organization-card-email\"\r" +
	    "\n" +
	    "                                    api-service=\"ctrl.contactService\"\r" +
	    "\n" +
	    "                                    disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                    entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                    field-heading=\"{{ ::'crm.contact.EMAIL' | translate }}\"\r" +
	    "\n" +
	    "                                    ng-model=\"ctrl.contact.contactPoints.email.value\"\r" +
	    "\n" +
	    "                                    max-length=\"254\"\r" +
	    "\n" +
	    "                                    validation=\"ctrl.contact.contactPoints.email.isValidOrEmpty()\"\r" +
	    "\n" +
	    "                                    invalid-message=\"{{ ::'crm.contact.headers.INVALID_EMAIL' | translate}}\"\r" +
	    "\n" +
	    "                                    omit-heading name=\"email\"\r" +
	    "\n" +
	    "                                    class=\"ws-email-inline-edit ws-email-1\"\r" +
	    "\n" +
	    "                            >\r" +
	    "\n" +
	    "                            </crm-inline-editing-field>\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                            <crm-inline-edit-address contact=\"ctrl.contact\" facade=\"ctrl.addressFacade\"\r" +
	    "\n" +
	    "                                                     has-value=\"!ctrl.contact.address.isEmpty()\"\r" +
	    "\n" +
	    "                                                     name=\"editAddress\">\r" +
	    "\n" +
	    "                                <div ng-hide=\"ctrl.contact.address.isEmpty()\">\r" +
	    "\n" +
	    "                                    <div class=\"view-mode inline-address\">\r" +
	    "\n" +
	    "                                        <address class=\"address\">\r" +
	    "\n" +
	    "                                            <div ng-show=\"ctrl.contact.address.address1 || ctrl.contact.address.address2 || ctrl.contact.address.address3\">\r" +
	    "\n" +
	    "                                                <span class=\"address-info\" name=\"address1\">{{ctrl.contact.address.address1}}</span>\r" +
	    "\n" +
	    "                                                        <span ng-show=\"ctrl.contact.address.address2\"\r" +
	    "\n" +
	    "                                                              class=\"address-info\" name=\"address2\"> {{ctrl.contact.address.address2}}</span>\r" +
	    "\n" +
	    "                                                        <span ng-show=\"ctrl.contact.address.address3\"\r" +
	    "\n" +
	    "                                                              class=\"address-info\" name=\"address3\"> {{ctrl.contact.address.address3}}</span>\r" +
	    "\n" +
	    "                                            </div>\r" +
	    "\n" +
	    "                                                <span class=\"address-info\" name=\"cityStatePostal\">\r" +
	    "\n" +
	    "                                                    <span ng-show=\"ctrl.contact.address.city\">{{ctrl.contact.address.city}},</span>\r" +
	    "\n" +
	    "                                                    <span ng-show=\"ctrl.contact.address.state\">{{ctrl.contact.address.state}}</span>\r" +
	    "\n" +
	    "                                                    <span ng-show=\"ctrl.contact.address.postal\">{{ctrl.contact.address.postal}}</span>\r" +
	    "\n" +
	    "                                                </span>\r" +
	    "\n" +
	    "                                                <span ng-show=\"ctrl.contact.address.county\" class=\"address-info\"\r" +
	    "\n" +
	    "                                                      name=\"county\"> ({{ctrl.contact.address.county}})</span>\r" +
	    "\n" +
	    "                                            <span class=\"address-info\" name=\"cityStatePostal\">{{ctrl.contact.address.country}}</span>\r" +
	    "\n" +
	    "                                        </address>\r" +
	    "\n" +
	    "                                        <i class=\"fa fa-check-square address-complete\"\r" +
	    "\n" +
	    "                                           ng-show=\"ctrl.contact.address.isComplete\" title=\"{{ ::'crm.address.headers.COMPLETE_ADDRESS' | translate }}\"></i>\r" +
	    "\n" +
	    "                                        <i class=\"fa fa-check-square address-incomplete\"\r" +
	    "\n" +
	    "                                           ng-show=\"!ctrl.contact.address.isComplete\" title=\"{{ ::'crm.address.headers.INCOMPLETE_ADDRESS' | translate }}\"></i>\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div ng-hide=\"!ctrl.contact.address.isEmpty()\">\r" +
	    "\n" +
	    "                                    <crm-inline-editing-edit-empty name=\"editAddress\">\r" +
	    "\n" +
	    "                                        {{ ::'crm.contact.HOME_ADDRESS' | translate }}\r" +
	    "\n" +
	    "                                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </crm-inline-edit-address>\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                    </ul>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"row\" ng-hide=\"ctrl.isCollapsed\">\r" +
	    "\n" +
	    "                    <div class=\"col-sm-12\">\r" +
	    "\n" +
	    "                        <crm-social-media-contact contact=\"ctrl.contact\" is-organization=\"true\" class=\"ws-social-media\"></crm-social-media-contact>\r" +
	    "\n" +
	    "                        <ul class=\"list-group\">\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                                <crm-inline-editing-field\r" +
	    "\n" +
	    "                                        api-service=\"ctrl.contactService\"\r" +
	    "\n" +
	    "                                        field-heading=\"{{ ::'crm.contact.organization.URL' | translate}}\"\r" +
	    "\n" +
	    "                                        disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                        entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                        ng-model=\"ctrl.contact.websiteUrl\"\r" +
	    "\n" +
	    "                                        name=\"companyUrl\"\r" +
	    "\n" +
	    "                                >\r" +
	    "\n" +
	    "                                </crm-inline-editing-field>\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                                <crm-inline-editing-social-media\r" +
	    "\n" +
	    "                                        entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                        type=\"Facebook\"\r" +
	    "\n" +
	    "                                        disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                        field-heading=\"{{ ::'crm.contact.FACEBOOK' | translate}}\"\r" +
	    "\n" +
	    "                                        ng-model=\"ctrl.contact.contactPoints.facebookHandle.value\"\r" +
	    "\n" +
	    "                                        pattern=\"[A-Za-z0-9\\.]{1,}\"\r" +
	    "\n" +
	    "                                        maxlength=\"50\">\r" +
	    "\n" +
	    "                                </crm-inline-editing-social-media>\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                                <crm-inline-editing-social-media\r" +
	    "\n" +
	    "                                        entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                        type=\"Twitter\"\r" +
	    "\n" +
	    "                                        disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                        field-heading=\"{{ ::'crm.contact.TWITTER' | translate}}\"\r" +
	    "\n" +
	    "                                        maxlength=\"15\"\r" +
	    "\n" +
	    "                                        ng-model=\"ctrl.contact.contactPoints.twitterHandle.value\"\r" +
	    "\n" +
	    "                                        pattern=\"[A-Za-z0-9\\_]{1,}\">\r" +
	    "\n" +
	    "                                </crm-inline-editing-social-media>\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                            <br>\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                                <crm-inline-editing-select-ref-def\r" +
	    "\n" +
	    "                                        api-service=\"ctrl.contactService\"\r" +
	    "\n" +
	    "                                        entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                        disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                        field-heading=\"{{ ::'crm.contact.organization.CONTACT_SOURCE' | translate }}\"\r" +
	    "\n" +
	    "                                        ref-def=\"ctrl.contact.source\"\r" +
	    "\n" +
	    "                                        ref-def-list=\"ctrl.organizationRefDefs['company.source']\">\r" +
	    "\n" +
	    "                                </crm-inline-editing-select-ref-def>\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                                <crm-inline-editing-select-ref-def\r" +
	    "\n" +
	    "                                        api-service=\"ctrl.contactService\"\r" +
	    "\n" +
	    "                                        entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                        disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                        field-heading=\"{{ ::'crm.contact.organization.CONTACT_STATUS' | translate }}\"\r" +
	    "\n" +
	    "                                        ref-def=\"ctrl.contact.status\"\r" +
	    "\n" +
	    "                                        ref-def-list=\"ctrl.organizationRefDefs['company.status']\">\r" +
	    "\n" +
	    "                                </crm-inline-editing-select-ref-def>\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                <crm-inline-editing-select-contact-types facade=\"ctrl.typeSubTypeFacade\" contact=\"ctrl.contact\" has-value=\"!!ctrl.contact.contactType\" name=\"contactType\">\r" +
	    "\n" +
	    "                                        <span ng-if=\"ctrl.contact.contactType\">\r" +
	    "\n" +
	    "                                            <span class=\"item-heading\">{{::\"crm.contact.headers.COMPANY_TYPE\" | translate}}: </span>\r" +
	    "\n" +
	    "                                            {{ctrl.contact.contactType.text}}\r" +
	    "\n" +
	    "                                        </span>\r" +
	    "\n" +
	    "                                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.contactType\">\r" +
	    "\n" +
	    "                                        {{::\"crm.contact.headers.COMPANY_TYPE\" | translate}}\r" +
	    "\n" +
	    "                                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                </crm-inline-editing-select-contact-types>\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                <crm-inline-editing-select-contact-types facade=\"ctrl.typeSubTypeFacade\" contact=\"ctrl.contact\" has-value=\"!!ctrl.contact.contactSubType\" name=\"contactSubType\">\r" +
	    "\n" +
	    "                                        <span ng-if=\"ctrl.contact.contactSubType\" name=\"\">\r" +
	    "\n" +
	    "                                            <span class=\"item-heading\">{{::\"crm.contact.headers.COMPANY_SUBTYPE\" | translate}}: </span>\r" +
	    "\n" +
	    "                                            {{ctrl.contact.contactSubType.text}}\r" +
	    "\n" +
	    "                                        </span>\r" +
	    "\n" +
	    "                                    <crm-inline-editing-edit-empty ng-if=\"!ctrl.contact.contactSubType\">\r" +
	    "\n" +
	    "                                        {{::\"crm.contact.headers.COMPANY_SUBTYPE\" | translate}}\r" +
	    "\n" +
	    "                                    </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                                </crm-inline-editing-select-contact-types>\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                            <br>\r" +
	    "\n" +
	    "                            <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                                <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                                <crm-inline-external-reference\r" +
	    "\n" +
	    "                                        api-service=\"ctrl.contactService\"\r" +
	    "\n" +
	    "                                        entity=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                        disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                        field-heading=\"{{ ::'crm.external_references.EXTERNAL_REFERENCE_IDS' | translate}}\"\r" +
	    "\n" +
	    "                                        ng-model=\"ctrl.contact.externalReferenceId\">\r" +
	    "\n" +
	    "                                </crm-inline-external-reference>\r" +
	    "\n" +
	    "                            </li>\r" +
	    "\n" +
	    "                        </ul>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"footer\">\r" +
	    "\n" +
	    "            <div class=\"ws-expander-button panel-footer\"\r" +
	    "\n" +
	    "                 ng-class=\"{'ws-expanded': !ctrl.isCollapsed}\"\r" +
	    "\n" +
	    "                 ng-click=\"ctrl.isCollapsed = !ctrl.isCollapsed\">\r" +
	    "\n" +
	    "                <a class=\"ws-expander-button-content\"\r" +
	    "\n" +
	    "                   name=\"viewToggle\">\r" +
	    "\n" +
	    "                    <span ng-show=\"ctrl.isCollapsed\">{{::'crm.contact.SHOW_ALL_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "                    <span ng-hide=\"ctrl.isCollapsed\">{{::'crm.contact.HIDE_EXTRA_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </co-panel>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/convertOpportunityType/convertOpportunityTypeModalTemplate.html',
	    "<crm-convert-opportunity-type-panel\r" +
	    "\n" +
	    "    contact-id=\"ctrl.contactId\"\r" +
	    "\n" +
	    "    opportunity-id=\"ctrl.opportunityId\"\r" +
	    "\n" +
	    "    opportunity-type=\"ctrl.opportunityType\"\r" +
	    "\n" +
	    "    assigned-to=\"ctrl.assignedTo\"\r" +
	    "\n" +
	    "    on-cancel=\"ctrl.cancel()\"\r" +
	    "\n" +
	    "    on-accept=\"ctrl.accept()\"\r" +
	    "\n" +
	    "    class=\"convert-opportunity\">\r" +
	    "\n" +
	    "</crm-convert-opportunity-type-panel>\r" +
	    "\n"
	  );


	  $templateCache.put('app/convertOpportunityType/panel/convertOpportunityTypePanelTemplate.html',
	    "<div class=\"panel panel-primary panel-modal ng-scope\" co-loading=\"ctrl.isLoading\" loading-show-children=\"true\" name=\"convertModalPanel\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "            <h3 class=\"panel-title ws-flex-fill-even\" ng-if=\"ctrl.step == ctrl.NewOpportunitySelectionStep\" name=\"convertTitle1\">{{::\"crm.convertOpportunityType.TITLE_STEP_1\" | translate}}</h3>\r" +
	    "\n" +
	    "            <h3 class=\"panel-title ws-flex-fill-even\" ng-if=\"ctrl.step == ctrl.ConfirmationStep\" name=\"convertTitle2\">{{::\"crm.convertOpportunityType.TITLE_STEP_2\" | translate}}</h3>\r" +
	    "\n" +
	    "            <h3 class=\"panel-title ws-flex-fill-even\" ng-if=\"ctrl.step == ctrl.SuccessStep\" name=\"convertTitle3\">{{::\"crm.convertOpportunityType.TITLE_SUCCESS\" | translate}}</h3>\r" +
	    "\n" +
	    "            <h3 class=\"panel-title ws-flex-fill-even\" ng-if=\"ctrl.step == ctrl.FailureStep\" name=\"convertTitle4\">{{::\"crm.convertOpportunityType.TITLE_FAILURE\" | translate}}</h3>\r" +
	    "\n" +
	    "            <div class=\"status-bar-container\">\r" +
	    "\n" +
	    "                <co-icon-badge class=\"co-icon-badge step-1\" size=\"md\"\r" +
	    "\n" +
	    "                               ng-class=\"{'ws-status-on': ctrl.step == ctrl.NewOpportunitySelectionStep}\" name=\"convertIconStep1\">1</co-icon-badge>\r" +
	    "\n" +
	    "                <co-icon-badge class=\"co-icon-badge step-2\" size=\"md\"\r" +
	    "\n" +
	    "                               ng-class=\"{'ws-status-off': ctrl.step < ctrl.ConfirmationStep, 'ws-status-on': ctrl.step == ctrl.ConfirmationStep}\" name=\"convertIconStep2\">2</co-icon-badge>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.onCancel()\" name=\"closeButton\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-body\">\r" +
	    "\n" +
	    "        <div class=\"modal-prompt\" ng-class=\"{'opp-confirm': ctrl.step == ctrl.ConfirmationStep}\">\r" +
	    "\n" +
	    "            <h6 ng-if=\"ctrl.step == ctrl.NewOpportunitySelectionStep\" name=\"convertHeaderStep1\">\r" +
	    "\n" +
	    "                <span translate=\"crm.convertOpportunityType.CONVERT_TARGET_PROMPT\"\r" +
	    "\n" +
	    "                      translate-value-type=\"{{ctrl.type.textUpper}}\"></span>\r" +
	    "\n" +
	    "                <span class=\"required\" ng-if=\"ctrl.typeRequired\">\r" +
	    "\n" +
	    "                    {{::\"crm.convertOpportunityType.REQUIRED\" | translate}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </h6>\r" +
	    "\n" +
	    "            <h6 ng-if=\"ctrl.step == ctrl.ConfirmationStep\" name=\"convertHeaderStep2\">\r" +
	    "\n" +
	    "                <span translate=\"crm.convertOpportunityType.CONFIRMATION_PROMPT\"\r" +
	    "\n" +
	    "                      translate-value-type=\"{{ctrl.type.textUpper}}\"\r" +
	    "\n" +
	    "                      translate-value-new-type=\"{{ctrl.newType.textUpper}}\"></span>\r" +
	    "\n" +
	    "            </h6>\r" +
	    "\n" +
	    "            <h6 ng-if=\"ctrl.step == ctrl.FailureStep\">\r" +
	    "\n" +
	    "                {{::\"crm.convertOpportunityType.FAILURE_PROMPT\" | translate}}\r" +
	    "\n" +
	    "            </h6>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <div class=\"form-group\"\r" +
	    "\n" +
	    "                 ng-if=\"ctrl.step == ctrl.NewOpportunitySelectionStep\"\r" +
	    "\n" +
	    "                 ng-repeat=\"type in ctrl.types\"\r" +
	    "\n" +
	    "                 ng-class=\"{'sales-opp': !$last}\">\r" +
	    "\n" +
	    "                <div class=\"radio\">\r" +
	    "\n" +
	    "                    <input id=\"radio-convert-opportunity-type-{{$index}}\"\r" +
	    "\n" +
	    "                           name=\"convertOpportunityTypeRadio\"\r" +
	    "\n" +
	    "                           value=\"{{type.type}}\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.newOpportunityType\"\r" +
	    "\n" +
	    "                           type=\"radio\">\r" +
	    "\n" +
	    "                    <label for=\"radio-convert-opportunity-type-{{$index}}\" name=\"convertRadioButtonLabel\">\r" +
	    "\n" +
	    "                        <span class=\"fake-radio\" name=\"convertRadioButton\"></span>{{type.text}} {{::\"crm.convertOpportunityType.OPPORTUNITY\" | translate}}\r" +
	    "\n" +
	    "                    </label>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-if=\"ctrl.step == ctrl.ConfirmationStep\">\r" +
	    "\n" +
	    "                <p name=\"listHeader\"><strong>{{::\"crm.convertOpportunityType.CONFIRMATION_LIST_HEADER\" | translate}}</strong></p>\r" +
	    "\n" +
	    "                <ul>\r" +
	    "\n" +
	    "                    <li name=\"listItem1\">{{::\"crm.convertOpportunityType.CONFIRMATION_LIST_1\" | translate}}</li>\r" +
	    "\n" +
	    "                    <li name=\"listItem2\">{{::\"crm.convertOpportunityType.CONFIRMATION_LIST_2\" | translate}}</li>\r" +
	    "\n" +
	    "                    <li name=\"listItem3\">{{::\"crm.convertOpportunityType.CONFIRMATION_LIST_3\" | translate}}</li>\r" +
	    "\n" +
	    "                    <li name=\"listItem4\">{{::\"crm.convertOpportunityType.CONFIRMATION_LIST_4\" | translate}}</li>\r" +
	    "\n" +
	    "                </ul>\r" +
	    "\n" +
	    "                <span name=\"areYouSure\">{{::\"crm.convertOpportunityType.ARE_YOU_SURE_YOU_WANT_TO_CONTINUE\" | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-if=\"ctrl.step == ctrl.SuccessStep\" name=\"redirected\">\r" +
	    "\n" +
	    "                {{::\"crm.convertOpportunityType.YOU_WILL_BE_REDIRECTED\" | translate}}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-if=\"ctrl.step == ctrl.FailureStep\" name=\"errorMessage\">\r" +
	    "\n" +
	    "                {{ctrl.errorMessage}}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <button type=\"button\"\r" +
	    "\n" +
	    "                    class=\"btn btn-primary pull-right\"\r" +
	    "\n" +
	    "                    ng-if=\"ctrl.step == ctrl.NewOpportunitySelectionStep\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.continueStep()\" name=\"continueButton\">\r" +
	    "\n" +
	    "                {{::\"crm.convertOpportunityType.CONTINUE\" | translate}}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "            <button type=\"button\"\r" +
	    "\n" +
	    "                    class=\"btn btn-quaternary\"\r" +
	    "\n" +
	    "                    ng-if=\"ctrl.step == ctrl.ConfirmationStep\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.goBack()\" name=\"goBack\">\r" +
	    "\n" +
	    "                {{::\"crm.convertOpportunityType.GO_BACK\" | translate}}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "            <button type=\"button\"\r" +
	    "\n" +
	    "                    class=\"btn btn-primary pull-right\"\r" +
	    "\n" +
	    "                    ng-if=\"ctrl.step == ctrl.ConfirmationStep\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.convert()\" name=\"convertButton\">\r" +
	    "\n" +
	    "                {{::\"crm.convertOpportunityType.CONVERT\" | translate}}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "            <button type=\"button\"\r" +
	    "\n" +
	    "                    class=\"btn btn-primary pull-right\"\r" +
	    "\n" +
	    "                    ng-if=\"ctrl.step == ctrl.SuccessStep\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.onAccept()\" name=\"okayButton\">\r" +
	    "\n" +
	    "                {{::\"crm.convertOpportunityType.OK_GOT_IT\" | translate}}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "            <button type=\"button\"\r" +
	    "\n" +
	    "                    class=\"btn btn-primary pull-right\"\r" +
	    "\n" +
	    "                    ng-if=\"ctrl.step == ctrl.FailureStep\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.onCancel()\" name=\"okButton\">\r" +
	    "\n" +
	    "                {{::\"crm.convertOpportunityType.OK_GOT_IT\" | translate}}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/csi/add/csiAddTemplate.html',
	    "<div class=\"detail-view-container ws-flex-container\"\r" +
	    "\n" +
	    "     co-loading=\"ctrl.isLoading\">\r" +
	    "\n" +
	    "    <div class=\"detail-view-header\">\r" +
	    "\n" +
	    "        <div class=\"ws-action-bar\">\r" +
	    "\n" +
	    "            <h1 class=\"detail-view-title\">{{ ::'crm.salesOpportunity.csi.HEADERS.ADD_NEW' | translate }}</h1>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <div class=\"ws-action-spacer\"></div>\r" +
	    "\n" +
	    "            <button type=\"button\" class=\"btn ws-primary-action\" name=\"saveButton\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.submit(ctrl.addCsiEventForm)\">{{ ::'crm.actions.SAVE_AND_FINISH' | translate }}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"detail-view-content\">\r" +
	    "\n" +
	    "        <crm-alert alert-names=\"['CSI_ADD_ERRORED']\"></crm-alert>\r" +
	    "\n" +
	    "        <div class=\"row ws-layout-row\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-12 col-lg-5\">\r" +
	    "\n" +
	    "                <crm-contact-card ng-show=\"ctrl.contact\" contact=\"ctrl.contact\"></crm-contact-card>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-xs-12 col-lg-7\">\r" +
	    "\n" +
	    "                <div class=\"ws-detail-view-content-group\">\r" +
	    "\n" +
	    "                    <uib-tabset>\r" +
	    "\n" +
	    "                        <uib-tab>\r" +
	    "\n" +
	    "                            <uib-tab-heading name=\"csiCaseInfoTab\">\r" +
	    "\n" +
	    "                                <div class=\"tab-title\">\r" +
	    "\n" +
	    "                                    {{ ::'crm.salesOpportunity.csi.HEADERS.CSI_CASE_ADD_TAB' | translate }}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </uib-tab-heading>\r" +
	    "\n" +
	    "                            <div class=\"ws-panel\" style=\"clear: both\">\r" +
	    "\n" +
	    "                                <form name=\"ctrl.addCsiEventForm\">\r" +
	    "\n" +
	    "                                    <csi-add-panel csi-case-model=\"ctrl.csiContactModel\" invalid=\"ctrl.invalid\" form=\"ctrl.addCsiEventForm\">\r" +
	    "\n" +
	    "                                    </csi-add-panel>\r" +
	    "\n" +
	    "                                </form>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </uib-tab>\r" +
	    "\n" +
	    "                        <uib-tab>\r" +
	    "\n" +
	    "                            <uib-tab-heading name=\"vehicleTab\">\r" +
	    "\n" +
	    "                                <div class=\"tab-title\">\r" +
	    "\n" +
	    "                                    {{::'crm.contact.headers.VEHICLE_INFO' | translate}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </uib-tab-heading>\r" +
	    "\n" +
	    "                            <vehicle-info contact=\"ctrl.contact\" contact-vehicles=\"ctrl.contact.vehicles\" vehicle=\"ctrl.csiContactModel.vehicle\" is-add=\"true\"></vehicle-info>\r" +
	    "\n" +
	    "                        </uib-tab>\r" +
	    "\n" +
	    "                    </uib-tabset>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/csi/add/panel/csiAddPanelTemplate.html',
	    "<div class=\"ws-sales-opportunity-add-trade\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main ws-content-group\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-12 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.csi.LABELS.DESCRIPTION' | translate}}</label>\r" +
	    "\n" +
	    "                    <input type=\"text\" class=\"form-control\" name=\"description\" ng-model=\"ctrl.description\" ng-change=\"ctrl.updateDescription()\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.csi.LABELS.ASSIGNED_TO' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            name=\"assigned\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.csiCaseModel.assignTo\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.csiEventRefDefs.AssignedTo track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'crm.salesOpportunity.csi.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.csi.LABELS.TYPE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.csiCaseModel.type.text}\"\r" +
	    "\n" +
	    "                            name=\"type\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.csiCaseModel.type\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.csiEventRefDefs.Types track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'crm.salesOpportunity.csi.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-show=\"ctrl.form.$submitted && !ctrl.csiCaseModel.type.text\" name=\"csiAddRequiredType\">\r" +
	    "\n" +
	    "                        {{::'crm.salesOpportunity.csi.ERROR_MESSAGE.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.csi.LABELS.SERVICE_PRODUCT' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.csiCaseModel.subType.text}\"\r" +
	    "\n" +
	    "                            name=\"serviceProduct\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.csiCaseModel.subType\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.csiEventRefDefs.ServiceProduct track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'crm.salesOpportunity.csi.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-show=\"ctrl.form.$submitted && !ctrl.csiCaseModel.subType.text\" name=\"csiAddRequiredSubType\">\r" +
	    "\n" +
	    "                        {{::'crm.salesOpportunity.csi.ERROR_MESSAGE.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.csi.LABELS.RESOLUTION_DATE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.csiCaseModel.resolutionDate.text}\"\r" +
	    "\n" +
	    "                            name=\"resolution\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.csiCaseModel.resolutionDate\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.csiEventRefDefs.ResolutionDate track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'crm.salesOpportunity.csi.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-show=\"ctrl.form.$submitted && !ctrl.csiCaseModel.resolutionDate.text\" name=\"csiAddRequiredResDate\">\r" +
	    "\n" +
	    "                        {{::'crm.salesOpportunity.csi.ERROR_MESSAGE.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.csi.LABELS.BDC' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            name=\"bdc\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.csiCaseModel.bdcAssigned\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.csiEventRefDefs.BDCAssigned track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'crm.salesOpportunity.csi.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.csi.LABELS.RANKING' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            name=\"ranking\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.csiCaseModel.ranking\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.csiEventRefDefs.Rankings track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'crm.salesOpportunity.csi.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.csi.LABELS.SOURCE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.csiCaseModel.source.text}\"\r" +
	    "\n" +
	    "                            name=\"source\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.csiCaseModel.source\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.csiEventRefDefs.Source track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'crm.salesOpportunity.csi.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-show=\"ctrl.form.$submitted && !ctrl.csiCaseModel.source.text\" name=\"csiAddRequiredSource\">\r" +
	    "\n" +
	    "                        {{::'crm.salesOpportunity.csi.ERROR_MESSAGE.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/csi/details/card/detailCardTemplate.html',
	    "<crm-csi-card ng-if=\"ctrl.csiFacade\" facade=\"ctrl.csiFacade\"></crm-csi-card>\r" +
	    "\n"
	  );


	  $templateCache.put('app/csi/existingVehicleCard/existingVehicleCardModalTemplate.html',
	    "<section class=\"ws-panel\" loading-show-children=\"true\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <header class=\"ws-panel-title\">{{::\"csi.EXISTING_VEHICLE_TITLE\" | translate}}</header>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.existingVehicleData.modal.cancel()\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row ws-sales-opportunity-trade-existing-vehicle\">\r" +
	    "\n" +
	    "        <csi-existing-vehicle-card ng-repeat=\"vehicle in ctrl.existingVehicleData.existingVehicles\"\r" +
	    "\n" +
	    "                                         vehicle=\"vehicle\"\r" +
	    "\n" +
	    "                                         callback=\"ctrl.addExistingVehicle(vehicle)\"></csi-existing-vehicle-card>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/csi/existingVehicleCard/existingVehicleCardTemplate.html',
	    "<co-panel co-multi-transclusion class=\"ds-card-vehicle\">\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        {{ctrl.vehicle.year}} {{ctrl.vehicle.make}} {{ctrl.vehicle.model}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        {{ctrl.getServiceTime()}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <div>\r" +
	    "\n" +
	    "          <span ng-show=\"ctrl.vehicle.isCustomerOwned\" class=\"text-success\">{{::\"crm.vehicle.OWNED_STATUS\" | translate}}</span>\r" +
	    "\n" +
	    "          <span ng-hide=\"ctrl.vehicle.isCustomerOwned\" class=\"text-overdue\">{{::\"crm.vehicle.NOT_OWNED_STATUS\" | translate}}</span>\r" +
	    "\n" +
	    "          <span class=\"pull-right\">Purchased {{ctrl.vehicle.purchasedDate}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "            <span ng-repeat=\"item in ctrl.items\"><span ng-if=\"!$first\"> / </span>{{item}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "            <div class=\"btn btn-primary\" ng-click=\"ctrl.tradeBtnDisabled || ctrl.onBtnClick()\" >\r" +
	    "\n" +
	    "                {{::\"csi.ADD_THIS_VEHICLE\" | translate}}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>\r" +
	    "\n"
	  );


	  $templateCache.put('app/csi/sharedTemplates/irresolvableModal.html',
	    "<co-panel co-multi-transclusion ribbon=\"true\" class=\"ds-card-vehicle\" style=\"background-color: #DDDDDD;padding: 1em\">\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "       <span> {{::'crm.contact.csi.IRRESOLVABLE_MODAL_TITLE' | translate}}</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <div class=\"col-md-6\">\r" +
	    "\n" +
	    "            <label>{{::'crm.contact.csi.PRIMARY_REASON' | translate}}</label>\r" +
	    "\n" +
	    "            <select class=\"form-control\"\r" +
	    "\n" +
	    "                    ng-model=\"ctrl.csiEvent.resolutionCode1\"\r" +
	    "\n" +
	    "                    ng-options=\"ResolutionCode as ResolutionCode.text for ResolutionCode in ctrl.csiEventRefDefs.ResolutionCode1 track by ResolutionCode.value\"\r" +
	    "\n" +
	    "                    ng-change=\"ctrl.onResChange()\"></select>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        <div class=\"col-md-6\">\r" +
	    "\n" +
	    "            <label>{{::'crm.contact.csi.ADDITIONAL_DETAILS' | translate}}</label>\r" +
	    "\n" +
	    "            <select class=\"form-control\"\r" +
	    "\n" +
	    "                    ng-model=\"ctrl.csiEvent.resolutionCode2\"\r" +
	    "\n" +
	    "                    ng-options=\"ResolutionCode as ResolutionCode.text for ResolutionCode in ctrl.additionalDetails track by ResolutionCode.value\"></select>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"footer\">\r" +
	    "\n" +
	    "        <div class=\"panel-footer-options pull-right\"style=\"margin-top: 5px;padding-right: 2.9em\">\r" +
	    "\n" +
	    "            <button type=\"submit\" class=\"btn btn-primary ng-binding\" name=\"saveEdit\" aria-disabled=\"false\" ng-click=\"ctrl.statusModalSave()\">\r" +
	    "\n" +
	    "                {{::'crm.actions.SAVE' | translate}}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>\r" +
	    "\n"
	  );


	  $templateCache.put('app/csi/sharedTemplates/statusModal.html',
	    "<div style=\"width: 100%;position: absolute;left: 35%\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-inline-editing\" name=\"inlineEditPanel\">\r" +
	    "\n" +
	    "        <div class= \"panel-overlay\" ng-show=\"ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "            <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-heading\">\r" +
	    "\n" +
	    "            <h3 class=\"panel-title\">{{ctrl.title}}</h3>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-body form-short-horizontal\">\r" +
	    "\n" +
	    "            <select id=\"status-selector\" class=\"form-control\"\r" +
	    "\n" +
	    "                    md-diameter=\"25\" ng-model=\"ctrl.selectedStatus\"\r" +
	    "\n" +
	    "                    ng-options=\"status as status.text for status in ctrl.statuses track by status.value\"></select>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-footer\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                    <div class=\"panel-footer-options pull-right\"style=\"margin-top: 5px\">\r" +
	    "\n" +
	    "                        <button type=\"button\" class=\"btn btn-quaternary\" ng-click=\"ctrl.cancel()\" name=\"cancelEdit\" style=\"margin-left: 0px\">{{ ::'crm.actions.CANCEL' | translate}}</button>\r" +
	    "\n" +
	    "                        <button type=\"submit\" class=\"btn btn-primary ng-binding\" name=\"saveEdit\" aria-disabled=\"false\" ng-click=\"ctrl.statusModalSave()\">\r" +
	    "\n" +
	    "                            {{::'crm.actions.SAVE' | translate}}\r" +
	    "\n" +
	    "                        </button>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/csi/update/csiUpdateMoreActionsTemplate.html',
	    "<div class=\"ws-action-bar\">\r" +
	    "\n" +
	    "    <div>\r" +
	    "\n" +
	    "        <a class=\"ws-popover-item ng-scope\" ng-click=\"ctrl.actionEmail()\" name=\"csiEmail\">\r" +
	    "\n" +
	    "            <span>{{ ::\"crm.salesOpportunity.csi.ACTIONS.EMAIL\" | translate }}</span>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div>\r" +
	    "\n" +
	    "        <a class=\"ws-popover-item ng-scope\" ng-click=\"ctrl.actionPrint()\" name=\"csiPrint\">\r" +
	    "\n" +
	    "            <span>{{ ::\"crm.salesOpportunity.csi.ACTIONS.PRINT\" | translate }}</span>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div>\r" +
	    "\n" +
	    "        <a class=\"ws-popover-item ng-scope\" ng-click=\"ctrl.actionView()\" name=\"csiView\">\r" +
	    "\n" +
	    "            <span>{{ ::\"crm.salesOpportunity.csi.ACTIONS.VIEW\" | translate }}</span>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/csi/update/csiUpdateTemplate.html',
	    "<div class=\"detail-view-container\" ng-class=\"{'ws-flex-container': !ctrl.embedded}\">\r" +
	    "\n" +
	    "    <div class=\"detail-view-header\">\r" +
	    "\n" +
	    "        <div class=\"ws-action-bar\">\r" +
	    "\n" +
	    "            <h1 class=\"detail-view-title\">\r" +
	    "\n" +
	    "                {{ ::'crm.salesOpportunity.csi.HEADERS.UPDATE' | translate }}: {{ctrl.contact.getFullTitleName()}}</h1>\r" +
	    "\n" +
	    "            </h1>\r" +
	    "\n" +
	    "            <action-bar-item position=\"right\" co-multi-transclusion>\r" +
	    "\n" +
	    "                <div transclude-to=\"title\" ng-click=\"ctrl.printProspect()\">{{::\"crm.salesOpportunity.csi.PRINT_PROSPECT\" | translate}}</div>\r" +
	    "\n" +
	    "            </action-bar-item>\r" +
	    "\n" +
	    "            <action-bar-item position=\"right\" co-multi-transclusion>\r" +
	    "\n" +
	    "                <div transclude-to=\"title\"><i class=\"fa fa-ellipsis-h\" name=\"csiActionsMenu\"></i></div>\r" +
	    "\n" +
	    "                <div transclude-to=\"menu\" ng-click=\"ctrl.openDocumentForAction(false)\" name=\"csiPrint\">{{::'crm.contact.actions.PRINT_DOCUMENT' | translate}}</div>\r" +
	    "\n" +
	    "                <div transclude-to=\"menu\" ng-click=\"ctrl.openDocumentForAction(true)\" name=\"csiEmail\">{{::'crm.contact.actions.EMAIL_DOCUMENT' | translate}}</div>\r" +
	    "\n" +
	    "                <div transclude-to=\"menu\" ng-click=\"ctrl.actionView()\" name=\"csiView\">{{::'crm.salesOpportunity.csi.ACTIONS.VIEW' | translate}}</div>\r" +
	    "\n" +
	    "            </action-bar-item>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"detail-view-content\">\r" +
	    "\n" +
	    "        <div class=\"row ws-layout-row\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-12 col-lg-5\">\r" +
	    "\n" +
	    "                <div class=\"row ws-layout-row\">\r" +
	    "\n" +
	    "                    <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                        <div class=\"ws-detail-view-content-group\">\r" +
	    "\n" +
	    "                            <crm-contact-card ng-show=\"ctrl.contact\" contact=\"ctrl.contact\"></crm-contact-card>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-xs-12 col-lg-7\">\r" +
	    "\n" +
	    "                <div class=\"ws-detail-view-content-group\">\r" +
	    "\n" +
	    "                    <uib-tabset class=\"icon-headings\" justified=\"true\">\r" +
	    "\n" +
	    "                        <uib-tab>\r" +
	    "\n" +
	    "                            <uib-tab-heading name=\"activityTab\">\r" +
	    "\n" +
	    "                                <div class=\"tab-title\">{{::'crm.contact.headers.RESOLUTION_TIMELINE' | translate}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"tab-info\">\r" +
	    "\n" +
	    "                                    {{ctrl.getCSITimeLineTitle()}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </uib-tab-heading>\r" +
	    "\n" +
	    "                            <div>\r" +
	    "\n" +
	    "                                <section class=\"ws-panel\">\r" +
	    "\n" +
	    "                                    <div initial-height=\"{{ctrl.initialHeight}}\">\r" +
	    "\n" +
	    "                                        <crm-csi-detail-card csi-event=\"ctrl.csiEvent\"></crm-csi-detail-card>\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                </section>\r" +
	    "\n" +
	    "                                <section class=\"ws-panel\">\r" +
	    "\n" +
	    "                                    <div ng-if=\"ctrl.contact && ctrl.csiEvent\">\r" +
	    "\n" +
	    "                                        <crm-activities-list contact=\"ctrl.contact\" event=\"ctrl.csiEvent\" event-type=\"ctrl.OpportunityEventType.qa\">\r" +
	    "\n" +
	    "                                            <div class=\"pull-right ws-not-in-market\">\r" +
	    "\n" +
	    "                                                <div class=\"pull-left ws-status\"\r" +
	    "\n" +
	    "                                                     ng-class=\"{'ws-active':ctrl.csiEventActive}\" ng-click=\"ctrl.toggleActive(true)\">\r" +
	    "\n" +
	    "                                                    {{::'crm.salesOpportunity.status.ACTIVE' | translate}}\r" +
	    "\n" +
	    "                                                </div>\r" +
	    "\n" +
	    "                                                <switch ng-model=\"ctrl.csiEventActive\" name=\"activation-switch\"\r" +
	    "\n" +
	    "                                                        ng-change=\"ctrl.toggleActive(ctrl.csiEventActive)\"></switch>\r" +
	    "\n" +
	    "                                                <div class=\"pull-right ws-right-status\"\r" +
	    "\n" +
	    "                                                     ng-class=\"{'ws-active':!ctrl.csiEventActive}\" ng-click=\"ctrl.toggleActive(false)\">\r" +
	    "\n" +
	    "                                                    {{::'crm.salesOpportunity.status.IRRESOLVABLE' | translate}}\r" +
	    "\n" +
	    "                                                </div>\r" +
	    "\n" +
	    "                                            </div>\r" +
	    "\n" +
	    "                                        </crm-activities-list>\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                </section>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </uib-tab>\r" +
	    "\n" +
	    "                        <uib-tab>\r" +
	    "\n" +
	    "                            <uib-tab-heading name=\"vehicleTab\">\r" +
	    "\n" +
	    "                                <div class=\"tab-title\">\r" +
	    "\n" +
	    "                                    {{::'crm.contact.headers.VEHICLE_INFO' | translate}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div ng-if=\"true\" class=\"tab-info\">\r" +
	    "\n" +
	    "                                    {{ctrl.getCSIVehicleTitle()}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </uib-tab-heading>\r" +
	    "\n" +
	    "                            <vehicle-info contact=\"ctrl.contact\" contact-vehicles=\"ctrl.contact.vehicles\" vehicle=\"ctrl.csiEvent.vehicle\" vehicle-changed=\"ctrl.vehicleChanged(vehicle)\"></vehicle-info>\r" +
	    "\n" +
	    "                        </uib-tab>\r" +
	    "\n" +
	    "                    </uib-tabset>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/customer/CustomerDetails/CustomerDetailsTabs/CustomerDetailsTabsTemplate.html',
	    "<md-tabs class=\"icon-headings\" justified=\"true\">\r" +
	    "\n" +
	    "    <crm-sales-opportunity-sales-panel contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                       sales-counts=\"ctrl.salesCounts\"></crm-sales-opportunity-sales-panel>\r" +
	    "\n" +
	    "    <md-tab md-select=\"ctrl.vehicleRecordsTabSelected()\" name=\"vehicleListTab\" disable=\"!ctrl.vehiclePermission.view\">\r" +
	    "\n" +
	    "        <md-tab-label>\r" +
	    "\n" +
	    "            <div class=\"tab-title\" name=\"vehiclesTabTitle\">{{ ::'crm.salesOpportunity.tabs.VEHICLE_RECORDS' | translate\r" +
	    "\n" +
	    "                }} <span ng-show=\"ctrl.vehicleCountLoaded\">({{ ctrl.vehicleCounts.vehicleCount }})</span></div>\r" +
	    "\n" +
	    "            <div class=\"tab-info\" name=\"vehiclesTabEventCounts\">{{ctrl.vehicleCounts.openEventCount}} {{\r" +
	    "\n" +
	    "                ::'crm.salesOpportunity.tabs.OPEN_ROS' |\r" +
	    "\n" +
	    "                translate }} / {{ctrl.vehicleCounts.closedEventCount}} {{::'crm.salesOpportunity.tabs.CLOSED' |\r" +
	    "\n" +
	    "                translate }}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </uib-tab-heading>\r" +
	    "\n" +
	    "        <section class=\"ws-panel\">\r" +
	    "\n" +
	    "            <div class=\"ws-panel-row\" ng-show=\"ctrl.updatingVehicleRecords\">\r" +
	    "\n" +
	    "                <md-progress-circular class=\"ws-progress-circular ws-progress-centered\"\r" +
	    "\n" +
	    "                                      md-diameter=\"25\" md-mode=\"indeterminate\">\r" +
	    "\n" +
	    "                </md-progress-circular>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <crm-customer-details-vehicles ng-hide=\"ctrl.updatingVehicleRecords\" contact=\"ctrl.contact\"></crm-customer-details-vehicles>\r" +
	    "\n" +
	    "        </section>\r" +
	    "\n" +
	    "    </uib-tab>\r" +
	    "\n" +
	    "    <uib-tab select=\"ctrl.tabSelected(ctrl.Constants.SALES_OPPORTUNITY_MARKETING_TAB)\">\r" +
	    "\n" +
	    "        <uib-tab-heading name=\"marketingTab\">\r" +
	    "\n" +
	    "            <div class=\"tab-title\">{{::'crm.salesOpportunity.tabs.MARKETING' | translate}}</div>\r" +
	    "\n" +
	    "            <div class=\"tab-info\" name=\"campaignCount\">\r" +
	    "\n" +
	    "                {{ctrl.getMarketingTabActiveCampaignCount()}} {{::'crm.salesOpportunity.tabs.ACTIVE' | translate}}\r" +
	    "\n" +
	    "                / {{ctrl.getMarketingTabCompletedCampaignCount()}} {{::'crm.salesOpportunity.tabs.COMPLETED' | translate}}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </uib-tab-heading>\r" +
	    "\n" +
	    "        <section class=\"ws-panel\"\r" +
	    "\n" +
	    "                 co-loading=\"ctrl.loadingService.get(ctrl.CrmConstants.CONTACT.MARKETING.IS_LOADING)\"\r" +
	    "\n" +
	    "                 loading-show-children=\"true\">\r" +
	    "\n" +
	    "            <ds-contact-marketing-panel\r" +
	    "\n" +
	    "                    contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                    campaigns=\"ctrl.marketingCampaigns\"\r" +
	    "\n" +
	    "                    ref-defs=\"ctrl.marketingRefDefs\"\r" +
	    "\n" +
	    "                    permissions=\"ctrl.marketingPermissions\"></ds-contact-marketing-panel>\r" +
	    "\n" +
	    "        </section>\r" +
	    "\n" +
	    "    </uib-tab>\r" +
	    "\n" +
	    "    <uib-tab select=\"ctrl.tabSelected(ctrl.CrmConstants.SALES_OPPORTUNITY.CSI_TAB.NAME)\" disable=\"!ctrl.hasViewQAPermission\" name=\"csiTab\">\r" +
	    "\n" +
	    "        <uib-tab-heading>\r" +
	    "\n" +
	    "            <div class=\"tab-title\" name=\"csiTab\">{{::'crm.salesOpportunity.tabs.CSI' | translate}}</div>\r" +
	    "\n" +
	    "            <div class=\"tab-info\" name=\"csiCount\">{{ctrl.openCSIEvents}} {{::'crm.salesOpportunity.tabs.OPEN' |\r" +
	    "\n" +
	    "                translate}} / {{ctrl.resolvedCSIEvents}} {{::'crm.salesOpportunity.tabs.RESOLVED' | translate}}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </md-tab-label>\r" +
	    "\n" +
	    "        <md-tab-body>\r" +
	    "\n" +
	    "            <section class=\"ws-panel\">\r" +
	    "\n" +
	    "                <crm-sales-opportunity-csi-panel contact=\"ctrl.contact\"></crm-sales-opportunity-csi-panel>\r" +
	    "\n" +
	    "            </section>\r" +
	    "\n" +
	    "        </md-tab-body>\r" +
	    "\n" +
	    "    </md-tab>\r" +
	    "\n" +
	    "</md-tabs>"
	  );


	  $templateCache.put('app/customer/CustomerDetails/CustomerDetailsVehicles/CustomerDetailsVehiclesTemplate.html',
	    "<div class=\"ws-panel-row ws-bottom-margin\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "        <ul class=\"ws-advanced-search-options\">\r" +
	    "\n" +
	    "            <li>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a class=\"toggle-inner-panel-link ws-link\" disabled name=\"vehiclenStatusFilter\">{{\r" +
	    "\n" +
	    "                        ::'crm.vehicle.panel.STATUS' | translate }} <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a class=\"toggle-inner-panel-link ws-link\" disabled name=\"vehicleAssignedToFilter\">{{\r" +
	    "\n" +
	    "                        ::'crm.vehicle.panel.ASSIGNED_TO' | translate }} <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                 </span>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a class=\"toggle-inner-panel-link ws-link\" disabled name=\"vehicleDealershipFilter\">{{\r" +
	    "\n" +
	    "                        ::'crm.vehicle.panel.DEALERSHIP' | translate }} <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                 </span>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "        <ul class=\"ws-advanced-search-options\">\r" +
	    "\n" +
	    "            <li class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                <a ns-popover name=\"sort-dr opdown\"\r" +
	    "\n" +
	    "                   ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                   ns-popover-template=\"app/customer/CustomerDetails/CustomerDetailsVehicles/popoverSortOptions.html\"\r" +
	    "\n" +
	    "                   ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "                   ns-popover-timeout=\"-1\"\r" +
	    "\n" +
	    "                   class=\"toggle-inner-panel-link ws-link\">\r" +
	    "\n" +
	    "                    {{ ::'crm.vehicle.tabs.SORT' | translate }}: {{ ctrl.selectedSort.name }} <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </aside>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "<crm-customer-vehicle-card contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                           ng-repeat=\"vehicle in ctrl.vehicles\"\r" +
	    "\n" +
	    "                           vehicle=\"vehicle\"\r" +
	    "\n" +
	    "                           permission=\"ctrl.vehiclePermission\"\r" +
	    "\n" +
	    "                           service-permission=\"ctrl.servicePermission\"></crm-customer-vehicle-card>\r" +
	    "\n"
	  );


	  $templateCache.put('app/customer/CustomerDetails/CustomerDetailsVehicles/popoverSortOptions.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"date-added-new\" ng-click=\"hidePopover();ctrl.setSelectedSort(ctrl.CrmConstants.VEHICLE_YEAR_NEWEST);\">\r" +
	    "\n" +
	    "        {{::'crm.vehicle.tabs.VEHICLE_YEAR_NEWEST' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"date-added-old\" ng-click=\"hidePopover();ctrl.setSelectedSort(ctrl.CrmConstants.VEHICLE_YEAR_OLDEST)\">\r" +
	    "\n" +
	    "        {{::'crm.vehicle.tabs.VEHICLE_YEAR_OLDEST' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"updated-new\" ng-click=\"hidePopover();ctrl.setSelectedSort(ctrl.CrmConstants.LAST_SERVICED_NEWEST)\">\r" +
	    "\n" +
	    "        {{::'crm.vehicle.tabs.LAST_SERVICED_NEWEST' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"updated-old\" ng-click=\"hidePopover();ctrl.setSelectedSort(ctrl.CrmConstants.LAST_SERVICED_OLDEST)\">\r" +
	    "\n" +
	    "        {{::'crm.vehicle.tabs.LAST_SERVICED_OLDEST' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/customer/CustomerDetails/vehicle/card/customerVehicleCardTemplate.html',
	    "<co-panel status=\"{{ctrl.panelStatus}}\" class=\"ds-card\" co-multi-transclusion>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\" name=\"vehicle-year-make-model\">{{ctrl.title}}</div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <ul class=\"ws-slash-separated-list\">\r" +
	    "\n" +
	    "            <li class=\"ws-separated-list-item\">\r" +
	    "\n" +
	    "                <span ng-class=\"ctrl.status\" name=\"vehicle-status\">\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.vehicle.isCustomerOwned\">{{::\"crm.vehicle.OWNED_STATUS\" | translate}}</span>\r" +
	    "\n" +
	    "                    <span ng-if=\"!ctrl.vehicle.isCustomerOwned\">{{::\"crm.vehicle.NOT_OWNED_STATUS\" | translate}}</span>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"ws-separated-list-item\" ng-if=\"!ctrl.vehicle.isPhantomVehicle\">\r" +
	    "\n" +
	    "                <a ng-click=\"ctrl.showChangeOwnershipStatusModal()\" name=\"vehicle-status-change\">{{::\"crm.vehicle.CHANGE_OWNERSHIP_STATUS\" | translate}}</a>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <ul class=\"ws-slash-separated-list\">\r" +
	    "\n" +
	    "            <li ng-if=\"ctrl.vehicle.odometer\" class=\"ws-separated-list-item\" name=\"vehicle-mileage\">\r" +
	    "\n" +
	    "                {{ctrl.vehicle.odometer | number:0}} {{::\"crm.vehicle.ODOMETER_UNIT\" | translate}}\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li ng-if=\"ctrl.vehicle.vin\" class=\"ws-separated-list-item\" name=\"vehicle-vin\">\r" +
	    "\n" +
	    "                {{ctrl.vehicle.vin}}\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li ng-if=\"ctrl.vehicle.stockNumber\" class=\"ws-separated-list-item\" name=\"vehicle-stock-number\">\r" +
	    "\n" +
	    "                {{::\"crm.vehicle.STOCK_NUMBER_LABEL\" | translate}} {{ctrl.vehicle.stockNumber}}\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <crm-customer-vehicle-service-event-card\r" +
	    "\n" +
	    "            ng-repeat=\"serviceEvent in ctrl.openServiceEvents\"\r" +
	    "\n" +
	    "            contact-name=\"{{ctrl.contact.getFullName()}}\"\r" +
	    "\n" +
	    "            total-service-event-count=\"ctrl.vehicle.serviceEvents.length\"\r" +
	    "\n" +
	    "            service-event=\"serviceEvent\"\r" +
	    "\n" +
	    "            permission=\"ctrl.servicePermission\"\r" +
	    "\n" +
	    "            status=\"open\"\r" +
	    "\n" +
	    "            on-merge=\"ctrl.onMergeServiceEvent(serviceEvent)\"></crm-customer-vehicle-service-event-card>\r" +
	    "\n" +
	    "        <div ng-if=\"ctrl.isExpanded\">\r" +
	    "\n" +
	    "            <crm-customer-vehicle-service-event-card\r" +
	    "\n" +
	    "                ng-repeat=\"serviceEvent in ctrl.closedServiceEvents\"\r" +
	    "\n" +
	    "                contact-name=\"{{ctrl.contact.getFullName()}}\"\r" +
	    "\n" +
	    "                total-service-event-count=\"ctrl.vehicle.serviceEvents.length\"\r" +
	    "\n" +
	    "                service-event=\"serviceEvent\"\r" +
	    "\n" +
	    "                permission=\"ctrl.servicePermission\"\r" +
	    "\n" +
	    "                status=\"{{::ctrl.getServiceEventStatus(serviceEvent)}}\"\r" +
	    "\n" +
	    "                on-merge=\"ctrl.onMergeServiceEvent(serviceEvent)\"></crm-customer-vehicle-service-event-card>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <span ng-if=\"ctrl.vehicle.purchasedDate\">\r" +
	    "\n" +
	    "            <span name=\"vehicle-purchase\">{{::\"crm.vehicle.PURCHASED_DATE_LABEL\" | translate}} </span>\r" +
	    "\n" +
	    "            <span name=\"vehicle-purchase-date\">{{::ctrl.getDateFormattedText(ctrl.vehicle.purchasedDate)}}</span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <span ng-if=\"ctrl.vehicle.lastServiced\">\r" +
	    "\n" +
	    "            <span name=\"vehicle-last-service\">{{::\"crm.vehicle.LAST_SERVICED_DATE_LABEL\" | translate}} </span>\r" +
	    "\n" +
	    "            <span name=\"vehicle-last-service-date\">{{::ctrl.getDateFormattedText(ctrl.vehicle.lastServiced)}}</span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\"></div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <div class=\"ds-card-actions-menu\">\r" +
	    "\n" +
	    "            <i class=\"fa fa-car\"></i>\r" +
	    "\n" +
	    "            <i class=\"fa fa-bullseye\"></i>\r" +
	    "\n" +
	    "            <co-panel-actions-menu ng-if=\"ctrl.actionItems && ctrl.actionItems.length > 0\" items=\"ctrl.actionItems\" name=\"vehicle-menu\"></co-panel-actions-menu>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"additional-content\">\r" +
	    "\n" +
	    "        <div class=\"ds-card-footer\" ng-if=\"ctrl.closedServiceEvents.length > 0 && ctrl.servicePermission.view\">\r" +
	    "\n" +
	    "            <a ng-if=\"!ctrl.isExpanded\"\r" +
	    "\n" +
	    "               ng-click=\"ctrl.toggleIsExpanded()\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-fw fa-caret-down\"></i>\r" +
	    "\n" +
	    "                <span name=\"vehicleServiceExpander\">\r" +
	    "\n" +
	    "                    {{ ::\"crm.vehicle.SEE\" | translate}}\r" +
	    "\n" +
	    "                    {{ctrl.closedServiceEvents.length}}\r" +
	    "\n" +
	    "                    {{ ::\"crm.vehicle.CLOSED_ROS\" | translate }}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <i class=\"fa fa-fw fa-caret-down\"></i>\r" +
	    "\n" +
	    "            </a>\r" +
	    "\n" +
	    "            <a ng-if=\"ctrl.isExpanded\"\r" +
	    "\n" +
	    "               ng-click=\"ctrl.toggleIsExpanded()\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-fw fa-caret-up\"></i>\r" +
	    "\n" +
	    "                <span name=\"vehicleServiceExpander\">\r" +
	    "\n" +
	    "                    {{ ::\"crm.vehicle.HIDE\" | translate}}\r" +
	    "\n" +
	    "                    {{ctrl.closedServiceEvents.length}}\r" +
	    "\n" +
	    "                    {{ ::\"crm.vehicle.CLOSED_ROS\" | translate }}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <i class=\"fa fa-fw fa-caret-up\"></i>\r" +
	    "\n" +
	    "            </a>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/customer/CustomerDetails/vehicle/card/serviceEventCardMergeModalTemplate.html',
	    "<section class=\"ws-panel\" name=\"service-merge-modal\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <header class=\"ws-panel-title\">{{ ::'crm.vehicle.modal.mergeModal.MERGE_RECORD' | translate}}</header>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.cancel()\" name=\"close-merge-modal\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <crm-alert alert-names=\"['SERVICE_MERGE_FAILED']\"></crm-alert>\r" +
	    "\n" +
	    "    <crm-customer-vehicle-service-event-card\r" +
	    "\n" +
	    "        contact-name=\"{{ctrl.contact.getFullName()}}\"\r" +
	    "\n" +
	    "        total-service-event-count=\"0\"\r" +
	    "\n" +
	    "        service-event=\"ctrl.mergeData.primaryServiceEvent\"\r" +
	    "\n" +
	    "        permission=\"ctrl.servicePermission\"\r" +
	    "\n" +
	    "        status=\"{{::ctrl.getServiceEventStatus(ctrl.mergeData.primaryServiceEvent)}}\"\r" +
	    "\n" +
	    "        hide-actions=\"true\"></crm-customer-vehicle-service-event-card>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <header class=\"ws-panel-title\">{{ ::'crm.vehicle.modal.mergeModal.INTO_RECORD' | translate}}</header>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-merge-modal-panel\"\r" +
	    "\n" +
	    "         ng-repeat=\"serviceEvent in ctrl.mergeData.secondaryServiceEvents track by $index\">\r" +
	    "\n" +
	    "        <div class=\"ws-merge-modal-radio\">\r" +
	    "\n" +
	    "            <div class=\"ws-merge-modal-radio-inline radio-inline\">\r" +
	    "\n" +
	    "                <input id=\"radio-inline-id-{{$index}}\"\r" +
	    "\n" +
	    "                       name=\"salesOppMergeRadioGroup\"\r" +
	    "\n" +
	    "                       ng-value=\"serviceEvent.id\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.mergeData.selectedIdToMerge\"\r" +
	    "\n" +
	    "                       type=\"radio\"/>\r" +
	    "\n" +
	    "                <label for=\"radio-inline-id-{{$index}}\" class=\"ng-binding\">\r" +
	    "\n" +
	    "                    <span class=\"ws-merge-modal-radio-span fake-radio\" name=\"service-merge-radios\"></span>\r" +
	    "\n" +
	    "                </label>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <crm-customer-vehicle-service-event-card\r" +
	    "\n" +
	    "            class=\"ws-merge-modal-card-panel\"\r" +
	    "\n" +
	    "            contact-name=\"{{ctrl.contact.getFullName()}}\"\r" +
	    "\n" +
	    "            total-service-event-count=\"0\"\r" +
	    "\n" +
	    "            service-event=\"serviceEvent\"\r" +
	    "\n" +
	    "            permission=\"ctrl.servicePermission\"\r" +
	    "\n" +
	    "            status=\"{{::ctrl.getServiceEventStatus(serviceEvent)}}\"\r" +
	    "\n" +
	    "            hide-actions=\"true\"></crm-customer-vehicle-service-event-card>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\"></div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\"></div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\" ng-show=\"ctrl.mergeData.mergePending\">\r" +
	    "\n" +
	    "            <md-progress-circular class=\"ws-progress-circular\" md-diameter=\"25\"\r" +
	    "\n" +
	    "                                  md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\" ng-show=\"!ctrl.mergeData.mergePending\">\r" +
	    "\n" +
	    "            <div class=\"ws-panel-actions\">\r" +
	    "\n" +
	    "                <button class=\"btn btn-default\" ng-click=\"ctrl.cancel()\" name=\"service-merge-cancel\">\r" +
	    "\n" +
	    "                    {{ ::'crm.vehicle.modal.mergeModal.CANCEL' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "                <button class=\"btn btn-primary\" ng-click=\"ctrl.accept()\" ng-disabled=\"!ctrl.mergeData.selectedIdToMerge\" name=\"service-merge-records\">\r" +
	    "\n" +
	    "                    {{ ::'crm.vehicle.modal.mergeModal.ACCEPT' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/customer/CustomerDetails/vehicle/serviceEventCard/customerVehicleServiceEventCardTemplate.html',
	    "<co-panel status=\"{{ctrl.status}}\" class=\"ds-card\" co-multi-transclusion>\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-icon-badge size=\"md\" icon=\"fa-wrench\" status=\"{{ctrl.status}}\"></co-icon-badge>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <ul class=\"ws-slash-separated-list\">\r" +
	    "\n" +
	    "            <li class=\"ws-separated-list-item\" ng-class=\"ctrl.statusClass\" name=\"service-event-status\">\r" +
	    "\n" +
	    "                {{ctrl.serviceEvent.status.text}}\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"ws-separated-list-item\" name=\"service-event-adviser\">\r" +
	    "\n" +
	    "                {{ctrl.serviceEvent.serviceAdviser}}\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <ul class=\"ws-slash-separated-list ws-deaccent-text\">\r" +
	    "\n" +
	    "            <li class=\"ws-separated-list-item\" ng-if=\"ctrl.isAppointmentVisible\">\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.serviceEvent.dueDate\" name=\"service-event-appointment-date\">\r" +
	    "\n" +
	    "                    {{::\"crm.vehicle.RO_CLOSED_ON\" | translate}}\r" +
	    "\n" +
	    "                    {{ctrl.dueDate}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <span ng-if=\"!ctrl.serviceEvent.dueDate && ctrl.status == ctrl.openStatus\" name=\"service-event-appointment-date\">\r" +
	    "\n" +
	    "                    {{::\"crm.vehicle.NO_APPOINTMENT\" | translate}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <span ng-if=\"!ctrl.serviceEvent.dueDate && ctrl.status != ctrl.openStatus\" name=\"service-event-appointment-date\">\r" +
	    "\n" +
	    "                    {{::\"crm.vehicle.RO_CLOSED\" | translate}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"ws-separated-list-item\"\r" +
	    "\n" +
	    "                ng-if=\"ctrl.isDueDateVisible\"\r" +
	    "\n" +
	    "                name=\"service-event-due-date\">\r" +
	    "\n" +
	    "                {{ctrl.dueDate}}\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"ws-separated-list-item\" name=\"service-event-id\">\r" +
	    "\n" +
	    "                {{::\"crm.vehicle.ID\" | translate}}\r" +
	    "\n" +
	    "                # {{ctrl.serviceEvent.id}}\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <ul class=\"ws-slash-separated-list\">\r" +
	    "\n" +
	    "            <li class=\"ws-separated-list-item\">\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.serviceEvent.currentMiKm\" name=\"service-event-mileage\">\r" +
	    "\n" +
	    "                    {{ctrl.serviceEvent.currentMiKm | number}} {{::\"crm.vehicle.ODOMETER_UNIT\" | translate}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <span ng-if=\"!ctrl.serviceEvent.currentMiKm\" name=\"service-event-mileage\">\r" +
	    "\n" +
	    "                    {{::\"crm.vehicle.ODOMETER_UNIT\" | translate}}: {{::\"crm.errors.NOT_AVAILABLE\" | translate}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"ws-separated-list-item\" name=\"service-event-source\">\r" +
	    "\n" +
	    "                {{ctrl.serviceEvent.source.text}}\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"ws-separated-list-item\" name=\"service-event-oppCode\">\r" +
	    "\n" +
	    "                {{ctrl.serviceEvent.oppCodes.length}} {{::\"crm.vehicle.OPPCODE_COUNT\" | translate}}\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"ws-separated-list-item\"\r" +
	    "\n" +
	    "                ng-if=\"ctrl.serviceEvent.totalCost\"\r" +
	    "\n" +
	    "                name=\"service-event-cost\">\r" +
	    "\n" +
	    "                {{ctrl.serviceEvent.totalCost | currency}}\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "            <li class=\"ws-separated-list-item\" name=\"service-event-type\">\r" +
	    "\n" +
	    "                {{ctrl.serviceEvent.type.text}}\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <span name=\"service-event-updated\">{{::\"crm.vehicle.LAST_UPDATED\" | translate}}</span>\r" +
	    "\n" +
	    "        <span name=\"service-event-updated-date\">{{::ctrl.getDateFormattedText(ctrl.serviceEvent.lastServiced)}}</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <div class=\"ds-card-actions-menu\" ng-if=\"!ctrl.hideActions\">\r" +
	    "\n" +
	    "            <co-panel-actions-menu items=\"ctrl.actionItems\" name=\"service-menu\"></co-panel-actions-menu>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/customer/CustomerPanel/CustomerPanelTemplate.html',
	    "<div class=\"ws-absolute-fill ws-flex-container\">\r" +
	    "\n" +
	    "    <section class=\"detail-view ws-flex-columns ws-flex-fill-even\">\r" +
	    "\n" +
	    "        <div class=\"detail-view-header\">\r" +
	    "\n" +
	    "            <div class=\"ws-action-bar\">\r" +
	    "\n" +
	    "                <h1 class=\"detail-view-title\">{{::'crm.contact.headers.CUSTOMER' | translate}}</h1>\r" +
	    "\n" +
	    "                <div class=\"ws-action-spacer\"></div>\r" +
	    "\n" +
	    "                <button type=\"button\" class=\"btn ws-primary-action\" name=\"saveButton\"\r" +
	    "\n" +
	    "                        ng-disabled=\"ctrl.isSaveButtonDisabled\"\r" +
	    "\n" +
	    "                        ng-click=\"ctrl.saveCustomer();\">{{::'crm.actions.SAVE' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"detail-view-content\">\r" +
	    "\n" +
	    "            <div class=\"ws-detail-view-content-group\" ng-if=\"ctrl.customerType=='individual'\" >\r" +
	    "\n" +
	    "                <crm-add-individual contact=\"ctrl.contact\" contact-type=\"individual\"></crm-add-individual>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-detail-view-content-group\" ng-if=\"ctrl.customerType=='organization'\">\r" +
	    "\n" +
	    "                <crm-add-organization contact=\"ctrl.contact\"></crm-add-organization>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </section>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/customer/lastTwenty/template.html',
	    "<div class=\"master-list-content\" ng-class=\"{'collapsed': ctrl.isCollapsed}\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-compact master-list-controls\">\r" +
	    "\n" +
	    "        <div class=\"panel-heading\">\r" +
	    "\n" +
	    "            <a href=\"#\" class=\"minimize-master-list-action panel-heading-options pull-right btn btn-default\"\r" +
	    "\n" +
	    "               ng-click=\"ctrl.isCollapsed = !ctrl.isCollapsed\" name=\"lastTwentyToggle\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-angle-left fa-2x\"></i></a>\r" +
	    "\n" +
	    "            <h3 class=\"panel-title\">\r" +
	    "\n" +
	    "                {{ ::'crm.masterList.LAST_TWENTY' | translate }}\r" +
	    "\n" +
	    "            </h3>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"row row-no-padding master-list-actions-container\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-6 add-new-customer-panel\" ng-if=\"ctrl.hasAddIndividualPermission\">\r" +
	    "\n" +
	    "                <a class=\" add-new-customer-panel-btn\" ui-sref=\"add.individual\"\r" +
	    "\n" +
	    "                   ui-sref-opts=\"{reload: true}\">\r" +
	    "\n" +
	    "                    <i class=\"fa fa-plus-circle\"></i><span class=\"case upper\"\r" +
	    "\n" +
	    "                                                           name=\"addIndividualMasterList\"> {{ ::'crm.masterList.CUSTOMER' | translate }}</span>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-xs-6 add-new-customer-panel\">\r" +
	    "\n" +
	    "                <a class=\" add-new-customer-panel-btn\" ui-sref=\"add.company\" ng-if=\"ctrl.hasAddCompanyPermission\"\r" +
	    "\n" +
	    "                   ui-sref-opts=\"{reload: true}\">\r" +
	    "\n" +
	    "                    <i class=\"fa fa-plus-circle\"></i><span class=\"case upper\"\r" +
	    "\n" +
	    "                                                           name=\"addCompanyMasterList\"> {{ ::'crm.masterList.ORGANIZATION' | translate }}</span>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"master-list-container\" co-loading=\"ctrl.isLoading\" co-scroll-to-top=\"{{::ctrl.CrmConstants.CONTACT.LAST_TWENTY_SCROLL_EVENT_KEY}}\">\r" +
	    "\n" +
	    "        <section class=\"ws-master-list-item\"\r" +
	    "\n" +
	    "                 ng-repeat=\"contact in ctrl.contacts track by $index\"\r" +
	    "\n" +
	    "                 ng-click=\"ctrl.contactClicked(contact.id)\"\r" +
	    "\n" +
	    "                 ng-class=\"{'active': ctrl.$stateParams.contactId === contact.id}\"\r" +
	    "\n" +
	    "                 ng-animate=\"'animate'\"\r" +
	    "\n" +
	    "                 ng-if=\"contact.id\"\r" +
	    "\n" +
	    "                 name=\"lastTwentyContact\">\r" +
	    "\n" +
	    "            <co-profile-image class=\"contact-image-donut-50\"\r" +
	    "\n" +
	    "                              image-url=\"{{contact.imgUrl}}\"\r" +
	    "\n" +
	    "                              initials=\"{{contact.getInitials()}}\"\r" +
	    "\n" +
	    "                              is-organization=\"contact.isOrganization()\"></co-profile-image>\r" +
	    "\n" +
	    "            <div class=\"ws-master-list-text-wrapper\" name=\"last-twenty-contact\">\r" +
	    "\n" +
	    "                <h4 class=\"ws-master-list-item-heading ws-ellipsis\">{{contact.getFullName()}}</h4>\r" +
	    "\n" +
	    "                <p class=\"ws-ellipsis\" ng-if=\"contact.contactPoints.email.value\">\r" +
	    "\n" +
	    "                    {{contact.contactPoints.email.value}}\r" +
	    "\n" +
	    "                </p>\r" +
	    "\n" +
	    "                <p class=\"ws-ellipsis\" ng-if=\"ctrl.getPrimaryMethodOfContactTranslation(contact)\">\r" +
	    "\n" +
	    "                    <span class=\"item-heading\">{{ctrl.getPrimaryMethodOfContactTranslation(contact)}}: </span>\r" +
	    "\n" +
	    "                    {{ctrl.getPrimaryMethodOfContact(contact)}}\r" +
	    "\n" +
	    "                </p>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </section>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/driversLicense/driversLicenseModal.html',
	    "<div class=\"panel panel-primary panel-modal ng-scope\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "            <h3 class=\"panel-title ws-flex-fill-even\">\r" +
	    "\n" +
	    "                {{::'crm.contact.driversLicense.DRIVERS_LICENSE'|translate}}\r" +
	    "\n" +
	    "            </h3>\r" +
	    "\n" +
	    "            <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.modal.cancel()\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-body ws-drivers-license\">\r" +
	    "\n" +
	    "        <crm-contact-drivers-license contact-id=\"ctrl.contact.id\" close-callback=\"ctrl.modal.cancel()\"></crm-contact-drivers-license>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/driversLicense/driversLicenseTemplate.html',
	    "<form ng-if=\"ctrl.scanLicensePermission.edit\">\r" +
	    "\n" +
	    "    <div class=\"ws-scanner-error\" ng-if=\"!ctrl.isScannerWorking\">\r" +
	    "\n" +
	    "        <h3>{{::'crm.contact.driversLicense.modal.SCANNER_FAILURE' |  translate}}</h3>\r" +
	    "\n" +
	    "        <p>{{::'crm.contact.driversLicense.modal.SCANNER_FAILURE_FEEDBACK' | translate}}</p>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"container-fluid\">\r" +
	    "\n" +
	    "        <div class=\"row\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-6 col-md-3\">\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.contact.driversLicense.modal.COUNTRY' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\" ng-disabled=\"true\" ng-model=\"ctrl.selectedCountry\" ng-options=\"country for country in ctrl.countries\">\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-xs-6 col-md-3\">\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.contact.driversLicense.modal.STATE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\" ng-disabled=\"true\" ng-model=\"ctrl.selectedState\" ng-options=\"state for state in ctrl.states\">\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-xs-12 col-md-6\">\r" +
	    "\n" +
	    "                <div class=\"form-group ws-country-state\">\r" +
	    "\n" +
	    "                    <div class=\"checkbox\">\r" +
	    "\n" +
	    "                        <input type=\"checkbox\" ng-disabled=\"true\">\r" +
	    "\n" +
	    "                        <label>\r" +
	    "\n" +
	    "                            <span class=\"fake-checkbox\">\r" +
	    "\n" +
	    "                                <div class=\"checkbox-selection-mark\"></div>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            {{::'crm.contact.driversLicense.modal.SET' | translate}}\r" +
	    "\n" +
	    "                            <strong>{{'crm.contact.driversLicense.modal.COUNTRY_AND_STATE' | translate}}</strong>\r" +
	    "\n" +
	    "                            {{::'crm.contact.driversLicense.modal.AS_DEFAULTS' | translate}}\r" +
	    "\n" +
	    "                        </label>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"text-right ws-scanner-options\">\r" +
	    "\n" +
	    "                    <a ng-click=\"ctrl.openScannerOptions()\">{{::'crm.contact.driversLicense.modal.SCANNER_OPTIONS' | translate}} <i class=\"fa fa-sort-desc\"></i></a>\r" +
	    "\n" +
	    "                    <div class=\"ns-popover-tooltip-theme ns-popover-bottom-placement\" ng-if=\"ctrl.isShowingScannerOptions\">\r" +
	    "\n" +
	    "                        <div class=\"triangle\"></div>\r" +
	    "\n" +
	    "                        <div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "                            <div class=\"ws-popover-item\" ng-click=\"ctrl.selectScannerOption('TRAY')\">\r" +
	    "\n" +
	    "                                <span>{{::'crm.contact.driversLicense.modal.CHECK_TRAY' | translate}}</span>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                            <div class=\"ws-popover-item\" ng-click=\"ctrl.selectScannerOption('CALIBRATE')\">\r" +
	    "\n" +
	    "                                <span>{{::'crm.contact.driversLicense.modal.CALIBRATE' | translate}}</span>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                            <div class=\"ws-popover-item\" ng-click=\"ctrl.selectScannerOption('CLEAN')\">\r" +
	    "\n" +
	    "                                <span>{{::'crm.contact.driversLicense.modal.CLEAN' | translate}}</span>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                            <div class=\"ws-popover-item\" ng-click=\"ctrl.selectScannerOption('SETUP')\">\r" +
	    "\n" +
	    "                                <span>{{::'crm.contact.driversLicense.modal.VIEW_SETUP_DOCUMENTATION' | translate}}</span>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</form>\r" +
	    "\n" +
	    "<div class=\"container-fluid\">\r" +
	    "\n" +
	    "    <div class=\"row\">\r" +
	    "\n" +
	    "        <div class=\"col-md-6 ws-dl-front\" ng-class=\"{'col-xs-12 ws-dl-horizontal': ctrl.isFrontHorizontal, 'col-xs-6 ws-dl-vertical text-right': !ctrl.isFrontHorizontal}\">\r" +
	    "\n" +
	    "            <div class=\"ws-license-box\" ng-class=\"ctrl.didFrontScanFail ? 'ws-scan-error' : ''\" >\r" +
	    "\n" +
	    "                <div class=\"ws-progress-svg-background\" ng-if=\"ctrl.isFrontLoading\">\r" +
	    "\n" +
	    "                    <md-progress-circular class=\"ws-progress-circular\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <img ng-src=\"{{ctrl.license.licenseFrontUrl}}\" />\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <span class=\"text-error\" ng-if=\"ctrl.didFrontScanFail\">{{::'crm.contact.driversLicense.modal.SCAN_FAILURE' | translate}}</span>\r" +
	    "\n" +
	    "            <span ng-if=\"ctrl.scanLicensePermission.edit\">\r" +
	    "\n" +
	    "                <button ng-cloak ng-disabled=\"true\" type=\"button\" class=\"btn btn-primary\" ng-if=\"ctrl.isFrontPlaceholder(ctrl.license.licenseFrontUrl)\">{{::'crm.contact.driversLicense.modal.SCAN_FRONT' | translate}}</button>\r" +
	    "\n" +
	    "                <button ng-cloak ng-disabled=\"true\" type=\"button\" class=\"btn btn-default\" ng-if=\"!ctrl.isFrontPlaceholder(ctrl.license.licenseFrontUrl)\"><i class=\"fa fa-close\"></i> {{::'crm.contact.driversLicense.modal.REMOVE_IMAGE' | translate}}</button>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-md-6 ws-dl-back\" ng-class=\"{'col-xs-12 ws-dl-horizontal': ctrl.isBackHorizontal, 'col-xs-6 ws-dl-vertical': !ctrl.isBackHorizontal}\">\r" +
	    "\n" +
	    "            <div class=\"ws-license-box\" ng-class=\"ctrl.didBackScanFail ? 'ws-scan-error' : ''\">\r" +
	    "\n" +
	    "                <div class=\"ws-progress-svg-background\" ng-if=\"ctrl.isBackLoading\">\r" +
	    "\n" +
	    "                    <md-progress-circular class=\"ws-progress-circular\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <img ng-src=\"{{ctrl.license.licenseBackUrl}}\" />\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <span class=\"text-error\" ng-if=\"ctrl.didBackScanFail\">{{::'crm.contact.driversLicense.modal.SCAN_FAILURE' | translates}}</span>\r" +
	    "\n" +
	    "            <span ng-if=\"ctrl.scanLicensePermission.edit\">\r" +
	    "\n" +
	    "                <button ng-cloak ng-disabled=\"true\" type=\"button\" class=\"btn btn-primary\" ng-if=\"ctrl.isBackPlaceholder(ctrl.license.licenseBackUrl)\">{{::'crm.contact.driversLicense.modal.SCAN_BACK' | translate}}</button>\r" +
	    "\n" +
	    "                <button ng-cloak ng-disabled=\"true\" type=\"button\" class=\"btn btn-default\" ng-if=\"!ctrl.isBackPlaceholder(ctrl.license.licenseBackUrl)\"><i class=\"fa fa-close\"></i> {{::'crm.contact.driversLicense.modal.REMOVE_IMAGE' | translate}}</button>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"row\" ng-if=\"ctrl.state.moreActions\">\r" +
	    "\n" +
	    "        <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "            <p ng-if=\"ctrl.state.mobileScanner\">{{::'crm.contact.driversLicense.modal.MOBILE_MESSAGE' | translate}}\r" +
	    "\n" +
	    "                <a href=\"\">{{::'crm.contact.driversLicense.modal.IOS' | translate}}</a>\r" +
	    "\n" +
	    "                {{::'crm.contact.driversLicense.modal.AND' | translate}}\r" +
	    "\n" +
	    "                <a href=\"\">{{::'crm.contact.driversLicense.modal.ANDROID' | translate}}</a></p>\r" +
	    "\n" +
	    "            <button type=\"button\" class=\"btn btn-quaternary ws-cancel-scan\" ng-if=\"ctrl.state.cancelScan\">{{::'crm.contact.driversLicense.modal.CANCEL_SCAN' | translate}}</button>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "<div class=\"ws-dl-footer container-fluid\">\r" +
	    "\n" +
	    "    <div class=\"row\">\r" +
	    "\n" +
	    "        <div class=\"col-xs-6\">\r" +
	    "\n" +
	    "            <button type=\"button\" class=\"btn btn-default\" ng-click=\"ctrl.print()\" ng-disabled=\"!ctrl.isPrintEnabled()\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-print\"></i> {{::'crm.contact.driversLicense.PRINT' | translate}}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-xs-6 text-right\">\r" +
	    "\n" +
	    "            <button type=\"button\" class=\"btn btn-quaternary\" ng-click=\"ctrl.close()\">{{::'crm.contact.driversLicense.modal.CANCEL' | translate}}</button>\r" +
	    "\n" +
	    "            <button type=\"button\" class=\"btn btn-save\" ng-if=\"ctrl.scanLicensePermission.edit\" ng-disabled=\"true\">{{::'crm.contact.driversLicense.modal.SAVE' | translate}}</button>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/employeeDashboard/employeeDashboardSplitPaneTemplate.html',
	    "<co-master-detail-expander\r" +
	    "\n" +
	    "        get-header-buttons=\"ctrl.getHeaderButtons()\"\r" +
	    "\n" +
	    "        tristate=\"true\"\r" +
	    "\n" +
	    "        expanded=\"ctrl.isExpanded\"\r" +
	    "\n" +
	    "        co-multi-transclusion>\r" +
	    "\n" +
	    "    <section transclude-to=\"master\">\r" +
	    "\n" +
	    "        <md-progress-circular class=\"ws-progress-circular ws-progress-centered\"\r" +
	    "\n" +
	    "            ng-show=\"ctrl.loading\" md-mode=\"indeterminate\" md-diameter=\"25\"></md-progress-circular>\r" +
	    "\n" +
	    "        <div ui-view=\"list\"></div>\r" +
	    "\n" +
	    "    </section>\r" +
	    "\n" +
	    "    <section transclude-to=\"detail\" class=\"center-block\">\r" +
	    "\n" +
	    "        <div ui-view=\"details\" ng-if=\"!ctrl.transitionInProgress\"></div>\r" +
	    "\n" +
	    "    </section>\r" +
	    "\n" +
	    "</co-master-detail-expander>"
	  );


	  $templateCache.put('app/employeeDashboard/filterManager/filterManagerModalTemplate.html',
	    "<crm-filter-manager filter-options=\"ctrl.filterManagerOptions\"></crm-filter-manager>"
	  );


	  $templateCache.put('app/employeeDashboard/filterManager/template.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "    <div class= \"panel-overlay\" ng-show=\"ctrl.isLoading\">\r" +
	    "\n" +
	    "        <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                              md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <form novalidate name=\"filterManagerForm\" ng-submit=\"ctrl.onSubmit(filterManagerForm)\"\r" +
	    "\n" +
	    "          class=\"panel panel-primary panel-modal ng-scope\">\r" +
	    "\n" +
	    "        <div class=\"panel-body\">\r" +
	    "\n" +
	    "            <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "                    <h3 class=\"panel-title ws-content-group ws-flex-fill-even\">\r" +
	    "\n" +
	    "                        <span name=\"theBasicsHeader\">{{::'crm.employee_dashboard.filter.THE_BASICS' | translate}}</span>\r" +
	    "\n" +
	    "                    </h3>\r" +
	    "\n" +
	    "                    <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.filterOptions.onClose()\" name=\"closeButton\"></i>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <section>\r" +
	    "\n" +
	    "                    <span class=\"form-group ws-inline-group\">\r" +
	    "\n" +
	    "                        <label name=\"iWantTo\">{{ ::'crm.employee_dashboard.filter.I_WANT_TO' | translate }}</label>\r" +
	    "\n" +
	    "                        <div class=\"ws-inline-group-control\"  name=\"filterManagerActionDropdown\">\r" +
	    "\n" +
	    "                            <select class=\"form-control\" name=\"filterAction\" ng-change=\"ctrl.onActionSelected(ctrl.selectedAction)\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.selectedAction\" required>\r" +
	    "\n" +
	    "                                <option value=\"{{ ctrl.filterManagerActions.Create }}\">\r" +
	    "\n" +
	    "                                    {{ ::'crm.employee_dashboard.filter.action.CREATE' | translate }}\r" +
	    "\n" +
	    "                                </option>\r" +
	    "\n" +
	    "                                <option value=\"{{ ctrl.filterManagerActions.Edit }}\">\r" +
	    "\n" +
	    "                                    {{ ::'crm.employee_dashboard.filter.action.EDIT' | translate }}\r" +
	    "\n" +
	    "                                </option>\r" +
	    "\n" +
	    "                                <option value=\"{{ ctrl.filterManagerActions.Delete }}\">\r" +
	    "\n" +
	    "                                    {{ ::'crm.employee_dashboard.filter.action.DELETE' | translate }}\r" +
	    "\n" +
	    "                                </option>\r" +
	    "\n" +
	    "                                <option value=\"{{ ctrl.filterManagerActions.Duplicate }}\">\r" +
	    "\n" +
	    "                                    {{ ::'crm.employee_dashboard.filter.action.DUPLICATE' | translate }}\r" +
	    "\n" +
	    "                                </option>\r" +
	    "\n" +
	    "                            </select>\r" +
	    "\n" +
	    "                            <span class=\"form-invalid-message\" ng-show=\"filterManagerForm.filterAction.$error.required\">\r" +
	    "\n" +
	    "                                {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <span class=\"form-group ws-inline-group\">\r" +
	    "\n" +
	    "                        <label>{{ ::'crm.employee_dashboard.filter.A' | translate }}</label>\r" +
	    "\n" +
	    "                        <div class=\"ws-inline-group-control\" name=\"filterDropdown\">\r" +
	    "\n" +
	    "                            <select class=\"form-control\" ng-model=\"ctrl.selectedCategory\" name=\"filterCategory\"\r" +
	    "\n" +
	    "                                    ng-options=\"option.name for option in ctrl.categoryList\"\r" +
	    "\n" +
	    "                                    ng-required=\"true\">\r" +
	    "\n" +
	    "                            </select>\r" +
	    "\n" +
	    "                            <span class=\"form-invalid-message\" ng-show=\"filterManagerForm.filterCategory.$error.required\">\r" +
	    "\n" +
	    "                                {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <span class=\"form-group ws-inline-group\">\r" +
	    "\n" +
	    "                        <label>{{ ::'crm.employee_dashboard.filter.FILTER_CALLED' | translate }}</label>\r" +
	    "\n" +
	    "                        <div class=\"ws-inline-group-control\" ng-if=\"ctrl.showFilters\">\r" +
	    "\n" +
	    "                            <select class=\"form-control modal-dropdown\" ng-model=\"ctrl.selectedFilter\" name=\"filterName\"\r" +
	    "\n" +
	    "                                    ng-change=\"ctrl.selectFilter()\"\r" +
	    "\n" +
	    "                                    ng-options=\"option.name for option in ctrl.selectedCategory.filters\"\r" +
	    "\n" +
	    "                                    required >\r" +
	    "\n" +
	    "                            </select>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"ws-inline-group-control\" ng-if=\"!ctrl.showFilters\">\r" +
	    "\n" +
	    "                            <input type=\"text\" class=\"form-control\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.newFilterName\" name=\"filterName\"\r" +
	    "\n" +
	    "                                   placeholder=\"{{ ::'crm.employee_dashboard.filter.NAME_YOUR_FILTER' | translate }}\"\r" +
	    "\n" +
	    "                                   required />\r" +
	    "\n" +
	    "                            <span class=\"form-invalid-message\" ng-show=\"filterManagerForm.filterName.$error.required\">\r" +
	    "\n" +
	    "                                {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </section>\r" +
	    "\n" +
	    "                <section class=\"form-group ws-inline-group ws-filter-rename\" ng-if=\"ctrl.renameEnabled\">\r" +
	    "\n" +
	    "                    <span class=\"ws-filter-rename-label\" name=\"renameFilterQuestion\">{{ ctrl.renameLabel }}</span>\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.renameOptional\">\r" +
	    "\n" +
	    "                        <span class=\"radio-inline\">\r" +
	    "\n" +
	    "                            <input id=\"rename-filter-yes\" type=\"radio\" name=\"renameFilter\" ng-value=\"true\" ng-model=\"ctrl.changeName\">\r" +
	    "\n" +
	    "                            <label for=\"rename-filter-yes\">\r" +
	    "\n" +
	    "                                <span class=\"fake-radio\"></span> {{ ::'crm.employee_dashboard.YES' | translate }}\r" +
	    "\n" +
	    "                            </label>\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                        <span class=\"radio-inline\">\r" +
	    "\n" +
	    "                            <input id=\"rename-filter-no\" type=\"radio\" name=\"renameFilter\" ng-value=\"false\" ng-model=\"ctrl.changeName\">\r" +
	    "\n" +
	    "                            <label for=\"rename-filter-no\">\r" +
	    "\n" +
	    "                                <span class=\"fake-radio\"></span> {{ ::'crm.employee_dashboard.NO' | translate }}\r" +
	    "\n" +
	    "                            </label>\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                        <input type=\"text\" class=\"form-control ws-filter-rename-input\" name=\"newFilterName\" placeholder=\"Rename filter\"\r" +
	    "\n" +
	    "                               ng-show=\"ctrl.changeName\" ng-model=\"ctrl.newFilterName\" ng-required=\"ctrl.changeName\">\r" +
	    "\n" +
	    "                        <span class=\"form-invalid-message\" ng-show=\"filterManagerForm.newFilterName.$error.required\">\r" +
	    "\n" +
	    "                            {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </section>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <div ng-if=\"!ctrl.deleteEnabled\">\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                    <h3 class=\"panel-title ws-content-group\">\r" +
	    "\n" +
	    "                        <span>{{ ::'crm.employee_dashboard.filter.WHO_CAN_ACCESS' | translate }}</span>\r" +
	    "\n" +
	    "                    </h3>\r" +
	    "\n" +
	    "                    <div class=\"form-group ws-inline-group\">\r" +
	    "\n" +
	    "                        <span>{{ ::'crm.employee_dashboard.filter.FILTER_CAN_BE_ACCESSED_BY' | translate }}</span>\r" +
	    "\n" +
	    "                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                            <crm-multi-select class=\"ws-custom-form-control\" name=\"userAccess\"\r" +
	    "\n" +
	    "                                              ng-model=\"ctrl.conditionData.userAccess.selected\"\r" +
	    "\n" +
	    "                                              options=\"ctrl.conditionData.userAccess.options\"\r" +
	    "\n" +
	    "                                              placeholder=\"{{ ::'crm.employee_dashboard.filter.ALL_USERS' | translate }}\"></crm-multi-select>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-content-group ws-filter-condition-group\">\r" +
	    "\n" +
	    "                    <h3 class=\"panel-title ws-content-group\">\r" +
	    "\n" +
	    "                        <span>{{ ::'crm.employee_dashboard.filter.SET_YOUR_FILTER_CONDITIONS' | translate }}</span>\r" +
	    "\n" +
	    "                    </h3>\r" +
	    "\n" +
	    "                    <div class=\"form-group ws-inline-group\">\r" +
	    "\n" +
	    "                        <span class=\"ws-added-condition-buffer\">\r" +
	    "\n" +
	    "                            {{ ::'crm.employee_dashboard.filter.FOR_ALL' | translate }}\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                            <crm-multi-select class=\"ws-custom-form-control\" name=\"filterEvent\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.conditionData.opportunityType.selected\" required\r" +
	    "\n" +
	    "                                options=\"ctrl.conditionData.opportunityType.options\"\r" +
	    "\n" +
	    "                                placeholder=\"{{ ::'crm.employee_dashboard.filter.SELECT_TYPE' | translate }}\"></crm-multi-select>\r" +
	    "\n" +
	    "                            <span class=\"form-invalid-message\" ng-show=\"filterManagerForm.filterEvent.$error.required\">\r" +
	    "\n" +
	    "                                {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <span>\r" +
	    "\n" +
	    "                        {{ ::'crm.employee_dashboard.filter.OPPORTUNITIES_CREATE_FILTER_CONDITIONS' | translate }}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <div class=\"form-group ws-inline-group\" ng-show=\"ctrl.addedConditions.length === 0\">\r" +
	    "\n" +
	    "                        <span class=\"ws-added-condition-buffer ws-buffer-align-right\"></span>\r" +
	    "\n" +
	    "                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                            <select class=\"form-control\" disabled>\r" +
	    "\n" +
	    "                                <option value=\"\">{{ ::'crm.employee_dashboard.filter.SELECT_FIELD' | translate }}</option>\r" +
	    "\n" +
	    "                            </select>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <span>{{ ::'crm.employee_dashboard.filter.IS_EQUAL_TO' | translate }}</span>\r" +
	    "\n" +
	    "                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                            <input class=\"form-control\" type=\"text\" disabled\r" +
	    "\n" +
	    "                                   placeholder=\"{{ ::'crm.employee_dashboard.filter.FIELD_VALUE' | translate }}\" />\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"form-group ws-inline-group\" ng-repeat=\"addedCondition in ctrl.addedConditions\">\r" +
	    "\n" +
	    "                        <span class=\"ws-added-condition-buffer ws-buffer-align-right\"><span ng-hide=\"$first\">{{ ::'crm.employee_dashboard.filter.AND' | translate }}</span></span>\r" +
	    "\n" +
	    "                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                            <!--<co-treeview-dropdown class=\"ws-custom-form-control\" name=\"filterCondition\"\r" +
	    "\n" +
	    "                                placeholder=\"{{ ::'crm.employee_dashboard.filter.SELECT_FIELD' | translate }}\"\r" +
	    "\n" +
	    "                                options=\"ctrl.conditionData.conditionCollection\"\r" +
	    "\n" +
	    "                                ng-model=\"addedCondition.condition\" ng-change=\"ctrl.changeCondition($index)\">\r" +
	    "\n" +
	    "                            </co-treeview-dropdown>-->\r" +
	    "\n" +
	    "                            <select class=\"form-control\" ng-options=\"condition.filterName group by condition.categoryName for condition in ctrl.conditionData.conditionCollection\"\r" +
	    "\n" +
	    "                                    ng-model=\"addedCondition.condition\" ng-change=\"ctrl.changeCondition($index)\" name=\"conditionsDropdown\">\r" +
	    "\n" +
	    "                                <option value=\"\">{{ ::'crm.employee_dashboard.filter.SELECT_FIELD' | translate }}</option>\r" +
	    "\n" +
	    "                            </select>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <span>{{ ::'crm.employee_dashboard.filter.IS_EQUAL_TO' | translate }}</span>\r" +
	    "\n" +
	    "                        <div class=\"ws-inline-group-control\" ng-switch=\"addedCondition.condition.conditionType\">\r" +
	    "\n" +
	    "                            <crm-multi-select class=\"ws-custom-form-control\"\r" +
	    "\n" +
	    "                                ng-model=\"addedCondition.condition.selected\"\r" +
	    "\n" +
	    "                                options=\"addedCondition.condition.options\"\r" +
	    "\n" +
	    "                                placeholder=\"{{ ::'crm.employee_dashboard.filter.SELECT_VALUE' | translate }}\"\r" +
	    "\n" +
	    "                                ng-switch-when=\"multiSelect\"\r" +
	    "\n" +
	    "                                name=\"equalToDropdown\"\r" +
	    "\n" +
	    "                                required></crm-multi-select>\r" +
	    "\n" +
	    "                            <select class=\"form-control\"\r" +
	    "\n" +
	    "                                    ng-model=\"addedCondition.condition.selected\"\r" +
	    "\n" +
	    "                                    ng-options=\"option.text for option in addedCondition.condition.options\"\r" +
	    "\n" +
	    "                                    ng-switch-when=\"singleSelect\"\r" +
	    "\n" +
	    "                                    required></select>\r" +
	    "\n" +
	    "                            <input type=\"text\" class=\"form-control\"\r" +
	    "\n" +
	    "                                   placeholder=\"{{ ::'crm.employee_dashboard.filter.FIELD_VALUE' | translate }}\"\r" +
	    "\n" +
	    "                                   ng-model=\"addedCondition.condition.selected\"\r" +
	    "\n" +
	    "                                   ng-switch-default\r" +
	    "\n" +
	    "                                   name=\"equalToField\"\r" +
	    "\n" +
	    "                                   required/>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <a ng-click=\"ctrl.removeCondition($index)\"><i class=\"fa fa-trash fa-lg\" name=\"trashCan\"></i></a>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div>\r" +
	    "\n" +
	    "                        <span class=\"ws-added-condition-buffer\"><!-- intentionally left blank --></span>\r" +
	    "\n" +
	    "                        <span class=\"btn btn-tertiary ws-add-condition\" name=\"addConditionButton\" role=\"button\" ng-click=\"ctrl.addCondition()\">\r" +
	    "\n" +
	    "                            <i class=\"fa fa-plus-circle\"></i>\r" +
	    "\n" +
	    "                            <span>{{ ::'crm.employee_dashboard.filter.ADD_CONDITION' | translate }}</span>\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                <h3 class=\"panel-title ws-content-group\">\r" +
	    "\n" +
	    "                    <span>{{ ::'crm.employee_dashboard.filter.HOW_FILTER_SORTED' | translate }}</span>\r" +
	    "\n" +
	    "                </h3>\r" +
	    "\n" +
	    "                <span class=\"form-group ws-inline-group\">\r" +
	    "\n" +
	    "                    <label>{{ ::'crm.employee_dashboard.filter.DEFAULT_FILTER_SORT' | translate }}</label>\r" +
	    "\n" +
	    "                    <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                        <select ng-model=\"ctrl.conditionData.sortOrder.selected\" class=\"form-control\" name=\"filterSortOrder\" required\r" +
	    "\n" +
	    "                                ng-options=\"option.text disable when !option.value for option in ctrl.conditionData.sortOrder.options\">\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                        <span class=\"form-invalid-message\"\r" +
	    "\n" +
	    "                              ng-show=\"filterManagerForm.filterSortOrder.$error.required\">\r" +
	    "\n" +
	    "                            {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <div ng-if=\"ctrl.deleteEnabled\" class=\"ws-status-good\">\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                    <h3 class=\"panel-title ws-content-group\">\r" +
	    "\n" +
	    "                        <span name=\"whoCanAccessText\">{{ ::'crm.employee_dashboard.filter.WHO_CAN_ACCESS' | translate }}</span>\r" +
	    "\n" +
	    "                    </h3>\r" +
	    "\n" +
	    "                    <div class=\"form-group ws-inline-group\">\r" +
	    "\n" +
	    "                        <span name=\"canBeAccessedByText\">{{ ::'crm.employee_dashboard.filter.FILTER_CAN_BE_ACCESSED_BY' | translate }}</span>\r" +
	    "\n" +
	    "                        <span class=\"ws-status\">{{ ctrl.FilterManagerService.getConditionSelectedText(ctrl.conditionData.userAccess, 'multiSelect')\r" +
	    "\n" +
	    "                            || ('crm.employee_dashboard.filter.ALL_USERS' | translate) }}</span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-content-group ws-filter-condition-group\">\r" +
	    "\n" +
	    "                    <h3 class=\"panel-title ws-content-group\">\r" +
	    "\n" +
	    "                        <span name=\"filterConditionsText\">{{ ::'crm.employee_dashboard.filter.SET_YOUR_FILTER_CONDITIONS' | translate }}</span>\r" +
	    "\n" +
	    "                    </h3>\r" +
	    "\n" +
	    "                    <div class=\"form-group ws-inline-group\">\r" +
	    "\n" +
	    "                        {{ ::'crm.employee_dashboard.filter.FOR_ALL' | translate }}\r" +
	    "\n" +
	    "                        <span class=\"ws-status\" name=\"createFilterText\">{{ ctrl.FilterManagerService.getConditionSelectedText(ctrl.conditionData.opportunityType, 'multiSelect') }}</span>\r" +
	    "\n" +
	    "                        {{ ::'crm.employee_dashboard.filter.OPPORTUNITIES_CREATE_FILTER_CONDITIONS' | translate }}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <ul class=\"ws-filter-delete-list\">\r" +
	    "\n" +
	    "                        <li ng-repeat=\"addedCondition in ctrl.addedConditions\" ng-if=\"!ctrl.FilterManagerService.isEmptyCondition(addedCondition.condition)\">\r" +
	    "\n" +
	    "                            <span class=\"ws-status\" name=\"isEqualToText\">{{ addedCondition.condition.name }}</span>\r" +
	    "\n" +
	    "                            {{ ::'crm.employee_dashboard.filter.IS_EQUAL_TO' | translate }}\r" +
	    "\n" +
	    "                            <span class=\"ws-status\">{{ ctrl.FilterManagerService.getConditionSelectedText(addedCondition.condition) }}</span>\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                    </ul>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <h3 class=\"panel-title ws-content-group\">\r" +
	    "\n" +
	    "                    <span name=\"howFilterSortedText\">{{ ::'crm.employee_dashboard.filter.HOW_FILTER_SORTED' | translate }}</span>\r" +
	    "\n" +
	    "                </h3>\r" +
	    "\n" +
	    "                <span class=\"form-group ws-inline-group\">\r" +
	    "\n" +
	    "                    <label name=\"defaultFilterSortLabel\">{{ ::'crm.employee_dashboard.filter.DEFAULT_FILTER_SORT' | translate }}</label>\r" +
	    "\n" +
	    "                    <span class=\"ws-status\" name=\"conditionSelectedTextText\">{{ ctrl.FilterManagerService.getConditionSelectedText(ctrl.conditionData.sortOrder, 'singleSelect') }}</span>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <div class=\"panel-title ws-content-group ws-status-danger\">\r" +
	    "\n" +
	    "                    <span class=\"ws-status\" name=\"areYouSureText\">{{ ::'crm.employee_dashboard.filter.ARE_YOU_SURE_DELETE' | translate }}</span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-footer\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                    <div class=\"panel-footer-options pull-right\" ng-if=\"!ctrl.deleteEnabled\">\r" +
	    "\n" +
	    "                        <button class=\"btn btn-quaternary ng-binding\" type=\"button\" name=\"cancelButton\"\r" +
	    "\n" +
	    "                                ng-click=\"ctrl.filterOptions.onClose()\">\r" +
	    "\n" +
	    "                            <span>{{ ::'crm.employee_dashboard.filter.CANCEL' | translate }}</span>\r" +
	    "\n" +
	    "                        </button>\r" +
	    "\n" +
	    "                        <button class=\"btn btn-secondary ng-binding\" type=\"submit\" name=\"saveButton\">\r" +
	    "\n" +
	    "                            <span>{{ ::'crm.employee_dashboard.filter.SAVE' | translate }}</span>\r" +
	    "\n" +
	    "                        </button>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-footer-options pull-right\" ng-if=\"ctrl.deleteEnabled\">\r" +
	    "\n" +
	    "                        <button class=\"btn btn-quaternary ng-binding\" type=\"submit\" name=\"yesDeleteButton\">\r" +
	    "\n" +
	    "                            <span>{{ ::'crm.employee_dashboard.YES_DELETE' | translate }}</span>\r" +
	    "\n" +
	    "                        </button>\r" +
	    "\n" +
	    "                        <button class=\"btn btn-primary ng-binding\" type=\"button\"\r" +
	    "\n" +
	    "                                ng-click=\"ctrl.filterOptions.onClose()\" name=\"noDontDeleteButton\">\r" +
	    "\n" +
	    "                            <span>{{ ::'crm.employee_dashboard.NO_DONT_DELETE' | translate }}</span>\r" +
	    "\n" +
	    "                        </button>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </form>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/multiSelect/multi-select-pane-template.html',
	    "<div class=\"checkboxLayer\" ng-class=\"{'show': open}\">\r" +
	    "\n" +
	    "\t<div class=\"checkBoxContainer\">\r" +
	    "\n" +
	    "\t    <div class=\"multiSelectItem single vertical\"\r" +
	    "\n" +
	    "\t\t\t ng-class=\"{'selected': item.selected}\"\r" +
	    "\n" +
	    "\t\t\t ng-repeat=\"option in optionCollection\"\r" +
	    "\n" +
	    "\t\t\t ng-click=\"toggleItem(option)\">\r" +
	    "\n" +
	    "\t        <div class=\"checkbox-inline\">\r" +
	    "\n" +
	    "\t        \t<input type=\"checkbox\" ng-model=\"option.selected\">\r" +
	    "\n" +
	    "\t            <label class=\"ws-dropdown-item\">\r" +
	    "\n" +
	    "\t                <span class=\"fake-checkbox\"></span>\r" +
	    "\n" +
	    "\t                <span>{{ option.item.text }}</span>\r" +
	    "\n" +
	    "\t            </label>\r" +
	    "\n" +
	    "\t        </div>\r" +
	    "\n" +
	    "\t    </div>\r" +
	    "\n" +
	    "\t</div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/multiSelect/multi-select-template.html',
	    "<div class=\"multiSelect\">\r" +
	    "\n" +
	    "    <div class=\"transparent-input-group form-group-no-padding\" ng-click=\"vm.toggleSelectPane()\">\r" +
	    "\n" +
	    "        <input class=\"form-control ws-dropdown\" readonly\r" +
	    "\n" +
	    "            title=\"{{ vm.selected }}\"\r" +
	    "\n" +
	    "            ng-value=\"vm.viewValue\"\r" +
	    "\n" +
	    "            placeholder=\"{{ vm.placeholder }}\" />\r" +
	    "\n" +
	    "        <span class=\"input-group-addon ws-dropdown-caret\">\r" +
	    "\n" +
	    "            <i class=\"fa fa-caret-down\"></i>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <crm-multi-select-pane ng-model=\"vm.model\" options=\"vm.options\" open=\"vm.open\"></crm-multi-select-pane>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/reports/reportsModalTemplate.html',
	    "<crm-report-options></crm-report-options>"
	  );


	  $templateCache.put('app/employeeDashboard/reports/template.html',
	    "<div class=\"modal-content ws-modal-contrast \">\r" +
	    "\n" +
	    "    <section class=\"ws-panel ws-panel-no-margin\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "            <h3 class=\"panel-title ws-content-group ws-flex-fill-even\">\r" +
	    "\n" +
	    "                <span>{{::'crm.employee_dashboard.reports.CHOOSE_REPORT' | translate}}</span>\r" +
	    "\n" +
	    "            </h3>\r" +
	    "\n" +
	    "            <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"$dismiss()\" name=\"cancelButton\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <ul style=\"list-style: none\">\r" +
	    "\n" +
	    "                <li><a href ng-click=\"ctrl.openTodoDetails()\" name=\"taskDetails\">{{::'crm.employee_dashboard.reports.TASK_DETAILS' | translate}}</a></li>\r" +
	    "\n" +
	    "                <li><a href ng-click=\"ctrl.openEventDetailsWithNotes()\" name=\"opportunityDetailsNotes\">{{::'crm.employee_dashboard.reports.EVENT_WITH_NOTES' | translate}}</a></li>\r" +
	    "\n" +
	    "                <li><a href ng-click=\"ctrl.openEventDetailsWithoutNotes()\" name=\"opportunityDetails\">{{::'crm.employee_dashboard.reports.EVENT_WITHOUT_NOTES' | translate}}</a></li>\r" +
	    "\n" +
	    "                <li><a href ng-click=\"ctrl.openDailyCheckoutReport()\" name=\"dailyCheckout\">{{::'crm.employee_dashboard.reports.DAILY_CHECKOUT' | translate}}</a></li>\r" +
	    "\n" +
	    "                <li><a href ng-click=\"ctrl.openSalesTrackingReport()\" name=\"salesTracking\">{{::'crm.employee_dashboard.reports.SALES_TRACKING' | translate}}</a></li>\r" +
	    "\n" +
	    "                <li><a href ng-click=\"ctrl.openActivitySummaryReport()\" name=\"activitySummaryReport\">{{::'crm.employee_dashboard.reports.ACTIVITY_SUMMARY' | translate}}</a></li>\r" +
	    "\n" +
	    "            </ul>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </section>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/taskCard/compact/compactTaskCardTemplate.html',
	    "<section class=\"ws-dashboard-task-card ws-master-list-item ws-panel\" ng-class=\"ctrl.activeTaskOrOpportunity\" name=\"{{::ctrl.taskOrOpportunity.activityType}}\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-media\">\r" +
	    "\n" +
	    "            <crm-todo-icon todo=\"ctrl.taskOrOpportunity\" main-badge-status=\"ctrl.getIconStatus()\"\r" +
	    "\n" +
	    "                           corner-badge-status=\"ctrl.getStatusClassFromEventStatus()\" name=\"compactDashboardIcon\"></crm-todo-icon>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                <div ng-if=\"ctrl.isOpportunity()\">\r" +
	    "\n" +
	    "                    <header class=\"ws-panel-title\" name=\"compactDashboardOpportunityFullName\">{{ ctrl.taskOrOpportunity.fullName }}</header>\r" +
	    "\n" +
	    "                    <div class=\"ws-secondary-title\" name=\"compactDashboardOpportunityEventStatus\">\r" +
	    "\n" +
	    "                        {{ ctrl.taskOrOpportunity.eventStatus }}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div name=\"compactDashboardOpportunityLastUpdated\">{{ ::'crm.employeeDashboard.LAST_UPDATED' | translate }} {{ ctrl.lastUpdate }}</div>\r" +
	    "\n" +
	    "                    <div ng-class=\"ctrl.isPastDue() ? 'ws-status-overdue' : 'ws-deaccent-text'\">\r" +
	    "\n" +
	    "                        <div class=\"ws-status\" name=\"compactDashboardOpportunityDate\">\r" +
	    "\n" +
	    "                            {{ ctrl.getActivityTypeDateTimeText() }}\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-if=\"ctrl.hasNoTasks()\" class=\"ws-status-overdue\">\r" +
	    "\n" +
	    "                        <span class=\"ws-status ws-text-emphasis\">{{ ::'crm.employeeDashboard.NO_UPCOMING_TASK' | translate }}</span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div ng-if=\"!ctrl.isOpportunity()\">\r" +
	    "\n" +
	    "                    <div ng-class=\"ctrl.isPastDue() ? 'ws-status-overdue' : ''\">\r" +
	    "\n" +
	    "                        <header class=\"ws-panel-title ws-status\" name=\"compactDashboardType\">\r" +
	    "\n" +
	    "                            {{ ctrl.taskOrOpportunity.activityType }}\r" +
	    "\n" +
	    "                        </header>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"ws-secondary-title\" name=\"compactDashboardFullName\">\r" +
	    "\n" +
	    "                        {{ ctrl.taskOrOpportunity.fullName }}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-class=\"ctrl.isPastDue() ? 'ws-status-overdue' : ''\">\r" +
	    "\n" +
	    "                        <div class=\"ws-status\" name=\"compactDashboardDate\">\r" +
	    "\n" +
	    "                            {{ ctrl.getDateTimeText() }}\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"ws-deaccent-text\" name=\"compactDashboardDescription\">{{ ctrl.taskOrOpportunity.shortDescription }}</div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/employeeDashboard/taskCard/expanded/details/expandedTaskCardDetailTemplate.html',
	    "<div ng-class=\"ctrl.iconStatusClass\" class=\"ws-panel ws-status-ribbon\" name=\"expandedTaskCard\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\" ng-class=\"ctrl.eventStatusClass\">\r" +
	    "\n" +
	    "        <aside class=\"ws-double-icon\">\r" +
	    "\n" +
	    "            <crm-todo-icon todo=\"ctrl.taskOrOpportunity\" main-badge-status=\"ctrl.getIconStatus()\"\r" +
	    "\n" +
	    "                           corner-badge-status=\"ctrl.getStatusClassFromEventStatus()\"\r" +
	    "\n" +
	    "                           is-expanded=\"true\"></crm-todo-icon>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "        <div class=\"col-md-4\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-lg-7 col-md-12\">\r" +
	    "\n" +
	    "                    <header>\r" +
	    "\n" +
	    "                        <a class=\"ws-panel-title\" name=\"expandedActivityType\"\r" +
	    "\n" +
	    "                           ng-click=\"ctrl.onSelect(ctrl.taskOrOpportunity, $event)\">{{\r" +
	    "\n" +
	    "                            ctrl.taskOrOpportunity.activityType }}</a>\r" +
	    "\n" +
	    "                    </header>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-lg-5 visible-lg\" name=\"expandedDateTime\">\r" +
	    "\n" +
	    "                    <span>\r" +
	    "\n" +
	    "                        Due {{ctrl.getDateTimeText()}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-12\" name=\"expandedShortDescription\">\r" +
	    "\n" +
	    "                    {{ctrl.taskOrOpportunity.shortDescription}}\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-12 hidden-lg\" name=\"expandedDateTime\">\r" +
	    "\n" +
	    "                    <span>\r" +
	    "\n" +
	    "                        Due {{ctrl.getDateTimeText()}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-sm-3 col-md-2 col-lg-1\">\r" +
	    "\n" +
	    "            <header >\r" +
	    "\n" +
	    "                <h3 class=\"ws-panel-title\" name=\"expandedFullName\">\r" +
	    "\n" +
	    "                    {{ctrl.taskOrOpportunity.fullName}}\r" +
	    "\n" +
	    "                </h3>\r" +
	    "\n" +
	    "            </header>\r" +
	    "\n" +
	    "            <div >\r" +
	    "\n" +
	    "                <strong class=\"ws-status-text\" name=\"expandedEventStatus\">\r" +
	    "\n" +
	    "                    {{ctrl.editedEventStatus}}\r" +
	    "\n" +
	    "                </strong>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"visible-sm\" name=\"expandedAssignedTo\">\r" +
	    "\n" +
	    "                {{ctrl.taskOrOpportunity.assignedTo}} / {{::ctrl.taskOrOpportunity.assignedBy}}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-md-2 col-lg-2\">\r" +
	    "\n" +
	    "            <header>\r" +
	    "\n" +
	    "                <span class=\"hidden-lg\">\r" +
	    "\n" +
	    "                    {{ctrl.taskOrOpportunity.year}} {{::ctrl.taskOrOpportunity.make}} {{::ctrl.taskOrOpportunity.model}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <h3 class=\"ws-panel-title visible-lg\">\r" +
	    "\n" +
	    "                    {{ctrl.taskOrOpportunity.year}} {{::ctrl.taskOrOpportunity.make}} {{::ctrl.taskOrOpportunity.model}}\r" +
	    "\n" +
	    "                </h3>\r" +
	    "\n" +
	    "            </header>\r" +
	    "\n" +
	    "            <div name=\"expandedFranchiseName\">\r" +
	    "\n" +
	    "                {{ctrl.taskOrOpportunity.franchiseName}}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div name=\"lastUpdate\" class=\"visible-sm\" name=\"lastUpdate\">\r" +
	    "\n" +
	    "                {{ ::'crm.employeeDashboard.LAST_UPDATED' | translate }} {{ ctrl.lastUpdate }}\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.lastUpdate && ctrl.age\" name=\"expandedLastUpdated\"> / </span>\r" +
	    "\n" +
	    "                {{ctrl.age }}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-sm-4 col-md-3 col-lg-4 hidden-sm\">\r" +
	    "\n" +
	    "            <div class=\"col-md-12 col-lg-4\" name=\"expandedAssignedTo\">\r" +
	    "\n" +
	    "                {{ctrl.taskOrOpportunity.assignedTo}}\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.taskOrOpportunity.assignedTo && ctrl.taskOrOpportunity.assignedBy\">/</span>\r" +
	    "\n" +
	    "                {{ctrl.taskOrOpportunity.assignedBy}}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div name=\"lastUpdate\" class=\"col-md-12 hidden-lg\" name=\"lastUpdate\">\r" +
	    "\n" +
	    "                {{ ::'crm.employeeDashboard.LAST_UPDATED' | translate }} {{ ::ctrl.lastUpdate }}\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.lastUpdate && ctrl.age\" name=\"expandedLastUpdated\"> / </span>\r" +
	    "\n" +
	    "                {{ ctrl.age }}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"visible-lg col-lg-4\" name=\"expandedLastUpdate\">\r" +
	    "\n" +
	    "                {{ ::'crm.employeeDashboard.LAST_UPDATED' | translate }} {{ ::ctrl.lastUpdate }}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"visible-lg col-lg-4\" name=\"expandedAge\">\r" +
	    "\n" +
	    "                {{ ctrl.age }}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-sm-2 col-md-2 col-lg-1\">\r" +
	    "\n" +
	    "            <div class=\"ws-dashboard-icons pull-right\">\r" +
	    "\n" +
	    "                <a ng-if=\"ctrl.taskOrOpportunity.hasPings && ctrl.revRadarPermission.view\"\r" +
	    "\n" +
	    "                   ng-click=\"ctrl.showPings($event)\">\r" +
	    "\n" +
	    "                    <i class=\"icon-radar\"></i>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "                <a ng-if=\"ctrl.taskOrOpportunity.hasIncentives\" ng-click=\"ctrl.showIncentives($event)\"\r" +
	    "\n" +
	    "                   uib-tooltip=\"{{::'crm.employee_dashboard.popover.VIEW_INCENTIVES' | translate}}\"\r" +
	    "\n" +
	    "                   tooltip-append-to-body=\"true\">\r" +
	    "\n" +
	    "                    <i class=\"fa fa-info-circle\"></i>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "                <a ng-click=\"ctrl.onSelect(ctrl.taskOrOpportunity, $event)\" ng-if=\"ctrl.isOpportunity()\"\r" +
	    "\n" +
	    "                   uib-tooltip=\"{{::'crm.employee_dashboard.popover.INITIATE_TASK' | translate}}\"\r" +
	    "\n" +
	    "                   tooltip-append-to-body=\"true\" name=\"addTaskIcon\">\r" +
	    "\n" +
	    "                    <i class=\"icon-add-task\"></i>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "                <a uib-tooltip=\"{{::'crm.employee_dashboard.popover.MORE_ACTIONS' | translate}}\"\r" +
	    "\n" +
	    "                   ng-if=\"!ctrl.isOpportunity()\"\r" +
	    "\n" +
	    "                   tooltip-append-to-body=\"true\">\r" +
	    "\n" +
	    "                    <i class=\"fa fa-ellipsis-h\"\r" +
	    "\n" +
	    "                       name=\"moreActionsEllipses\"\r" +
	    "\n" +
	    "                       ns-popover\r" +
	    "\n" +
	    "                       ns-popover-placement=\"bottom|right\"\r" +
	    "\n" +
	    "                       ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                       ns-popover-template=\"app/employeeDashboard/taskCard/moreActions/moreActionsMenuTemplate.html\"\r" +
	    "\n" +
	    "                       ns-popover-timeout=\"1\"\r" +
	    "\n" +
	    "                       ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "                       ns-popover-hide-on-inside-click=\"true\"\r" +
	    "\n" +
	    "                       ng-click=\"ctrl.stopEventPropagation($event)\"></i>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/taskCard/expanded/expandedTaskCardTemplate.html',
	    "<div class=\"panel-overlay ws-disabled-overlay\" ng-show=\"ctrl.isWaiting\">\r" +
	    "\n" +
	    "    <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                          md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "<crm-expanded-task-card-detail ng-if=\"!ctrl.isOpportunity()\"\r" +
	    "\n" +
	    "                               task-or-opportunity=\"ctrl.taskOrOpportunity\" options=\"ctrl.options\"\r" +
	    "\n" +
	    "                               ng-click=\"ctrl.logActivity()\"></crm-expanded-task-card-detail>\r" +
	    "\n" +
	    "<crm-expanded-opportunity-card-detail ng-if=\"ctrl.isOpportunity()\"\r" +
	    "\n" +
	    "                               task-or-opportunity=\"ctrl.taskOrOpportunity\" options=\"ctrl.options\"\r" +
	    "\n" +
	    "                               ng-click=\"ctrl.logActivity()\"></crm-expanded-opportunity-card-detail>\r" +
	    "\n" +
	    "<crm-log-phone-call ng-if=\"ctrl.showLoggingTaskCard(ctrl.activityActionType.logPhoneCall)\"\r" +
	    "\n" +
	    "                    activity=\"ctrl.activity\"\r" +
	    "\n" +
	    "                    contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                    name=\"phoneCallTaskCard\"></crm-log-phone-call>\r" +
	    "\n" +
	    "<crm-log-appointment ng-if=\"ctrl.showLoggingTaskCard(ctrl.activityActionType.logAppointment)\"\r" +
	    "\n" +
	    "                     activity=\"ctrl.activity\"\r" +
	    "\n" +
	    "                     contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                     name=\"appointmentTaskCard\"></crm-log-appointment>\r" +
	    "\n" +
	    "<crm-log-other-task ng-if=\"ctrl.showLoggingTaskCard(ctrl.activityActionType.logOther)\"\r" +
	    "\n" +
	    "                    activity=\"ctrl.activity\"\r" +
	    "\n" +
	    "                    name=\"otherTaskCard\"></crm-log-other-task>\r" +
	    "\n" +
	    "<crm-complete-task-card ng-if=\"ctrl.showLoggingTaskCard(ctrl.activityActionType.completed)\"\r" +
	    "\n" +
	    "                    campaign-steps=\"ctrl.campaignSteps\"\r" +
	    "\n" +
	    "                    event-type=\"ctrl.activity.eventType\"\r" +
	    "\n" +
	    "                    on-close=\"ctrl.onActivityComplete(type)\">\r" +
	    "\n" +
	    "</crm-complete-task-card>"
	  );


	  $templateCache.put('app/employeeDashboard/taskCard/expanded/opportunityDetails/expandedOpportunityCardDetailTemplate.html',
	    "<div class=\"ws-panel\" name=\"expandedTaskCard\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <aside class=\"ws-double-icon\">\r" +
	    "\n" +
	    "            <crm-todo-icon todo=\"ctrl.taskOrOpportunity\" main-badge-status=\"ctrl.getIconStatus()\"\r" +
	    "\n" +
	    "                           corner-badge-status=\"ctrl.getStatusClassFromEventStatus()\" is-expanded=\"true\"></crm-todo-icon>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                <header>\r" +
	    "\n" +
	    "                    <a class=\"ws-panel-title\" name=\"expandedFullName\" ng-click=\"ctrl.onSelect(ctrl.taskOrOpportunity, $event)\">{{ ctrl.taskOrOpportunity.fullName }}</a>\r" +
	    "\n" +
	    "                </header>\r" +
	    "\n" +
	    "                <div class=\"ws-deaccent-text\" name=\"expandedEventStatus\">\r" +
	    "\n" +
	    "                    {{ ::ctrl.taskOrOpportunity.eventStatus }}\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.taskOrOpportunity.eventStatus && ctrl.taskOrOpportunity.assignedTo\" name=\"expandedAssignedTo\"> / </span>\r" +
	    "\n" +
	    "                    {{ ::ctrl.taskOrOpportunity.assignedTo }}\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-content-group\" ng-class=\"ctrl.isPastDue() ? 'ws-status-bad' : ''\" name=\"expandedActivityType\">\r" +
	    "\n" +
	    "                <div class=\"ws-status\" name=\"expandedDateTime\">\r" +
	    "\n" +
	    "                    {{ ::ctrl.getActivityTypeDateTimeText() }}\r" +
	    "\n" +
	    "                    <div name=\"expandedShortDescription\">\r" +
	    "\n" +
	    "                        <span ng-if=\"ctrl.taskOrOpportunity.shortDescription\">{{ ::ctrl.taskOrOpportunity.shortDescription }}</span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-if=\"ctrl.isOpportunity() && ctrl.hasNoTasks()\" class=\"ws-status-bad\">\r" +
	    "\n" +
	    "                <span class=\"ws-status ws-text-emphasis\">{{ ::'crm.employeeDashboard.NO_UPCOMING_TASK' | translate }}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div name=\"lastUpdate\">\r" +
	    "\n" +
	    "                {{ ::'crm.employeeDashboard.LAST_UPDATED' | translate }} {{ ctrl.lastUpdate }}\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.lastUpdate && ctrl.age\" name=\"expandedLastUpdated\"> / </span>\r" +
	    "\n" +
	    "                {{ ::ctrl.age }}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-deaccent-text\">{{ ::ctrl.carFullName }}\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.carFullName && ctrl.taskOrOpportunity.franchiseName\" name=\"expandedFranchiseName\"> / </span>\r" +
	    "\n" +
	    "                {{ ::ctrl.taskOrOpportunity.franchiseName }}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-dashboard-icons\">\r" +
	    "\n" +
	    "                <a ng-if=\"ctrl.taskOrOpportunity.hasPings && ctrl.revRadarPermission.view\" ng-click=\"ctrl.showPings($event)\">\r" +
	    "\n" +
	    "                    <i class=\"icon-radar\"></i>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "                <a ng-if=\"ctrl.taskOrOpportunity.hasIncentives\" ng-click=\"ctrl.showIncentives($event)\"\r" +
	    "\n" +
	    "                   uib-tooltip=\"{{::'crm.employee_dashboard.popover.VIEW_INCENTIVES' | translate}}\"\r" +
	    "\n" +
	    "                   tooltip-append-to-body=\"true\">\r" +
	    "\n" +
	    "                    <i class=\"fa fa-info-circle\"></i>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "                <a ng-click=\"ctrl.onSelect(ctrl.taskOrOpportunity, $event)\" ng-if=\"ctrl.isOpportunity()\"\r" +
	    "\n" +
	    "                   uib-tooltip=\"{{::'crm.employee_dashboard.popover.INITIATE_TASK' | translate}}\"\r" +
	    "\n" +
	    "                   tooltip-append-to-body=\"true\" name=\"addTaskIcon\">\r" +
	    "\n" +
	    "                    <i class=\"icon-add-task\"></i>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "                <a uib-tooltip=\"{{::'crm.employee_dashboard.popover.MORE_ACTIONS' | translate}}\"\r" +
	    "\n" +
	    "                   ng-if=\"!ctrl.isOpportunity()\"\r" +
	    "\n" +
	    "                   tooltip-append-to-body=\"true\">\r" +
	    "\n" +
	    "                    <i class=\"fa fa-ellipsis-h\"\r" +
	    "\n" +
	    "                       name=\"moreActionsEllipses\"\r" +
	    "\n" +
	    "                       ns-popover\r" +
	    "\n" +
	    "                       ns-popover-placement=\"bottom|right\"\r" +
	    "\n" +
	    "                       ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                       ns-popover-template=\"app/employeeDashboard/taskCard/moreActions/moreActionsMenuTemplate.html\"\r" +
	    "\n" +
	    "                       ns-popover-timeout=\"1\"\r" +
	    "\n" +
	    "                       ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "                       ns-popover-hide-on-inside-click=\"true\"\r" +
	    "\n" +
	    "                       ng-click=\"ctrl.stopEventPropagation($event)\"></i>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/taskCard/moreActions/moreActionsMenuTemplate.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" ng-click=\"ctrl.openTaskSheetPrintout()\" ng-if=\"!ctrl.hasNoTasks()\" name=\"printTaskSheet\">\r" +
	    "\n" +
	    "        {{::'crm.employee_dashboard.popover.PRINT_TASK_SHEET' | translate}}</div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" ng-click=\"ctrl.onDelete()\" name=\"deleteTask\">\r" +
	    "\n" +
	    "        {{::'crm.employee_dashboard.popover.DELETE_TASK' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/taskCard/moreActions/moreActionsPopoverTemplate.html',
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    {{::'crm.employee_dashboard.popover.MORE_ACTIONS' | translate}}\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/taskCard/taskCardTemplate.html',
	    "<!--<ng-include class=\"ws-hide-on-expand\" src=\"'app/employeeDashboard/taskCard/templates/task.html'\"></ng-include>-->\r" +
	    "\n" +
	    "<!--<ng-include class=\"ws-show-on-expand\" src=\"'app/employeeDashboard/taskCard/templates/taskExpanded.html'\"></ng-include>-->\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "<div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel ws-selection ws-hide-on-expand\"\r" +
	    "\n" +
	    "             ng-class=\"ctrl.getStatusClass()\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-row ws-dashboard-task-card\">\r" +
	    "\n" +
	    "            <aside class=\"ws-panel-media\">\r" +
	    "\n" +
	    "                <crm-task-icon activity-type=\"{{ ctrl.taskOrOpportunity.opportunityType || ctrl.taskOrOpportunity.activityType }}\"></crm-task-icon>\r" +
	    "\n" +
	    "            </aside>\r" +
	    "\n" +
	    "            <div class=\"ws-panel-content-main ws-status-good\">\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                    <header class=\"ws-panel-title\">{{ ctrl.taskOrOpportunity.activityType }}</header>\r" +
	    "\n" +
	    "                    <strong>{{ ctrl.taskOrOpportunity.fullName }}</strong>\r" +
	    "\n" +
	    "                    <div>\r" +
	    "\n" +
	    "                        <crm-date date-time=\"ctrl.taskOrOpportunity.activityDateTime\" mode=\"dateNumeric\"></crm-date>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"ws-deaccent-text\">{{ ctrl.taskOrOpportunity.shortDescription }}</div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel ws-show-on-expand\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "            <aside class=\"ws-dashboard-media\">\r" +
	    "\n" +
	    "                <div class=\"ws-content-group ws-center-content-h\"\r" +
	    "\n" +
	    "                     ng-class=\"ctrl.getStatusClass()\">\r" +
	    "\n" +
	    "                    <crm-task-icon activity-type=\"{{ ctrl.taskOrOpportunity.opportunityType || ctrl.taskOrOpportunity.activityType }}\" icon-size=\"m\"></crm-task-icon>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </aside>\r" +
	    "\n" +
	    "            <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "                    <header>\r" +
	    "\n" +
	    "                        <a class=\"ws-panel-title\">{{ ctrl.taskOrOpportunity.fullName }}</a>\r" +
	    "\n" +
	    "                    </header>\r" +
	    "\n" +
	    "                    <div class=\"ws-deaccent-text\">\r" +
	    "\n" +
	    "                        {{ ctrl.taskOrOpportunity.eventStatus }}\r" +
	    "\n" +
	    "                        <span ng-if=\"ctrl.taskOrOpportunity.eventStatus && ctrl.taskOrOpportunity.assignedTo\"> / </span>\r" +
	    "\n" +
	    "                        {{ ctrl.taskOrOpportunity.assignedTo }}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\" ng-class=\"ctrl.isPastDue ? 'ws-status-bad' : ''\">\r" +
	    "\n" +
	    "                    <div class=\"ws-status\">\r" +
	    "\n" +
	    "                        <span class=\"ws-text-weight-median\">{{ ctrl.taskOrOpportunity.activityType }}</span>\r" +
	    "\n" +
	    "                        <span ng-if=\"ctrl.taskOrOpportunity.activityType && ctrl.taskOrOpportunity.activityDateTime\">, </span>\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.taskOrOpportunity.activityDateTime\">\r" +
	    "\n" +
	    "                        <span ng-if=\"ctrl.containsTimePortion\">\r" +
	    "\n" +
	    "                            <crm-date date-time=\"ctrl.taskOrOpportunity.activityDateTime\" mode=\"dateNumeric\"\r" +
	    "\n" +
	    "                                      extend=\"true\"></crm-date>\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                        <span ng-if=\"!ctrl.containsTimePortion\">\r" +
	    "\n" +
	    "                            <crm-date date-time=\"ctrl.taskOrOpportunity.activityDateTime\" mode=\"dateNumeric\"></crm-date>\r" +
	    "\n" +
	    "                            , {{ ::'crm.employeeDashboard.EOD' | translate }}\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                        <div>\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.taskOrOpportunity.shortDescription\">{{ ctrl.taskOrOpportunity.shortDescription }}</span>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div ng-if=\"!ctrl.taskOrOpportunity.shortDescription && ctrl.taskOrOpportunity.opportunityType\" class=\"ws-status-bad\">\r" +
	    "\n" +
	    "                    <span class=\"ws-status ws-text-emphasis\">{{ ::'crm.employeeDashboard.NO_UPCOMING_TASK' | translate }}</span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "                <div>\r" +
	    "\n" +
	    "                    {{ ::'crm.employeeDashboard.LAST_UPDATED' | translate }} {{ ctrl.lastUpdate }}\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.lastUpdate && ctrl.age\"> / </span>\r" +
	    "\n" +
	    "                    {{ ::'crm.employeeDashboard.CREATED' | translate }} {{ ctrl.age }}\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-deaccent-text\">{{ ctrl.carFullName }}\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.carFullName && ctrl.taskOrOpportunity.franchiseName\"> / </span>\r" +
	    "\n" +
	    "                    {{ ctrl.taskOrOpportunity.franchiseName }}\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-dashboard-icons\">\r" +
	    "\n" +
	    "                    <a ng-disabled=\"true\"><i class=\"fa fa-info-circle\"></i></a>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </aside>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/templates/directiveComingSoonTemplate.html',
	    "<div class=\"panel-body-message\">\r" +
	    "\n" +
	    "    <h3>\r" +
	    "\n" +
	    "        {{'Coming Soon!'}}\r" +
	    "\n" +
	    "    </h3>\r" +
	    "\n" +
	    "    <br/>\r" +
	    "\n" +
	    "    <div class=\"panel-body-inner-message\">\r" +
	    "\n" +
	    "        {{\"The detail card for this type of event is not yet implemented.\"}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/todoIcon/todoIconTemplate.html',
	    "<co-icon-badge status=\"{{ctrl.mainBadgeStatus}}\"\r" +
	    "\n" +
	    "               size=\"{{ctrl.getIconBadgeSize()}}\"\r" +
	    "\n" +
	    "               bordered=\"{{ctrl.isOpportunity() ? '' : 'true'}}\"\r" +
	    "\n" +
	    "               icon=\"{{ctrl.mainBadgeClass}}\">\r" +
	    "\n" +
	    "    <co-icon-badge ng-if=\"!ctrl.isOpportunity()\"\r" +
	    "\n" +
	    "                   status=\"{{ctrl.cornerBadgeStatus}}\"\r" +
	    "\n" +
	    "                   size=\"sm\"\r" +
	    "\n" +
	    "                   icon=\"{{ctrl.cornerBadgeClass}}\"></co-icon-badge>\r" +
	    "\n" +
	    "</co-icon-badge>\r" +
	    "\n"
	  );


	  $templateCache.put('app/employeeDashboard/views/details/template.html',
	    "<div>\r" +
	    "\n" +
	    "    <md-progress-circular class=\"ws-progress-circular ws-progress-centered\"\r" +
	    "\n" +
	    "        ng-if=\"ctrl.isLoading\" md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "    <div ng-if=\"!ctrl.isLoading\" ng-switch=\"ctrl.opportunityType\">\r" +
	    "\n" +
	    "        <crm-sales-opportunity-detail-view\r" +
	    "\n" +
	    "            ng-switch-when=\"sales\"\r" +
	    "\n" +
	    "            options=\"ctrl.opportunityOptions\"></crm-sales-opportunity-detail-view>\r" +
	    "\n" +
	    "        <div ng-switch-when=\"service\">\r" +
	    "\n" +
	    "            <ng-include src=\"'app/employeeDashboard/templates/directiveComingSoonTemplate.html'\"></ng-include>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div ng-switch-when=\"qa\">\r" +
	    "\n" +
	    "            <csi-update-directive options=\"ctrl.opportunityOptions\" embedded=\"true\"></csi-update-directive>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div ng-switch-default>\r" +
	    "\n" +
	    "            <crm-employee-dashboard-no-todos type=\"{{ ctrl.selectedTab }}\"></crm-employee-dashboard-no-todos>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/views/list/no-content/noOpportunitiesMessageTemplate.html',
	    "<div class=\"panel-body-message\">\r" +
	    "\n" +
	    "    <h3>\r" +
	    "\n" +
	    "        {{::'crm.employee_dashboard.EMPTY' | translate}}\r" +
	    "\n" +
	    "    </h3>\r" +
	    "\n" +
	    "    <br/>\r" +
	    "\n" +
	    "    <div class=\"panel-body-inner-message\">\r" +
	    "\n" +
	    "        {{::'crm.employee_dashboard.opportunity.ADJUST_FILTERS' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/views/list/no-content/noTasksMessageTemplate.html',
	    "<div class=\"panel-body-message\">\r" +
	    "\n" +
	    "    <h3>\r" +
	    "\n" +
	    "        {{::'crm.employee_dashboard.EMPTY' | translate}}\r" +
	    "\n" +
	    "    </h3>\r" +
	    "\n" +
	    "    <br/>\r" +
	    "\n" +
	    "    <div class=\"panel-body-inner-message\">\r" +
	    "\n" +
	    "        {{::'crm.employee_dashboard.task.ADJUST_FILTERS' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <br/>\r" +
	    "\n" +
	    "    <div class=\"panel-body-inner-message\">\r" +
	    "\n" +
	    "        {{::'crm.employee_dashboard.task.FOLLOW_UP_1' | translate}}\r" +
	    "\n" +
	    "        <a ui-sref=\"employee.list.expanded.tab({todoType: 'opportunities'})\">{{::'crm.employee_dashboard.task.FOLLOW_UP_2' | translate}}</a>\r" +
	    "\n" +
	    "        {{::'crm.employee_dashboard.task.FOLLOW_UP_3' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/views/list/side-bar-list/template.html',
	    "<div class=\"ws-selection-list\" name=\"employeeDashboardHeader\">\r" +
	    "\n" +
	    "    <div class=\"ws-compact-filter-container\">\r" +
	    "\n" +
	    "        <div class=\"transparent-input-group\">\r" +
	    "\n" +
	    "            <span class=\"input-group-prepend\">\r" +
	    "\n" +
	    "              <i class=\"fa fa-search master-panel-icon\"></i>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "            <input ng-model-options=\"ctrl.searchModelOptions\" class=\"form-control\" ng-model=\"ctrl.searchText\"\r" +
	    "\n" +
	    "                   placeholder=\"{{ ::'crm.employee_dashboard.FILTER_PLACEHOLDER' | translate }}\" name=\"compactSearchBox\">\r" +
	    "\n" +
	    "            <span class=\"input-group-addon\"></span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-compact-toggle-container\">\r" +
	    "\n" +
	    "            <a ng-click=\"ctrl.toggleCompactFilters()\">\r" +
	    "\n" +
	    "                {{ ::'crm.employeeDashboard.FILTERS' | translate }} (3) <i ng-class=\"ctrl.showsCompactFilters ? 'fa fa-caret-up' : 'fa fa-caret-down'\"></i>\r" +
	    "\n" +
	    "            </a>\r" +
	    "\n" +
	    "            <span class=\"ws-compact-toggle-sorting\">\r" +
	    "\n" +
	    "                <a name=\"sort-dropdown\" ns-popover ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                   ns-popover-trigger=\"click\" ns-popover-timeout=\"100000\"\r" +
	    "\n" +
	    "                   ns-popover-template=\"app/employeeDashboard/views/list/todoSortOrderPopup.html\">\r" +
	    "\n" +
	    "                {{ ::'crm.employeeDashboard.SORTING' | translate }} <i class=\"fa fa-caret-down\"></i>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-compact-row-container\" ng-show=\"!ctrl.showsCompactFilters\">\r" +
	    "\n" +
	    "        <span class=\"ws-compact-row-label\">{{ ctrl.selectedCategoryFilter.name }}</span>\r" +
	    "\n" +
	    "        <button class=\"btn btn-primary\" ng-click=\"ctrl.refreshTodos()\"><i class=\"fa fa-refresh ws-compact-refresh\" name=\"refreshButton\"></i></button>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-compact-filter-container ws-compact-quick-filter\" ng-show=\"ctrl.showsCompactFilters\">\r" +
	    "\n" +
	    "        <div class=\"ws-compact-filter\">\r" +
	    "\n" +
	    "            <div class=\"ws-text-weight-median\">{{ ::'crm.employeeDashboard.DEALERSHIP' | translate }}</div>\r" +
	    "\n" +
	    "            <select class=\"form-control\"\r" +
	    "\n" +
	    "                    ng-model=\"ctrl.selectedFranchise\"\r" +
	    "\n" +
	    "                    ng-options=\"franchise.text for franchise in ctrl.filters.franchises\"\r" +
	    "\n" +
	    "                    ng-change=\"ctrl.selectFranchise()\" disabled></select>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-compact-filter\">\r" +
	    "\n" +
	    "            <div class=\"ws-text-weight-median\">{{ ::'crm.employeeDashboard.QUICK_FILTER' | translate }}</div>\r" +
	    "\n" +
	    "            <select class=\"form-control\"\r" +
	    "\n" +
	    "                    ng-model=\"ctrl.selectedCategoryFilter\"\r" +
	    "\n" +
	    "                    ng-options=\"categoryFilter.name group by categoryFilter.filterCategory for categoryFilter in ctrl.filters.categoryFilters | orderBy: ['filterCategory', 'name']\"\r" +
	    "\n" +
	    "                    ng-change=\"ctrl.selectCategoryFilter()\"></select>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-compact-filter\">\r" +
	    "\n" +
	    "            <div class=\"ws-text-weight-median\">{{ ::'crm.employeeDashboard.ASSIGNED_TO' | translate }}</div>\r" +
	    "\n" +
	    "            <select class=\"form-control\"\r" +
	    "\n" +
	    "                    ng-model=\"ctrl.selectedAssignedTo\"\r" +
	    "\n" +
	    "                    ng-options=\"assignedTo.text for assignedTo in ctrl.filters.employees\"\r" +
	    "\n" +
	    "                    ng-change=\"ctrl.selectAssignedTo()\"></select>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div ng-show=\"ctrl.loading\" class=\"ws-search-progress\">\r" +
	    "\n" +
	    "        <md-progress-circular class=\"ws-progress-circular ws-progress-centered\"\r" +
	    "\n" +
	    "                              md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div ng-if=\"!ctrl.loading && ctrl.todos\">\r" +
	    "\n" +
	    "        <md-virtual-repeat-container class=\"ws-master-list-container\" ng-style=\"ctrl.getListStyle(126)\">\r" +
	    "\n" +
	    "            <div md-virtual-repeat=\"todo in ctrl.todos\" md-item-size=\"134\">\r" +
	    "\n" +
	    "                <crm-compact-task-card ng-click=\"ctrl.selectTodo(todo)\"\r" +
	    "\n" +
	    "                                       task-or-opportunity=\"todo\"\r" +
	    "\n" +
	    "                                       active-task-or-opportunity=\"ctrl.isSelectedTodoTaskCardClass(todo)\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                </crm-compact-task-card>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </md-virtual-repeat-container>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/views/list/tab-list/template.html',
	    "<div class=\"ws-filter-container\">\r" +
	    "\n" +
	    "    <div class=\"col-md-one-fifth col-sm-one-fifth\">\r" +
	    "\n" +
	    "        <div class=\"transparent-input-group\">\r" +
	    "\n" +
	    "            <span class=\"input-group-prepend\">\r" +
	    "\n" +
	    "              <i class=\"fa fa-search master-panel-icon\"></i>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "            <input ng-model-options=\"ctrl.searchModelOptions\"\r" +
	    "\n" +
	    "                   class=\"form-control\"\r" +
	    "\n" +
	    "                   name=\"expandedTaskSearchBox\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.searchText\"\r" +
	    "\n" +
	    "                   placeholder=\"{{ ::'crm.employee_dashboard.FILTER_PLACEHOLDER' | translate }}\">\r" +
	    "\n" +
	    "            <span class=\"input-group-addon\"></span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"col-md-one-fifth col-sm-one-fifth\">\r" +
	    "\n" +
	    "        <select class=\"form-control\"\r" +
	    "\n" +
	    "                ng-model=\"ctrl.selectedFranchise\"\r" +
	    "\n" +
	    "                ng-options=\"franchise.text for franchise in ctrl.filters.franchises\"\r" +
	    "\n" +
	    "                ng-change=\"ctrl.selectFranchise()\" disabled></select>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"col-md-two-fifth col-sm-two-fifth\">\r" +
	    "\n" +
	    "        <select class=\"form-control\"\r" +
	    "\n" +
	    "                ng-model=\"ctrl.selectedCategoryFilter\"\r" +
	    "\n" +
	    "                ng-options=\"categoryFilter.name group by categoryFilter.filterCategory for categoryFilter in ctrl.filters.categoryFilters | orderBy: ['filterCategory', 'name']\"\r" +
	    "\n" +
	    "                ng-change=\"ctrl.selectCategoryFilter()\"></select>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        <!--<co-treeview-dropdown ng-model=\"ctrl.selectedCategoryFilter\" options=\"ctrl.filters.categoryFilters\" ng-change=\"ctrl.selectCategoryFilter()\"></co-treeview-dropdown>-->\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"col-md-one-fifth col-sm-one-fifth\">\r" +
	    "\n" +
	    "        <select class=\"form-control\"\r" +
	    "\n" +
	    "                name=\"tasksAssignedTo\"\r" +
	    "\n" +
	    "                ng-model=\"ctrl.selectedAssignedTo\"\r" +
	    "\n" +
	    "                ng-options=\"assignedTo.text for assignedTo in ctrl.filters.employees\"\r" +
	    "\n" +
	    "                ng-change=\"ctrl.selectAssignedTo()\"></select>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "<div>\r" +
	    "\n" +
	    "    <span class=\"ws-dashboard-list-header\">\r" +
	    "\n" +
	    "    \t<a><i class=\"fa fa-refresh\" ng-click=\"ctrl.refreshTodos()\" name=\"refreshButton\"></i></a>\r" +
	    "\n" +
	    "        <span class=\"list-header-text\">{{ctrl.todos.length}} {{ ::'crm.employee_dashboard.RESULTS_FOUND' | translate }}</span>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "    <span class=\"pull-right\">\r" +
	    "\n" +
	    "        {{ ::'crm.employeeDashboard.SORT' | translate }}:\r" +
	    "\n" +
	    "        <a ns-popover ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "           name=\"sort-dropdown\"\r" +
	    "\n" +
	    "           ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "           ns-popover-timeout=\"100000\"\r" +
	    "\n" +
	    "           ns-popover-placement=\"auto|center\"\r" +
	    "\n" +
	    "           ns-popover-template=\"app/employeeDashboard/views/list/todoSortOrderPopup.html\">\r" +
	    "\n" +
	    "            {{ ctrl.sortOrder.description }} <i class=\"fa fa-caret-down\"></i>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "<md-progress-circular class=\"ws-progress-circular ws-progress-centered\"\r" +
	    "\n" +
	    "    ng-show=\"ctrl.loading\" md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "<div ng-hide=\"ctrl.loading\">\r" +
	    "\n" +
	    "    <div ng-if=\"ctrl.todos.length === 0\">\r" +
	    "\n" +
	    "        <crm-employee-dashboard-no-todos todo-type=\"{{ ctrl.$state.params['todoType'] }}\"></crm-employee-dashboard-no-todos>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <md-virtual-repeat-container ng-style=\"ctrl.getListStyle(200)\"\r" +
	    "\n" +
	    "        ng-if=\"ctrl.todos\">\r" +
	    "\n" +
	    "        <div md-virtual-repeat=\"todo in ctrl.todos\" md-item-size=\"110\">\r" +
	    "\n" +
	    "            <crm-expanded-task-card\r" +
	    "\n" +
	    "                task-or-opportunity=\"todo\"\r" +
	    "\n" +
	    "                options=\"ctrl.todoTaskCardOptions\"></crm-expanded-task-card>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </md-virtual-repeat-container>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/employeeDashboard/views/list/todoSortOrderPopup.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" ng-repeat=\"sortOption in ctrl.sortOrderOptions\"\r" +
	    "\n" +
	    "        name=\"{{ sortOption.name }}\" ng-click=\"hidePopover();ctrl.setSortOrder(sortOption)\" >\r" +
	    "\n" +
	    "        {{ sortOption.description }}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/views/tabs/employeeDashboardAdminMenuPopoverTemplate.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" ng-click=\"ctrl.openFilterManager()\" name=\"filterManagerPopoverItem\">\r" +
	    "\n" +
	    "        {{::'crm.employee_dashboard.filter.ACCESS_FILTER_MANAGER' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" ng-click=\"ctrl.openReportOptions()\" name=\"viewReportPopoverItem\">\r" +
	    "\n" +
	    "        {{::'crm.employee_dashboard.reports.VIEW_A_REPORT' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/employeeDashboard/views/tabs/template.html',
	    "<div class=\"ws-employee-dashboard\">\r" +
	    "\n" +
	    "    <uib-tabset class=\"thin-tabset\" active=\"ctrl.activeIndex\">\r" +
	    "\n" +
	    "        <div class=\"tab-action-companion\">\r" +
	    "\n" +
	    "            <div class=\"btn btn-default\" ns-popover ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                 ns-popover-trigger=\"click\" ns-popover-placement=\"bottom|right\"\r" +
	    "\n" +
	    "                 name=\"employeeDashboardEllipses\"\r" +
	    "\n" +
	    "                 ns-popover-template=\"app/employeeDashboard/views/tabs/employeeDashboardAdminMenuPopoverTemplate.html\"\r" +
	    "\n" +
	    "                 ns-popover-hide-on-inside-click=\"true\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-lg fa-ellipsis-h\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <uib-tab ng-click=\"ctrl.setCurrentlyActiveTab('opportunities')\" name=\"opportunitiesTab\"> <!--  select=\"ctrl.setCurrentlyActiveTab('opportunities')\" -->\r" +
	    "\n" +
	    "            <uib-tab-heading>\r" +
	    "\n" +
	    "                <div>{{ ::'crm.employeeDashboard.OPPORTUNITIES' | translate }}</div>\r" +
	    "\n" +
	    "            </uib-tab-heading>\r" +
	    "\n" +
	    "        </uib-tab>\r" +
	    "\n" +
	    "        <uib-tab ng-click=\"ctrl.setCurrentlyActiveTab('tasks')\" name=\"tasksTab\"> <!--select=\"ctrl.setCurrentlyActiveTab('tasks')\"-->\r" +
	    "\n" +
	    "            <uib-tab-heading>\r" +
	    "\n" +
	    "                <div>{{ ::'crm.employeeDashboard.TASKS' | translate }}</div>\r" +
	    "\n" +
	    "            </uib-tab-heading>\r" +
	    "\n" +
	    "        </uib-tab>\r" +
	    "\n" +
	    "    </uib-tabset>\r" +
	    "\n" +
	    "    <div class=\"panel\">\r" +
	    "\n" +
	    "        <md-progress-circular class=\"ws-progress-circular ws-progress-centered\"\r" +
	    "\n" +
	    "            ng-show=\"ctrl.loading\" md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "        <div class=\"panel-body\" ng-hide=\"ctrl.loading\">\r" +
	    "\n" +
	    "            <ui-view></ui-view>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/error/404.html',
	    "<div class=\"not-found\">\r" +
	    "\n" +
	    "    <img class=\"not-found-image\" src=\"//i.imgur.com/dowB8Sa.png\" alt=\"\"/>\r" +
	    "\n" +
	    "    <div class=\"row\">\r" +
	    "\n" +
	    "        <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "            <h1 class=\"not-found-text\">404 - {{::'crm.errors.404' | translate}}</h1>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/errorCard/errorCard.template.html',
	    "<div class=\"error-card-container\">\r" +
	    "\n" +
	    "    <img class=\"ws-error-img\" name=\"errorImage\" src=\"//i.imgur.com/l8LnIGg.png\" alt=\"\"/>\r" +
	    "\n" +
	    "    <div class=\"ws-error-text ws-error-text-primary\" name=\"errorTextPrimary\">{{ ::'crm.errors.SOMETHING_WENT_WRONG' | translate }}</div>\r" +
	    "\n" +
	    "    <div class=\"ws-error-text ws-error-text-secondary\" name=\"errorTextSecondary\">{{ ::'crm.errors.SORRY_FOR_INCONVENIENCE' | translate }}</div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/loyalty/loyaltySummary/loyaltySummaryTemplate.html',
	    "<div class=\"panel\">\r" +
	    "\n" +
	    "    <div class=\"panel-body\">\r" +
	    "\n" +
	    "        <div class=\"row\">\r" +
	    "\n" +
	    "            <div class=\"col-md-6 col-lg-12\">\r" +
	    "\n" +
	    "                <crm-loyalty-customer-summary loyalty-summary=\"ctrl.loyaltySummary\"\r" +
	    "\n" +
	    "                                              name=\"customerSummary\"></crm-loyalty-customer-summary>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-6 col-lg-12\">\r" +
	    "\n" +
	    "                <crm-loyalty-marketing loyalty-summary=\"ctrl.loyaltySummary\"\r" +
	    "\n" +
	    "                                       name=\"marketingSummary\"></crm-loyalty-marketing>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"row\">\r" +
	    "\n" +
	    "            <div class=\"col-md-6 col-lg-12\">\r" +
	    "\n" +
	    "                <crm-loyalty-sales loyalty-summary=\"ctrl.loyaltySummary\" name=\"salesSummary\"></crm-loyalty-sales>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-6 col-lg-12\">\r" +
	    "\n" +
	    "                <crm-loyalty-qa loyalty-summary=\"ctrl.loyaltySummary\" name=\"qaSummary\"></crm-loyalty-qa>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"row\">\r" +
	    "\n" +
	    "            <div class=\"col-md-6 col-lg-12\">\r" +
	    "\n" +
	    "                <crm-loyalty-vehicles-owned loyalty-summary=\"ctrl.loyaltySummary\"\r" +
	    "\n" +
	    "                                            name=\"vehicleSummary\"></crm-loyalty-vehicles-owned>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-6 col-lg-12\">\r" +
	    "\n" +
	    "                <crm-loyalty-surveys loyalty-summary=\"ctrl.loyaltySummary\" name=\"surveySummary\"></crm-loyalty-surveys>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/loyalty/loyaltySummary/summaries/customer/LoyaltyCustomerSummary.html',
	    "<co-panel co-multi-transclusion class=\"ds-card\">\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-icon-badge status=\"inactive\" icon=\"fa-user\" bordered=\"true\" size=\"md\"></co-icon-badge>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        {{ ::'crm.loyalty.CUSTOMER_SUMMARY' | translate }}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <div ng-if=\"ctrl.loyaltySummary.customerSummary.customerSince\" name=\"customerSince\">{{ ::'crm.loyalty.CUSTOMER_SINCE' | translate }}\r" +
	    "\n" +
	    "            <crm-date mode=\"dateNumeric\" date-time=\"ctrl.loyaltySummary.customerSummary.customerSince\"></crm-date></div>\r" +
	    "\n" +
	    "        <div name=\"customerOwns\">{{ ::'crm.loyalty.OWNS' | translate }} {{ ctrl.loyaltySummary.customerSummary.vehiclesOwned || 0 }} {{ ::'crm.loyalty.VEHICLES' | translate }}</div>\r" +
	    "\n" +
	    "        <div class=\"text-success\" name=\"spentAtDealership\">{{ ctrl.loyaltySummary.customerSummary.spentAtDealership | currency }} {{ ::'crm.loyalty.TOTAL_SPENT_AT_DEALERSHIP' | translate }}</div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/loyalty/loyaltySummary/summaries/marketing/LoyaltyMarketing.html',
	    "<co-panel co-multi-transclusion class=\"ds-card\">\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-icon-badge status=\"inactive\" icon=\"fa-bullhorn\" bordered=\"true\" size=\"md\"></co-icon-badge>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        {{ ::'crm.loyalty.MARKETING' | translate }}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <div name=\"activeCampaigns\">{{ ctrl.loyaltySummary.marketingSummary.open || 0 }} {{ ::'crm.loyalty.ACTIVE_CAMPAIGNS' | translate }} / {{ ctrl.loyaltySummary.marketingSummary.completed || 0 }} {{ ::'crm.loyalty.COMPLETED' | translate }}</div>\r" +
	    "\n" +
	    "        <div class=\"ws-text-bad\" ng-if=\"ctrl.loyaltySummary.marketingSummary.emailOpenRate\" name=\"emailOpenRate\">{{ ctrl.loyaltySummary.marketingSummary.emailOpenRate }}% {{ ::'crm.loyalty.EMAIL_OPEN_RATE' | translate }}</div>\r" +
	    "\n" +
	    "        <div name=\"lastStep\">{{ ::'crm.loyalty.LAST_STEP_RAN' | translate }}\r" +
	    "\n" +
	    "            <crm-date mode=\"dateAgo\" date-time=\"ctrl.loyaltySummary.marketingSummary.lastStepDate\"></crm-date>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/loyalty/loyaltySummary/summaries/qa/LoyaltyQa.html',
	    "<co-panel co-multi-transclusion class=\"ds-card\">\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-icon-badge status=\"inactive\" icon=\"fa-fire-extinguisher\" bordered=\"true\" size=\"md\"></co-icon-badge>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        {{ ::'crm.loyalty.QA' | translate }}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <div name=\"qaOpenClosed\">{{ ctrl.loyaltySummary.qaSummary.open || 0 }} {{ ::'crm.loyalty.OPEN_TICKETS' | translate }} / {{ ctrl.loyaltySummary.qaSummary.closed || 0 }} {{ ::'crm.loyalty.CLOSED' | translate }}</div>\r" +
	    "\n" +
	    "        <div class=\"ws-text-bad\" ng-if=\"ctrl.loyaltySummary.qaSummary.resolvedRate\" name=\"qaResolvedRate\">{{ ctrl.loyaltySummary.qaSummary.resolvedRate }}% {{ ::'crm.loyalty.RESOLVED' | translate }}</div>\r" +
	    "\n" +
	    "        <div name=\"qaLastTicketResolved\">{{ ::'crm.loyalty.LAST_TICKET_RESOLVED' | translate }}\r" +
	    "\n" +
	    "            <crm-date mode=\"dateAgo\" date-time=\"ctrl.loyaltySummary.qaSummary.lastResolvedDate\"></crm-date>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/loyalty/loyaltySummary/summaries/sales/LoyaltySales.html',
	    "<co-panel co-multi-transclusion class=\"ds-card\">\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-icon-badge status=\"inactive\" icon=\"fa-usd\" bordered=\"true\" size=\"md\"></co-icon-badge>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        {{ ::'crm.loyalty.SALES' | translate }}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <div name=\"salesOpenSold\">{{ ctrl.loyaltySummary.salesSummary.open || 0 }} {{ ::'crm.loyalty.OPEN_OPPORTUNITIES' | translate }} / {{ ctrl.loyaltySummary.salesSummary.sold || 0 }} {{ ::'crm.loyalty.SOLD' | translate }}</div>\r" +
	    "\n" +
	    "        <div name=\"salesVehiclesPurchased\">{{ ::'crm.loyalty.PURCHASED' | translate }} {{ ctrl.loyaltySummary.salesSummary.vehiclesPurchased || 0 }} {{ ::'crm.loyalty.VEHICLES' | translate }} / <span class=\"ws-text-good\">{{ ctrl.loyaltySummary.salesSummary.spentOnVehicles | currency }} {{ ::'crm.loyalty.TOTAL' | translate }}</span></div>\r" +
	    "\n" +
	    "        <div name=\"salesLastPurchaseDate\">{{ ::'crm.loyalty.LAST_PURCHASE_MADE' | translate }}\r" +
	    "\n" +
	    "            <crm-date mode=\"dateAgo\" date-time=\"ctrl.loyaltySummary.salesSummary.lastPurchaseDate\"></crm-date>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/loyalty/loyaltySummary/summaries/surveys/LoyaltySurveys.html',
	    "<co-panel co-multi-transclusion class=\"ds-card\">\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-icon-badge status=\"inactive\" icon=\"fa-thumbs-up\" bordered=\"true\" size=\"md\"></co-icon-badge>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        {{ ::'crm.loyalty.SURVEYS' | translate }}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <div name=\"surveySentResponded\">{{ ctrl.loyaltySummary.surveySummary.responded || 0 }} {{ ::'crm.loyalty.RESPONDED' | translate }} / {{ ctrl.loyaltySummary.surveySummary.responded || 0 }} {{ ::'crm.loyalty.RESPONDED' | translate }}</div>\r" +
	    "\n" +
	    "        <div class=\"ws-text-good\" ng-if=\"ctrl.loyaltySummary.surveySummary.averageScore\" name=\"surveyAverageScore\">{{ ctrl.loyaltySummary.surveySummary.averageScore }}% {{ ::'crm.loyalty.AVERAGE_SCORE' | translate }}</div>\r" +
	    "\n" +
	    "        <div name=\"lastSurveySent\">{{ ::'crm.loyalty.LAST_SURVEY_SENT' | translate }}\r" +
	    "\n" +
	    "            <crm-date mode=\"dateAgo\" date-time=\"ctrl.loyaltySummary.surveySummary.lastSentDate\"></crm-date>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/loyalty/loyaltySummary/summaries/vehicles/LoyaltyVehiclesOwned.html',
	    "<co-panel co-multi-transclusion class=\"ds-card\">\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-icon-badge status=\"inactive\" icon=\"fa-wrench\" bordered=\"true\" size=\"md\"></co-icon-badge>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        {{ ::'crm.loyalty.VEHICLES_OWNED' | translate }}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <div name=\"vehiclesOpenClosed\">{{ ctrl.loyaltySummary.serviceSummary.open || 0 }} {{ ::'crm.loyalty.OPEN_OPPORTUNITIES' | translate }} / {{ ctrl.loyaltySummary.serviceSummary.closed || 0 }} {{ ::'crm.loyalty.CLOSED' | translate }}</div>\r" +
	    "\n" +
	    "        <div class=\"ws-text-good\" name=\"vehiclesAmountSpent\">{{ ctrl.loyaltySummary.serviceSummary.amountSpent | currency }} {{ ::'crm.loyalty.TOTAL' | translate }} / {{ ctrl.loyaltySummary.serviceSummary.spentThisYear | currency }} {{ ::'crm.loyalty.THIS_YEAR' | translate }}</div>\r" +
	    "\n" +
	    "        <div name=\"vehiclesLastServiced\">{{ ::'crm.loyalty.LAST_SERVICED' | translate }}\r" +
	    "\n" +
	    "            <crm-date mode=\"dateAgo\" date-time=\"ctrl.loyaltySummary.serviceSummary.servicedLast\"></crm-date>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/marketingTools/businessRuleManager/businessRuleManagerTemplate.html',
	    "<div class=\"ws-absolute-fill ws-flex-container\">\r" +
	    "\n" +
	    "    <iframe ng-src=\"{{ctrl.getBusinessRuleManagerUrl()}}\" height=\"100%\" width=\"100%\" name=\"data\" frameborder=\"0\"></iframe>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/marketingTools/campaignManager/campaignManagerTemplate.html',
	    "<div class=\"ws-absolute-fill ws-flex-container\">\r" +
	    "\n" +
	    "    <iframe ng-src=\"{{ctrl.getCampaignManagerUrl()}}\" height=\"100%\" width=\"100%\" name=\"data\" frameborder=\"0\"></iframe>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/marketingTools/documentManager/documentManagerTemplate.html',
	    "<div class=\"ws-absolute-fill ws-flex-container\">\r" +
	    "\n" +
	    "    <iframe ng-src=\"{{ctrl.getDocumentManagerUrl()}}\" height=\"100%\" width=\"100%\" name=\"data\" frameborder=\"0\"></iframe>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/marketingTools/emailMyCustomer/emailMyCustomerTemplate.html',
	    "<div class=\"ws-absolute-fill ws-flex-container\">\r" +
	    "\n" +
	    "    <iframe ng-src=\"{{ctrl.getEmailMyCustomerUrl()}}\" height=\"100%\" width=\"100%\" name=\"data\" frameborder=\"0\"></iframe>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/marketingTools/emailQueue/emailQueueTemplate.html',
	    "<div class=\"ws-absolute-fill ws-flex-container\">\r" +
	    "\n" +
	    "    <iframe ng-src=\"{{ctrl.getEmailQueueUrl()}}\" height=\"100%\" width=\"100%\" name=\"data\" frameborder=\"0\"></iframe>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/marketingTools/emailTemplates/emailTemplatesTemplate.html',
	    "<div class=\"ws-absolute-fill ws-flex-container\">\r" +
	    "\n" +
	    "    <iframe ng-src=\"{{ctrl.getEmailTemplatesUrl()}}\" height=\"100%\" width=\"100%\" name=\"data\" frameborder=\"0\"></iframe>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/marketingTools/listBuilder/listBuilderTemplate.html',
	    "<div class=\"ws-absolute-fill ws-flex-container\">\r" +
	    "\n" +
	    "    <iframe ng-src=\"{{ctrl.getListBuilderUrl()}}\" height=\"100%\" width=\"100%\" name=\"data\" frameborder=\"0\"></iframe>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/marketingTools/marketingToolsHelp/marketingToolsHelpTemplate.html',
	    "<div class=\"ws-absolute-fill ws-flex-container\">\r" +
	    "\n" +
	    "    <iframe ng-src=\"{{ctrl.getMarketingToolsHelpUrl()}}\" height=\"100%\" width=\"100%\" name=\"data\" frameborder=\"0\"></iframe>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/marketingTools/printQueue/printQueueTemplate.html',
	    "<div class=\"ws-absolute-fill ws-flex-container\">\r" +
	    "\n" +
	    "    <iframe ng-src=\"{{ctrl.getPrintQueueUrl()}}\" height=\"100%\" width=\"100%\" name=\"data\" frameborder=\"0\"></iframe>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/marketingTools/textQueue/textQueueTemplate.html',
	    "<div class=\"ws-absolute-fill ws-flex-container\">\r" +
	    "\n" +
	    "    <iframe ng-src=\"{{ctrl.getTextQueueUrl()}}\" height=\"100%\" width=\"100%\" name=\"data\" frameborder=\"0\"></iframe>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/add/activityModalTemplate.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-primary panel-modal\">\r" +
	    "\n" +
	    "        <div class=\"panel-heading ws-panel-heading-no-separator\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "                <h3 class=\"panel-title ws-flex-fill-even\" ng-if=\"ctrl.isPhoneUp()\">{{::'crm.salesOpportunity.headers.CREATE_MODAL_TITLE_PHONE_UP' | translate}}</h3>\r" +
	    "\n" +
	    "                <h3 class=\"panel-title ws-flex-fill-even\" ng-if=\"ctrl.isFreshUp()\">{{::'crm.salesOpportunity.headers.CREATE_MODAL_TITLE_FRESH_UP' | translate}}</h3>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"relative\">\r" +
	    "\n" +
	    "            <crm-log-phone-call ng-if=\"ctrl.isPhoneUp()\"\r" +
	    "\n" +
	    "                                activity=\"ctrl.activityTimelineItem.activity\"\r" +
	    "\n" +
	    "                                contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                on-save=\"ctrl.submitActionModal()\"\r" +
	    "\n" +
	    "                                can-cancel=\"false\">\r" +
	    "\n" +
	    "            </crm-log-phone-call>\r" +
	    "\n" +
	    "            <crm-log-store-visit\r" +
	    "\n" +
	    "                    ng-if=\"ctrl.isFreshUp()\"\r" +
	    "\n" +
	    "                    contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                    activity-timeline-item=\"ctrl.activityTimelineItem\"\r" +
	    "\n" +
	    "                    on-save=\"ctrl.submitActionModal()\"\r" +
	    "\n" +
	    "                    can-cancel=\"false\">\r" +
	    "\n" +
	    "            </crm-log-store-visit>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/add/details/template.html',
	    "<div class=\"panel panel-default\" name=\"contactCard\" co-loading=\"ctrl.isLoading\">\r" +
	    "\n" +
	    "    <div class=\"ws-detail-view-content-group-title\" name=\"opportunityInfoTitle\">\r" +
	    "\n" +
	    "            {{::'crm.salesOpportunity.headers.OPPORTUNITY_INFO' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel panel-body\">\r" +
	    "\n" +
	    "        <div class=\"row\">\r" +
	    "\n" +
	    "            <div ng-class=\"ctrl.franchises.length > 1 ? 'ws-col-franchise-20' : 'col-sm-3'\">\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label name=\"sourceLabel\">{{::'crm.salesOpportunity.headers.SOURCE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select name=\"source\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.salesOpportunity.source\"\r" +
	    "\n" +
	    "                            ng-options=\"subType.text for subType in ctrl.salesRefDefs['sales.source'] track by subType.value\"\r" +
	    "\n" +
	    "                            class=\"form-control\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.salesOpportunity.source.value}\"\r" +
	    "\n" +
	    "                            ng-required=\"true\"></select>\r" +
	    "\n" +
	    "                    <span ng-show=\"ctrl.form.$submitted && !ctrl.salesOpportunity.source.value\" class=\"form-invalid-message\"\r" +
	    "\n" +
	    "                          name=\"sourceInvalidError\">{{::'crm.contact.headers.REQUIRED' | translate}}</span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-class=\"ctrl.franchises.length > 1 ? 'ws-col-franchise-20' : 'col-sm-3'\">\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label name=\"trackingCodeLabel\">{{::'crm.salesOpportunity.headers.TRACKING_CODE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select name=\"trackingCode\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.salesOpportunity.trackingCode\"\r" +
	    "\n" +
	    "                            ng-options=\"subType.text for subType in ctrl.salesRefDefs['sales.trackingCode'] track by subType.value\"\r" +
	    "\n" +
	    "                            class=\"form-control\"></select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-class=\"ctrl.franchises.length > 1 ? 'ws-col-franchise-20' : 'col-sm-3'\">\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label name=\"primaryLabel\">{{::'crm.salesOpportunity.headers.PRIMARY' | translate}}</label>\r" +
	    "\n" +
	    "                    <select name=\"primary\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.salesOpportunity.primaryAssigned\"\r" +
	    "\n" +
	    "                            ng-options=\"user.text for user in ctrl.users track by user.value\"\r" +
	    "\n" +
	    "                            class=\"form-control\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.salesOpportunity.primaryAssigned.text}\"\r" +
	    "\n" +
	    "                            ng-required=\"true\">\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                    <span ng-show=\"ctrl.form.$submitted && !ctrl.salesOpportunity.primaryAssigned.text\"\r" +
	    "\n" +
	    "                          class=\"form-invalid-message\"\r" +
	    "\n" +
	    "                          name=\"primaryInvalidError\">{{::'crm.contact.headers.REQUIRED' | translate}}</span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-class=\"ctrl.franchises.length > 1 ? 'ws-col-franchise-20' : 'col-sm-3'\">\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label name=\"bdcAssignedLabel\">{{::'crm.salesOpportunity.headers.BDC' | translate}}</label>\r" +
	    "\n" +
	    "                    <select name=\"bdcAssigned\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.salesOpportunity.bdcAssigned\"\r" +
	    "\n" +
	    "                            ng-options=\"user.text for user in ctrl.users track by user.value\"\r" +
	    "\n" +
	    "                            class=\"form-control\"></select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-show=\"ctrl.franchises.length > 1\" class=\"ws-col-franchise-20\">\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label name=\"franchiseLabel\">{{::'crm.salesOpportunity.headers.FRANCHISE' |translate}}</label>\r" +
	    "\n" +
	    "                    <select name=\"franchise\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.salesOpportunity.franchise\"\r" +
	    "\n" +
	    "                            ng-options=\"franchises.text for franchises in ctrl.franchises track by franchises.value\"\r" +
	    "\n" +
	    "                            class=\"form-control\"></select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-show=\"ctrl.expanded\" ng-class=\"ctrl.franchise ? 'ws-col-franchise-20' : 'col-sm-3'\">\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label name=\"secondaryLabel\">{{::'crm.salesOpportunity.headers.SECONDARY' | translate}}</label>\r" +
	    "\n" +
	    "                    <select name=\"secondaryAssigned\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.salesOpportunity.secondaryAssigned\"\r" +
	    "\n" +
	    "                            ng-options=\"user.text for user in ctrl.users track by user.value\"\r" +
	    "\n" +
	    "                            class=\"form-control\"></select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-show=\"ctrl.expanded\" ng-class=\"ctrl.franchise ? 'ws-col-franchise-20' : 'col-sm-3'\">\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label name=\"opportunityTypeLabel\">{{::'crm.salesOpportunity.headers.OPPORTUNITY_TYPE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select name=\"opportunityType\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.salesOpportunity.type\"\r" +
	    "\n" +
	    "                            ng-options=\"subType.text for subType in ctrl.salesRefDefs['sales.type'] track by subType.value\"\r" +
	    "\n" +
	    "                            class=\"form-control\"></select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-show=\"ctrl.expanded\" ng-class=\"ctrl.franchise ? 'ws-col-franchise-20' : 'col-sm-3'\">\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label name=\"purchaseTypeLabel\">{{::'crm.salesOpportunity.headers.PURCHASE_TYPE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select name=\"purchaseType\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.salesOpportunity.purchaseType\"\r" +
	    "\n" +
	    "                            ng-options=\"subType.text for subType in ctrl.salesRefDefs['sales.subtype'] track by subType.value\"\r" +
	    "\n" +
	    "                            class=\"form-control\"></select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-show=\"ctrl.expanded\" ng-class=\"ctrl.franchise ? 'ws-col-franchise-20' : 'col-sm-3'\">\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label name=\"closeDateLabel\">{{::'crm.salesOpportunity.headers.CLOSE_DATE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select name=\"closeDate\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.salesOpportunity.closeDate\"\r" +
	    "\n" +
	    "                            ng-options=\"subType.text for subType in ctrl.salesRefDefs['sales.forecast'] track by subType.value\"\r" +
	    "\n" +
	    "                            class=\"form-control\"></select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-show=\"ctrl.expanded\" ng-class=\"ctrl.franchise ? 'ws-col-franchise-20' : 'col-sm-3'\">\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label name=\"rankingLabel\">{{::'crm.salesOpportunity.headers.RANKING' | translate}}</label>\r" +
	    "\n" +
	    "                    <select name=\"ranking\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.salesOpportunity.ranking\"\r" +
	    "\n" +
	    "                            ng-options=\"subType.text for subType in ctrl.salesRefDefs['sales.rank'] track by subType.value\"\r" +
	    "\n" +
	    "                            class=\"form-control\"></select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-show=\"ctrl.expanded\" ng-class=\"ctrl.franchise ? 'col-sm-12' : 'col-sm-9'\">\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label name=\"descriptionLabel\">{{::'crm.salesOpportunity.headers.DESCRIPTION' | translate}}</label>\r" +
	    "\n" +
	    "                    <input name=\"description\" type=\"text\" class=\"form-control\" ng-model=\"ctrl.salesOpportunity.description\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-expander-button panel-footer\"\r" +
	    "\n" +
	    "         ng-class=\"{'ws-expanded': ctrl.expanded}\"\r" +
	    "\n" +
	    "         ng-click=\"ctrl.expanded = !ctrl.expanded\">\r" +
	    "\n" +
	    "        <a class=\"ws-expander-button-content\"\r" +
	    "\n" +
	    "           name=\"viewToggle\">\r" +
	    "\n" +
	    "            <span ng-show=\"ctrl.expanded\">{{::'crm.salesOpportunity.headers.HIDE_ADDITIONAL_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "            <span ng-hide=\"ctrl.expanded\">{{::'crm.salesOpportunity.headers.SHOW_ALL_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/salesOpportunity/add/template.html',
	    "<div class=\"detail-view-container ws-flex-container\"\r" +
	    "\n" +
	    "     co-loading=\"ctrl.isLoading\" loading-show-children=\"true\">\r" +
	    "\n" +
	    "    <div class=\"detail-view-header\">\r" +
	    "\n" +
	    "        <div class=\"ws-action-bar\">\r" +
	    "\n" +
	    "            <h1 class=\"detail-view-title\">{{ ::'crm.contact.headers.ADD_SALES_OPPORTUNITY' | translate }}</h1>\r" +
	    "\n" +
	    "            <div class=\"ws-action-spacer\"></div>\r" +
	    "\n" +
	    "            <button type=\"button\" class=\"btn ws-primary-action\" name=\"saveButton\" ng-disabled=\"ctrl.isSaving\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.submit(ctrl.addSalesOpportunityForm)\">\r" +
	    "\n" +
	    "                {{ ::'crm.actions.SAVE_AND_FINISH' | translate}}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"detail-view-content\">\r" +
	    "\n" +
	    "        <crm-alert alert-names=\"['SALES_OPPORTUNITY_CREATE_FAILED', 'VEHICLE_OF_INTEREST_LOADING_EVENT_KEY']\"></crm-alert>\r" +
	    "\n" +
	    "        <div class=\"row ws-layout-row\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-12 col-lg-5\">\r" +
	    "\n" +
	    "                <crm-contact-card ng-show=\"ctrl.contact\" contact=\"ctrl.contact\"></crm-contact-card>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-xs-12 col-lg-7\">\r" +
	    "\n" +
	    "                <div class=\"row ws-layout-row\">\r" +
	    "\n" +
	    "                    <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                        <div class=\"ws-detail-view-content-group\">\r" +
	    "\n" +
	    "                            <form name=\"ctrl.addSalesOpportunityForm\">\r" +
	    "\n" +
	    "                                <crm-add-sales-opportunity-details sales-opportunity=\"ctrl.salesOpportunity\"\r" +
	    "\n" +
	    "                                                                   invalid=\"ctrl.invalid\"\r" +
	    "\n" +
	    "                                                                   form=\"ctrl.addSalesOpportunityForm\"></crm-add-sales-opportunity-details>\r" +
	    "\n" +
	    "                            </form>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                        <div class=\"ws-detail-view-content-group\">\r" +
	    "\n" +
	    "                            <uib-tabset>\r" +
	    "\n" +
	    "                                <uib-tab>\r" +
	    "\n" +
	    "                                    <uib-tab-heading name=\"vehicleOfInterestTab\">\r" +
	    "\n" +
	    "                                        <div class=\"tab-title\">\r" +
	    "\n" +
	    "                                            {{ ::'crm.vehicle.panel.VEHICLES_OF_INTEREST' | translate }}\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </uib-tab-heading>\r" +
	    "\n" +
	    "                                    <co-panel co-multi-transclusion>\r" +
	    "\n" +
	    "                                        <div transclude-to=\"main\">\r" +
	    "\n" +
	    "                                            <section class=\"ws-panel\" co-loading=\"ctrl.isLoadingVoi\">\r" +
	    "\n" +
	    "                                                <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "                                                    <div class=\"ws-advanced-search-row\">\r" +
	    "\n" +
	    "                                                        <crm-quick-inventory-search class=\"ws-advanced-search-field\"\r" +
	    "\n" +
	    "                                                                                    on-select=\"ctrl.onSelect(inventory)\"></crm-quick-inventory-search>\r" +
	    "\n" +
	    "                                                        <div class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                                                            <a ng-click=\"ctrl.addManualVehicleOfInterest()\"\r" +
	    "\n" +
	    "                                                               name=\"addNotInStockVehicle\">\r" +
	    "\n" +
	    "                                                                {{::\"crm.salesOpportunity.vehicleOfInterest.NOT_IN_STOCK_QUESTION\" | translate}}\r" +
	    "\n" +
	    "                                                            </a>\r" +
	    "\n" +
	    "                                                        </div>\r" +
	    "\n" +
	    "                                                    </div>\r" +
	    "\n" +
	    "                                                </div>\r" +
	    "\n" +
	    "                                                <div class=\"ws-panel-row\"></div>\r" +
	    "\n" +
	    "                                                <crm-vehicle-of-interest-card-container\r" +
	    "\n" +
	    "                                                        ng-repeat=\"voi in ctrl.salesOpportunity.vehiclesOfInterest\"\r" +
	    "\n" +
	    "                                                        vehicle-of-interest=\"voi\"\r" +
	    "\n" +
	    "                                                        top-choice=\"voi.preferred\"\r" +
	    "\n" +
	    "                                                        transclude-to=\"row\"></crm-vehicle-of-interest-card-container>\r" +
	    "\n" +
	    "                                            </section>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </co-panel>\r" +
	    "\n" +
	    "                                </uib-tab>\r" +
	    "\n" +
	    "                                <uib-tab>\r" +
	    "\n" +
	    "                                    <uib-tab-heading name=\"vehicleOfInterestTab\">\r" +
	    "\n" +
	    "                                        <div class=\"tab-title\" name=\"tradesTabCount\">\r" +
	    "\n" +
	    "                                            {{ ::'crm.vehicle.panel.TRADES' | translate }}\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </uib-tab-heading>\r" +
	    "\n" +
	    "                                    <crm-sales-opportunity-trades-panel\r" +
	    "\n" +
	    "                                            ng-if=\"ctrl.contact && ctrl.salesOpportunity\"\r" +
	    "\n" +
	    "                                            contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                            sales-opportunity=\"ctrl.salesOpportunity\">\r" +
	    "\n" +
	    "                                    </crm-sales-opportunity-trades-panel>\r" +
	    "\n" +
	    "                                </uib-tab>\r" +
	    "\n" +
	    "                            </uib-tabset>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/add/workNoteModalTemplate.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-primary panel-modal\">\r" +
	    "\n" +
	    "        <div class=\"panel-heading ws-panel-heading-no-separator\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "                <h3 class=\"panel-title ws-flex-fill-even\">{{::'crm.salesOpportunity.headers.CREATE_MODAL_TITLE' | translate}}</h3>\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.closeActionModal()\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-body\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-12\">\r" +
	    "\n" +
	    "                    <div class=\"form-group\">\r" +
	    "\n" +
	    "                        <!--event type is hard coded to sales for now because this modal only shows up for sales opportunities.-->\r" +
	    "\n" +
	    "                        <crm-activity-bar\r" +
	    "\n" +
	    "                                event-type=\"ctrl.OpportunityEventType.sales\"\r" +
	    "\n" +
	    "                                create-activity=\"ctrl.createActivity\"\r" +
	    "\n" +
	    "                                event-id=\"ctrl.salesOpportunity.id\"\r" +
	    "\n" +
	    "                                contact-id=\"ctrl.contact.id\"></crm-activity-bar>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-12\">\r" +
	    "\n" +
	    "                    <div class=\"form-group\">\r" +
	    "\n" +
	    "                        <textarea class=\"form-control\"\r" +
	    "\n" +
	    "                                  placeholder=\"{{ ::'crm.salesOpportunity.headers.CREATE_MODAL_PLACEHOLDER' | translate}}\"\r" +
	    "\n" +
	    "                                  ng-model=\"ctrl.workNote\"></textarea>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-footer\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                    <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                        <button class=\"btn btn-primary\"\r" +
	    "\n" +
	    "                                name=\"submit\"\r" +
	    "\n" +
	    "                                ng-click=\"ctrl.submitActionModal()\">\r" +
	    "\n" +
	    "                            {{ ::'crm.salesOpportunity.headers.SUBMIT' | translate }}\r" +
	    "\n" +
	    "                        </button>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/details/cobuyer/addCobuyerTemplate.html',
	    "<form name=\"ctrl.addCobuyerForm\" co-on-focusout=\"ctrl.updateAlert(ctrl.addCobuyerForm)\" novalidate\r" +
	    "\n" +
	    "      co-loading=\"ctrl.isLoading\">\r" +
	    "\n" +
	    "    <div class=\"panel\">\r" +
	    "\n" +
	    "        <div class=\"row\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                <duplicate-contact-banner contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                          on-select=\"ctrl.saveSalesOpportunity(contact)\"></duplicate-contact-banner>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <crm-contact-info contact=\"ctrl.contact\" expanded=\"ctrl.expanded\" form=\"ctrl.addCobuyerForm\"\r" +
	    "\n" +
	    "                          prefix-ref-defs=\"ctrl.individualRefDefs['individual.salutation']\">\r" +
	    "\n" +
	    "        </crm-contact-info>\r" +
	    "\n" +
	    "        <crm-address title=\"{{ ::'crm.address.headers.ADDRESS' | translate}}\" contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                     expanded=\"ctrl.expanded\" form=\"ctrl.addCobuyerForm\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        </crm-address>\r" +
	    "\n" +
	    "        <crm-individual-other-info contact=\"ctrl.contact\" expanded=\"ctrl.expanded\"\r" +
	    "\n" +
	    "                                   preferred-language-ref-defs=\"ctrl.individualRefDefs['pref.languages']\"\r" +
	    "\n" +
	    "                                   contact-types=\"ctrl.individualRefDefs['individual.type']\"\r" +
	    "\n" +
	    "                                   contact-sources=\"ctrl.individualRefDefs['individual.source']\"\r" +
	    "\n" +
	    "                                   show-relationship=\"true\"\r" +
	    "\n" +
	    "                                   relationship-ref-defs=\"ctrl.connectionRefDefs\"\r" +
	    "\n" +
	    "                                   relationship-type-limited=\"true\">\r" +
	    "\n" +
	    "        </crm-individual-other-info>\r" +
	    "\n" +
	    "        <div class=\"panel\">\r" +
	    "\n" +
	    "            <div class=\"panel-body panel-no-padding-top\">\r" +
	    "\n" +
	    "                <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "                    <div class=\"col-md-4 col-lg-6 form-group\">\r" +
	    "\n" +
	    "                        <label name=\"relationshipCategoryLabel\">{{::'crm.otherInfo.headers.RELATIONSHIP_CATEGORY' |\r" +
	    "\n" +
	    "                            translate}}</label>\r" +
	    "\n" +
	    "                        <select name=\"relationshipCategory\" class=\"form-control\" ng-model=\"ctrl.connectionType\"\r" +
	    "\n" +
	    "                                ng-disabled=\"true\"\r" +
	    "\n" +
	    "                                ng-options=\"type.text for type in ctrl.connectionRefDefs['contact.type'] track by type.value\"></select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-md-4 col-lg-6 form-group\">\r" +
	    "\n" +
	    "                        <label name=\"relationshipTypeLabel\">{{::'crm.otherInfo.headers.RELATIONSHIP_TYPE' |\r" +
	    "\n" +
	    "                            translate}}</label>\r" +
	    "\n" +
	    "                        <select name=\"relationshipType\" class=\"form-control\" ng-model=\"ctrl.connectionSubType\"\r" +
	    "\n" +
	    "                                ng-disabled=\"isLoading\"\r" +
	    "\n" +
	    "                                ng-options=\"subtype.text for subtype in ctrl.connectionSubTypes[ctrl.connectionType] track by subType.value\"></select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-md-12\">\r" +
	    "\n" +
	    "                        <a class=\"ws-btn-link\" name=\"addCobuyerSearchExistingCustomer\" ng-click=\"ctrl.openSearchModal()\">{{::'crm.cobuyer.SEARCH_TO_ADD_EXISTING' | translate}}</a>\r" +
	    "\n" +
	    "                        <button class=\"btn btn-primary ws-btn-panel-action\" name=\"saveCobuyerButton\"\r" +
	    "\n" +
	    "                                ng-click=\"ctrl.saveCobuyer()\" ng-disabled=\"ctrl.isSaveButtonDisabled || !ctrl.addCobuyerForm.$valid\">\r" +
	    "\n" +
	    "                            {{::'crm.cobuyer.ADD_COBUYER' | translate}}\r" +
	    "\n" +
	    "                        </button>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div name=\"viewToggle\"\r" +
	    "\n" +
	    "             class=\"ws-expander-button panel-footer\"\r" +
	    "\n" +
	    "             ng-class=\"{'ws-expanded': ctrl.expanded}\"\r" +
	    "\n" +
	    "             ng-click=\"ctrl.expanded = !ctrl.expanded\">\r" +
	    "\n" +
	    "            <a class=\"ws-expander-button-content\"\r" +
	    "\n" +
	    "               name=\"viewToggle\">\r" +
	    "\n" +
	    "                <span ng-hide=\"ctrl.expanded\">{{::'crm.contact.SHOW_ALL_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "                <span ng-show=\"ctrl.expanded\">{{::'crm.contact.HIDE_EXTRA_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "            </a>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</form>\r" +
	    "\n"
	  );


	  $templateCache.put('app/salesOpportunity/details/panel/detailPanelTemplate.html',
	    "<div class=\"row ws-layout-row\">\r" +
	    "\n" +
	    "    <div class=\"col-xs-12 col-lg-5 col-xxl-4\">\r" +
	    "\n" +
	    "        <div class=\"row ws-layout-row\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                <div class=\"ws-detail-view-content-group\">\r" +
	    "\n" +
	    "                    <uib-tabset active=\"ctrl.customerActiveTab\">\r" +
	    "\n" +
	    "                        <uib-tab index=\"1\">\r" +
	    "\n" +
	    "                            <uib-tab-heading name=\"customerTab\">\r" +
	    "\n" +
	    "                                <div class=\"tab-title\">{{::'crm.contact.headers.CUSTOMER' | translate}}</div>\r" +
	    "\n" +
	    "                            </uib-tab-heading>\r" +
	    "\n" +
	    "                            <div ng-if=\"ctrl.customerActiveTab == 1\">\r" +
	    "\n" +
	    "                                <div ng-if=\"ctrl.isOrganization\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                                    <crm-organization-card contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                                           dealership-id=\"ctrl.salesOpportunity.dealershipId\"\r" +
	    "\n" +
	    "                                                           contact-type=\"{{ctrl.contactType}}\"\r" +
	    "\n" +
	    "                                                           show-full-profile=\"true\"></crm-organization-card>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div ng-if=\"!ctrl.isOrganization\">\r" +
	    "\n" +
	    "                                    <crm-individual-card contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                                         dealership-id=\"ctrl.salesOpportunity.dealershipId\"\r" +
	    "\n" +
	    "                                                         contact-type=\"{{ctrl.contactType}}\"\r" +
	    "\n" +
	    "                                                         show-full-profile=\"true\"></crm-individual-card>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </uib-tab>\r" +
	    "\n" +
	    "                        <uib-tab index=\"2\">\r" +
	    "\n" +
	    "                            <uib-tab-heading name=\"cobuyerTab\">\r" +
	    "\n" +
	    "                                <i ng-show=\"!ctrl.salesOpportunity.cobuyer\" class=\"fa fa-plus-circle\"></i>\r" +
	    "\n" +
	    "                                <span class=\"tab-title\">\r" +
	    "\n" +
	    "                                    {{::'crm.contact.COBUYER' | translate}}\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                            </uib-tab-heading>\r" +
	    "\n" +
	    "                            <div ng-if=\"ctrl.customerActiveTab == 2\">\r" +
	    "\n" +
	    "                                <section class=\"ws-panel\" ng-if=\"ctrl.salesOpportunity.cobuyer\">\r" +
	    "\n" +
	    "                                    <crm-connection-card contact=\"ctrl.salesOpportunity.buyer\"\r" +
	    "\n" +
	    "                                                         disable-edit-cross-site=\"ctrl.disableEditCrossSite\"\r" +
	    "\n" +
	    "                                                         connection=\"ctrl.coBuyerConnection\"\r" +
	    "\n" +
	    "                                                         is-cobuyer=\"true\"\r" +
	    "\n" +
	    "                                                         sales-opportunity-id=\"{{ctrl.salesOpportunity.id}}\"\r" +
	    "\n" +
	    "                                                         remove-connection=\"ctrl.removeCoBuyer()\"></crm-connection-card>\r" +
	    "\n" +
	    "                                </section>\r" +
	    "\n" +
	    "                                <section\r" +
	    "\n" +
	    "                                        ng-if=\"!ctrl.salesOpportunity.cobuyer && !ctrl.addingCobuyer || !ctrl.isCobuyerAddable()\"\r" +
	    "\n" +
	    "                                        class=\"ws-panel\">\r" +
	    "\n" +
	    "                                    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "                                        <button ng-if=\"!ctrl.disableEditCrossSite\" class=\"btn btn-tertiary btn-full-width\"\r" +
	    "\n" +
	    "                                                name=\"addCobuyerButton\"\r" +
	    "\n" +
	    "                                                ng-disabled=\"!ctrl.isCobuyerAddable()\"\r" +
	    "\n" +
	    "                                                ng-click=\"ctrl.onAddCobuyerClick()\">\r" +
	    "\n" +
	    "                                            <i class=\"fa fa-plus-circle\"></i>\r" +
	    "\n" +
	    "                                            {{::'crm.salesOpportunity.headers.ADD_COBUYER' | translate}}\r" +
	    "\n" +
	    "                                        </button>\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                </section>\r" +
	    "\n" +
	    "                                <crm-add-cobuyer ng-if=\"ctrl.addingCobuyer && ctrl.isCobuyerAddable()\"\r" +
	    "\n" +
	    "                                                 sales-opportunity=\"ctrl.salesOpportunity\"></crm-add-cobuyer>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </uib-tab>\r" +
	    "\n" +
	    "                        <uib-tab index=\"3\" disable=\"!ctrl.connectionPermission.view\">\r" +
	    "\n" +
	    "                            <uib-tab-heading name=\"connectionsTab\">\r" +
	    "\n" +
	    "                                <i ng-hide=\"ctrl.connectionsCount > 0\" class=\"fa fa-plus-circle\"></i>\r" +
	    "\n" +
	    "                                <span class=\"tab-title\">\r" +
	    "\n" +
	    "                                    {{::'crm.contact.headers.CONNECTIONS' | translate}}\r" +
	    "\n" +
	    "                                    <span ng-show=\"ctrl.connectionsCount > 0\"> ({{ ctrl.connectionsCount }})</span>\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                            </uib-tab-heading>\r" +
	    "\n" +
	    "                            <div ng-if=\"ctrl.customerActiveTab == 3\">\r" +
	    "\n" +
	    "                                <crm-connections ng-if=\"ctrl.connectionPermission.view\"\r" +
	    "\n" +
	    "                                                 contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                                 disable-edit-cross-site=\"ctrl.disableEditCrossSite\"></crm-connections>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </uib-tab>\r" +
	    "\n" +
	    "                        <uib-tab index=\"loyaltySummaryTab\">\r" +
	    "\n" +
	    "                            <uib-tab-heading name=\"loyaltySummaryTab\">\r" +
	    "\n" +
	    "                                <span class=\"tab-title\">\r" +
	    "\n" +
	    "                                    <span><i class=\"fa fa-circle ws-dot-primary\"></i></span>\r" +
	    "\n" +
	    "                                    <span>{{::'crm.contact.headers.LOYALTY_SUMMARY' | translate}}</span>\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                            </uib-tab-heading>\r" +
	    "\n" +
	    "                            <crm-loyalty-summary contact=\"ctrl.contact\" site-id=\"ctrl.salesOpportunity.dealershipId\"\r" +
	    "\n" +
	    "                                                 ng-if=\"ctrl.customerActiveTab == loyaltySummaryTab\"></crm-loyalty-summary>\r" +
	    "\n" +
	    "                        </uib-tab>\r" +
	    "\n" +
	    "                    </uib-tabset>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                <div class=\"ws-detail-view-content-group\" co-responsive-if=\"gt-md\">\r" +
	    "\n" +
	    "                    <uib-tabset class=\"icon-headings\" justified=\"true\" active=\"ctrl.largeEventActiveTab\">\r" +
	    "\n" +
	    "                        <uib-tab index=\"1\">\r" +
	    "\n" +
	    "                            <uib-tab-heading name=\"vehicleTab\">\r" +
	    "\n" +
	    "                                <div class=\"tab-title\">\r" +
	    "\n" +
	    "                                    {{::'crm.vehicle.panel.VEHICLES_OF_INTEREST' | translate }}\r" +
	    "\n" +
	    "                                    ({{ctrl.getVehicleOfInterestCount()}})\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div ng-if=\"ctrl.salesOpportunity.vehiclesOfInterest.length > 0\" class=\"tab-info\">\r" +
	    "\n" +
	    "                                    {{ctrl.getVehicleOfInterestTitle()}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </uib-tab-heading>\r" +
	    "\n" +
	    "                            <div ng-if=\"ctrl.largeEventActiveTab == 1\">\r" +
	    "\n" +
	    "                                <co-loading-container loading-key=\"VEHICLE_OF_INTEREST_LOADING_KEY\">\r" +
	    "\n" +
	    "                                    <co-loading-container loading-key=\"VEHICLE_OF_INTEREST_LOADING_KEY\">\r" +
	    "\n" +
	    "                                        <co-panel co-multi-transclusion>\r" +
	    "\n" +
	    "                                            <div transclude-to=\"main\">\r" +
	    "\n" +
	    "                                                <section class=\"ws-panel\">\r" +
	    "\n" +
	    "                                                    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "                                                        <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                                                        <div class=\"ws-advanced-search-row\" ng-if=\"!ctrl.disableEditCrossSite\">\r" +
	    "\n" +
	    "                                                            <crm-quick-inventory-search class=\"ws-advanced-search-field\"\r" +
	    "\n" +
	    "                                                                                        on-select=\"ctrl.onSelect(inventory)\"></crm-quick-inventory-search>\r" +
	    "\n" +
	    "                                                            <div class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                                                                <a ng-click=\"ctrl.addManualVehicleOfInterest()\"\r" +
	    "\n" +
	    "                                                                   name=\"addNotInStockVehicle\">{{::\"crm.salesOpportunity.vehicleOfInterest.NOT_IN_STOCK_QUESTION\"\r" +
	    "\n" +
	    "                                                                    | translate}}</a>\r" +
	    "\n" +
	    "                                                            </div>\r" +
	    "\n" +
	    "                                                        </div>\r" +
	    "\n" +
	    "                                                    </div>\r" +
	    "\n" +
	    "                                                    <div class=\"ws-panel-row\"></div>\r" +
	    "\n" +
	    "                                                    <crm-vehicle-of-interest-card-container\r" +
	    "\n" +
	    "                                                            ng-repeat=\"voi in ctrl.salesOpportunity.vehiclesOfInterest\"\r" +
	    "\n" +
	    "                                                            vehicle-of-interest=\"voi\"\r" +
	    "\n" +
	    "                                                            top-choice=\"voi.preferred\"\r" +
	    "\n" +
	    "                                                            transclude-to=\"row\"\r" +
	    "\n" +
	    "                                                            options=\"ctrl.vehicleOfInterestOptions\"></crm-vehicle-of-interest-card-container>\r" +
	    "\n" +
	    "                                                </section>\r" +
	    "\n" +
	    "                                            </div>\r" +
	    "\n" +
	    "                                        </co-panel>\r" +
	    "\n" +
	    "                                    </co-loading-container>\r" +
	    "\n" +
	    "                                </co-loading-container>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </uib-tab>\r" +
	    "\n" +
	    "                        <uib-tab select=\"ctrl.onTabSelected(ctrl.CrmConstants.SALES_OPPORTUNITY.TRADES.NAME)\"\r" +
	    "\n" +
	    "                                 tab-excluded index=\"2\">\r" +
	    "\n" +
	    "                            <uib-tab-heading name=\"tradesTab\">\r" +
	    "\n" +
	    "                                <div class=\"tab-title\" name=\"tradesTabCount\">\r" +
	    "\n" +
	    "                                    {{:: 'crm.vehicle.panel.TRADES' | translate }}\r" +
	    "\n" +
	    "                                    <span ng-show=\"ctrl.tradesCount >= 0\"> ({{ctrl.tradesCount}})</span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"tab-info\"\r" +
	    "\n" +
	    "                                     ng-show=\"ctrl.getTradeDescriptionInfo()\"\r" +
	    "\n" +
	    "                                     name=\"tradesDescriptionInfo\">\r" +
	    "\n" +
	    "                                    {{ctrl.getTradeDescriptionInfo()}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </uib-tab-heading>\r" +
	    "\n" +
	    "                            <div>\r" +
	    "\n" +
	    "                                <crm-sales-opportunity-trades-panel\r" +
	    "\n" +
	    "                                        ng-if=\"ctrl.salesOpportunity\"\r" +
	    "\n" +
	    "                                        contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                        sales-opportunity=\"ctrl.salesOpportunity\"\r" +
	    "\n" +
	    "                                        trades-options=\"ctrl.tradesOptions\">\r" +
	    "\n" +
	    "                                </crm-sales-opportunity-trades-panel>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </uib-tab>\r" +
	    "\n" +
	    "                    </uib-tabset>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"col-xs-12 col-lg-7 col-xxl-8\">\r" +
	    "\n" +
	    "        <div class=\"ws-detail-view-content-group\" co-responsive-if=\"lt-lg\">\r" +
	    "\n" +
	    "            <uib-tabset class=\"icon-headings\" justified=\"true\" active=\"ctrl.mediumEventActiveTab\">\r" +
	    "\n" +
	    "                <uib-tab index=\"1\">\r" +
	    "\n" +
	    "                    <uib-tab-heading name=\"activityTab\">\r" +
	    "\n" +
	    "                        <div class=\"tab-title\">{{:: 'crm.contact.headers.OPPORTUNITY_TIMELINE' | translate }}\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"tab-info\"></div>\r" +
	    "\n" +
	    "                    </uib-tab-heading>\r" +
	    "\n" +
	    "                    <div ng-if=\"ctrl.mediumEventActiveTab == 1\">\r" +
	    "\n" +
	    "                        <section class=\"ws-panel\">\r" +
	    "\n" +
	    "                            <div initial-height=\"{{ctrl.initialHeight}}\">\r" +
	    "\n" +
	    "                                <crm-activities-list contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                                     event=\"ctrl.salesOpportunity\"\r" +
	    "\n" +
	    "                                                     event-type=\"ctrl.OpportunityEventType.sales\">\r" +
	    "\n" +
	    "                                    <div class=\"pull-right ws-not-in-market\">\r" +
	    "\n" +
	    "                                        <div class=\"pull-left ws-status\"\r" +
	    "\n" +
	    "                                             ng-class=\"{'ws-active':!ctrl.salesOpportunity.lost}\"\r" +
	    "\n" +
	    "                                             ng-click=\"ctrl.activateSalesOpportunity()\">\r" +
	    "\n" +
	    "                                            {{::'crm.salesOpportunity.status.ACTIVE' | translate }}\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                        <span class=\"switch\" ng-class=\"{'checked':!ctrl.salesOpportunity.lost}\"\r" +
	    "\n" +
	    "                                              name=\"activation-switch\"\r" +
	    "\n" +
	    "                                              ng-click=\"ctrl.onInMarketSwitchClick()\">\r" +
	    "\n" +
	    "                                            <small></small>\r" +
	    "\n" +
	    "                                        </span>\r" +
	    "\n" +
	    "                                        <div class=\"pull-right ws-right-status\"\r" +
	    "\n" +
	    "                                             name=\"notInMarketLink\"\r" +
	    "\n" +
	    "                                             ng-class=\"{'ws-active':ctrl.salesOpportunity.lost}\"\r" +
	    "\n" +
	    "                                             ng-click=\"ctrl.deactivateSalesOpportunity()\">\r" +
	    "\n" +
	    "                                            {{::'crm.salesOpportunity.status.NOT_IN_MARKET' | translate }}\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                        <div class=\"ws-lost-status-date\"\r" +
	    "\n" +
	    "                                             ng-hide=\"!ctrl.salesOpportunity.lost && ctrl.salesOpportunity.lastUpdatedOrSoldDate\"\r" +
	    "\n" +
	    "                                             translate=\"crm.salesOpportunity.LAST_UPDATED_LOST_SALES_OPPORTUNITY_TEXT\"\r" +
	    "\n" +
	    "                                             translate-value-last-updated=\"{{ctrl.salesOpportunity.lastUpdatedOrSoldDate}}\"\r" +
	    "\n" +
	    "                                             name=\"lostStatusDate\">\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                </crm-activities-list>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </section>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </uib-tab>\r" +
	    "\n" +
	    "                <uib-tab index=\"2\">\r" +
	    "\n" +
	    "                    <uib-tab-heading name=\"vehicleTab\">\r" +
	    "\n" +
	    "                        <div class=\"tab-title\">\r" +
	    "\n" +
	    "                            {{::'crm.vehicle.panel.VEHICLES_OF_INTEREST' | translate }}\r" +
	    "\n" +
	    "                            ({{ctrl.getVehicleOfInterestCount()}})\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div ng-if=\"ctrl.salesOpportunity.vehiclesOfInterest.length > 0\" class=\"tab-info\">\r" +
	    "\n" +
	    "                            {{ctrl.getVehicleOfInterestTitle()}}\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </uib-tab-heading>\r" +
	    "\n" +
	    "                    <div ng-if=\"ctrl.mediumEventActiveTab == 2\">\r" +
	    "\n" +
	    "                        <co-loading-container loading-key=\"VEHICLE_OF_INTEREST_LOADING_KEY\">\r" +
	    "\n" +
	    "                            <co-loading-container loading-key=\"VEHICLE_OF_INTEREST_LOADING_KEY\">\r" +
	    "\n" +
	    "                                <co-panel co-multi-transclusion>\r" +
	    "\n" +
	    "                                    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "                                        <section class=\"ws-panel\">\r" +
	    "\n" +
	    "                                            <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "                                                <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                                                <div class=\"ws-advanced-search-row\" ng-if=\"!ctrl.disableEditCrossSite\">\r" +
	    "\n" +
	    "                                                    <crm-quick-inventory-search class=\"ws-advanced-search-field\"\r" +
	    "\n" +
	    "                                                                                on-select=\"ctrl.onSelect(inventory)\"></crm-quick-inventory-search>\r" +
	    "\n" +
	    "                                                    <div class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                                                        <a ng-click=\"ctrl.addManualVehicleOfInterest()\"\r" +
	    "\n" +
	    "                                                           name=\"addNotInStockVehicle\">{{::\"crm.salesOpportunity.vehicleOfInterest.NOT_IN_STOCK_QUESTION\"\r" +
	    "\n" +
	    "                                                            | translate}}</a>\r" +
	    "\n" +
	    "                                                    </div>\r" +
	    "\n" +
	    "                                                </div>\r" +
	    "\n" +
	    "                                            </div>\r" +
	    "\n" +
	    "                                            <div class=\"ws-panel-row\"></div>\r" +
	    "\n" +
	    "                                            <crm-vehicle-of-interest-card-container\r" +
	    "\n" +
	    "                                                    ng-repeat=\"voi in ctrl.salesOpportunity.vehiclesOfInterest\"\r" +
	    "\n" +
	    "                                                    vehicle-of-interest=\"voi\"\r" +
	    "\n" +
	    "                                                    top-choice=\"voi.preferred\"\r" +
	    "\n" +
	    "                                                    transclude-to=\"row\"\r" +
	    "\n" +
	    "                                                    options=\"ctrl.vehicleOfInterestOptions\"></crm-vehicle-of-interest-card-container>\r" +
	    "\n" +
	    "                                        </section>\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                </co-panel>\r" +
	    "\n" +
	    "                            </co-loading-container>\r" +
	    "\n" +
	    "                        </co-loading-container>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </uib-tab>\r" +
	    "\n" +
	    "                <uib-tab select=\"ctrl.onTabSelected(ctrl.CrmConstants.SALES_OPPORTUNITY.TRADES.NAME)\"\r" +
	    "\n" +
	    "                         tab-excluded index=\"3\">\r" +
	    "\n" +
	    "                    <uib-tab-heading name=\"tradesTab\">\r" +
	    "\n" +
	    "                        <div class=\"tab-title\" name=\"tradesTabCount\">\r" +
	    "\n" +
	    "                            {{:: 'crm.vehicle.panel.TRADES' | translate }}\r" +
	    "\n" +
	    "                            <span ng-show=\"ctrl.tradesCount >= 0\"> ({{ctrl.tradesCount}})</span>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"tab-info\"\r" +
	    "\n" +
	    "                             ng-show=\"ctrl.getTradeDescriptionInfo()\"\r" +
	    "\n" +
	    "                             name=\"tradesDescriptionInfo\">\r" +
	    "\n" +
	    "                            {{ctrl.getTradeDescriptionInfo()}}\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </uib-tab-heading>\r" +
	    "\n" +
	    "                    <div>\r" +
	    "\n" +
	    "                        <crm-sales-opportunity-trades-panel\r" +
	    "\n" +
	    "                                ng-if=\"ctrl.salesOpportunity\"\r" +
	    "\n" +
	    "                                contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                sales-opportunity=\"ctrl.salesOpportunity\"\r" +
	    "\n" +
	    "                                trades-options=\"ctrl.tradesOptions\">\r" +
	    "\n" +
	    "                        </crm-sales-opportunity-trades-panel>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </uib-tab>\r" +
	    "\n" +
	    "            </uib-tabset>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-detail-view-content-group\" co-responsive-if=\"gt-md\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-8\">\r" +
	    "\n" +
	    "                    <div class=\"ws-detail-view-content-group-title\">\r" +
	    "\n" +
	    "                        {{:: 'crm.contact.headers.OPPORTUNITY_TIMELINE' | translate }}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-4\">\r" +
	    "\n" +
	    "                    <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                        <div class=\"pull-right ws-not-in-market\">\r" +
	    "\n" +
	    "                            <div class=\"pull-left ws-status\"\r" +
	    "\n" +
	    "                                 ng-class=\"{'ws-active':!ctrl.salesOpportunity.lost}\"\r" +
	    "\n" +
	    "                                 ng-click=\"ctrl.activateSalesOpportunity()\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.status.ACTIVE' | translate }}\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                            <span class=\"switch\" ng-class=\"{'checked':!ctrl.salesOpportunity.lost}\"\r" +
	    "\n" +
	    "                                  name=\"activation-switch\"\r" +
	    "\n" +
	    "                                  ng-click=\"ctrl.onInMarketSwitchClick()\">\r" +
	    "\n" +
	    "                                <small></small>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <div class=\"pull-right ws-right-status\"\r" +
	    "\n" +
	    "                                 name=\"notInMarketLink\"\r" +
	    "\n" +
	    "                                 ng-class=\"{'ws-active':ctrl.salesOpportunity.lost}\"\r" +
	    "\n" +
	    "                                 ng-click=\"ctrl.deactivateSalesOpportunity()\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.status.NOT_IN_MARKET' | translate }}\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                            <div class=\"ws-lost-status-date\"\r" +
	    "\n" +
	    "                                 ng-hide=\"!ctrl.salesOpportunity.lost && ctrl.salesOpportunity.lastUpdatedOrSoldDate\"\r" +
	    "\n" +
	    "                                 translate=\"crm.salesOpportunity.LAST_UPDATED_LOST_SALES_OPPORTUNITY_TEXT\"\r" +
	    "\n" +
	    "                                 translate-value-last-updated=\"{{ctrl.salesOpportunity.lastUpdatedOrSoldDate}}\"\r" +
	    "\n" +
	    "                                 name=\"lostStatusDate\">\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <section class=\"ws-panel\">\r" +
	    "\n" +
	    "                <div initial-height=\"{{ctrl.initialHeight}}\">\r" +
	    "\n" +
	    "                    <crm-activities-list contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                         event=\"ctrl.salesOpportunity\"\r" +
	    "\n" +
	    "                                         event-type=\"ctrl.OpportunityEventType.sales\">\r" +
	    "\n" +
	    "                    </crm-activities-list>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </section>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "\r" +
	    "\n"
	  );


	  $templateCache.put('app/salesOpportunity/details/salesRecapBanner/salesRecapBannerModalTemplate.html',
	    "<div class=\"panel\" name=\"soldDealRecapModal\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "        <i class=\"fa fa-close pull-right\" ng-click=\"ctrl.cancel()\" name=\"closeModal\" role=\"button\"></i>\r" +
	    "\n" +
	    "        <h3 class=\"panel-title\" name=\"soldDealRecapTitle\">\r" +
	    "\n" +
	    "            {{::\"crm.salesOpportunity.recap.SOLD_DEAL_RECAP_LABEL\" | translate}}\r" +
	    "\n" +
	    "        </h3>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <crm-sale-recap event-id=\"{{::ctrl.salesOpportunityId}}\"\r" +
	    "\n" +
	    "                    entity-id=\"{{::ctrl.contactId}}\"></crm-sale-recap>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/details/salesRecapBanner/salesRecapBannerTemplate.html',
	    "<div class=\"ws-sold-recap-banner\">\r" +
	    "\n" +
	    "        {{::\"crm.salesOpportunity.recap.SOLD_LABEL\" | translate}} {{ctrl.salesOpportunity.lastUpdatedOrSoldDate}} |\r" +
	    "\n" +
	    "        <a class=\"ws-view-deal-recap-link\" href=\"\" ng-click=\"ctrl.openSalesRecap()\" name=\"openSoldDealRecap\"> {{::\"crm.salesOpportunity.recap.SOLD_DEAL_RECAP_LABEL\" | translate}}</a>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/details/statusPanel/statusPanelTemplate.html',
	    "<section class=\"ws-running-panel\">\r" +
	    "\n" +
	    "    <crm-sales-recap-banner sales-opportunity=\"ctrl.salesOpportunity\" ng-show=\"ctrl.shouldShowSalesRecapBanner()\"></crm-sales-recap-banner>\r" +
	    "\n" +
	    "    <div class=\"ws-not-in-market-details\" ng-show=\"ctrl.salesOpportunity.status.id == ctrl.salesOpportunity.statusList.lost.id\" name=\"recapBanner\">\r" +
	    "\n" +
	    "        {{::'crm.salesOpportunity.status.CUSTOMER_NOT_BUYING_DUE_TO' | translate}} <b>{{ctrl.salesOpportunity.resolutionCode1.text}}</b>\r" +
	    "\n" +
	    "        <b ng-if=\"ctrl.salesOpportunity.resolutionCode2.text\">/ {{ctrl.salesOpportunity.resolutionCode2.text}}</b>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"row\">\r" +
	    "\n" +
	    "        <div class=\"col-xs-12 col-md-5 col-xxl-4 ws-running-progress\">\r" +
	    "\n" +
	    "            <div class=\"ws-header\">\r" +
	    "\n" +
	    "                <ul class=\"list-group list-inline\">\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.inlineEditFacades.ranking\" ng-if=\"ctrl.inlineEditFacades.ranking\" name=\"sales-ranking\"\r" +
	    "\n" +
	    "                                         has-value=\"ctrl.salesOpportunity.ranking.text\" inline=\"true\">\r" +
	    "\n" +
	    "                            <span ng-class=\"ctrl.getCssClasses()\">{{ctrl.getRanking()}}</span>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item ws-sales-opportunity-status-selector\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.inlineEditFacades.status\" name=\"sales-status\"\r" +
	    "\n" +
	    "                                         has-value=\"ctrl.salesOpportunity.status.statusName\" inline=\"true\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.salesOpportunity.status.statusName\" ng-class=\"ctrl.getStatusTextClass()\">\r" +
	    "\n" +
	    "                                <strong>{{('crm.salesOpportunity.statusText.'+ctrl.salesOpportunity.status.statusName) |\r" +
	    "\n" +
	    "                                    translate}}</strong>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.salesOpportunity.status.statusName\"\r" +
	    "\n" +
	    "                                                           class=\"text-open\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.statusText.PROSPECTING' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item ws-lead\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.inlineEditFacades.source\" name=\"sales-source\"\r" +
	    "\n" +
	    "                                         has-value=\"ctrl.salesOpportunity.source.text\" inline=\"true\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.salesOpportunity.source.text\">\r" +
	    "\n" +
	    "                                <span class=\"ws-lead-type\">{{ctrl.salesOpportunity.source.text}}</span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.salesOpportunity.source.text\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.headers.SOURCE' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                        /\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.inlineEditFacades.trackingCode\" name=\"sales-tracking\"\r" +
	    "\n" +
	    "                                         has-value=\"ctrl.salesOpportunity.trackingCode.text\" inline=\"true\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.salesOpportunity.trackingCode.text\" class=\"ws-panel-item-heading\">\r" +
	    "\n" +
	    "                                <span class=\"ws-lead-source\">{{ctrl.trimLeadingInteger(ctrl.salesOpportunity.trackingCode.text)}}</span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.salesOpportunity.trackingCode.text\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.headers.TRACKING_CODE' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                        <a name=\"opportunitySurvey\" ng-click=\"ctrl.showSurveyModal()\" ng-show=\"ctrl.csiEvent\" class=\"pull-right\">\r" +
	    "\n" +
	    "                            <i class=\"fa\" ng-class=\"ctrl.getSurveyIcon()\"></i><span>{{ctrl.csiEvent.score}}%</span>&nbsp;<span>{{::'crm.salesOpportunity.SURVEY'|translate}}</span>\r" +
	    "\n" +
	    "                        </a>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                </ul>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <co-running-man percentage=\"ctrl.salesOpportunityStatusPercentage\"></co-running-man>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-row-sm-gutter\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-4 col-md-2 ws-running-info\">\r" +
	    "\n" +
	    "                <ul class=\"list-group\">\r" +
	    "\n" +
	    "                    <li class=\"list-group-item ws-overflow-container\" ng-class=\"ctrl.isExpanded==true ? 'ws-expanded' : ''\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.inlineEditFacades.primaryAssigned\" name=\"sales-primary-assigned\"\r" +
	    "\n" +
	    "                                         has-value=\"ctrl.salesOpportunity.primaryAssigned.text\" inline=\"true\">\r" +
	    "\n" +
	    "                            <div ng-if=\"ctrl.salesOpportunity.primaryAssigned.text\" class=\"ws-panel-item-heading ws-overflow-text\">\r" +
	    "\n" +
	    "                                <strong>{{::'crm.salesOpportunity.headers.PRIMARY' | translate}}:</strong>\r" +
	    "\n" +
	    "                                {{ctrl.salesOpportunity.primaryAssigned.text}}\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.salesOpportunity.primaryAssigned.text\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.headers.PRIMARY' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item ws-overflow-container\" ng-class=\"ctrl.isExpanded==true ? 'ws-expanded' : ''\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.inlineEditFacades.bdcAssigned\" ng-if=\"ctrl.inlineEditFacades.bdcAssigned\" name=\"sales-bdc-assigned\"\r" +
	    "\n" +
	    "                                         has-value=\"ctrl.salesOpportunity.bdcAssigned.text\" inline=\"true\">\r" +
	    "\n" +
	    "                        <span ng-if=\"ctrl.salesOpportunity.bdcAssigned.text\" ng-disabled=\"true\" class=\"ws-panel-item-heading ws-overflow-text\">\r" +
	    "\n" +
	    "                            <strong>{{::'crm.salesOpportunity.headers.BDC' | translate}}:</strong>\r" +
	    "\n" +
	    "                            {{ctrl.salesOpportunity.bdcAssigned.text}}\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.salesOpportunity.bdcAssigned.text\" ng-disabled=\"true\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.headers.BDC' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item ws-overflow-container\" ng-class=\"{'ws-expanded':ctrl.isExpanded,'ws-visible-xl':!ctrl.isExpanded}\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.inlineEditFacades.type\" name=\"sales-opportunity-type\"\r" +
	    "\n" +
	    "                                         has-value=\"ctrl.salesOpportunity.type.text\" inline=\"true\">\r" +
	    "\n" +
	    "                        <span ng-if=\"ctrl.salesOpportunity.type.text\" class=\"ws-panel-item-heading ws-overflow-text\">\r" +
	    "\n" +
	    "                            <strong>{{::'crm.salesOpportunity.headers.OPPORTUNITY_TYPE' | translate}}:</strong>\r" +
	    "\n" +
	    "                            {{ctrl.salesOpportunity.type.text}}\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.salesOpportunity.type.text\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.headers.OPPORTUNITY_TYPE' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                </ul>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-xs-4 col-md-2 ws-running-info\">\r" +
	    "\n" +
	    "                <ul class=\"list-group\">\r" +
	    "\n" +
	    "                    <li class=\"list-group-item ws-overflow-container\" ng-class=\"ctrl.isExpanded==true ? 'ws-expanded' : ''\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.inlineEditFacades.secondaryAssigned\" name=\"sales-secondary-assigned\"\r" +
	    "\n" +
	    "                                         has-value=\"ctrl.salesOpportunity.secondaryAssigned.text\" inline=\"true\">\r" +
	    "\n" +
	    "                        <span ng-if=\"ctrl.salesOpportunity.secondaryAssigned.text\" class=\"ws-panel-item-heading ws-overflow-text\">\r" +
	    "\n" +
	    "                            <strong>{{::'crm.salesOpportunity.headers.SECONDARY' | translate}}:</strong>\r" +
	    "\n" +
	    "                            {{ctrl.salesOpportunity.secondaryAssigned.text}}\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.salesOpportunity.secondaryAssigned.text\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.headers.SECONDARY' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item ws-overflow-container\" ng-class=\"ctrl.isExpanded==true ? 'ws-expanded' : ''\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.inlineEditFacades.purchaseType\" name=\"sales-purchase-type\"\r" +
	    "\n" +
	    "                                         has-value=\"ctrl.salesOpportunity.purchaseType.text\" inline=\"true\">\r" +
	    "\n" +
	    "                        <span ng-if=\"ctrl.salesOpportunity.purchaseType.text\" class=\"ws-panel-item-heading ws-overflow-text\">\r" +
	    "\n" +
	    "                            <strong>{{::'crm.salesOpportunity.headers.PURCHASE_TYPE' | translate}}:</strong>\r" +
	    "\n" +
	    "                            {{ctrl.salesOpportunity.purchaseType.text}}\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.salesOpportunity.purchaseType.text\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.headers.PURCHASE_TYPE' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item ws-overflow-container\" ng-class=\"{'ws-expanded':ctrl.isExpanded,'ws-visible-xl':!ctrl.isExpanded}\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.inlineEditFacades.closeDate\" name=\"sales-close-date\"\r" +
	    "\n" +
	    "                                         has-value=\"ctrl.salesOpportunity.closeDate.text\" inline=\"true\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.salesOpportunity.closeDate.text\" class=\"ws-panel-item-heading ws-overflow-text\">\r" +
	    "\n" +
	    "                                <strong>{{::'crm.salesOpportunity.headers.CLOSE_DATE' | translate}}:</strong>\r" +
	    "\n" +
	    "                                {{ctrl.salesOpportunity.closeDate.text}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.salesOpportunity.closeDate.text\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.headers.CLOSE_DATE' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                </ul>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-3 col-xxl-4 ws-running-last-column\" ng-class=\"ctrl.isExpanded==true ? 'col-xs-12' : 'col-xs-4'\">\r" +
	    "\n" +
	    "                <ul class=\"list-group \">\r" +
	    "\n" +
	    "                    <li class=\"list-group-item ws-overflow-container\" ng-class=\"ctrl.isExpanded==true ? 'ws-expanded' : ''\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.inlineEditFacades.description\" name=\"sales-description\"\r" +
	    "\n" +
	    "                                         has-value=\"ctrl.salesOpportunity.description.length > 0\" inline=\"true\">\r" +
	    "\n" +
	    "                            <div ng-if=\"ctrl.salesOpportunity.description.length > 0\" name=\"sales-description-text\"\r" +
	    "\n" +
	    "                                 class=\"ws-panel-item-heading ws-overflow-text\">\r" +
	    "\n" +
	    "                                <strong>{{::'crm.salesOpportunity.headers.DESCRIPTION' | translate}}:</strong>\r" +
	    "\n" +
	    "                                {{ctrl.salesOpportunity.description}}\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.salesOpportunity.description.length > 0\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.headers.DESCRIPTION' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\" ng-class=\"ctrl.isExpanded==true ? 'ws-expanded' : 'ws-expanded-xl'\">\r" +
	    "\n" +
	    "                        <strong>{{::'crm.salesOpportunity.headers.DEALERSHIP' | translate}}:</strong>\r" +
	    "\n" +
	    "                        {{ctrl.selectedDealership.text}}\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item ws-overflow-container\" ng-class=\"{'ws-expanded':ctrl.isExpanded,'ws-visible-xl':!ctrl.isExpanded}\" ng-if=\"ctrl.salesOpportunity.franchise.text !== ctrl.selectedDealership.text || ctrl.salesOpportunityRefDefs.Franchises.length > 1\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.inlineEditFacades.franchise\" name=\"sales-franchise\"\r" +
	    "\n" +
	    "                                         has-value=\"!!ctrl.salesOpportunity.franchise.text\" inline=\"true\">\r" +
	    "\n" +
	    "                            <div ng-if=\"!!ctrl.salesOpportunity.franchise.text\" name=\"sales-franchise-text\"\r" +
	    "\n" +
	    "                                 class=\"ws-panel-item-heading ws-running-description\">\r" +
	    "\n" +
	    "                                <strong>{{::'crm.salesOpportunity.headers.FRANCHISE' | translate}}:</strong>\r" +
	    "\n" +
	    "                                {{ctrl.salesOpportunity.franchise.text}}\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.salesOpportunity.franchise.text\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.headers.FRANCHISE' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                </ul>\r" +
	    "\n" +
	    "                <a class=\"ws-toggle-more-link\" ng-show=\"ctrl.isDisplayMoreShown()\" name=\"sales-panel-expander\"\r" +
	    "\n" +
	    "                   ng-click=\"ctrl.toggleExpanded()\">\r" +
	    "\n" +
	    "                    <span ng-class=\"ctrl.isExpanded==true ? 'hide' : ''\">{{::'crm.salesOpportunity.toggleExpand.MORE' | translate}}</span>\r" +
	    "\n" +
	    "                    <span ng-class=\"ctrl.isExpanded==true ? '' : 'hide'\">{{::'crm.salesOpportunity.toggleExpand.HIDE' | translate}}</span>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/salesOpportunity/details/view/detailViewTemplate.html',
	    "<div class=\"ws-absolute-fill ws-sales-opportunity-page\" co-loading=\"ctrl.numberItemsStillLoading > 0\"\r" +
	    "\n" +
	    "     loading-show-children=\"ctrl.showChildrenDuringLoading\" position=\"absolute\" loading-overlay-class=\"ws-loading-full-overlay\">\r" +
	    "\n" +
	    "    <div class=\"detail-view-container ws-detail-view-layout-0\">\r" +
	    "\n" +
	    "        <crm-alert alert-names=\"[\r" +
	    "\n" +
	    "         ctrl.CrmConstants.SALES_OPPORTUNITY.POST_TO_DMS_RESULT,\r" +
	    "\n" +
	    "         ctrl.CrmConstants.SALES_OPPORTUNITY.AUDIT_LOG.LOAD_ERROR,\r" +
	    "\n" +
	    "         ctrl.CrmConstants.SALES_OPPORTUNITY.CHECKLIST.LOAD_ERROR,\r" +
	    "\n" +
	    "         ctrl.CrmConstants.SALES_OPPORTUNITY.SURVEYS.LOAD_ERROR]\" class=\"ws-sales-opportunity-push-to-dms-alert\"></crm-alert>\r" +
	    "\n" +
	    "        <crm-alert alert-names=\"[\r" +
	    "\n" +
	    "         ctrl.CrmConstants.SALES_OPPORTUNITY.SAVE.VOI_ERROR,\r" +
	    "\n" +
	    "         ctrl.CrmConstants.SALES_OPPORTUNITY.VEHICLE_OF_INTEREST.ADD_ERROR,\r" +
	    "\n" +
	    "         ctrl.CrmConstants.SALES_OPPORTUNITY.SAVE.CONCURRENT_EDIT_ERROR,\r" +
	    "\n" +
	    "         ctrl.CrmConstants.SALES_OPPORTUNITY.SAVE.ERROR,\r" +
	    "\n" +
	    "         ctrl.CrmConstants.UNKNOWN_ERROR_OCCURRED]\"\r" +
	    "\n" +
	    "                   class=\"ws-sales-opportunity-push-to-dms-alert\"\r" +
	    "\n" +
	    "                   display-seconds=\"5\"></crm-alert>\r" +
	    "\n" +
	    "        <div class=\"detail-view-header\">\r" +
	    "\n" +
	    "            <div class=\"ws-action-bar\">\r" +
	    "\n" +
	    "                <h1 class=\"detail-view-title\" name=\"sales-opportunity-page-title\">\r" +
	    "\n" +
	    "                    {{::'crm.contact.headers.SALES_OPPORTUNITY' | translate}}:\r" +
	    "\n" +
	    "                    {{ctrl.contact.getFullTitleName()}} / <span class=\"customer-id\" name=\"opportunityId\">\r" +
	    "\n" +
	    "                    <span>{{::'crm.salesOpportunity.headers.OPPORTUNITY_ID'|translate}} {{ctrl.salesOpportunity.id}}</span>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                </h1>\r" +
	    "\n" +
	    "                <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "\t\t\t\t<action-bar-item position=\"right\" co-multi-transclusion ng-hide=\"ctrl.disableEditCrossSite\">\r" +
	    "\n" +
	    "\t\t\t\t\t<div transclude-to=\"title\" ng-click=\"ctrl.openPrintForms()\" name=\"printForms\">\r" +
	    "\n" +
	    "                    \t<span>{{::'crm.salesOpportunity.actions.PRINT_FORMS' | translate}}</span>\r" +
	    "\n" +
	    "\t\t\t\t\t</div>\r" +
	    "\n" +
	    "                </action-bar-item>\r" +
	    "\n" +
	    "                <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                <action-bar-item ng-show=\"ctrl.creditApplicationUrl && !ctrl.disableEditCrossSite\" position=\"right\" co-multi-transclusion>\r" +
	    "\n" +
	    "                    <div transclude-to=\"title\" ng-click=\"ctrl.openCreditApplication()\">{{::'crm.salesOpportunity.actions.CREDIT_APPLICATION' | translate }}</div>\r" +
	    "\n" +
	    "                </action-bar-item>\r" +
	    "\n" +
	    "                <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "                <action-bar-item position=\"right\" co-multi-transclusion ng-hide=\"ctrl.disableEditCrossSite\">\r" +
	    "\n" +
	    "                    <div transclude-to=\"title\" ng-click=\"ctrl.onPostToDms()\">\r" +
	    "\n" +
	    "                        <span ng-hide=\"ctrl.salesOpportunity.dmsNumber\">{{::\"crm.salesOpportunity.dms.POST_TO_DMS\" | translate}}</span>\r" +
	    "\n" +
	    "                        <span ng-show=\"ctrl.salesOpportunity.dmsNumber\">{{::\"crm.salesOpportunity.dms.REPOST_TO_DMS\" | translate}}</span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </action-bar-item>\r" +
	    "\n" +
	    "                <action-bar-item position=\"right\" co-multi-transclusion>\r" +
	    "\n" +
	    "                    <div transclude-to=\"title\"><i class=\"fa fa-ellipsis-h\" name=\"salesActionsMenu\"></i></div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-click=\"ctrl.openDocumentForAction(false)\" name=\"printADocument\">{{:: 'crm.contact.actions.PRINT_DOCUMENT'|translate}}</div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-click=\"ctrl.openDocumentForAction(true)\" name=\"emailADocument\">{{:: 'crm.contact.actions.EMAIL_DOCUMENT'|translate}}</div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-show=\"ctrl.salesChecklistPermission.view\" ng-click=\"ctrl.openSalesChecklist()\" name=\"viewSalesChecklist\">{{::'crm.salesOpportunity.actions.SALES_CHECKLIST' | translate}} ({{ctrl.checklistCompletedItems}}/{{ctrl.checklistTotalItems}})</div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-show=\"ctrl.surveyPermission.view\" ng-click=\"ctrl.openSurveyModal()\" name=\"fillOutSurvey\">{{::\"crm.salesOpportunity.actions.FILL_OUT_SURVEY\" | translate}}</div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-show=\"ctrl.eventConversionPermission.edit\" ng-click=\"ctrl.convertOpportunityType()\" name=\"convertOpportunityType\">{{::\"crm.salesOpportunity.actions.CONVERT_OPPORTUNITY_TYPE\" | translate}}</div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-show=\"ctrl.eventHistoryPermission.view\"   ng-click=\"ctrl.openAuditLogs()\" name=\"viewAuditLogs\">{{::'crm.salesOpportunity.auditLog.AUDIT_LOG' | translate}}</div>\r" +
	    "\n" +
	    "                    <div transclude-to=\"menu\" ng-show=\"ctrl.salesOpportunity.cobuyer.id\" ng-click=\"ctrl.showFlipCobyerConfirmationModal()\" name=\"flipBuyerCobuyer\">{{:: 'crm.salesOpportunity.actions.FLIP_COBUYER'|translate}}</div>\r" +
	    "\n" +
	    "                </action-bar-item>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <crm-alert alert-names=\"['TASK_ACTION_ALERT']\" display-seconds=\"5\"></crm-alert>\r" +
	    "\n" +
	    "        <crm-sales-opportunity-status-panel ng-if=\"ctrl.salesOpportunity\" sales-opportunity=\"ctrl.salesOpportunity\"></crm-sales-opportunity-status-panel>\r" +
	    "\n" +
	    "        <div class=\"detail-view-content\">\r" +
	    "\n" +
	    "            <crm-sales-opportunity-detail-panel ng-if=\"ctrl.contact && ctrl.salesOpportunity\" contact=\"ctrl.contact\" sales-opportunity=\"ctrl.salesOpportunity\"></crm-sales-opportunity-detail-panel>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/details/view/flipCobuyerConfirmationModalTemplate.html',
	    "<div class=\"panel panel-primary panel-modal\" name=\"modalPanel\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "            <h3 id=\"modalTitle\" name=\"modalTitle\" class=\"panel-title ws-flex-fill-even\">{{::'crm.salesOpportunity.flipCobuyer.MODAL_TITLE'|translate}}</h3>\r" +
	    "\n" +
	    "            <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.closeModal()\" name=\"closeModal\" role=\"button\" tabindex=\"0\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-body\">\r" +
	    "\n" +
	    "        <div class=\"modal-prompt\" name=\"modalPrompt\">\r" +
	    "\n" +
	    "            <span>{{::'crm.salesOpportunity.flipCobuyer.MODAL_PROMPT1'|translate}} <strong name=\"buyerName\">{{ ctrl.salesOpportunity.buyer.fullName }}</strong>&nbsp;</span>\r" +
	    "\n" +
	    "            <span>{{::'crm.salesOpportunity.flipCobuyer.MODAL_PROMPT2'|translate}} <strong name=\"cobuyerName\">{{ ctrl.salesOpportunity.cobuyer.fullName }}</strong>{{::'crm.salesOpportunity.flipCobuyer.MODAL_PROMPT3'|translate}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-footer\">\r" +
	    "\n" +
	    "        <div class=\"row\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                    <button class=\"btn btn-quaternary\" name=\"confirm\" ng-click=\"ctrl.flipCobuyer()\">{{::'crm.salesOpportunity.flipCobuyer.MODAL_ACCEPT'|translate}}</button>\r" +
	    "\n" +
	    "                    <button class=\"btn btn-primary\" name=\"cancel\" ng-click=\"ctrl.closeModal()\">{{::'crm.salesOpportunity.flipCobuyer.MODAL_DECLINE'|translate}}</button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/details/view/printFormsModalTemplate.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-primary panel-modal\" name=\"modelPanel\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "            <h3 ng-cloak class=\"panel-title ws-flex-fill-even\">\r" +
	    "\n" +
	    "                {{::'crm.salesOpportunity.actions.PRINT_FORMS' | translate}}\r" +
	    "\n" +
	    "            </h3>\r" +
	    "\n" +
	    "            <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.modal.cancel()\" name=\"closeModal\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-card-panel\">\r" +
	    "\n" +
	    "            <div ng-bind-html=\"ctrl.printFormHtml\"></div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/details/view/salesChecklistModalTemplate.html',
	    "<div class=\"panel panel-primary panel-modal ng-scope ws-sales-checklist\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                <crm-alert alert-names=\"[ctrl.CrmConstants.SALES_OPPORTUNITY.CHECKLIST.SAVE_ERROR,ctrl.CrmConstants.SALES_OPPORTUNITY.CHECKLIST.FILE_TYPE_ERROR]\"></crm-alert>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "            <h3 class=\"panel-title ws-flex-fill-even\" name=\"checklistTitle\">\r" +
	    "\n" +
	    "                {{::'crm.salesOpportunity.checklist.SALES_CHECKLIST' | translate}}\r" +
	    "\n" +
	    "            </h3>\r" +
	    "\n" +
	    "            <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.modal.cancel()\" name=\"closeModal\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"form-group\">\r" +
	    "\n" +
	    "            <div class=\"checkbox\">\r" +
	    "\n" +
	    "                <input id=\"selectAllSalesChecklistItems\" ng-click=\"ctrl.toggleSelectAll()\" ng-model=\"ctrl.areAllChecklistItemsSelected\" type=\"checkbox\">\r" +
	    "\n" +
	    "                <label for=\"selectAllSalesChecklistItems\">\r" +
	    "\n" +
	    "                    <span class=\"fake-checkbox\">\r" +
	    "\n" +
	    "                        <div class=\"checkbox-selection-mark\"></div>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    {{::'crm.salesOpportunity.checklist.SELECT_ALL' | translate}}\r" +
	    "\n" +
	    "                </label>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <md-virtual-repeat-container id=\"salesChecklistContents\" ng-if=\"ctrl.salesOpportunityChecklist\" class=\"ws-modal-virtual-repeat-md\">\r" +
	    "\n" +
	    "        <div md-virtual-repeat=\"checklistItem in ctrl.salesOpportunityChecklist\" md-item-size=\"1\">\r" +
	    "\n" +
	    "            <crm-sales-opportunity-checklist checklist-item=\"checklistItem\" is-even=\"ctrl.getIsEven(checklistItem)\"></crm-sales-opportunity-checklist>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </md-virtual-repeat-container>\r" +
	    "\n" +
	    "    <div class=\"panel-body\">\r" +
	    "\n" +
	    "        <div class=\"modal-prompt ng-binding\">\r" +
	    "\n" +
	    "            <button class=\"btn btn-quaternary\" name=\"checklistPrint\" ng-click=\"ctrl.printChecklist()\">\r" +
	    "\n" +
	    "                {{::'crm.salesOpportunity.checklist.PRINT' | translate}}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "            <button ng-cloak class=\"btn btn-save pull-right\" name=\"checklistSave\"\r" +
	    "\n" +
	    "                    ng-if=\"ctrl.salesChecklistPermission.edit\" ng-click=\"ctrl.saveChecklist()\">\r" +
	    "\n" +
	    "                {{::'crm.salesOpportunity.checklist.SAVE' | translate}}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/salesOpportunity/page/salesOpportunityPage.html',
	    "<div class=\"ws-flex-container ws-absolute-fill\">\r" +
	    "\n" +
	    "    <crm-sales-opportunity-detail-view></crm-sales-opportunity-detail-view>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/quickInventorySearch/quickInventorySearchTemplate.html',
	    "<div>\r" +
	    "\n" +
	    "    <div class=\"transparent-input-group\">\r" +
	    "\n" +
	    "                    <span class=\"input-group-prepend\">\r" +
	    "\n" +
	    "                        <i class=\"fa fa-search master-panel-icon\" name=\"vehicleOfInterestSearchIcon\"></i>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "        <input id=\"searchTermAll\" ng-model=\"ctrl.searchTerm\" ng-model-options=\"{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }\"\r" +
	    "\n" +
	    "               type=\"text\" class=\"form-control\"\r" +
	    "\n" +
	    "               placeholder=\"{{ ::'crm.vehicle.panel.SEARCH_INVENTORY' | translate}}\"\r" +
	    "\n" +
	    "               ng-change=\"ctrl.search(ctrl.searchTerm)\"\r" +
	    "\n" +
	    "               ng-click=\"ctrl.openSearchModal()\"\r" +
	    "\n" +
	    "               name=\"vehicleSearchField\">\r" +
	    "\n" +
	    "        <span class=\"input-group-addon search-icon\" ng-click=\"ctrl.clearSearch()\">\r" +
	    "\n" +
	    "            <i class=\"fa fa-times-circle master-panel-icon\" name=\"cancelSearchIcon\" ng-click=\"ctrl.selectInventory(null)\"></i>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <md-content layout=\"column\"\r" +
	    "\n" +
	    "                ng-show=\"ctrl.totalResults > 0\"\r" +
	    "\n" +
	    "                class=\"md-whiteframe-z3 md-virtual-repeat-container md-orient-vertical ng-hide ws-quick-search-result\">\r" +
	    "\n" +
	    "                    <span>\r" +
	    "\n" +
	    "                        <span name=\"quickSearchTitle\">{{ ::'crm.vehicle.panel.QUICK_SEARCH_RESULT' | translate}}</span>\r" +
	    "\n" +
	    "                        <a ng-click=\"ctrl.requestSearchModalToMessageBus()\" name=\"goToInventory\" style=\"float: right\">{{::'crm.vehicle.panel.GO_TO_INVENTORY' | translate}}</a>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "        <md-content layout=\"column\" style=\"max-height: 360px;margin-top: 10px\">\r" +
	    "\n" +
	    "            <co-inventory-quick-search-card ng-repeat=\"inventory in ctrl.searchResults\"\r" +
	    "\n" +
	    "                                            inventory=\"inventory\"\r" +
	    "\n" +
	    "                                            click=\"ctrl.selectInventory(inventory)\"\r" +
	    "\n" +
	    "                                            transclude-to=\"row\"></co-inventory-quick-search-card>\r" +
	    "\n" +
	    "        </md-content>\r" +
	    "\n" +
	    "    </md-content>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/recap/salesRecapTemplate.html',
	    "<div class=\"panel-body\" co-loading=\"ctrl.isLoading\">\r" +
	    "\n" +
	    "    <crm-alert alert-names=\"[ctrl.CrmConstants.SALES_OPPORTUNITY.RECAP.SAVE_SALES_RECAP_ERROR]\"\r" +
	    "\n" +
	    "               display-seconds=\"3\"></crm-alert>\r" +
	    "\n" +
	    "    <div class=\"ws-info-block-container\">\r" +
	    "\n" +
	    "        <co-panel co-multi-transclusion class=\"ds-card ws-info-block\">\r" +
	    "\n" +
	    "    <span transclude-to=\"title\">\r" +
	    "\n" +
	    "        <span class=\"ws-info-card-title\" name=\"primaryBuyerLabel\">\r" +
	    "\n" +
	    "                 {{::\"crm.salesOpportunity.recap.PRIMARY_BUYER_LABEL\" | translate}}\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "    <span transclude-to=\"main\">\r" +
	    "\n" +
	    "        <div class=\"ws-info-card-text\" name=\"primaryBuyerNameText\">{{ctrl.salesRecap.primaryBuyer.name}}</div>\r" +
	    "\n" +
	    "        <div class=\"ws-info-card-text\"  name=\"primaryBuyerEmailText\">{{ctrl.salesRecap.primaryBuyer.email}}</div>\r" +
	    "\n" +
	    "        <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "            <span class=\"item-heading\" name=\"mobilePhoneLabel\">{{ ::'crm.contact.contact_points.MOBILE_LETTER' | translate }}: </span>\r" +
	    "\n" +
	    "            <div class=\"ws-info-card-text\"  name=\"primaryBuyerMobilePhoneText\">{{ctrl.salesRecap.primaryBuyer.mobilePhoneNumber}}</div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "            <span class=\"item-heading\" name=\"homePhoneLabel\">{{ ::'crm.contact.contact_points.HOME_LETTER' | translate }}: </span>\r" +
	    "\n" +
	    "            <span  name=\"primaryBuyerHomePhoneText\">{{ctrl.salesRecap.primaryBuyer.homePhone}} </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "            <span class=\"item-heading\" name=\"workPhoneLabel\">{{ ::'crm.contact.contact_points.WORK_LETTER' | translate }}: </span>\r" +
	    "\n" +
	    "            <span  name=\"primaryBuyerWorkPhoneText\">{{ctrl.salesRecap.primaryBuyer.workPhone}} </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "        </co-panel>\r" +
	    "\n" +
	    "        <co-panel co-multi-transclusion class=\"ds-card ws-info-block\">\r" +
	    "\n" +
	    "    <span transclude-to=\"title\">\r" +
	    "\n" +
	    "        <span class=\"ws-info-card-title\" name=\"purchasedVehicleLabel\">\r" +
	    "\n" +
	    "                {{::\"crm.salesOpportunity.recap.PURCHASED_VEHICLE_LABEL\" | translate}}\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "    <span transclude-to=\"main\">\r" +
	    "\n" +
	    "        <div class=\"ws-info-card-text\" name=\"purchasedVehicleDescription\">{{ctrl.salesRecap.purchasedVehicle.description}}</div>\r" +
	    "\n" +
	    "        <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "            <span class=\"item-heading\" name=\"stockNumberLabel\">{{ ::'crm.vehicle.STOCK_NUMBER_LABEL' | translate }}: </span>\r" +
	    "\n" +
	    "            <span  name=\"purchasedVehicleStockNumber\">{{ctrl.salesRecap.purchasedVehicle.stockNumber}} </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "            <span class=\"item-heading\" name=\"vinLabel\">{{ ::'crm.vehicle.card.VIN' | translate }}: </span>\r" +
	    "\n" +
	    "            <span  name=\"purchasedVehicleVin\">{{ctrl.salesRecap.purchasedVehicle.vin}} </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "            <span class=\"item-heading\" name=\"seriesLabel\">{{ ::'crm.vehicle.SERIES' | translate }}: </span>\r" +
	    "\n" +
	    "            <span  name=\"purchasedVehicleSeries\">{{ctrl.salesRecap.purchasedVehicle.series}} </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "            <span class=\"item-heading\" name=\"currentOdometer\">{{ ::'crm.vehicle.CURRENT_ODOMETER' | translate }}: </span>\r" +
	    "\n" +
	    "            <span  name=\"purchasedVehicleOdometer\">{{ctrl.salesRecap.purchasedVehicle.currentOdometer}} </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "            <span class=\"item-heading\" name=\"transmissionAndCylinder\">{{ ::'crm.vehicle.TRANSMISSION_AND_CYLINDER' | translate }}: </span>\r" +
	    "\n" +
	    "            <span ng-if=\"ctrl.salesRecap.purchasedVehicle.transmission\" name=\"purchasedVehicleTransmission\">{{ctrl.salesRecap.purchasedVehicle.transmission}}/</span>\r" +
	    "\n" +
	    "            <span name=\"purchasedVehicleCylinder\">{{ctrl.salesRecap.purchasedVehicle.cylinder}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "        </co-panel>\r" +
	    "\n" +
	    "        <co-panel co-multi-transclusion class=\"ds-card ws-info-block\">\r" +
	    "\n" +
	    "    <span transclude-to=\"title\">\r" +
	    "\n" +
	    "        <span class=\"ws-info-card-title\" name=\"tradesLabel\">\r" +
	    "\n" +
	    "                {{::\"crm.salesOpportunity.recap.TRADES_LABEL\" | translate}}\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "    <span transclude-to=\"main\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        <div ng-repeat=\"tradeInfo in ctrl.salesRecap.tradesInfo\">\r" +
	    "\n" +
	    "            <div class=\"ws-info-card-text\" name=\"salesRecapTradesLabel\">\r" +
	    "\n" +
	    "                {{tradeInfo.description}}\r" +
	    "\n" +
	    "                <span class=\"ws-info-detail muted\" name=\"indexValue\">#{{::$index + 1}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                <span class=\"item-heading\" name=\"vehicleCardVin\">{{ ::'crm.vehicle.card.VIN' | translate }}: </span>\r" +
	    "\n" +
	    "                <span name=\"tradeInfoVin\">{{tradeInfo.vin}} </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <br/>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "        </co-panel>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <form name=\"recapForm\" class=\"ws-form ws-flex-form ws-non-spacing-form\" ng-class=\"{'ws-view-mode': !ctrl.isEditMode}\">\r" +
	    "\n" +
	    "        <uib-tabset class=\"thin-tabset ws-card-tabset ds-card\" active=\"ctrl.activeTabIndex\">\r" +
	    "\n" +
	    "            <uib-tab heading='{{::\"crm.salesOpportunity.recap.DEAL_RECAP_LABEL\" | translate}}' active=\"true\" name=\"dealRecapTab\">\r" +
	    "\n" +
	    "                <div class=\"row ws-row-sm-gutter\">\r" +
	    "\n" +
	    "                    <div class=\"col-md-4 ws-card-stack\">\r" +
	    "\n" +
	    "                        <co-panel co-multi-transclusion class=\"ds-card-borderless\">\r" +
	    "\n" +
	    "                            <span transclude-to=\"title\">\r" +
	    "\n" +
	    "                                <span class=\"ws-info-card-title\" name=\"salesInfoTitle\">\r" +
	    "\n" +
	    "                                {{::\"crm.salesOpportunity.recap.SALES_INFO_LABEL\" | translate}}\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <span transclude-to=\"main\">\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"purchaseDateLabel\">{{ ::'crm.salesOpportunity.headers.PURCHASE_DATE' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" type=\"text\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.salesInfo.purchaseDate\" ng-disabled=\"!ctrl.isEditMode\"  name=\"salesInfoPurchaseDate\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"primaryLabel\">{{ ::'crm.salesOpportunity.headers.PRIMARY' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <select\r" +
	    "\n" +
	    "                                                    ng-model=\"ctrl.salesRecap.salesInfo.primaryAssigned\"\r" +
	    "\n" +
	    "                                                    ng-options=\"refDef.text for refDef in ctrl.salesRecapRefDefs.salesInfo.primaryAssigned track by refDef.value\"\r" +
	    "\n" +
	    "                                                    class=\"form-control\" name=\"salesInfoPrimaryAssigned\" ng-disabled=\"!ctrl.isEditMode\">\r" +
	    "\n" +
	    "                                            </select>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"salesManagerLabel\">{{ ::'crm.salesOpportunity.headers.SALES_MANAGER' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <select ng-model=\"ctrl.salesRecap.salesInfo.salesManager\"\r" +
	    "\n" +
	    "                                                    ng-options=\"refDef.text for refDef in ctrl.salesRecapRefDefs.salesInfo.salesManager track by refDef.value\"\r" +
	    "\n" +
	    "                                                    class=\"form-control\" name=\"salesInfoSalesManager\" ng-disabled=\"!ctrl.isEditMode\">\r" +
	    "\n" +
	    "                                                <option value=\"placeHolder\">{{ctrl.salesRecap.salesInfo.salesManager.text}}</option>\r" +
	    "\n" +
	    "                                            </select>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"fiManagerLabel\">{{ ::'crm.salesOpportunity.headers.FI_MANAGER' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <select ng-model=\"ctrl.salesRecap.salesInfo.fiManager\"\r" +
	    "\n" +
	    "                                                    ng-options=\"refDef.text for refDef in ctrl.salesRecapRefDefs.salesInfo.fiManager track by refDef.value\"\r" +
	    "\n" +
	    "                                                    class=\"form-control\" name=\"salesInfoFiManager\" ng-disabled=\"!ctrl.isEditMode\">\r" +
	    "\n" +
	    "                                                <option value=\"placeHolder\">{{ctrl.salesRecap.salesInfo.fiManager.text}}</option>\r" +
	    "\n" +
	    "                                            </select>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\" name=\"salesTypeLabel\">{{ ::'crm.salesOpportunity.headers.TYPE' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <select ng-model=\"ctrl.salesRecap.salesInfo.salesType\"\r" +
	    "\n" +
	    "                                                    ng-options=\"refDef.text for refDef in ctrl.salesRecapRefDefs.salesInfo.salesType track by refDef.value\"\r" +
	    "\n" +
	    "                                                    class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" name=\"salesInfoSalesType\">\r" +
	    "\n" +
	    "                                                <option value=\"placeHolder\">{{ctrl.salesRecap.salesInfo.salesType.text}}</option>\r" +
	    "\n" +
	    "                                            </select>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                                        </span>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"purchaseTypeLabel\">{{ ::'crm.salesOpportunity.headers.PURCHASE_TYPE' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <select ng-model=\"ctrl.salesRecap.salesInfo.purchaseType\"\r" +
	    "\n" +
	    "                                                    ng-options=\"refDef.text for refDef in ctrl.salesRecapRefDefs.salesInfo.purchaseType track by refDef.value\"\r" +
	    "\n" +
	    "                                                    class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" name=\"salesInfoPurchaseType\">\r" +
	    "\n" +
	    "                                                <option value=\"placeHolder\">{{ctrl.salesRecap.salesInfo.purchaseType.text}}</option>\r" +
	    "\n" +
	    "                                            </select>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"dmsLabel\">{{ ::'crm.salesOpportunity.headers.DMS' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"true\"\r" +
	    "\n" +
	    "                                                   type=\"text\" name=\"salesInfoDmsNumber\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.salesInfo.dmsNumber\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                        </co-panel>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                        <co-panel co-multi-transclusion class=\"ds-card-borderless\">\r" +
	    "\n" +
	    "                            <span transclude-to=\"title\">\r" +
	    "\n" +
	    "                                <span class=\"ws-info-card-title\" name=\"warrantyPricesTitle\">\r" +
	    "\n" +
	    "                                        {{::\"crm.salesOpportunity.recap.WARRANTY_PRICES_LABEL\" | translate}}\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <span transclude-to=\"main\">\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"extendedWarrantyLabel\">{{ ::'crm.warranty.EXTENDED_WARRANTY' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\"\r" +
	    "\n" +
	    "                                                   name=\"warrantyPriceExtendedWarranty\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.warrantyPrices.extendedWarranty \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                   </span>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\"name=\"existingVscLabel\">{{ ::'crm.warranty.EXISTING_VSC' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\"\r" +
	    "\n" +
	    "                                                   name=\"warrantyPricesExistVcs\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.warrantyPrices.existingVcs \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\" name=\"ahInsuranceLabel\">{{ ::'crm.warranty.AH_INSURANCE' | translate }}: </span>\r" +
	    "\n" +
	    "                                    <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                        <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                        <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\"\r" +
	    "\n" +
	    "                                               name=\"warrantyPricesAhInsurance\"\r" +
	    "\n" +
	    "                                               ng-model=\"ctrl.salesRecap.warrantyPrices.ahInsurance \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"odometerLabel\">{{ ::'crm.warranty.ODOMETER' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\"\r" +
	    "\n" +
	    "                                                   name=\"warrantyPricesOdometer\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.warrantyPrices.odometer\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"gapLabel\">{{ ::'crm.warranty.GAP' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"warrantyPricesGap\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.warrantyPrices.gap \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"lifeLabel\">{{ ::'crm.warranty.LIFE' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"warrantyPricesLife\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.warrantyPrices.life \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                        </co-panel>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-md-4\">\r" +
	    "\n" +
	    "                        <co-panel co-multi-transclusion>\r" +
	    "\n" +
	    "                            <span transclude-to=\"title\">\r" +
	    "\n" +
	    "                                <span class=\"ws-info-card-title\" name=\"paymentInfoTitle\">\r" +
	    "\n" +
	    "                                        {{::\"crm.salesOpportunity.recap.PAYMENT_INFO_LABEL\" | translate}}\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <span transclude-to=\"main\">\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\"name=\"msrpLabel\">{{ ::'crm.payment.MSRP' | translate }}: </span>\r" +
	    "\n" +
	    "                                    <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                        <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                        <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"paymentInfoMsrp\"\r" +
	    "\n" +
	    "                                               ng-model=\"ctrl.salesRecap.paymentInfo.msrp\" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"residualValueLabel\">{{ ::'crm.payment.RESIDUAL_VALUE' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\"\r" +
	    "\n" +
	    "                                                   type=\"text\" name=\"paymentInfoResidualValue\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.paymentInfo.residualValue \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"salesPriceLabel\">{{ ::'crm.payment.SALES_PRICE' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\"\r" +
	    "\n" +
	    "                                                   type=\"text\" name=\"paymentInfoSalePrice\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.paymentInfo.salePrice \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"cashDownLabel\">{{ ::'crm.payment.CASH_DOWN' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\"\r" +
	    "\n" +
	    "                                                   type=\"text\" name=\"paymentInfoCashDown\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.paymentInfo.cashDown \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"termLabel\">{{ ::'crm.payment.TERM' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\"\r" +
	    "\n" +
	    "                                                   type=\"text\" name=\"paymentInfoTerm\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.paymentInfo.term\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"aprMfLabel\">{{ ::'crm.payment.APR_MF' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"paymentInfoAprMf\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.paymentInfo.aprMf\" co-formatted-number-field decimal-places=\"5\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"termExpirationLabel\">{{ ::'crm.payment.TERM_EXPIRATION' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"true\" type=\"text\"\r" +
	    "\n" +
	    "                                                   name=\"paymentInfoTermExpiration\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.paymentInfo.termExpiration\" ng-disabled=\"true\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\"  name=\"paymentLabel\">{{ ::'crm.payment.PAYMENT' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\"\r" +
	    "\n" +
	    "                                                   type=\"text\" name=\"paymentInfoPayment\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.paymentInfo.payment \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\" name=\"numberOfPaymentsLabel\">{{ ::'crm.payment.NUMBER_OF_PAYMENTS' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\"\r" +
	    "\n" +
	    "                                                   name=\"paymentInfoNumberOfPayments\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.paymentInfo.numberOfPayments\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\" name=\"paymentIntervalLabel\">{{ ::'crm.payment.PAYMENT_INTERVAL' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <select ng-model=\"ctrl.salesRecap.paymentInfo.paymentInterval\"\r" +
	    "\n" +
	    "                                                    ng-options=\"refDef.text for refDef in ctrl.salesRecapRefDefs.paymentInfo.paymentInterval track by refDef.value\"\r" +
	    "\n" +
	    "                                                    class=\"form-control\"\r" +
	    "\n" +
	    "                                                    ng-disabled=\"!ctrl.isEditMode\"\r" +
	    "\n" +
	    "                                                    name=\"paymentInfoPaymentInterval\">\r" +
	    "\n" +
	    "                                                <option value=\"placeHolder\">{{ctrl.salesRecap.paymentInfo.paymentInterval.text}}</option>\r" +
	    "\n" +
	    "                                            </select>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\" name=\"lenderLabel\">{{ ::'crm.payment.LENDER' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"paymentInfoLender\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.paymentInfo.lender\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\" name=\"rebateLabel\">{{ ::'crm.payment.REBATE' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"paymentInfoRebate\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.paymentInfo.rebate \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\" name=\"odometerAllowanceLabel\">{{ ::'crm.payment.ODOMETER_ALLOWANCE' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\"\r" +
	    "\n" +
	    "                                                   name=\"paymentInfoOdometerAllowance\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.paymentInfo.odometerAllowance\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                        </co-panel>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-md-4 ws-card-stack\">\r" +
	    "\n" +
	    "                        <co-panel co-multi-transclusion class=\"ds-card-borderless\">\r" +
	    "\n" +
	    "                            <span transclude-to=\"title\">\r" +
	    "\n" +
	    "                                <span class=\"ws-info-card-title\" name=\"tradesTitle\">\r" +
	    "\n" +
	    "                                        {{::\"crm.salesOpportunity.recap.TRADES_LABEL\" | translate}}\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <span transclude-to=\"main\">\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\" name=\"tradesAllowanceLabel\">{{ ::'crm.salesOpportunity.trades.ALLOWANCE' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"true\" type=\"text\"\r" +
	    "\n" +
	    "                                                   name=\"tradeDealRecapAllowance\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.tradeDealRecap.allowance \"\r" +
	    "\n" +
	    "                                                   co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\"  name=\"payoffLabel\">{{ ::'crm.salesOpportunity.trades.PAYOFF' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"true\"\r" +
	    "\n" +
	    "                                                   type=\"text\" name=\"tradeDealRecapPayoff\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.tradeDealRecap.payoff \"\r" +
	    "\n" +
	    "                                                   co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                        </co-panel>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                        <co-panel co-multi-transclusion class=\"ds-card-borderless\">\r" +
	    "\n" +
	    "    <span transclude-to=\"title\">\r" +
	    "\n" +
	    "        <span class=\"ws-info-card-title\" name=\"coBuyerTitle\">\r" +
	    "\n" +
	    "                {{::\"crm.salesOpportunity.recap.CO_BUYER_LABEL\" | translate}}\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "    <span transclude-to=\"main\">\r" +
	    "\n" +
	    "            <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                <span class=\"item-heading\" name=\"firstNameLabel\">{{ ::'crm.contact.FIRST_NAME' | translate }}: </span>\r" +
	    "\n" +
	    "                <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"coBuyerFirstName\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.salesRecap.coBuyer.firstName\"/>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                    <span class=\"item-heading\" name=\"lastNameLabel\">{{ ::'crm.contact.LAST_NAME' | translate }}: </span>\r" +
	    "\n" +
	    "                    <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                        <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"coBuyerLastName\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.salesRecap.coBuyer.lastName\"/>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                <span class=\"item-heading\" name=\"addressLabel\">{{ ::'crm.address.headers.ADDRESS' | translate }}: </span>\r" +
	    "\n" +
	    "                    <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                        <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"coBuyerAddress\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.salesRecap.coBuyer.address\"/>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                    <span class=\"item-heading\" name=\"cityLabel\">{{ ::'crm.address.fields.CITY' | translate }}: </span>\r" +
	    "\n" +
	    "                    <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                        <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"coBuyerCity\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.salesRecap.coBuyer.city\"/>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                    <span class=\"item-heading\" name=\"stateLabel\">{{ ::'crm.address.fields.STATE' | translate }}: </span>\r" +
	    "\n" +
	    "                    <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                        <select ng-model=\"ctrl.salesRecap.coBuyer.state\"\r" +
	    "\n" +
	    "                                ng-options=\"refDef.text for refDef in ctrl.salesRecapRefDefs.coBuyer.state track by refDef.value\"\r" +
	    "\n" +
	    "                                class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" name=\"coBuyerState\">\r" +
	    "\n" +
	    "                            <option value=\"placeHolder\">{{ctrl.salesRecap.coBuyer.state.text}}</option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                    <span class=\"item-heading\" name=\"postalCodeLabel\">{{ ::'crm.address.fields.POSTAL' | translate }}: </span>\r" +
	    "\n" +
	    "                    <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                        <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"coBuyerZipCode\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.salesRecap.coBuyer.zipCode\"/>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                    <span class=\"item-heading\" name=\"coBuyerMobilePhoneLabel\">{{ ::'crm.contact.contact_points.MOBILE_LETTER' | translate }}: </span>\r" +
	    "\n" +
	    "                    <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                        <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"coBuyerMobilePhone\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.salesRecap.coBuyer.mobilePhone\"/>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                    <span class=\"item-heading\" name=\"coBuyerHomePhoneLabel\">{{ ::'crm.contact.contact_points.HOME_LETTER' | translate }}: </span>\r" +
	    "\n" +
	    "                    <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                        <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"coBuyerHomePhone\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.salesRecap.coBuyer.homePhone\"/>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                    <span class=\"item-heading\" name=\"emailLabel\">{{ ::'crm.contact.EMAIL' | translate }}: </span>\r" +
	    "\n" +
	    "                    <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                        <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"coBuyerEmail\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.salesRecap.coBuyer.email\"/>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                    <span class=\"item-heading\" name=\"dateOfBirthLabel\">{{ ::'crm.contact.headers.DATE_OF_BIRTH' | translate }}: </span>\r" +
	    "\n" +
	    "                    <div class=\"ws-inline-group-control\">\r" +
	    "\n" +
	    "                        <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"coBuyerDateOfBirth\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.salesRecap.coBuyer.dateOfBirth\"/>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "                        </co-panel>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </uib-tab>\r" +
	    "\n" +
	    "            <uib-tab heading='{{::\"crm.salesOpportunity.recap.GROSS_RECAP_LABEL\" | translate}}'\r" +
	    "\n" +
	    "                     ng-if=\"ctrl.grossRecapPermission.view\" name=\"grossRecapTab\">\r" +
	    "\n" +
	    "                <div class=\"row ws-row-sm-gutter\">\r" +
	    "\n" +
	    "                    <div class=\"col-md-4\">\r" +
	    "\n" +
	    "                        <co-panel co-multi-transclusion>\r" +
	    "\n" +
	    "                            <span transclude-to=\"title\">\r" +
	    "\n" +
	    "                                <span class=\"ws-info-card-title\" name=\"bankGrossLabel\">\r" +
	    "\n" +
	    "                                        {{::\"crm.salesOpportunity.recap.BANK_GROSS_LABEL\" | translate}}\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <span transclude-to=\"main\">\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"bankGrossFinanceReserveLabel\">{{ ::'crm.bankGross.FINANCE_RESERVE' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\"\r" +
	    "\n" +
	    "                                                   type=\"text\" name=\"bankGrossFinanceReserve\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.bankGross.financeReserve \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"bankGrossGAPLabel\">{{ ::'crm.bankGross.GAP' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\"\r" +
	    "\n" +
	    "                                                   type=\"text\" name=\"bankGrossGap\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.bankGross.gap\" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"bankGrossAhLabel\">{{ ::'crm.bankGross.AH' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\"\r" +
	    "\n" +
	    "                                                   type=\"text\" name=\"bankGrossAh\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.bankGross.ah \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"bankGrossSvcContractLabel\">{{ ::'crm.bankGross.SVC_CONTRACT' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\" type=\"text\" name=\"bankGrossSvcContract\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.bankGross.svcContract\" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"bankGrossOtherBackGrossLabel\">{{ ::'crm.bankGross.OTHER_BACK_GROSS' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"true\"\r" +
	    "\n" +
	    "                                                   type=\"text\" name=\"bankGrossOtherBackGross\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.bankGross.otherBackGross \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"bankGrossTotalBackGrossLabel\">{{ ::'crm.bankGross.TOTAL_BACK_GROSS' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\"\r" +
	    "\n" +
	    "                                                   type=\"text\" name=\"bankGrossTotalBackGross\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.bankGross.totalBackGross \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                        </co-panel>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-md-4\">\r" +
	    "\n" +
	    "                        <co-panel co-multi-transclusion>\r" +
	    "\n" +
	    "                            <span transclude-to=\"title\">\r" +
	    "\n" +
	    "                                <span class=\"ws-info-card-title\" name=\"frontGrossLabel\">\r" +
	    "\n" +
	    "                                        {{::\"crm.salesOpportunity.recap.FRONT_GROSS_LABEL\" | translate}}\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <span transclude-to=\"main\">\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                    <span class=\"item-heading\" name=\"bankFrontGrossLabel\">{{ ::'crm.bankGross.FRONT_GROSS' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"!ctrl.isEditMode\"\r" +
	    "\n" +
	    "                                                   type=\"text\" name=\"frontGross\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.frontGross\" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                        </co-panel>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-md-4\">\r" +
	    "\n" +
	    "                        <co-panel co-multi-transclusion>\r" +
	    "\n" +
	    "                            <span transclude-to=\"title\">\r" +
	    "\n" +
	    "                                <span class=\"ws-info-card-title\" name=\"totalGrossLabel\">\r" +
	    "\n" +
	    "                                        {{::\"crm.salesOpportunity.recap.TOTAL_GROSS_LABEL\" | translate}}\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <span transclude-to=\"main\">\r" +
	    "\n" +
	    "                                <div class=\"ws-info-card-text\">\r" +
	    "\n" +
	    "                                    <span class=\"form-group ws-inline-flex-group\">\r" +
	    "\n" +
	    "                                        <span class=\"item-heading\" name=\"bankGrossTotalGrossLabel\">{{ ::'crm.bankGross.TOTAL_GROSS' | translate }}: </span>\r" +
	    "\n" +
	    "                                        <div class=\"ws-inline-group-control currency-field\">\r" +
	    "\n" +
	    "                                            <span class=\"currency-symbol\">{{::'crm.symbols.CURRENCY'|translate}}</span>\r" +
	    "\n" +
	    "                                            <input class=\"form-control\" ng-disabled=\"true\"\r" +
	    "\n" +
	    "                                                   type=\"text\" name=\"totalGross\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.salesRecap.totalGross \" co-formatted-number-field decimal-places=\"2\"/>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                        </co-panel>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </uib-tab>\r" +
	    "\n" +
	    "        </uib-tabset>\r" +
	    "\n" +
	    "    </form>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "    <div class=\"row\">\r" +
	    "\n" +
	    "        <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "            <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                <button ng-if=\"ctrl.isEditMode && ctrl.canEdit()\" class=\"btn btn-quaternary\"\r" +
	    "\n" +
	    "                        name=\"cancelEdit\" ng-click=\"ctrl.setEditMode(false)\">{{::\r" +
	    "\n" +
	    "                    'crm.salesOpportunity.recap.CANCEL_SAVING_RECAP_BUTTON_TEXT' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "                <button ng-if=\"ctrl.isEditMode && ctrl.canEdit()\" class=\"btn btn-primary\"\r" +
	    "\n" +
	    "                        name=\"saveSalesRecap\" ng-click=\"ctrl.saveSalesRecap()\">{{::\r" +
	    "\n" +
	    "                    'crm.salesOpportunity.recap.SAVE_RECAP_BUTTON_TEXT' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "                <button ng-if=\"!ctrl.isEditMode && ctrl.canEdit()\" class=\"btn btn-primary\"\r" +
	    "\n" +
	    "                        name=\"activateEdit\" ng-click=\"ctrl.setEditMode(true)\">{{::\r" +
	    "\n" +
	    "                    'crm.salesOpportunity.recap.EDIT_RECAP_BUTTON_TEXT' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/salesChecklist/salesChecklistItemTemplate.html',
	    "<ul ng-class=\"ctrl.evenOddCssClass\">\r" +
	    "\n" +
	    "    <li>\r" +
	    "\n" +
	    "        <div class=\"form-group\">\r" +
	    "\n" +
	    "            <div class=\"checkbox\">\r" +
	    "\n" +
	    "                <input id=\"completedSalesChecklistItem{{ctrl.checkboxIndex}}\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.checklistItem.completed\"\r" +
	    "\n" +
	    "                       type=\"checkbox\" name=\"item-completed-checkbox\">\r" +
	    "\n" +
	    "                <label for=\"completedSalesChecklistItem{{ctrl.checkboxIndex}}\">\r" +
	    "\n" +
	    "                    <span class=\"fake-checkbox\" ng-class=\"{'checked':ctrl.checklistItem.completed}\">\r" +
	    "\n" +
	    "                        <div class=\"checkbox-selection-mark\"></div>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <span name=\"itemName\">{{::ctrl.checklistItem.name}}</span>\r" +
	    "\n" +
	    "                </label>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "    <li >\r" +
	    "\n" +
	    "        <crm-file-upload on-file-change=\"ctrl.addFile(event)\"\r" +
	    "\n" +
	    "                         allow-multiple=\"true\"\r" +
	    "\n" +
	    "                         accepted-file-types=\"ctrl.acceptedFileTypes\">\r" +
	    "\n" +
	    "            <a><i class=\"fa fa-plus-circle\" name=\"addFile\"></i></a>\r" +
	    "\n" +
	    "        </crm-file-upload>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "    <li>\r" +
	    "\n" +
	    "        <a class=\"alert-link\" ng-click=\"ctrl.onPhotoClick()\">\r" +
	    "\n" +
	    "            <span class=\"fa-stack\">\r" +
	    "\n" +
	    "                <span class=\"alert\" ng-if=\"ctrl.numberOfPictures > 0\" name=\"imageCount\">{{ctrl.numberOfPictures}}</span>\r" +
	    "\n" +
	    "                <i class=\"fa fa-camera\" name=\"cameraIcon\"></i>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "    <li>\r" +
	    "\n" +
	    "        <a class=\"alert-link\" ng-click=\"ctrl.onVideoClick()\">\r" +
	    "\n" +
	    "            <span class=\"fa-stack\">\r" +
	    "\n" +
	    "               <span class=\"alert\" ng-if=\"ctrl.numberOfVideos > 0\" name=\"videoCount\">{{ctrl.numberOfVideos}}</span>\r" +
	    "\n" +
	    "               <i class=\"fa fa-video-camera\" name=\"videoIcon\"></i>\r" +
	    "\n" +
	    "           </span>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "    <li>\r" +
	    "\n" +
	    "        <a class=\"alert-link\" ng-click=\"ctrl.onDocumentClick()\">\r" +
	    "\n" +
	    "            <span class=\"fa-stack\">\r" +
	    "\n" +
	    "               <span class=\"alert\" ng-if=\"ctrl.numberOfDocuments > 0\" name=\"documentCount\">{{ctrl.numberOfDocuments}}</span>\r" +
	    "\n" +
	    "               <i class=\"fa fa-file\" name=\"documentIcon\"></i>\r" +
	    "\n" +
	    "           </span>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "    <li class=\"file-view\" ng-if=\"ctrl.shouldShowFileList()\">\r" +
	    "\n" +
	    "        <ul>\r" +
	    "\n" +
	    "            <li ng-repeat=\"file in ctrl.checklistItem.files | filter:ctrl.fileFilter:'fileType'\" ng-click=\"ctrl.openMedia(file.url)\" name=\"fileEntry\">\r" +
	    "\n" +
	    "                {{file.name}}\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "    <li class=\"file-add\" ng-if=\"ctrl.checklistItem.rawFiles.length > 0\" name=\"itemFiles\">\r" +
	    "\n" +
	    "        <ul>\r" +
	    "\n" +
	    "            <li ng-repeat=\"file in ctrl.checklistItem.rawFiles\">\r" +
	    "\n" +
	    "                {{file.name}}\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/salesOpportunity/salesOpportunityCSI/actionMenu/qaDeleteEventModalTemplate.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-primary panel-modal\" name=\"modalPanel\">\r" +
	    "\n" +
	    "        <div class=\"panel-heading ws-panel-heading-no-separator\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "                <h3 class=\"panel-title ws-flex-fill-even\">{{::'crm.salesOpportunity.csi.deleteModal.DELETE_TICKET' | translate}}</h3>\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.modal.cancel()\" name=\"closeModal\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-body\">\r" +
	    "\n" +
	    "            <div class=\"modal-prompt\">\r" +
	    "\n" +
	    "                <div>\r" +
	    "\n" +
	    "                    {{::'crm.salesOpportunity.csi.deleteModal.ALL_INFORMATION' | translate}}<strong>{{::ctrl.csiEvent.id}}</strong>\r" +
	    "\n" +
	    "                    {{::'crm.salesOpportunity.csi.deleteModal.FOR' | translate}}\r" +
	    "\n" +
	    "                    <strong>{{::ctrl.contact.fullName}}</strong>\r" +
	    "\n" +
	    "                    {{::'crm.salesOpportunity.csi.deleteModal.DELETE' | translate}}\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div>\r" +
	    "\n" +
	    "                    {{::'crm.salesOpportunity.csi.deleteModal.CONFIRMATION' | translate}}\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-footer\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                    <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                        <button class=\"btn btn-quaternary\" name=\"confirm\" ng-click=\"ctrl.deleteEvent()\">\r" +
	    "\n" +
	    "                            {{::'crm.salesOpportunity.csi.deleteModal.YES' | translate}}\r" +
	    "\n" +
	    "                        </button>\r" +
	    "\n" +
	    "                        <button class=\"btn btn-primary\" name=\"change-mind\" ng-click=\"ctrl.modal.cancel()\">\r" +
	    "\n" +
	    "                            {{::'crm.salesOpportunity.csi.deleteModal.NO' | translate}}\r" +
	    "\n" +
	    "                        </button>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/salesOpportunityCSI/actionMenu/qaMoreActionsMenuTemplate.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div ng-if=\"ctrl.permissions.merge && ctrl.hasEditQAPermission\" class=\"ws-popover-item\" ng-click=\"ctrl.onMerge()\">\r" +
	    "\n" +
	    "        <span name=\"merge-qa\">{{::'crm.salesOpportunity.csi.popover.MERGE_INTO' | translate}}<span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div ng-if=\"!ctrl.permissions.merge\" class=\"ws-popover-item\">\r" +
	    "\n" +
	    "        <span name=\"merge-qa\">{{::'crm.salesOpportunity.csi.popover.NO_MERGE_AVAILABLE' | translate}}</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" ng-click=\"ctrl.openDeleteModal()\" ng-if=\"ctrl.hasDeleteQAPermission\">\r" +
	    "\n" +
	    "        <span name=\"delete-qa\">{{::'crm.salesOpportunity.csi.popover.DELETE_OPPORTUNITY' | translate}}</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "\r" +
	    "\n"
	  );


	  $templateCache.put('app/salesOpportunity/salesOpportunityCSI/card/qa/salesOpportunityCSIQACardTemplate.html',
	    "<co-panel co-multi-transclusion class=\"ds-card\" ng-class=\"ctrl.cssClasses\" ng-click=\"ctrl.updateCsiAction()\">\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-icon-badge size=\"md\"\r" +
	    "\n" +
	    "                       icon=\"{{ctrl.badgeIcon}}\"\r" +
	    "\n" +
	    "                       status=\"{{ctrl.badgeStatus.toLowerCase()}}\"></co-icon-badge>\r" +
	    "\n" +
	    "        <div class=\"text-{{ctrl.status}}\">\r" +
	    "\n" +
	    "            <span name=\"badgeSubscript\">{{ctrl.badgeText}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        <div name=\"qa-event-title\">\r" +
	    "\n" +
	    "            {{ctrl.eventTitle}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <div>\r" +
	    "\n" +
	    "            <span ng-cloak name=\"qa-event-status\" class=\"ws-status-text\">{{ctrl.status}}</span>\r" +
	    "\n" +
	    "            <span ng-if=\"!!ctrl.status && !!ctrl.assignedTo\"> / </span>\r" +
	    "\n" +
	    "            <span ng-cloak name=\"qa-event-assignto\">{{ctrl.assignedTo}}</span>\r" +
	    "\n" +
	    "            <span ng-if=\"(!!ctrl.status || !!ctrl.assignedTo) && !!ctrl.csiEvent.id\"> / </span>\r" +
	    "\n" +
	    "            <span ng-cloak name=\"qa-event-id\"> ID #{{ctrl.csiEvent.id}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div>\r" +
	    "\n" +
	    "            <span ng-cloak name=\"qa-event-type\">{{ctrl.eventSubtype}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div ng-if=\"!!ctrl.resolutionMessage\">\r" +
	    "\n" +
	    "            <span ng-cloak name=\"qa-event-resolution\">{{ctrl.resolutionMessage}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <div>\r" +
	    "\n" +
	    "            <span name=\"qa-event-updated\">{{::'crm.salesOpportunity.LAST_UPDATED' | translate}} </span>\r" +
	    "\n" +
	    "            <span ng-cloak name=\"qa-event-updated-date\">{{ctrl.lastUpdatedMessage}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div>\r" +
	    "\n" +
	    "            <span ng-cloak name=\"qa-dealership-name\" class=\"ws-deaccent-text\">{{ctrl.selectedDealership.text}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div>\r" +
	    "\n" +
	    "            <a uib-tooltip=\"{{::'crm.salesOpportunity.csi.popover.MORE_ACTIONS' | translate}}\" ng-click=\"$event.stopPropagation()\"\r" +
	    "\n" +
	    "               tooltip-append-to-body=\"true\"\r" +
	    "\n" +
	    "               ns-popover\r" +
	    "\n" +
	    "               ns-popover-placement=\"bottom|right\"\r" +
	    "\n" +
	    "               ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "               ns-popover-template=\"app/salesOpportunity/salesOpportunityCSI/actionMenu/qaMoreActionsMenuTemplate.html\"\r" +
	    "\n" +
	    "               ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "               ns-popover-hide-on-inside-click=\"true\"\r" +
	    "\n" +
	    "               name=\"qa-ellipses\"\r" +
	    "\n" +
	    "               ng-if=\"ctrl.hasEditQAPermission || ctrl.hasDeleteQAPermission\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-ellipsis-h ws-dots ws-dots-inline\"></i>\r" +
	    "\n" +
	    "            </a>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>\r" +
	    "\n"
	  );


	  $templateCache.put('app/salesOpportunity/salesOpportunityCSI/card/survey/salesOpportunityCSISurveyCardTemplate.html',
	    "<co-panel co-multi-transclusion class=\"ds-card\" ng-class=\"ctrl.cssClasses\">\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-icon-badge size=\"md\"\r" +
	    "\n" +
	    "                       icon=\"{{ctrl.badgeIcon}}\"\r" +
	    "\n" +
	    "                       status=\"{{ctrl.status.toLowerCase()}}\"></co-icon-badge>\r" +
	    "\n" +
	    "        <div class=\"text-{{ctrl.status}}\">\r" +
	    "\n" +
	    "            <span name=\"badgeSubscript\">{{ctrl.badgeText}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        <div name=\"survey-title\">\r" +
	    "\n" +
	    "            {{ctrl.eventTitle}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <div ng-cloak ng-if=\"!!ctrl.responseDate\">\r" +
	    "\n" +
	    "            <span name=\"survey-responded\" class=\"ws-status-text\">{{::'crm.salesOpportunity.csi.RESPONDED' | translate}}</span>\r" +
	    "\n" +
	    "            <span name=\"survey-date-on\"> {{::'crm.salesOpportunity.csi.ON' | translate}} </span>\r" +
	    "\n" +
	    "            <span name=\"survey-date\">{{ctrl.responseDate}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div ng-cloak>\r" +
	    "\n" +
	    "            <span name=\"survey-generated-from\">{{::'crm.salesOpportunity.csi.GENERATED_FROM' | translate}}</span>\r" +
	    "\n" +
	    "            <span name=\"survey-source\">{{ctrl.surveyType}}</span>\r" +
	    "\n" +
	    "            <span ng-if=\"!!ctrl.surveyType && !!ctrl.seeResultsMessage\"> / </span>\r" +
	    "\n" +
	    "            <a ng-cloak name=\"survey-results\" ng-click=\"ctrl.openViewSurveyResultsModal()\">\r" +
	    "\n" +
	    "                {{ctrl.seeResultsMessage}}\r" +
	    "\n" +
	    "            </a>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <div>\r" +
	    "\n" +
	    "            <span ng-cloak name=\"survey-updated\">{{ctrl.lastUpdatedMessage}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/salesOpportunity/salesOpportunityCSI/panel/salesOpportunityCSIPanelTemplate.html',
	    "<div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "        <ul class=\"ws-advanced-search-options\">\r" +
	    "\n" +
	    "            <li>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a class=\"toggle-inner-panel-link ws-link\" disabled name=\"qa-status-filter\">\r" +
	    "\n" +
	    "                        {{::'crm.salesOpportunity.csi.STATUS' | translate }} <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a class=\"toggle-inner-panel-link ws-link\" disabled name=\"qa-type-filter\">\r" +
	    "\n" +
	    "                        {{::'crm.salesOpportunity.csi.CSI_TYPE' | translate }} <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a class=\"toggle-inner-panel-link ws-link\" disabled name=\"qa-dealership-filter\">\r" +
	    "\n" +
	    "                        {{::'crm.salesOpportunity.csi.DEALERSHIP' | translate }} <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "        <ul class=\"ws-advanced-search-options\">\r" +
	    "\n" +
	    "            <li class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                <a ns-popover\r" +
	    "\n" +
	    "                   ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                   ns-popover-template=\"app/salesOpportunity/sharedTemplates/popoverSortOptionsSingleDate.html\"\r" +
	    "\n" +
	    "                   ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "                   ns-popover-timeout=\"100000\"\r" +
	    "\n" +
	    "                   class=\"toggle-inner-panel-link ws-link\"\r" +
	    "\n" +
	    "                   name=\"qa-event-sort\">\r" +
	    "\n" +
	    "                    {{ ::'crm.salesOpportunity.tabs.SORT' | translate }}: {{ ctrl.selectedSort.name }}\r" +
	    "\n" +
	    "                    <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </li>\r" +
	    "\n" +
	    "        </ul>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "<div class=\"ws-panel-row ws-small-margin\">\r" +
	    "\n" +
	    "    <div class=\"btn btn-tertiary btn-full-width\" name=\"addNewCsiCaseButton\" ng-click=\"!ctrl.hasAddQAPermission||ctrl.addNewCsiCase()\" ng-class=\"{'disabled': !ctrl.hasAddQAPermission }\">\r" +
	    "\n" +
	    "        <i class=\"fa fa-plus-circle\"></i>\r" +
	    "\n" +
	    "        {{ ::'crm.salesOpportunity.csi.ADD_NEW_QA_TICKET' | translate }}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "<div class=\"ws-panel-row\" ng-show=\"ctrl.loading\">\r" +
	    "\n" +
	    "    <md-progress-circular class=\"ws-progress-circular ws-progress-centered\"\r" +
	    "\n" +
	    "                          md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "<div ng-cloak ng-repeat=\"csiEvent in ctrl.csiEvents\" ng-if=\"!ctrl.loading\">\r" +
	    "\n" +
	    "    <crm-sales-opportunity-csi-qa-card ng-if=\"!!csiEvent.lastUpdate\" csi-event=\"csiEvent\" contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                       merge-callback=\"ctrl.onMergeQaEvent(qaEvent)\" delete-callback=\"ctrl.deleteEvent(contactId, eventId)\"\r" +
	    "\n" +
	    "                                       permissions=\"ctrl.permissions\"></crm-sales-opportunity-csi-qa-card>\r" +
	    "\n" +
	    "    <crm-sales-opportunity-csi-survey-card ng-if=\"!csiEvent.lastUpdate && ctrl.surveyPermission.view\" csi-event=\"csiEvent\" name=\"surveyCard\"></crm-sales-opportunity-csi-survey-card>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/salesOpportunity/salesOpportunityCSI/salesOpportunityCsiCardMergeQaEventModalTemplate.html',
	    "<section class=\"ws-panel\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <header class=\"ws-panel-title\">{{ ::'crm.salesOpportunity.csi.mergeModal.MERGE_RECORD' | translate}}</header>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.cancel()\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <crm-sales-opportunity-csi-qa-card csi-event=\"ctrl.mergeData.primaryEvent\"></crm-sales-opportunity-csi-qa-card>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <header class=\"ws-panel-title\">{{ ::'crm.salesOpportunity.csi.mergeModal.INTO_RECORD' | translate}}</header>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-merge-modal-panel\"\r" +
	    "\n" +
	    "        ng-repeat=\"event in ctrl.mergeData.secondaryEvents track by $index\">\r" +
	    "\n" +
	    "        <div class=\"ws-merge-modal-radio\">\r" +
	    "\n" +
	    "            <div class=\"ws-merge-modal-radio-inline radio-inline\">\r" +
	    "\n" +
	    "                <input id=\"radio-inline-id-{{$index}}\"\r" +
	    "\n" +
	    "                       name=\"salesOppMergeRadioGroup\"\r" +
	    "\n" +
	    "                       value=\"{{event.id}}\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.mergeData.selectedIdToMerge\"\r" +
	    "\n" +
	    "                       type=\"radio\"/>\r" +
	    "\n" +
	    "                <label for=\"radio-inline-id-{{$index}}\" class=\"ng-binding\">\r" +
	    "\n" +
	    "                    <span class=\"ws-merge-modal-radio-span fake-radio\" name=\"mergeRadios\"></span>\r" +
	    "\n" +
	    "                </label>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <crm-sales-opportunity-csi-qa-card csi-event=\"event\" class=\"ws-merge-modal-card-panel\"></crm-sales-opportunity-csi-qa-card>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\"></div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <a target=\"_blank\"\r" +
	    "\n" +
	    "               href=\"https://my.dealersocket.com/help/CRMHelp/Merging_Duplicate_Events.htm?Highlight=merge\"\r" +
	    "\n" +
	    "               tooltip-placement=\"top\"\r" +
	    "\n" +
	    "               uib-tooltip=\"{{ ::'crm.salesOpportunity.csi.mergeModal.TOOLTIP_MERGE' | translate }}\"\r" +
	    "\n" +
	    "               name=\"mergeHelp\">\r" +
	    "\n" +
	    "                {{ ::'crm.salesOpportunity.csi.mergeModal.MERGE_HELP_TEXT' | translate}}\r" +
	    "\n" +
	    "            </a>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-panel-actions\">\r" +
	    "\n" +
	    "                <button class=\"btn btn-default\" ng-click=\"ctrl.cancel()\" name=\"mergeCancelButton\">\r" +
	    "\n" +
	    "                    {{ ::'crm.salesOpportunity.csi.mergeModal.CANCEL' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "                <button class=\"btn btn-primary\" ng-click=\"ctrl.accept()\" ng-disabled=\"!ctrl.mergeData.selectedIdToMerge\" name=\"mergeRecordsButton\">\r" +
	    "\n" +
	    "                    {{ ::'crm.salesOpportunity.csi.mergeModal.ACCEPT' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/salesOpportunity/salesOpportunityCSI/salesOpportunitySurveyModalTemplate.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-primary panel-modal ng-scope\">\r" +
	    "\n" +
	    "        <div class=\"panel-heading ws-panel-heading-no-separator\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "                <h3 class=\"panel-title ws-flex-fill-even\" name=\"surveyModalTitle\">{{ctrl.csiEvent.name}} ({{ctrl.csiEvent.score}}%)</h3>\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.modal.cancel()\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-body ws-customer-marketing-campaign-details\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                <div class=\"col-lg-6\">\r" +
	    "\n" +
	    "                    <ul class=\"list-group\">\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"surveyModalSurveyId\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{ ::'crm.salesOpportunity.csi.details.ID' | translate }}: </span>\r" +
	    "\n" +
	    "                            {{ctrl.csiEvent.id}}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"surveyModalPurchaseOrCloseDate\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.csiEvent.surveyType == 'Sales'\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{ ::'crm.salesOpportunity.csi.details.PURCHASE_DATE' | translate }}: </span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.csiEvent.surveyType == 'Service'\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{ ::'crm.salesOpportunity.csi.details.RO_CLOSE_DATE' | translate }}: </span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-date date-time=\"ctrl.csiEvent.purchaseDate\" mode=\"dateNumeric\"></crm-date>\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"surveyModalVehicle\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{ ::'crm.salesOpportunity.csi.details.VEHICLE' | translate }}: </span>\r" +
	    "\n" +
	    "                            {{ctrl.csiEvent.vehicle}}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"surveyModalReceivedDate\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{ ::'crm.salesOpportunity.csi.details.RECEIVED' | translate }}: </span>\r" +
	    "\n" +
	    "                            <crm-date date-time=\"ctrl.csiEvent.surveyDate\" mode=\"dateNumeric\" extend=\"true\"></crm-date>\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"surveyModalDMSNumber\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{ ::'crm.salesOpportunity.csi.details.DMS_NUMBER' | translate }}: </span>\r" +
	    "\n" +
	    "                            {{ctrl.csiEvent.dmsNumber}}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                    </ul>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-lg-6\">\r" +
	    "\n" +
	    "                    <ul class=\"list-group\">\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"surveyModalSalesperson\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.csiEvent.surveyType == 'Sales'\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{ ::'crm.salesOpportunity.csi.details.SALESPERSON' | translate }}: </span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.csiEvent.surveyType == 'Service'\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{ ::'crm.salesOpportunity.csi.details.SERVICE_ADVISOR' | translate }}: </span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            {{ctrl.csiEvent.salesperson}}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"surveyModalVehicleOrServicePrice\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.csiEvent.surveyType == 'Sales'\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{ ::'crm.salesOpportunity.csi.details.VEHICLE_PRICE' | translate }}: </span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.csiEvent.surveyType == 'Service'\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{ ::'crm.salesOpportunity.csi.details.RO_TOTAL' | translate }}: </span>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            {{ctrl.csiEvent.price | currency}}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li ng-if=\"ctrl.csiEvent.surveyType == 'Service'\" class=\"list-group-item\" name=\"surveyModalServiceType\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{ ::'crm.salesOpportunity.csi.details.SERVICE_TYPE' | translate }}: </span>\r" +
	    "\n" +
	    "                            {{ctrl.csiEvent.type}}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"surveyModalVIN\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{ ::'crm.salesOpportunity.csi.details.VIN' | translate }}: </span>\r" +
	    "\n" +
	    "                            {{ctrl.csiEvent.vin}}\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                        <li class=\"list-group-item\" name=\"surveyModalOdometer\">\r" +
	    "\n" +
	    "                            <span class=\"item-heading\">{{ ::'crm.salesOpportunity.csi.details.ODOMETER' | translate }}: </span>\r" +
	    "\n" +
	    "                            {{ctrl.csiEvent.vehicleOdometer | number}} mi\r" +
	    "\n" +
	    "                        </li>\r" +
	    "\n" +
	    "                    </ul>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-lg-12\" ng-show=\"ctrl.csiEvent.questionsAndResponses.length\">\r" +
	    "\n" +
	    "                    <table class=\"table\" co-scrollable-table visible-rows=\"10\">\r" +
	    "\n" +
	    "                        <thead>\r" +
	    "\n" +
	    "                        <tr>\r" +
	    "\n" +
	    "                            <th>{{ ::'crm.salesOpportunity.csi.details.SURVEY_QUESTION' | translate }}</th>\r" +
	    "\n" +
	    "                            <th>{{ ::'crm.salesOpportunity.csi.details.SURVEY_RESPONSE' | translate }}</th>\r" +
	    "\n" +
	    "                        </tr>\r" +
	    "\n" +
	    "                        </thead>\r" +
	    "\n" +
	    "                        <tbody>\r" +
	    "\n" +
	    "                        <tr ng-repeat=\"question in ctrl.csiEvent.questionsAndResponses\">\r" +
	    "\n" +
	    "                            <td name=\"surveyModalSurveyQuestion\">{{question.question}}</td>\r" +
	    "\n" +
	    "                            <td name=\"surveyModalSurveyResponse\">{{question.response}}</td>\r" +
	    "\n" +
	    "                        </tr>\r" +
	    "\n" +
	    "                        </tbody>\r" +
	    "\n" +
	    "                    </table>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-lg-12\" ng-hide=\"ctrl.csiEvent.questionsAndResponses.length\" name=\"surveyModalNoQuestions\">{{ ::'crm.salesOpportunity.csi.details.SURVEY_NO_QUESTIONS' | translate }}</div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/salesOpportunitySalesPanel/SalesOpportunitySalesPanelTemplate.html',
	    "<section class=\"ws-panel\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <ul class=\"ws-advanced-search-options\">\r" +
	    "\n" +
	    "                <li>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a ns-popover\r" +
	    "\n" +
	    "                       ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                       ns-popover-template=\"app/salesOpportunity/salesOpportunitySalesPanel/salesOpportunitySalesFilterOptions.html\"\r" +
	    "\n" +
	    "                       ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "                       ns-popover-timeout=\"100000\"\r" +
	    "\n" +
	    "                       class=\"toggle-inner-panel-link ws-link\"\r" +
	    "\n" +
	    "                       name=\"status-filter\">\r" +
	    "\n" +
	    "                        {{::'crm.salesOpportunity.tabs.STATUS' | translate}}\r" +
	    "\n" +
	    "                        <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a class=\"toggle-inner-panel-link ws-link\" disabled name=\"salesOpportunityIncentivesSort\">{{::'crm.salesOpportunity.tabs.INCENTIVE_TYPE' | translate}} <i\r" +
	    "\n" +
	    "                                class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <span class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a class=\"toggle-inner-panel-link ws-link\" disabled name=\"salesOpportunityAvailabilitySort\">{{::'crm.salesOpportunity.tabs.AVAILABILITY' | translate}} <i\r" +
	    "\n" +
	    "                                class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                </li>\r" +
	    "\n" +
	    "                <li class=\"ws-advanced-search-option\">\r" +
	    "\n" +
	    "                    <a ns-popover name=\"sort-dropdown\"\r" +
	    "\n" +
	    "                       ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                       ns-popover-template=\"app/salesOpportunity/sharedTemplates/popoverSortOptions.html\"\r" +
	    "\n" +
	    "                       ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "                       ns-popover-timeout=\"100000\"\r" +
	    "\n" +
	    "                       class=\"toggle-inner-panel-link ws-link\">\r" +
	    "\n" +
	    "                        {{::'crm.salesOpportunity.tabs.SORT' | translate}}: {{ ctrl.selectedSort.name }} <i class=\"fa fa-sort-desc\"></i>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </li>\r" +
	    "\n" +
	    "            </ul>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row ws-small-margin\">\r" +
	    "\n" +
	    "        <div class=\"btn btn-tertiary btn-full-width\" ng-click=\"!ctrl.salesPermission.add || !ctrl.canAddSalesOpportunity() || ctrl.addNewSalesOpportunity()\" ng-class=\"{'disabled': !ctrl.salesPermission.add || !ctrl.canAddSalesOpportunity() }\" name=\"addSalesOpportunityButton\">\r" +
	    "\n" +
	    "            <i class=\"fa fa-plus-circle\"></i> {{::'crm.salesOpportunity.tabs.ADD_NEW_SALES_OPPORTUNITY' | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div co-loading=\"ctrl.loadingSalesOpportunities\">\r" +
	    "\n" +
	    "        <div ng-repeat=\"salesOpportunity in ctrl.salesOpportunities\">\r" +
	    "\n" +
	    "            <crm-sales-opportunity-sales-card sales-opportunity=\"salesOpportunity\"\r" +
	    "\n" +
	    "                                              total-sales-opportunities=\"ctrl.salesOpportunities.length\"\r" +
	    "\n" +
	    "                                              permissions=\"ctrl.salesPermission\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            </crm-sales-opportunity-sales-card>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "</section>\r" +
	    "\n"
	  );


	  $templateCache.put('app/salesOpportunity/salesOpportunitySalesPanel/salesOpportunitySalesCardActionsTemplate.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div ng-if=\"ctrl.totalSalesOpportunities > 1 && ctrl.salesPermission.edit\"\r" +
	    "\n" +
	    "         class=\"ws-popover-item\" name=\"change-status\"\r" +
	    "\n" +
	    "         ng-click=\"ctrl.mergeSalesOpportunity()\">\r" +
	    "\n" +
	    "        {{ ::'crm.salesOpportunity.sales.popover.MERGE_INTO' | translate }}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div ng-if=\"ctrl.totalSalesOpportunities <= 1\"\r" +
	    "\n" +
	    "         class=\"ws-popover-item\" name=\"change-status\"\r" +
	    "\n" +
	    "         ng-disabled=\"true\">\r" +
	    "\n" +
	    "        {{ ::'crm.salesOpportunity.sales.popover.NO_MERGE_AVAILABLE' | translate }}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"change-status\"\r" +
	    "\n" +
	    "         ng-click=\"ctrl.deleteSalesOpportunity()\"\r" +
	    "\n" +
	    "         ng-if=\"ctrl.salesPermission.delete\">\r" +
	    "\n" +
	    "        {{ ::'crm.salesOpportunity.sales.popover.DELETE_OPPORTUNITY' | translate }}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/salesOpportunity/salesOpportunitySalesPanel/salesOpportunitySalesCardTemplate.html',
	    "<co-panel co-multi-transclusion\r" +
	    "\n" +
	    "          class=\"ds-card\"\r" +
	    "\n" +
	    "          ng-click=\"ctrl.onCardClick()\"\r" +
	    "\n" +
	    "          status=\"{{ctrl.status}}\">\r" +
	    "\n" +
	    "    <div transclude-to=\"title\" name=\"ds-card-title\">{{ctrl.cardTitle}}</div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <span name=\"sales-opportunity-status\"\r" +
	    "\n" +
	    "              ng-class=\"{'text-open':ctrl.status == 'open',\r" +
	    "\n" +
	    "                         'text-complete':ctrl.status == 'complete',\r" +
	    "\n" +
	    "                         'text-overdue':ctrl.status == 'overdue'}\">{{ctrl.getOpportunityStatus()}}</span>\r" +
	    "\n" +
	    "        <span name=\"sales-opportunity-assigned\">/ {{ctrl.salesOpportunity.primaryAssigned.text}}</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\" class=\"muted\">\r" +
	    "\n" +
	    "        <span name=\"sales-opportunity-source\" ng-show=\"ctrl.salesOpportunity.source.text\">{{ctrl.salesOpportunity.source.text}} / </span>\r" +
	    "\n" +
	    "        <span name=\"sales-opportunity-id-number\">{{::'crm.salesOpportunity.ID_NUMBER' | translate}}{{ctrl.salesOpportunity.id}}</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\" ng-show=\"ctrl.status == 'complete'\">\r" +
	    "\n" +
	    "        <span name=\"sales-opportunity-purchase-date\" ng-show=\"ctrl.salesOpportunity.lastUpdatedOrSoldDate\">{{::'crm.salesOpportunity.PURCHASED' | translate}} {{ctrl.salesOpportunity.lastUpdatedOrSoldDate}} / </span>\r" +
	    "\n" +
	    "        <span name=\"sales-opportunity-purchase-price\">{{ctrl.getPrimaryVehicleOfInterest().offeredPrice.toString() | currency:undefined:0}}</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <span name=\"sales-opportunity-last-step-completed-date\">{{::'crm.salesOpportunity.LAST_UPDATED'| translate}} {{ctrl.getLastUpdated()}}</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <span name=\"sales-opportunity-franchise\" class=\"muted\" ng-show=\"ctrl.salesOpportunity.franchise\">{{ctrl.salesOpportunity.franchise.text}}</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <div ng-if=\"ctrl.salesPermission.edit || ctrl.salesPermission.delete\">\r" +
	    "\n" +
	    "            <a ns-popover-timeout=\"100000\"\r" +
	    "\n" +
	    "               ns-popover\r" +
	    "\n" +
	    "               ns-popover-placement=\"bottom|right\"\r" +
	    "\n" +
	    "               ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "               ns-popover-template=\"app/salesOpportunity/salesOpportunitySalesPanel/salesOpportunitySalesCardActionsTemplate.html\"\r" +
	    "\n" +
	    "               ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "               ng-click=\"ctrl.actionsMenuClick($event)\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-ellipsis-h ws-dots ws-dots-inline\"\r" +
	    "\n" +
	    "                   name=\"sales-opportunity-menu\"></i>\r" +
	    "\n" +
	    "            </a>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "    <div transclude-to=\"media\" class=\"ds-card-thumbnail ds-card-media-small\"\r" +
	    "\n" +
	    "         ng-class=\"{'ws-no-vehicle-image':ctrl.vehicleImageUrl == ctrl._defaultVehicleImageUrl}\">\r" +
	    "\n" +
	    "        <img ng-src=\"{{ctrl.vehicleImageUrl}}\"/>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>\r" +
	    "\n"
	  );


	  $templateCache.put('app/salesOpportunity/salesOpportunitySalesPanel/salesOpportunitySalesFilterOptions.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div ng-if=\"(ctrl.salesOpportunitieStatusAggregations.length > 0)\"\r" +
	    "\n" +
	    "         ng-repeat=\"aggregation in ctrl.salesOpportunitieStatusAggregations\">\r" +
	    "\n" +
	    "        <div class=\"ws-popover-item\">\r" +
	    "\n" +
	    "            <div class=\"checkbox\">\r" +
	    "\n" +
	    "                    <input id=\"checkbox-id-status-filter-{{aggregation.value}}\"\r" +
	    "\n" +
	    "                           type=\"checkbox\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.selectedFilters[aggregation.value]\"\r" +
	    "\n" +
	    "                           ng-change=\"hidePopover();ctrl.setSelectedFilters()\">\r" +
	    "\n" +
	    "                    <label for=\"checkbox-id-status-filter-{{aggregation.value}}\">\r" +
	    "\n" +
	    "                        <span class=\"fake-checkbox\" name=\"status-filter-checkbox\">\r" +
	    "\n" +
	    "                            <div class=\"checkbox-selection-mark\"></div>\r" +
	    "\n" +
	    "                        </span> {{aggregation.value}} ({{aggregation.count}})\r" +
	    "\n" +
	    "                    </label>\r" +
	    "\n" +
	    "                <div/>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div ng-if=\"!(ctrl.salesOpportunitieStatusAggregations.length > 0)\">\r" +
	    "\n" +
	    "        <div class=\"ws-popover-item\"\r" +
	    "\n" +
	    "             ng-click=\"hidePopover()\">\r" +
	    "\n" +
	    "            {{::'crm.salesOpportunity.sales.filter.NO_SALES_OPP_TO_FILTER' | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/salesOpportunity/salesOpportunitySalesPanel/salesOpportunitySalesPanelModalTemplate.html',
	    "<section class=\"ws-panel\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <header class=\"ws-panel-title\">{{::'crm.salesOpportunity.sales.mergeModal.MERGE_RECORD' | translate}}\r" +
	    "\n" +
	    "            </header>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.cancel()\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <crm-alert alert-names=\"['SALES_OPPORTUNITY_SALES_TAB_MERGE_FAILED']\"></crm-alert>\r" +
	    "\n" +
	    "    <crm-sales-opportunity-sales-card sales-opportunity=\"ctrl.mergeData.primaryOpportunity\"\r" +
	    "\n" +
	    "                                      enable-card-actions=\"false\"\r" +
	    "\n" +
	    "                                      click-override=\"ctrl.selectVehicleCard()\"\r" +
	    "\n" +
	    "                                      name=\"primary-merge-card\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "    </crm-sales-opportunity-sales-card>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <header class=\"ws-panel-title\">{{::'crm.salesOpportunity.sales.mergeModal.INTO_RECORD' | translate}}</header>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-merge-modal-panel\"\r" +
	    "\n" +
	    "         ng-repeat=\"salesOpportunity in ctrl.mergeData.secondaryOpportunities track by $index\">\r" +
	    "\n" +
	    "        <div class=\"ws-merge-modal-radio\">\r" +
	    "\n" +
	    "            <div class=\"ws-merge-modal-radio-inline radio-inline\">\r" +
	    "\n" +
	    "                <input id=\"radio-inline-id-{{$index}}\"\r" +
	    "\n" +
	    "                       name=\"salesOppMergeRadioGroup\"\r" +
	    "\n" +
	    "                       value=\"{{salesOpportunity.id}}\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.mergeData.selectedIdToMerge\"\r" +
	    "\n" +
	    "                       type=\"radio\"/>\r" +
	    "\n" +
	    "                <label for=\"radio-inline-id-{{$index}}\" class=\"ng-binding\">\r" +
	    "\n" +
	    "                    <span class=\"ws-merge-modal-radio-span fake-radio\" name=\"mergeRadios\"></span>\r" +
	    "\n" +
	    "                </label>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <crm-sales-opportunity-sales-card sales-opportunity=\"salesOpportunity\"\r" +
	    "\n" +
	    "                                          enable-card-actions=\"false\"\r" +
	    "\n" +
	    "                                          click-override=\"ctrl.selectVehicleCard(salesOpportunity.id)\"\r" +
	    "\n" +
	    "                                          name=\"merge-vehicle-card\"\r" +
	    "\n" +
	    "                                          class=\"ws-merge-modal-card-panel\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        </crm-sales-opportunity-sales-card>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\"></div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <a target=\"_blank\"\r" +
	    "\n" +
	    "               href=\"https://sprint.dealersocket.com/help/CRMHelp/Sales_Event_Merge_Logic.htm?Highlight=merge\"\r" +
	    "\n" +
	    "               tooltip-placement=\"top\"\r" +
	    "\n" +
	    "               uib-tooltip=\"{{::'crm.salesOpportunity.sales.mergeModal.TOOLTIP_MERGE' | translate}}\"\r" +
	    "\n" +
	    "               name=\"mergeHelp\">\r" +
	    "\n" +
	    "                {{::'crm.salesOpportunity.sales.mergeModal.MERGE_HELP_TEXT' | translate}}\r" +
	    "\n" +
	    "            </a>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\" ng-show=\"ctrl.mergeData.mergePending\">\r" +
	    "\n" +
	    "            <md-progress-circular class=\"ws-progress-circular\" md-diameter=\"25\"\r" +
	    "\n" +
	    "                                  md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\" ng-show=\"!ctrl.mergeData.mergePending\">\r" +
	    "\n" +
	    "            <div class=\"ws-panel-actions\">\r" +
	    "\n" +
	    "                <button class=\"btn btn-default\" ng-click=\"ctrl.cancel()\" name=\"mergeCancelButton\">\r" +
	    "\n" +
	    "                    {{::'crm.salesOpportunity.sales.mergeModal.CANCEL' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "                <button class=\"btn btn-primary\" ng-click=\"ctrl.accept()\" ng-disabled=\"!ctrl.mergeData.selectedIdToMerge\"\r" +
	    "\n" +
	    "                        name=\"mergeRecordsButton\">\r" +
	    "\n" +
	    "                    {{::'crm.salesOpportunity.sales.mergeModal.ACCEPT' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/salesOpportunity/sharedTemplates/popoverSortOptions.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"date-added-new\" ng-click=\"hidePopover();ctrl.setSelectedSort(ctrl.CrmConstants.DATE_ADDED_NEWEST);\">\r" +
	    "\n" +
	    "        {{::'crm.salesOpportunity.tabs.DATE_ADDED_NEWEST' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"date-added-old\" ng-click=\"hidePopover();ctrl.setSelectedSort(ctrl.CrmConstants.DATE_ADDED_OLDEST)\">\r" +
	    "\n" +
	    "        {{::'crm.salesOpportunity.tabs.DATE_ADDED_OLDEST' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"updated-new\" ng-click=\"hidePopover();ctrl.setSelectedSort(ctrl.CrmConstants.LAST_UPDATED_NEWEST)\">\r" +
	    "\n" +
	    "        {{::'crm.salesOpportunity.tabs.LAST_UPDATED_NEWEST' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"updated-old\" ng-click=\"hidePopover();ctrl.setSelectedSort(ctrl.CrmConstants.LAST_UPDATED_OLDEST)\">\r" +
	    "\n" +
	    "        {{::'crm.salesOpportunity.tabs.LAST_UPDATED_OLDEST' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/salesOpportunity/sharedTemplates/popoverSortOptionsSingleDate.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"date-new\" ng-click=\"hidePopover(); ctrl.setSelectedSort(ctrl.CrmConstants.LAST_UPDATED_NEWEST);\">\r" +
	    "\n" +
	    "        {{::'crm.salesOpportunity.tabs.LAST_UPDATED_NEWEST' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-popover-item\" name=\"date-old\" ng-click=\"hidePopover(); ctrl.setSelectedSort(ctrl.CrmConstants.LAST_UPDATED_OLDEST)\">\r" +
	    "\n" +
	    "        {{::'crm.salesOpportunity.tabs.LAST_UPDATED_OLDEST' | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/salesOpportunity/surveys/selectSurveyModalTemplate.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-primary panel-modal\" name=\"modalPanel\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "            <h3 ng-cloak class=\"panel-title ws-flex-fill-even\" name=\"surveysTitle\">\r" +
	    "\n" +
	    "                {{::'crm.salesOpportunity.surveys.FILL_OUT_SURVEY' | translate}}\r" +
	    "\n" +
	    "            </h3>\r" +
	    "\n" +
	    "            <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.modal.cancel()\" name=\"closeModal\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-card-panel\">\r" +
	    "\n" +
	    "            <md-virtual-repeat-container class=\"ws-modal-virtual-repeat-sm\">\r" +
	    "\n" +
	    "                <div md-virtual-repeat=\"survey in ctrl.surveyLinks\" md-item-size=\"1\">\r" +
	    "\n" +
	    "                    <a class=\"ws-card-panel-text\" ng-click=\"ctrl.openSurvey(survey.url)\">\r" +
	    "\n" +
	    "                        <span name=\"surveyName\">{{survey.name}}</span>\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </md-virtual-repeat-container>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/add/salesOpportunityAddTradeTemplate.html',
	    "<div class=\"ws-sales-opportunity-add-trade\" co-loading=\"ctrl.isLoading\" loading-show-children=\"true\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main ws-content-group\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-12 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.VIN' | translate}}</label>\r" +
	    "\n" +
	    "                    <div ng-hide=\"ctrl.trade.isFreeText\">\r" +
	    "\n" +
	    "                        <div class=\"input-group\">\r" +
	    "\n" +
	    "                            <input type=\"text\"\r" +
	    "\n" +
	    "                                   class=\"form-control\"\r" +
	    "\n" +
	    "                                   ng-class=\"{'ng-invalid': ctrl.vinError}\"\r" +
	    "\n" +
	    "                                   ng-change=\"ctrl.clearVinError()\"\r" +
	    "\n" +
	    "                                   name=\"vin\"\r" +
	    "\n" +
	    "                                   maxlength=\"17\"\r" +
	    "\n" +
	    "                                   ng-attr-placeholder=\"{{::'crm.salesOpportunity.trades.ENTER_VIN' | translate}}\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.trade.vin\">\r" +
	    "\n" +
	    "                            <div class=\"input-group-addon btn btn-primary\" ng-click=\"ctrl.doVinLookup()\" ng-disabled=\"!ctrl.trade.vin\">Go</div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <span class=\"invalid-message-static\" ng-show=\"ctrl.vinError\" name=\"invalidVinError\">{{::'crm.salesOpportunity.trades.INVALID_VIN_ERROR' | translate}}</span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-show=\"ctrl.trade.isFreeText\">\r" +
	    "\n" +
	    "                        <input type=\"text\"\r" +
	    "\n" +
	    "                               class=\"form-control\"\r" +
	    "\n" +
	    "                               name=\"vin\"\r" +
	    "\n" +
	    "                               maxlength=\"17\"\r" +
	    "\n" +
	    "                               ng-attr-placeholder=\"{{::'crm.salesOpportunity.trades.ENTER_VIN' | translate}}\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.trade.vin\">\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.YEAR' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            name=\"year\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.validationResult.isYearValid}\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.trade.year\"\r" +
	    "\n" +
	    "                            ng-options=\"ctrl.stringToNumber(year) as year for year in ctrl.trade.yearsLookup\"\r" +
	    "\n" +
	    "                            ng-change=\"ctrl.onYearChanged()\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-show=\"ctrl.isSubmitted && !ctrl.validationResult.isYearValid\" name=\"tradesRequiredFieldError\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.MAKE' | translate}}</label>\r" +
	    "\n" +
	    "                    <div ng-hide=\"ctrl.trade.isFreeText\">\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.validationResult.isMakeValid}\"\r" +
	    "\n" +
	    "                                name=\"make\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.trade.make\"\r" +
	    "\n" +
	    "                                ng-options=\"make.text for make in ctrl.trade.makesLookup\"\r" +
	    "\n" +
	    "                                ng-change=\"ctrl.onMakeChanged()\">\r" +
	    "\n" +
	    "                            <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-show=\"ctrl.trade.isFreeText\">\r" +
	    "\n" +
	    "                        <input type=\"text\"\r" +
	    "\n" +
	    "                               name=\"make\"\r" +
	    "\n" +
	    "                               class=\"form-control\"\r" +
	    "\n" +
	    "                               ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.validationResult.isMakeValid}\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.trade.make.text\"\r" +
	    "\n" +
	    "                               ng-change=\"ctrl.updateFreeTextField(ctrl.trade.make)\">\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-show=\"ctrl.isSubmitted && !ctrl.validationResult.isMakeValid\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.MODEL' | translate}}</label>\r" +
	    "\n" +
	    "                    <div ng-hide=\"ctrl.trade.isFreeText\">\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.validationResult.isModelValid}\"\r" +
	    "\n" +
	    "                                name=\"model\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.trade.model\"\r" +
	    "\n" +
	    "                                ng-options=\"model.text for model in ctrl.trade.modelsLookup\"\r" +
	    "\n" +
	    "                                ng-change=\"ctrl.onModelChanged()\">\r" +
	    "\n" +
	    "                            <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-show=\"ctrl.trade.isFreeText\">\r" +
	    "\n" +
	    "                        <input type=\"text\"\r" +
	    "\n" +
	    "                               name=\"model\"\r" +
	    "\n" +
	    "                               class=\"form-control\"\r" +
	    "\n" +
	    "                               ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.validationResult.isModelValid}\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.trade.model.text\"\r" +
	    "\n" +
	    "                               ng-change=\"ctrl.updateFreeTextField(ctrl.trade.model)\">\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-show=\"ctrl.isSubmitted && !ctrl.validationResult.isModelValid\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.TRIM' | translate}}</label>\r" +
	    "\n" +
	    "                    <div ng-hide=\"ctrl.trade.isFreeText\">\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                name=\"trim\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.trade.trim\"\r" +
	    "\n" +
	    "                                ng-options=\"model.text for model in ctrl.trade.trimsLookup\">\r" +
	    "\n" +
	    "                            <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-show=\"ctrl.trade.isFreeText\">\r" +
	    "\n" +
	    "                        <input type=\"text\"\r" +
	    "\n" +
	    "                               name=\"trim\"\r" +
	    "\n" +
	    "                               class=\"form-control\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.trade.trim.text\"\r" +
	    "\n" +
	    "                               ng-change=\"ctrl.updateFreeTextField(ctrl.trade.trim)\">\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.ODOMETER' | translate}} ({{::'crm.vehicle.ODOMETER_UNIT' | translate}})</label>\r" +
	    "\n" +
	    "                    <input type=\"text\"\r" +
	    "\n" +
	    "                           class=\"form-control\"\r" +
	    "\n" +
	    "                           name=\"odometer\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.trade.odometer\"\r" +
	    "\n" +
	    "                           placeholder=\"0\"\r" +
	    "\n" +
	    "                           co-formatted-number-field decimal-places=\"0\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.EXTERIOR_COLOR' | translate}}</label>\r" +
	    "\n" +
	    "                    <input type=\"text\"\r" +
	    "\n" +
	    "                           class=\"form-control\"\r" +
	    "\n" +
	    "                           name=\"exterior\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.trade.exteriorColor\"\r" +
	    "\n" +
	    "                           ng-attr-placeholder=\"{{::'crm.salesOpportunity.trades.EXTERIOR_COLOR_PLACEHOLDER' | translate}}\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.NUMBER_OF_CYLINDERS' | translate}}</label>\r" +
	    "\n" +
	    "                    <input type=\"text\"\r" +
	    "\n" +
	    "                           class=\"form-control\"\r" +
	    "\n" +
	    "                           name=\"cylinders\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.trade.cylinders\"\r" +
	    "\n" +
	    "                           placeholder=\"0\"\r" +
	    "\n" +
	    "                           co-formatted-number-field decimal-places=\"0\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.PAYOFF' | translate}} ({{::'crm.salesOpportunity.trades.CURRENCY_UNIT' | translate}})</label>\r" +
	    "\n" +
	    "                    <input type=\"text\" class=\"form-control\" name=\"payoff\" ng-model=\"ctrl.trade.payoffAmount\" placeholder=\"0\" co-formatted-number-field>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row ws-footer-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "            <a ng-click=\"ctrl.toggleFreeText()\">{{ctrl.addVehicleText}}</a>\r" +
	    "\n" +
	    "            <span class=\"ws-button-group\" ng-hide=\"ctrl.isSaving\">\r" +
	    "\n" +
	    "                <button class=\"btn btn-tertiary\" ng-show=\"ctrl.isCancelButtonVisible\" ng-click=\"ctrl.cancelTrade()\">{{::'crm.salesOpportunity.trades.CANCEL' | translate}}</button>\r" +
	    "\n" +
	    "                <button class=\"btn btn-secondary\" ng-click=\"ctrl.tradeBtnDisabled || ctrl.saveTrade()\" name=\"saveTradeButton\">{{::'crm.salesOpportunity.trades.SAVE_TRADE' | translate}}</button>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "            <span class=\"ws-button-group\" ng-show=\"ctrl.isSaving\">\r" +
	    "\n" +
	    "                <md-progress-circular class=\"ws-progress-circular\"\r" +
	    "\n" +
	    "                                      md-diameter=\"24\"\r" +
	    "\n" +
	    "                                      md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/bookValuationModal/bookValuationModalTemplate.html',
	    "<section class=\"ws-panel ws-trade-valuation-modal\" co-loading=\"ctrl.isLoading\" loading-show-children=\"true\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <header class=\"ws-panel-title\">{{ctrl.trade.book.text}} {{::'crm.salesOpportunity.trades.valuationModal.TITLE' | translate}}</header>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.cancel()\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <crm-alert alert-names=\"[ctrl.CrmConstants.SALES_OPPORTUNITY.TRADES.VALUATION_MODAL.ALERT]\" close-alert-names=\"[ctrl.CrmConstants.SALES_OPPORTUNITY.TRADES.VALUATION_MODAL.CLOSE_ALERT]\"></crm-alert>\r" +
	    "\n" +
	    "    <div class=\"row\">\r" +
	    "\n" +
	    "        <form name=\"ctrl.form\" novalidate>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label>{{::'crm.salesOpportunity.trades.valuationModal.BOOK' | translate}}</label>\r" +
	    "\n" +
	    "                <select class=\"form-control\" name=\"bookSelectorDropdown\"\r" +
	    "\n" +
	    "                        ng-model=\"ctrl.trade.book\"\r" +
	    "\n" +
	    "                        ng-options=\"book.text for book in ctrl.bookList track by book.value\"\r" +
	    "\n" +
	    "                        ng-change=\"ctrl.onBookChanged()\">\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-8 form-group\">\r" +
	    "\n" +
	    "                <label>{{::'crm.salesOpportunity.trades.VIN' | translate}}</label>\r" +
	    "\n" +
	    "                    <div class=\"input-group\">\r" +
	    "\n" +
	    "                        <input type=\"text\"\r" +
	    "\n" +
	    "                               class=\"form-control\"\r" +
	    "\n" +
	    "                               ng-class=\"{'ng-invalid': ctrl.vinError}\"\r" +
	    "\n" +
	    "                               ng-change=\"ctrl.clearVinDecoded()\"\r" +
	    "\n" +
	    "                               ng-required=\"true\"\r" +
	    "\n" +
	    "                               name=\"vin\"\r" +
	    "\n" +
	    "                               maxlength=\"17\"\r" +
	    "\n" +
	    "                               ng-attr-placeholder=\"{{::'crm.salesOpportunity.trades.ENTER_VIN' | translate}}\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.trade.vin\">\r" +
	    "\n" +
	    "                        <div class=\"input-group-addon btn btn-primary\" ng-click=\"ctrl.doVinLookup()\" ng-disabled=\"!ctrl.trade.vin\">{{::'crm.salesOpportunity.trades.VIN_LOOKUP_BUTTON_LABEL'  | translate}}</div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-show=\"ctrl.vinError\" name=\"invalidVinError\">{{::'crm.salesOpportunity.trades.valuationModal.INVALID_VIN' | translate}}</span>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-show=\"ctrl.form.$submitted && !ctrl.trade.vin\">{{::'crm.contact.headers.REQUIRED' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label>{{::'crm.salesOpportunity.trades.valuationModal.STATE' | translate}}</label>\r" +
	    "\n" +
	    "                <div class=\"form-control-label\">{{ctrl.tradeEvent.setup.siteAddress.state}}</div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label>{{::'crm.salesOpportunity.trades.YEAR' | translate}}</label>\r" +
	    "\n" +
	    "                <div class=\"form-control-label\">{{ctrl.trade.year}}&nbsp;</div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label>{{::'crm.salesOpportunity.trades.MAKE' | translate}}</label>\r" +
	    "\n" +
	    "                <div class=\"form-control-label\">{{ctrl.trade.make.text}}&nbsp;</div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label>{{::'crm.salesOpportunity.trades.MODEL' | translate}}</label>\r" +
	    "\n" +
	    "                <div class=\"form-control-label\"\r" +
	    "\n" +
	    "                     ng-if=\"ctrl.isSingleModel()\">{{ctrl.trade.model.text}}&nbsp;</div>\r" +
	    "\n" +
	    "                <select class=\"form-control\"\r" +
	    "\n" +
	    "                        ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.trade.model.text}\"\r" +
	    "\n" +
	    "                        ng-if=\"!ctrl.isSingleModel()\"\r" +
	    "\n" +
	    "                        ng-model=\"ctrl.trade.model\"\r" +
	    "\n" +
	    "                        ng-required=\"true\"\r" +
	    "\n" +
	    "                        ng-options=\"model.text for model in ctrl.trade.modelsLookup track by model.value\"\r" +
	    "\n" +
	    "                        ng-change=\"ctrl.onModelChanged()\">\r" +
	    "\n" +
	    "                    <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "                <span ng-show=\"ctrl.form.$submitted && !ctrl.trade.model.text\" class=\"invalid-message-static\">\r" +
	    "\n" +
	    "                    {{ ::'crm.contact.headers.REQUIRED' | translate }}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label>{{::'crm.salesOpportunity.trades.ODOMETER' | translate}} ({{::'crm.vehicle.ODOMETER_UNIT' | translate}})</label>\r" +
	    "\n" +
	    "                <input type=\"text\"\r" +
	    "\n" +
	    "                       class=\"form-control\"\r" +
	    "\n" +
	    "                       ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.trade.odometer}\"\r" +
	    "\n" +
	    "                       name=\"odometer\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.trade.odometer\"\r" +
	    "\n" +
	    "                       ng-required=\"true\"\r" +
	    "\n" +
	    "                       placeholder=\"0\"\r" +
	    "\n" +
	    "                       co-formatted-number-field decimal-places=\"0\">\r" +
	    "\n" +
	    "                <span ng-show=\"ctrl.form.$submitted && !ctrl.trade.odometer\" class=\"invalid-message-static\">\r" +
	    "\n" +
	    "                    {{ ::'crm.contact.headers.REQUIRED' | translate }}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                <label>{{ctrl.isBlackBook() ? 'crm.salesOpportunity.trades.valuationModal.CONDITION' : 'crm.salesOpportunity.trades.valuationModal.PRICE_TYPE' | translate}}</label>\r" +
	    "\n" +
	    "                <select class=\"form-control\"\r" +
	    "\n" +
	    "                        ng-model=\"ctrl.trade.appraisal.priceType\"\r" +
	    "\n" +
	    "                        ng-options=\"priceType.value as priceType.text for priceType in ctrl.priceTypeLookup\">\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-if=\"ctrl.isKelleyBlueBook()\">\r" +
	    "\n" +
	    "                <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.valuationModal.ENGINE_TYPE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.trade.appraisal.engineCode}\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.trade.appraisal.engineCode\"\r" +
	    "\n" +
	    "                            ng-options=\"engine.value as engine.text for engine in ctrl.trade.enginesLookup\">\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                    <span ng-show=\"ctrl.form.$submitted && !ctrl.trade.appraisal.engineCode\" class=\"invalid-message-static\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.headers.REQUIRED' | translate }}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.valuationModal.TRANSMISSION_TYPE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.trade.appraisal.transmissionCode}\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.trade.appraisal.transmissionCode\"\r" +
	    "\n" +
	    "                            ng-options=\"transmission.value as transmission.text for transmission in ctrl.trade.transmissionsLookup\">\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                    <span ng-show=\"ctrl.form.$submitted && !ctrl.trade.appraisal.transmissionCode\" class=\"invalid-message-static\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.headers.REQUIRED' | translate }}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-4 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.valuationModal.DRIVETRAIN' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.trade.appraisal.driveCode}\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.trade.appraisal.driveCode\"\r" +
	    "\n" +
	    "                            ng-options=\"drivetrain.value as drivetrain.text for drivetrain in ctrl.trade.drivesLookup\">\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                    <span ng-show=\"ctrl.form.$submitted && !ctrl.trade.appraisal.driveCode\" class=\"invalid-message-static\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.headers.REQUIRED' | translate }}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </form>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"row\">\r" +
	    "\n" +
	    "        <div class=\"col-md-12 form-group ws-multi-column-checkbox-group\">\r" +
	    "\n" +
	    "            <label>{{::'crm.salesOpportunity.trades.valuationModal.SELECTED_EQUIPMENT' | translate}}</label>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-4\" ng-repeat=\"equipment in ctrl.trade.appraisal.equipment\">\r" +
	    "\n" +
	    "                    <div class=\"checkbox ws-custom-item\">\r" +
	    "\n" +
	    "                        <input id=\"trade-appraisal-equipment-{{$index}}\" type=\"checkbox\" ng-model=\"equipment.isSelected\" ng-change=\"ctrl.updateEquipmentRelationships(equipment)\">\r" +
	    "\n" +
	    "                        <label for=\"trade-appraisal-equipment-{{$index}}\">\r" +
	    "\n" +
	    "                            <span class=\"fake-checkbox\"><div class=\"checkbox-selection-mark\"></div></span>\r" +
	    "\n" +
	    "                            {{equipment.description}}\r" +
	    "\n" +
	    "                        </label>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"row\">\r" +
	    "\n" +
	    "        <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "            <div class=\" ws-trade-valuation-values\">\r" +
	    "\n" +
	    "                <div class=\"row\">\r" +
	    "\n" +
	    "                    <div class=\"col-xs-4 ws-trade-valuation-value-item\">\r" +
	    "\n" +
	    "                        <div class=\"ws-valuation-value-item-label\">{{::'crm.salesOpportunity.trades.BOOK_VALUE' | translate}}</div>\r" +
	    "\n" +
	    "                        <h3 ng-hide=\"ctrl.trade.appraisal.id\">&mdash;</h3>\r" +
	    "\n" +
	    "                        <h3 ng-show=\"ctrl.trade.appraisal.id\">\r" +
	    "\n" +
	    "                            {{ctrl.trade.appraisal.bookValue | currency}}\r" +
	    "\n" +
	    "                        </h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-xs-4 ws-trade-valuation-value-item\">\r" +
	    "\n" +
	    "                        <div class=\"ws-valuation-value-item-label\">{{::'crm.salesOpportunity.trades.ODOMETER_ADJUSTMENT' | translate}}</div>\r" +
	    "\n" +
	    "                        <h3 ng-hide=\"ctrl.trade.appraisal.id\">&mdash;</h3>\r" +
	    "\n" +
	    "                        <h3 ng-show=\"ctrl.trade.appraisal.id\">\r" +
	    "\n" +
	    "                            {{ctrl.trade.appraisal.odometerAdjustmentValue | currency}}\r" +
	    "\n" +
	    "                        </h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"col-xs-4 ws-trade-valuation-value-item\">\r" +
	    "\n" +
	    "                        <div class=\"ws-valuation-value-item-label\">{{::'crm.salesOpportunity.trades.APPRAISAL_VALUE' | translate}}</div>\r" +
	    "\n" +
	    "                        <h3 ng-hide=\"ctrl.trade.appraisal.id\">&mdash;</h3>\r" +
	    "\n" +
	    "                        <h3 ng-show=\"ctrl.trade.appraisal.id\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ws-status-good':ctrl.trade.appraisal.appraisalValue>0,'ws-status-bad':ctrl.trade.appraisal.appraisalValue<0}\">\r" +
	    "\n" +
	    "                            {{ctrl.trade.appraisal.appraisalValue | currency}}\r" +
	    "\n" +
	    "                        </h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\"></div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-panel-actions\">\r" +
	    "\n" +
	    "                <button class=\"btn btn-secondary\" ng-click=\"ctrl.calculate()\">\r" +
	    "\n" +
	    "                    {{ ::'crm.salesOpportunity.trades.valuationModal.CALCULATE' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/carFaxButton/carFaxButtonRequiredFieldsModalTemplate.html',
	    "<section class=\"ws-panel\" co-loading=\"ctrl.isLoading\" loading-show-children=\"true\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <header class=\"ws-panel-title\">{{ ::'crm.salesOpportunity.trades.pushModal.TITLE' | translate}}</header>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.cancel()\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">{{ ::'crm.salesOpportunity.trades.pushModal.CARFAX_PROMPT' | translate}}</div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <crm-address contact=\"ctrl.pushContact\"\r" +
	    "\n" +
	    "                     expanded=\"true\"\r" +
	    "\n" +
	    "                     form=\"ctrl.addContactForm\"\r" +
	    "\n" +
	    "                     is-field-valid-callback=\"ctrl.modalIsFieldValid(field)\" class=\"ws-sales-opportunity-trade-modal-form\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-12 form-group ws-vin-lookup-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.VIN' | translate}}</label>\r" +
	    "\n" +
	    "                    <input type=\"text\"\r" +
	    "\n" +
	    "                           class=\"form-control\"\r" +
	    "\n" +
	    "                           name=\"vin\"\r" +
	    "\n" +
	    "                           maxlength=\"17\"\r" +
	    "\n" +
	    "                           ng-attr-placeholder=\"{{::'crm.salesOpportunity.trades.ENTER_VIN' | translate}}\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.pushTrade.vin\"\r" +
	    "\n" +
	    "                           ng-class=\"(ctrl.modalIsVinValid()) ? 'ng-valid' : 'ng-invalid'\">\r" +
	    "\n" +
	    "                    <span ng-if=\"!ctrl.modalIsVinValid()\"\r" +
	    "\n" +
	    "                          class=\"form-invalid-message\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\" ng-if=\"!ctrl.contact.isOrganization()\">\r" +
	    "\n" +
	    "                <div class=\"col-lg-4 col-md-6 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.contact.contact_points.MOBILE' | translate}}</label>\r" +
	    "\n" +
	    "                    <crm-intl-phone contact=\"ctrl.pushContact\" model=\"mobile\" is-valid=\"ctrl.modalIsPhoneValid()\"></crm-intl-phone>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-hide=\"ctrl.modalIsPhoneValid()\">\r" +
	    "\n" +
	    "                        {{ ::'crm.salesOpportunity.trades.pushModal.PHONE_NUMBER_REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-lg-4 col-md-6 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.contact.contact_points.HOME' | translate}}</label>\r" +
	    "\n" +
	    "                    <crm-intl-phone contact=\"ctrl.pushContact\" model=\"other\" is-valid=\"ctrl.modalIsPhoneValid()\"></crm-intl-phone>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-hide=\"ctrl.modalIsPhoneValid()\">\r" +
	    "\n" +
	    "                        {{ ::'crm.salesOpportunity.trades.pushModal.PHONE_NUMBER_REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-lg-4 col-md-6 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.contact.contact_points.WORK' | translate}}</label>\r" +
	    "\n" +
	    "                    <crm-intl-phone contact=\"ctrl.pushContact\" model=\"work\" is-valid=\"ctrl.modalIsPhoneValid()\"></crm-intl-phone>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-hide=\"ctrl.modalIsPhoneValid()\">\r" +
	    "\n" +
	    "                        {{ ::'crm.salesOpportunity.trades.pushModal.PHONE_NUMBER_REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </crm-address>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\"></div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-panel-actions\">\r" +
	    "\n" +
	    "                <button class=\"btn btn-secondary\" ng-click=\"ctrl.accept()\" ng-disabled=\"!ctrl.modalIsFormValid()\">\r" +
	    "\n" +
	    "                    {{ ::'crm.salesOpportunity.trades.pushModal.CARFAX_SUBMIT' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/carFaxButton/carFaxButtonTemplate.html',
	    "<a ng-click=\"ctrl.generateReport()\" ng-show=\"ctrl.carFaxIntegration\" name=\"generateCarFaxButton\">\r" +
	    "\n" +
	    "    <i class=\"fa fa-lg icon-carfax-report\"></i>\r" +
	    "\n" +
	    "</a>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/card/salesOpportunityTradeReconditionItemsModalTemplate.html',
	    "<section class=\"ws-panel ws-sales-opportunity-trade-recon-modal\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <header class=\"ws-panel-title\">{{ ::'crm.salesOpportunity.trades.reconditionItemsModal.TITLE' | translate}}</header>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.cancel()\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\" name=\"totalReconCostLine\">\r" +
	    "\n" +
	    "        <strong>{{ ::'crm.salesOpportunity.trades.TOTAL_RECON_COST' | translate}}</strong>\r" +
	    "\n" +
	    "        &nbsp;({{ ::'crm.salesOpportunity.trades.CURRENCY_UNIT' | translate}}):&nbsp;\r" +
	    "\n" +
	    "        <span ng-show=\"ctrl.reconditionSelectionsAmount\">{{ctrl.reconditionSelectionsAmount | number:2}}</span>\r" +
	    "\n" +
	    "        <span ng-hide=\"ctrl.reconditionSelectionsAmount\">&mdash;</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <button class=\"btn btn-tertiary btn-full-width\" ng-click=\"ctrl.addCustomReconditionItem()\">\r" +
	    "\n" +
	    "            <i class=\"fa fa-plus-circle\"></i> {{ ::'crm.salesOpportunity.trades.reconditionItemsModal.ADD_CUSTOM_ITEM' | translate }}\r" +
	    "\n" +
	    "        </button>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"row\">\r" +
	    "\n" +
	    "        <div class=\"col-md-6 ws-form-column\" ng-repeat=\"reconditionItemSelection in ctrl.reconditionItemSelections\">\r" +
	    "\n" +
	    "            <div class=\"row form-group\">\r" +
	    "\n" +
	    "                <div class=\"col-sm-8\">\r" +
	    "\n" +
	    "                    <div class=\"checkbox\">\r" +
	    "\n" +
	    "                        <input id=\"recondition-item-{{$index}}\" type=\"checkbox\" ng-model=\"reconditionItemSelection.isSelected\" ng-change=\"ctrl.setReconditionSelectionsAmount()\">\r" +
	    "\n" +
	    "                        <label for=\"recondition-item-{{$index}}\">\r" +
	    "\n" +
	    "                            <span class=\"fake-checkbox\"><div class=\"checkbox-selection-mark\"></div></span>\r" +
	    "\n" +
	    "                            {{reconditionItemSelection.reconditionItem.description}}\r" +
	    "\n" +
	    "                        </label>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-sm-4\" ng-show=\"reconditionItemSelection.isSelected\">\r" +
	    "\n" +
	    "                    <input type=\"number\" class=\"form-control\" ng-model=\"reconditionItemSelection.reconditionItem.amount\" ng-change=\"ctrl.setReconditionSelectionsAmount()\" name=\"reconditionItemValueTextBox\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-sm-4\" ng-hide=\"reconditionItemSelection.isSelected\">\r" +
	    "\n" +
	    "                    <div class=\"ws-value-label\">{{reconditionItemSelection.reconditionItem.amount | number:2}}</div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-md-6 ws-form-column\" ng-repeat=\"reconditionItemSelection in ctrl.customReconditionItemSelections\">\r" +
	    "\n" +
	    "            <div class=\"row form-group\">\r" +
	    "\n" +
	    "                <div class=\"col-sm-8\">\r" +
	    "\n" +
	    "                    <div class=\"checkbox ws-custom-item\">\r" +
	    "\n" +
	    "                        <input id=\"custom-recondition-item-{{$index}}\" type=\"checkbox\" ng-model=\"reconditionItemSelection.isSelected\" ng-change=\"ctrl.setReconditionSelectionsAmount()\">\r" +
	    "\n" +
	    "                        <label for=\"custom-recondition-item-{{$index}}\">\r" +
	    "\n" +
	    "                            <span class=\"fake-checkbox\"><div class=\"checkbox-selection-mark\"></div></span>\r" +
	    "\n" +
	    "                            <input type=\"text\" class=\"form-control\" ng-model=\"reconditionItemSelection.reconditionItem.description\" name=\"reconditionItemNameTextBox\">\r" +
	    "\n" +
	    "                        </label>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-sm-4\">\r" +
	    "\n" +
	    "                    <input type=\"number\" class=\"form-control\" ng-model=\"reconditionItemSelection.reconditionItem.amount\" ng-change=\"ctrl.setReconditionSelectionsAmount()\"  name=\"reconditionItemValueTextBox\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\"></div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-panel-actions\">\r" +
	    "\n" +
	    "                <button class=\"btn btn-secondary\" ng-click=\"ctrl.accept()\">\r" +
	    "\n" +
	    "                    {{ ::'crm.salesOpportunity.trades.reconditionItemsModal.SAVE' | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/card/salesOpportunityTradeTemplate.html',
	    "<co-panel co-multi-transclusion class=\"ds-card-vehicle\">\r" +
	    "\n" +
	    "    <div transclude-to=\"title\" name=\"tradesCarTitle\">\r" +
	    "\n" +
	    "        {{ctrl.trade.year}} {{ctrl.trade.make.text}} {{ctrl.trade.model.text}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <div class=\"row ws-sales-opportunity-trade\">\r" +
	    "\n" +
	    "            <div class=\"col-sm-6\">\r" +
	    "\n" +
	    "                <ul class=\"list-group\">\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                        <crm-inline-edit-trade-year-make-model-vin facade=\"ctrl.facades.yearMakeModelVin\"\r" +
	    "\n" +
	    "                                                                   trade-event=\"ctrl.tradeEvent\"\r" +
	    "\n" +
	    "                                                                   dealership-id=\"{{ctrl.salesOpportunity.dealershipId}}\"\r" +
	    "\n" +
	    "                                                                   has-value=\"ctrl.trade.vin\"\r" +
	    "\n" +
	    "                                                                   name=\"tradesVIN\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.trade.vin\" name=\"tradeVIN\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{::'crm.salesOpportunity.trades.VIN' | translate}}: </span>\r" +
	    "\n" +
	    "                                {{ctrl.trade.vin}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.trade.vin\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.trades.VIN' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit-trade-year-make-model-vin>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.facades.odometer\" has-value=\"ctrl.trade.odometer>0\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.trade.odometer\" name=\"tradesOdometer\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{::'crm.salesOpportunity.trades.ODOMETER' | translate}}: </span>\r" +
	    "\n" +
	    "                                {{ctrl.trade.odometer | number:0}} {{::'crm.vehicle.ODOMETER_UNIT' | translate}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.trade.odometer\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.trades.ODOMETER' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.facades.exteriorColor\" has-value=\"ctrl.trade.exteriorColor\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.trade.exteriorColor\" name=\"tradesExteriorColor\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{::'crm.salesOpportunity.trades.EXTERIOR_COLOR' | translate}}: </span>\r" +
	    "\n" +
	    "                                {{ctrl.trade.exteriorColor}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.trade.exteriorColor\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.trades.EXTERIOR_COLOR' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.facades.cylinders\" has-value=\"ctrl.trade.cylinders>0\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.trade.cylinders\" name=\"tradesCylinders\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{::'crm.salesOpportunity.trades.NUMBER_OF_CYLINDERS' | translate}}: </span>\r" +
	    "\n" +
	    "                                {{ctrl.trade.cylinders | number:0}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.trade.cylinders\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.trades.NUMBER_OF_CYLINDERS' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\" name=\"tradesExistingVSC\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.facades.existingVsc\" has-value=\"ctrl.trade.hasExistingVsc\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.trade.hasExistingVsc\" name=\"tradeExistingVSC\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{::'crm.salesOpportunity.trades.EXISTING_VSC' | translate}}: </span>\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.trades.YES' | translate}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.trade.hasExistingVsc\" name=\"tradeExistingVSCEmpty\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.trades.EXISTING_VSC' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\" name=\"tradeInspectedBy\">\r" +
	    "\n" +
	    "                        <crm-inline-edit-trade-inspected-by facade=\"ctrl.facades.inspectedBy\" has-value=\"!!ctrl.trade.inspectedBy\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.trade.inspectedBy\" name=\"tradeInspectedBy\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{::'crm.salesOpportunity.trades.INSPECTED_BY' | translate}}: </span>\r" +
	    "\n" +
	    "                                {{ctrl.trade.inspectedBy}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.trade.inspectedBy\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.trades.INSPECTED_BY' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit-trade-inspected-by>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                </ul>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-sm-6\">\r" +
	    "\n" +
	    "                <ul class=\"list-group\">\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\" ng-if=\"ctrl.canViewAcv\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.facades.acv\" has-value=\"ctrl.trade.actualCashValueAmount\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.trade.actualCashValueAmount\" name=\"tradesACV\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{::'crm.salesOpportunity.trades.ACV' | translate}}: </span>\r" +
	    "\n" +
	    "                                {{ctrl.trade.actualCashValueAmount | currency}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.trade.actualCashValueAmount\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.trades.ACV' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\" ng-if=\"ctrl.dealTradesPermission && ctrl.tradeValuationPermission\">\r" +
	    "\n" +
	    "                        <span ng-class=\"{'inline-edit-area': ctrl.reconditionAmount}\" ng-click=\"ctrl.showReconditionItemsModal()\" name=\"totalReconCostLabel\">\r" +
	    "\n" +
	    "                            <span ng-show=\"ctrl.reconditionAmount\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\" name=\"tradesTotalReconCost\">{{::'crm.salesOpportunity.trades.TOTAL_RECON_COST' | translate}}: </span>\r" +
	    "\n" +
	    "                            {{ctrl.reconditionAmount | currency}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <span ng-hide=\"ctrl.reconditionAmount\" name=\"tradesTotalReconCostEmpty\">\r" +
	    "\n" +
	    "                                <a href><i class=\"fa fa-plus-circle\"></i> {{::'crm.salesOpportunity.trades.TOTAL_RECON_COST' | translate}}</a>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                            <span class=\"edit-action\" ng-show=\"ctrl.reconditionAmount\"><i class=\"fa fa-pencil\"></i></span>\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\" ng-if=\"ctrl.canViewAmount\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.facades.tradeAmount\" has-value=\"ctrl.trade.tradeAmount\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.trade.tradeAmount\" name=\"tradesAmount\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{::'crm.salesOpportunity.trades.TRADE_AMOUNT' | translate}}: </span>\r" +
	    "\n" +
	    "                                {{ctrl.trade.tradeAmount | currency}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.trade.tradeAmount\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.trades.TRADE_AMOUNT' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\" ng-if=\"ctrl.canViewPayoff\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.facades.payoff\" has-value=\"ctrl.trade.payoffAmount\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.trade.payoffAmount\" name=\"tradesPayoff\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{::'crm.salesOpportunity.trades.PAYOFF' | translate}}: </span>\r" +
	    "\n" +
	    "                                {{ctrl.trade.payoffAmount | currency}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.trade.payoffAmount\">\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.trades.PAYOFF' | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                    <li class=\"list-group-item\" ng-if=\"ctrl.canViewAmount && ctrl.canViewPayoff && ctrl.trade.tradeAmount\" name=\"tradesNetTrade\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{::'crm.salesOpportunity.trades.NET_TRADE' | translate}}: </span>\r" +
	    "\n" +
	    "                        {{ctrl.netTrade | currency}}\r" +
	    "\n" +
	    "                    </li>\r" +
	    "\n" +
	    "                </ul>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-panel-row\" ng-if=\"ctrl.trade.book.value && ctrl.dealTradesPermission && ctrl.tradeValuationPermission\">\r" +
	    "\n" +
	    "            <div class=\"ws-sales-opportunity-trade-book-panel\">\r" +
	    "\n" +
	    "                <div class=\"ws-sales-opportunity-trade-book-panel-item ws-sales-opportunity-trade-book-panel-item-primary\">\r" +
	    "\n" +
	    "                    <div>\r" +
	    "\n" +
	    "                        <h3>\r" +
	    "\n" +
	    "                            <a name=\"tradesBookName\" ng-click=\"ctrl.showValuationModal()\" ng-disabled=\"ctrl.trade.isFreeText\">\r" +
	    "\n" +
	    "                                <i class=\"fa fa-calculator\"></i> {{ctrl.trade.book.text}}\r" +
	    "\n" +
	    "                            </a>\r" +
	    "\n" +
	    "                        </h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"ws-deaccent-text\" name=\"tradesBookLabel\">{{::'crm.salesOpportunity.trades.BOOK' | translate}}</div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-sales-opportunity-trade-book-panel-item\">\r" +
	    "\n" +
	    "                    <div name=\"tradesBookValue\">\r" +
	    "\n" +
	    "                        <h3 ng-hide=\"ctrl.trade.appraisal.id\">&mdash;</h3>\r" +
	    "\n" +
	    "                        <h3 ng-show=\"ctrl.trade.appraisal.id\">\r" +
	    "\n" +
	    "                            {{ctrl.trade.appraisal.bookValue | currency}}\r" +
	    "\n" +
	    "                        </h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"ws-deaccent-text\" name=\"bookValueLabel\">{{::'crm.salesOpportunity.trades.BOOK_VALUE' | translate}}</div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-sales-opportunity-trade-book-panel-item\">\r" +
	    "\n" +
	    "                    <div name=\"tradesOdometerAdjustmentValue\">\r" +
	    "\n" +
	    "                        <h3 ng-hide=\"ctrl.trade.appraisal.id\">&mdash;</h3>\r" +
	    "\n" +
	    "                        <h3 ng-show=\"ctrl.trade.appraisal.id\">\r" +
	    "\n" +
	    "                            {{ctrl.trade.appraisal.odometerAdjustmentValue | currency}}\r" +
	    "\n" +
	    "                        </h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"ws-deaccent-text\" name=\"tradesOdometerAdjustmentLabel\">{{::'crm.salesOpportunity.trades.ODOMETER_ADJUSTMENT' | translate}}</div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-sales-opportunity-trade-book-panel-item\">\r" +
	    "\n" +
	    "                    <div name=\"tradesAppraisalValue\">\r" +
	    "\n" +
	    "                        <h3 ng-hide=\"ctrl.trade.appraisal.id\">&mdash;</h3>\r" +
	    "\n" +
	    "                        <h3 ng-show=\"ctrl.trade.appraisal.id\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ws-status-good':ctrl.trade.appraisal.appraisalValue>0,'ws-status-bad':ctrl.trade.appraisal.appraisalValue<0}\">\r" +
	    "\n" +
	    "                            {{ctrl.trade.appraisal.appraisalValue | currency}}\r" +
	    "\n" +
	    "                        </h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"ws-deaccent-text\" name=\"tradesAppraisalLabel\">{{::'crm.salesOpportunity.trades.APPRAISAL_VALUE' | translate}}</div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <crm-carfax-button contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                           sales-opportunity=\"ctrl.salesOpportunity\"\r" +
	    "\n" +
	    "                           trade-event=\"ctrl.tradeEvent\"\r" +
	    "\n" +
	    "                           trade=\"ctrl.trade\"\r" +
	    "\n" +
	    "                           set-is-loading=\"ctrl.setIsLoading\"></crm-carfax-button>\r" +
	    "\n" +
	    "        <co-panel-actions-menu items=\"ctrl.actionItems\"></co-panel-actions-menu>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/card/salesOpportunityTradeValuationModalTemplate.html',
	    "<crm-trade-book-valuation-modal trade-event=\"ctrl.tradeEvent\"\r" +
	    "\n" +
	    "                                trade=\"ctrl.trade\"\r" +
	    "\n" +
	    "                                salesOpportunity=\"ctrl.salesOpportunity\"\r" +
	    "\n" +
	    "                                cancel=\"ctrl.modalManager.cancel()\"></crm-trade-book-valuation-modal>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/existingTradeVehicleCard/existingTradeVehicleCardModalTemplate.html',
	    "<section class=\"ws-panel\" co-loading=\"ctrl.isLoading\" loading-show-children=\"true\" name=\"existingCustomerVehicleModal\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <header class=\"ws-panel-title\" name=\"existingCustomerVehicleTitle\">{{::\"crm.salesOpportunity.trades.existingVehicle.TITLE\" | translate}}</header>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.existingVehicleData.modal.cancel()\" name=\"existingCustomerVehicleModalCancelButton\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row ws-sales-opportunity-trade-existing-vehicle\">\r" +
	    "\n" +
	    "        <crm-existing-trade-vehicle-card ng-repeat=\"vehicle in ctrl.existingVehicles\"\r" +
	    "\n" +
	    "                                         vehicle=\"vehicle\"\r" +
	    "\n" +
	    "                                         callback=\"ctrl.addExistingVehicleAsTrade(vehicle)\"></crm-existing-trade-vehicle-card>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/existingTradeVehicleCard/existingTradeVehicleCardTemplate.html',
	    "<co-panel co-multi-transclusion class=\"ds-card-vehicle\" status=\"{{ctrl.status}}\" name=\"existingTradeCard\">\r" +
	    "\n" +
	    "  <div transclude-to=\"media\">\r" +
	    "\n" +
	    "      <div class=\"ds-card-thumbnail ws-no-vehicle-image\" name=\"existingTradeCarPicture\">\r" +
	    "\n" +
	    "        <img src=\"content/img/car-silhouette.svg\" name=\"tradesCarIcon\"/>\r" +
	    "\n" +
	    "      </div>\r" +
	    "\n" +
	    "  </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\" name=\"existingTradeCardTitle\">\r" +
	    "\n" +
	    "        {{ctrl.vehicle.year}} {{ctrl.vehicle.make}} {{ctrl.vehicle.model}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <div name=\"existingTradeOwnedOrNot\">\r" +
	    "\n" +
	    "          <span ng-show=\"ctrl.vehicle.isCustomerOwned\" class=\"text-success\">{{::\"crm.vehicle.OWNED_STATUS\" | translate}}</span>\r" +
	    "\n" +
	    "          <span ng-hide=\"ctrl.vehicle.isCustomerOwned\" class=\"text-overdue\">{{::\"crm.vehicle.NOT_OWNED_STATUS\" | translate}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-content-group\" name=\"existingTradeVehicleInfo\">\r" +
	    "\n" +
	    "            <span ng-repeat=\"item in ctrl.items\"><span ng-if=\"!$first\"> / </span>{{item}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "            <div class=\"btn btn-primary\" ng-click=\"ctrl.tradeBtnDisabled || ctrl.onTradeBtnClick()\" name=\"existingTradeTradeThisVehicleButton\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-exchange\"></i> {{::\"crm.salesOpportunity.trades.existingVehicle.TRADE_THIS_VEHICLE\" | translate}}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>\r" +
	    "\n"
	  );


	  $templateCache.put('app/salesOpportunity/trades/panel/salesOpportunityTradesPanelTemplate.html',
	    "<section class=\"ws-panel\" co-loading=\"ctrl.isLoading\" initial-height=\"{{ctrl.initialHeight}}\" loading-show-children=\"ctrl.showChildrenDuringLoading\">\r" +
	    "\n" +
	    "    <div>\r" +
	    "\n" +
	    "        <crm-alert alert-names=\"[ctrl.CrmConstants.SALES_OPPORTUNITY.TRADES.ALERT]\"></crm-alert>\r" +
	    "\n" +
	    "        <div class=\"ws-panel-row ws-sales-opportunity-trade-add-existing-vehicle\"\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "             ng-show=\"ctrl.inactiveTrades.length && ctrl.existingVehicleData.count\">\r" +
	    "\n" +
	    "            <crm-dynamic-translation\r" +
	    "\n" +
	    "                    model=\"ctrl.existingVehicleData\"\r" +
	    "\n" +
	    "                    translationkey=\"crm.salesOpportunity.trades.ADD_EXISTING_VEHICLE_PROMPT\" name=\"tradeCustomerOwnsTitle\">\r" +
	    "\n" +
	    "            </crm-dynamic-translation>&nbsp;\r" +
	    "\n" +
	    "            <a ng-click=\"ctrl.showAddExistingVehicleModal()\" name=\"tradeExistingVehicleLink\">\r" +
	    "\n" +
	    "                {{::\"crm.salesOpportunity.trades.TRADE_EXISTING_VEHICLE_LINK\" | translate}}\r" +
	    "\n" +
	    "            </a>{{::\"crm.salesOpportunity.trades.ADD_EXISTING_VEHICLE_PUNCTUATION\" | translate}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div ng-hide=\"ctrl.isAdding\">\r" +
	    "\n" +
	    "                <div class=\"col-sm-6\">\r" +
	    "\n" +
	    "                    <button class=\"btn btn-tertiary btn-full-width\"\r" +
	    "\n" +
	    "                            name=\"addSalesOpportunityButton\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.addNewTrade()\"\r" +
	    "\n" +
	    "                            ng-disabled=\"ctrl.inactiveTrades.length === 0 || ctrl.isPushingThirdParty\">\r" +
	    "\n" +
	    "                        <i class=\"fa fa-plus-circle\"></i> {{::\"crm.salesOpportunity.trades.ADD_NEW_TRADE\" | translate }}\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-sm-6\">\r" +
	    "\n" +
	    "                    <button class=\"btn btn-primary btn-full-width\"\r" +
	    "\n" +
	    "                            name=\"pushTradesButton\"\r" +
	    "\n" +
	    "                            ng-click=\"ctrl.pushTrades()\"\r" +
	    "\n" +
	    "                            ng-disabled=\"ctrl.isPushingThirdParty || !ctrl.nonCarFaxIntegrations.length\">\r" +
	    "\n" +
	    "                        <i class=\"fa fa-exchange\"></i>\r" +
	    "\n" +
	    "                        <span ng-if=\"ctrl.activeTrades.length < 2\">{{::\"crm.salesOpportunity.trades.PUSH_TRADE\" | translate}}</span>\r" +
	    "\n" +
	    "                        <span ng-if=\"ctrl.activeTrades.length > 1\">{{::\"crm.salesOpportunity.trades.PUSH_ALL_TRADES\" | translate}}</span>\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            <div class=\"ws-panel-row\"></div>\r" +
	    "\n" +
	    "            <crm-sales-opportunity-trade ng-repeat=\"trade in ctrl.activeTrades\"\r" +
	    "\n" +
	    "                                         ng-if=\"ctrl.tradeEvent && !ctrl.isPushingThirdParty\"\r" +
	    "\n" +
	    "                                         contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                         sales-opportunity=\"ctrl.salesOpportunity\"\r" +
	    "\n" +
	    "                                         trade-event=\"ctrl.tradeEvent\"\r" +
	    "\n" +
	    "                                         trade=\"trade\"\r" +
	    "\n" +
	    "                                         can-push=\"$first\"\r" +
	    "\n" +
	    "                                         set-is-loading=\"ctrl.setIsLoading\"\r" +
	    "\n" +
	    "                                         trades-panel-options=\"ctrl.tradesPanelOptions\"></crm-sales-opportunity-trade>\r" +
	    "\n" +
	    "            <crm-trade-push-third-party-panel ng-if=\"ctrl.tradeEvent && ctrl.isPushingThirdParty\"\r" +
	    "\n" +
	    "                                              contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                              trade-event=\"ctrl.tradeEvent\"\r" +
	    "\n" +
	    "                                              trade=\"ctrl.tradeEvent.trades[0]\"\r" +
	    "\n" +
	    "                                              sales-opportunity=\"ctrl.salesOpportunity\"></crm-trade-push-third-party-panel>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <crm-sales-opportunity-add-trade sales-opportunity=\"ctrl.salesOpportunity\"\r" +
	    "\n" +
	    "                                         trade-event=\"ctrl.tradeEvent\"\r" +
	    "\n" +
	    "                                         trade=\"ctrl.addTrade\"\r" +
	    "\n" +
	    "                                         class=\"sales-opportunity-add-trade\"\r" +
	    "\n" +
	    "                                         ng-if=\"!ctrl.isLoading && ctrl.tradeEvent && ctrl.isAdding\"></crm-sales-opportunity-add-trade>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/pushThirdParty/card/tradePushThirdPartyCardTemplate.html',
	    "<co-panel class=\"ds-card ws-trade-push-in-progress\" co-multi-transclusion>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-row ws-trade-push-row\">\r" +
	    "\n" +
	    "            <div class=\"ws-trade-push-item\">\r" +
	    "\n" +
	    "                <md-progress-circular class=\"ws-progress-circular\" md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-trade-push-item\">\r" +
	    "\n" +
	    "                <h3>\r" +
	    "\n" +
	    "                    <crm-dynamic-translation\r" +
	    "\n" +
	    "                        model=\"ctrl.integrationResult.integration\"\r" +
	    "\n" +
	    "                        translationkey=\"crm.salesOpportunity.trades.pushThirdParty.PUSHING_TO_THIRD_PARTY\">\r" +
	    "\n" +
	    "                    </crm-dynamic-translation>\r" +
	    "\n" +
	    "                </h3>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-trade-push-item\">\r" +
	    "\n" +
	    "                <crm-dynamic-translation\r" +
	    "\n" +
	    "                        model=\"ctrl\"\r" +
	    "\n" +
	    "                        translationkey=\"crm.salesOpportunity.trades.pushThirdParty.PUSH_NUMBER\">\r" +
	    "\n" +
	    "                </crm-dynamic-translation>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/pushThirdParty/panel/tradePushThirdPartyPanelTemplate.html',
	    "<crm-trade-push-third-party-selection-card ng-if=\"!ctrl.integrationResults.length\"\r" +
	    "\n" +
	    "                                           integrations=\"ctrl.integrations\"\r" +
	    "\n" +
	    "                                           on-push=\"ctrl.startIntegrationPush(selectedIntegrations)\"></crm-trade-push-third-party-selection-card>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "<div class=\"ws-trade-push-result-container\" ng-repeat=\"integrationResult in ctrl.integrationResults\">\r" +
	    "\n" +
	    "    <crm-trade-push-third-party-card\r" +
	    "\n" +
	    "        ng-if=\"integrationResult.status == ctrl.tradePushThirdPartyStatus.InProgress\"\r" +
	    "\n" +
	    "        integration-results=\"ctrl.integrationResults\"\r" +
	    "\n" +
	    "        index=\"$index\">\r" +
	    "\n" +
	    "    </crm-trade-push-third-party-card>\r" +
	    "\n" +
	    "    <crm-trade-push-third-party-result-card\r" +
	    "\n" +
	    "        ng-if=\"integrationResult.status != ctrl.tradePushThirdPartyStatus.InProgress\"\r" +
	    "\n" +
	    "        integration-result=\"integrationResult\"\r" +
	    "\n" +
	    "        on-close=\"ctrl.removeIntegrationResult(integrationResult)\">\r" +
	    "\n" +
	    "    </crm-trade-push-third-party-result-card>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/pushThirdParty/resultCard/tradePushThirdPartyResultCardTemplate.html',
	    "<co-panel co-multi-transclusion\r" +
	    "\n" +
	    "          class=\"ds-card ws-trade-push-result\"\r" +
	    "\n" +
	    "          ng-class=\"{'ws-trade-push-success': ctrl.isSuccess, 'ws-trade-push-failure': !ctrl.isSuccess}\">\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        <span ng-if=\"ctrl.isSuccess\">\r" +
	    "\n" +
	    "            {{::\"crm.salesOpportunity.trades.pushThirdParty.PUSH_SUCCESSFUL\" | translate}}\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <span ng-if=\"!ctrl.isSuccess\">\r" +
	    "\n" +
	    "            {{::\"crm.salesOpportunity.trades.pushThirdParty.PUSH_FAILED\" | translate}}\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <i class=\"fa fa-close\" ng-click=\"ctrl.close()\"></i>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <p>\r" +
	    "\n" +
	    "            <crm-dynamic-translation\r" +
	    "\n" +
	    "                ng-if=\"ctrl.isSuccess\"\r" +
	    "\n" +
	    "                model=\"ctrl.integrationResult.integration\"\r" +
	    "\n" +
	    "                translationkey=\"crm.salesOpportunity.trades.pushThirdParty.YOUR_TRADE_IS_WAITING\">\r" +
	    "\n" +
	    "            </crm-dynamic-translation>\r" +
	    "\n" +
	    "            <crm-dynamic-translation\r" +
	    "\n" +
	    "                    ng-if=\"!ctrl.isSuccess\"\r" +
	    "\n" +
	    "                    model=\"ctrl.integrationResult.integration\"\r" +
	    "\n" +
	    "                    translationkey=\"crm.salesOpportunity.trades.pushThirdParty.ERROR_OCCURRED\">\r" +
	    "\n" +
	    "            </crm-dynamic-translation>\r" +
	    "\n" +
	    "        </p>\r" +
	    "\n" +
	    "        <p ng-if=\"!ctrl.isSuccess\">\r" +
	    "\n" +
	    "            {{ctrl.integrationResult.message}}\r" +
	    "\n" +
	    "        </p>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/pushThirdParty/selectionCard/tradePushThirdPartySelectionCardTemplate.html',
	    "<co-panel class=\"ds-card\" co-multi-transclusion>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\" name=\"pushThirdPartyTitle\">\r" +
	    "\n" +
	    "        {{::\"crm.salesOpportunity.trades.pushThirdParty.SELECTION_PROMPT\" | translate}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-row ws-trade-third-party-list\">\r" +
	    "\n" +
	    "            <div class=\"form-group\">\r" +
	    "\n" +
	    "                <div class=\"checkbox-inline\" ng-repeat=\"selectableIntegration in ctrl.selectableIntegrations\">\r" +
	    "\n" +
	    "                    <input id=\"checkbox-integration-id-{{$index}}\"\r" +
	    "\n" +
	    "                           type=\"checkbox\"\r" +
	    "\n" +
	    "                           ng-model=\"selectableIntegration.isSelected\"\r" +
	    "\n" +
	    "                           ng-change=\"ctrl.updateSelectedCount(selectableIntegration)\">\r" +
	    "\n" +
	    "                    <label for=\"checkbox-integration-id-{{$index}}\" name=\"pushThirdPartyTradeCheckboxLabel\">\r" +
	    "\n" +
	    "                        <span class=\"fake-checkbox\" name=\"pushThirdPartyTradeCheckbox\"></span>{{selectableIntegration.refDef.text}}\r" +
	    "\n" +
	    "                    </label>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "            <div class=\"ws-panel-content-main\"></div>\r" +
	    "\n" +
	    "            <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "                <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-panel-actions\">\r" +
	    "\n" +
	    "                    <button class=\"btn btn-tertiary\" ng-click=\"ctrl.cancel()\" name=\"pushThirdPartyCancelButton\">\r" +
	    "\n" +
	    "                        {{::\"crm.salesOpportunity.trades.pushThirdParty.CANCEL\" | translate}}\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                    <button class=\"btn btn-primary\" ng-disabled=\"!ctrl.selectedCount\" ng-click=\"ctrl.push()\" name=\"pushThirdPartyPushButton\">\r" +
	    "\n" +
	    "                        {{::\"crm.salesOpportunity.trades.pushThirdParty.PUSH\" | translate}}\r" +
	    "\n" +
	    "                    </button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </aside>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/requiredFieldsModal/tradeRequiredFieldsModalParentTemplate.html',
	    "<crm-trade-required-fields-modal contact=\"ctrl.contact\"\r" +
	    "\n" +
	    "                                 trade=\"ctrl.trade\"\r" +
	    "\n" +
	    "                                 integrations=\"ctrl.integrations\"\r" +
	    "\n" +
	    "                                 accept=\"ctrl.accept()\"\r" +
	    "\n" +
	    "                                 cancel=\"ctrl.cancel()\"></crm-trade-required-fields-modal>"
	  );


	  $templateCache.put('app/salesOpportunity/trades/requiredFieldsModal/tradeRequiredFieldsModalTemplate.html',
	    "<section class=\"ws-panel\" co-loading=\"ctrl.isLoading\" loading-show-children=\"true\" name=\"tradeRequiredInfoModal\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <header class=\"ws-panel-title\" name=\"tradeRequiredInfoTitle\">{{ ::'crm.salesOpportunity.trades.pushModal.TITLE' | translate}}</header>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-fill-even\" name=\"tradeRequiredInfoCloseButton\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.cancel()\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div name=\"tradeRequiredInfoLabel\">\r" +
	    "\n" +
	    "        <span ng-if=\"ctrl.isCarFax()\">{{::'crm.salesOpportunity.trades.pushModal.PROMPT_PREFIX_CARFAX' | translate}}</span>\r" +
	    "\n" +
	    "        <span ng-if=\"!ctrl.isCarFax()\">{{::'crm.salesOpportunity.trades.pushModal.PROMPT_PREFIX_PUSH' | translate}}</span>\r" +
	    "\n" +
	    "        <crm-dynamic-translation\r" +
	    "\n" +
	    "                model=\"ctrl\"\r" +
	    "\n" +
	    "                translationkey=\"crm.salesOpportunity.trades.pushModal.PROMPT\">\r" +
	    "\n" +
	    "        </crm-dynamic-translation>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <crm-address contact=\"ctrl.pushContact\"\r" +
	    "\n" +
	    "                     expanded=\"true\"\r" +
	    "\n" +
	    "                     is-field-valid-callback=\"ctrl.isFieldValid(field)\" class=\"ws-sales-opportunity-trade-modal-form\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-12 form-group ws-vin-lookup-group\">\r" +
	    "\n" +
	    "                    <label name=\"tradeRequiredInfoVinLabel\">{{::'crm.salesOpportunity.trades.VIN' | translate}}</label>\r" +
	    "\n" +
	    "                    <input type=\"text\"\r" +
	    "\n" +
	    "                           class=\"form-control\"\r" +
	    "\n" +
	    "                           name=\"vin\"\r" +
	    "\n" +
	    "                           maxlength=\"17\"\r" +
	    "\n" +
	    "                           ng-attr-placeholder=\"{{::'crm.salesOpportunity.trades.ENTER_VIN' | translate}}\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.pushTrade.vin\"\r" +
	    "\n" +
	    "                           ng-class=\"(ctrl.isVinValid()) ? 'ng-valid' : 'ng-invalid'\">\r" +
	    "\n" +
	    "                    <span ng-if=\"!ctrl.isVinValid()\"\r" +
	    "\n" +
	    "                          class=\"form-invalid-message\">\r" +
	    "\n" +
	    "                        {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\" ng-if=\"!ctrl.contact.isOrganization()\">\r" +
	    "\n" +
	    "                <div class=\"col-lg-4 col-md-6 form-group\">\r" +
	    "\n" +
	    "                    <label name=\"tradeRequiredInfoMobilePhoneLabel\">{{::'crm.contact.contact_points.MOBILE' | translate}}</label>\r" +
	    "\n" +
	    "                    <crm-intl-phone contact=\"ctrl.pushContact\" model=\"mobile\" is-valid=\"ctrl.isPhoneValid()\"></crm-intl-phone>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-hide=\"ctrl.isPhoneValid()\">\r" +
	    "\n" +
	    "                        {{ ::'crm.salesOpportunity.trades.pushModal.PHONE_NUMBER_REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-lg-4 col-md-6 form-group\">\r" +
	    "\n" +
	    "                    <label name=\"tradeRequiredInfoHomePhoneLabel\">{{::'crm.contact.contact_points.HOME' | translate}}</label>\r" +
	    "\n" +
	    "                    <crm-intl-phone contact=\"ctrl.pushContact\" model=\"other\" is-valid=\"ctrl.isPhoneValid()\"></crm-intl-phone>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-hide=\"ctrl.isPhoneValid()\">\r" +
	    "\n" +
	    "                        {{ ::'crm.salesOpportunity.trades.pushModal.PHONE_NUMBER_REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-lg-4 col-md-6 form-group\">\r" +
	    "\n" +
	    "                    <label name=\"tradeRequiredInfoWorkPhoneLabel\">{{::'crm.contact.contact_points.WORK' | translate}}</label>\r" +
	    "\n" +
	    "                    <crm-intl-phone contact=\"ctrl.pushContact\" model=\"work\" is-valid=\"ctrl.isPhoneValid()\"></crm-intl-phone>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-hide=\"ctrl.isPhoneValid()\">\r" +
	    "\n" +
	    "                        {{ ::'crm.salesOpportunity.trades.pushModal.PHONE_NUMBER_REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </crm-address>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\"></div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-panel-actions\">\r" +
	    "\n" +
	    "                <button class=\"btn btn-secondary\" ng-click=\"ctrl.submit()\" ng-disabled=\"!ctrl.isFormValid()\" name=\"tradeRequiredInfoSaveAndPushButton\">\r" +
	    "\n" +
	    "                    {{ctrl.buttonText}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/service/add/panel/serviceAddPanelTemplate.html',
	    "<div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main ws-content-group\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-12 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'common.LABELS.DESCRIPTION' | translate}}</label>\r" +
	    "\n" +
	    "                    <input type=\"text\" class=\"form-control\" name=\"description\" ng-model=\"ctrl.description\" ng-change=\"ctrl.updateDescription()\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'common.LABELS.TYPE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            name=\"type\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.serviceModel.serviceProduct.text}\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.serviceModel.type\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.serviceEventRefDefs.type track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'common.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                     <span class=\"invalid-message-static\" ng-show=\"ctrl.form.$submitted && !ctrl.serviceModel.type.text\" name=\"serviceAddRequiredType\">\r" +
	    "\n" +
	    "                        {{::'common.ERRORS.REQUIRED_MESSAGE' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'service.LABELS.SERVICE_PRODUCT' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.serviceModel.serviceProduct.text}\"\r" +
	    "\n" +
	    "                            name=\"serviceProduct\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.serviceModel.serviceProduct\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.serviceEventRefDefs.serviceProduct track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'common.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-show=\"ctrl.form.$submitted && !ctrl.serviceModel.serviceProduct.text\" name=\"serviceAddRequiredServiceProduct\">\r" +
	    "\n" +
	    "                        {{::'common.ERRORS.REQUIRED_MESSAGE' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'common.LABELS.SOURCE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.serviceModel.source.text}\"\r" +
	    "\n" +
	    "                            name=\"source\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.serviceModel.source\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.serviceEventRefDefs.source track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'common.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                     <span class=\"invalid-message-static\" ng-show=\"ctrl.form.$submitted && !ctrl.serviceModel.source.text\" name=\"serviceAddRequiredSource\">\r" +
	    "\n" +
	    "                        {{::'common.ERRORS.REQUIRED_MESSAGE' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'common.LABELS.TRACKING_CODE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            name=\"trackingCode\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.serviceModel.trackingCode\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.serviceEventRefDefs.trackingCode track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'common.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'common.LABELS.ASSIGNED_TO' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            name=\"assignedTo\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.serviceModel.assignedTo\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.serviceEventRefDefs.assignedTo track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'common.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'common.LABELS.BDC' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            name=\"bdc\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.serviceModel.bdcAssigned\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.serviceEventRefDefs.bdc track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'common.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'common.LABELS.RANKING' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            name=\"ranking\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.serviceModel.ranking\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.serviceEventRefDefs.ranking track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'common.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'service.LABELS.TARGET_SERVICE_DATE' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.form.$submitted && !ctrl.serviceModel.serviceDate.text}\"\r" +
	    "\n" +
	    "                            name=\"serviceDate\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.serviceModel.serviceDate\"\r" +
	    "\n" +
	    "                            ng-options=\"model.text for model in ctrl.serviceEventRefDefs.serviceDate track by model.value\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'common.LABELS.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-show=\"ctrl.form.$submitted && !ctrl.serviceModel.serviceDate.text\" name=\"serviceAddRequiredServiceDate\">\r" +
	    "\n" +
	    "                        {{::'common.ERRORS.REQUIRED_MESSAGE' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/service/add/serviceAddTemplate.html',
	    "<div class=\"detail-view-container ws-flex-container\"\r" +
	    "\n" +
	    "     co-loading=\"ctrl.isLoading\">\r" +
	    "\n" +
	    "    <div class=\"detail-view-header\">\r" +
	    "\n" +
	    "        <div class=\"ws-action-bar\">\r" +
	    "\n" +
	    "            <h1 class=\"detail-view-title\">{{ ::'service.HEADERS.ADD_NEW' | translate }}</h1>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <div class=\"ws-action-spacer\"></div>\r" +
	    "\n" +
	    "            <button type=\"button\" class=\"btn ws-primary-action\" name=\"saveButton\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.submit(ctrl.addServiceEventForm)\">{{ ::'crm.actions.SAVE_AND_FINISH' | translate }}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"detail-view-content\">\r" +
	    "\n" +
	    "        <crm-alert alert-names=\"['SERVICE_ADD_ERROR']\"></crm-alert>\r" +
	    "\n" +
	    "        <div class=\"row ws-layout-row\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-12 col-lg-5\">\r" +
	    "\n" +
	    "                <crm-contact-card ng-show=\"ctrl.contact\" contact=\"ctrl.contact\"></crm-contact-card>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-xs-12 col-lg-7\">\r" +
	    "\n" +
	    "                <div class=\"ws-detail-view-content-group\">\r" +
	    "\n" +
	    "                    <uib-tabset>\r" +
	    "\n" +
	    "                        <uib-tab>\r" +
	    "\n" +
	    "                            <uib-tab-heading name=\"serviceInfoTab\">\r" +
	    "\n" +
	    "                                <div class=\"tab-title\">\r" +
	    "\n" +
	    "                                    {{ ::'service.HEADERS.SERVICE_ADD_TAB' | translate }}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </uib-tab-heading>\r" +
	    "\n" +
	    "                            <div class=\"ws-panel\" style=\"clear: both\">\r" +
	    "\n" +
	    "                                <form name=\"ctrl.addServiceEventForm\">\r" +
	    "\n" +
	    "                                    <service-add-panel service-model=\"ctrl.serviceModel\" invalid=\"ctrl.invalid\" form=\"ctrl.addServiceEventForm\">\r" +
	    "\n" +
	    "                                    </service-add-panel>\r" +
	    "\n" +
	    "                                </form>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </uib-tab>\r" +
	    "\n" +
	    "                        <uib-tab>\r" +
	    "\n" +
	    "                            <uib-tab-heading name=\"vehicleTab\">\r" +
	    "\n" +
	    "                                <div class=\"tab-title\">\r" +
	    "\n" +
	    "                                    {{::'crm.contact.headers.VEHICLE_INFO' | translate}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </uib-tab-heading>\r" +
	    "\n" +
	    "                            <vehicle-info contact=\"ctrl.contact\" is-submitted=\"ctrl.isSubmitted\" contact-vehicles=\"ctrl.contact.vehicles\" vehicle=\"ctrl.serviceModel.vehicle\" is-add=\"true\"></vehicle-info>\r" +
	    "\n" +
	    "                        </uib-tab>\r" +
	    "\n" +
	    "                    </uib-tabset>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/service/update/serviceUpdateTemplate.html',
	    "<div class=\"detail-view-container\" ng-class=\"{'ws-flex-container': !ctrl.embedded}\">\r" +
	    "\n" +
	    "    <div class=\"detail-view-header\">\r" +
	    "\n" +
	    "        <div class=\"ws-action-bar\">\r" +
	    "\n" +
	    "            <h1 class=\"detail-view-title\">\r" +
	    "\n" +
	    "                {{ ::'service.HEADERS.UPDATE' | translate }}: {{ctrl.contact.getFullTitleName()}}</h1>\r" +
	    "\n" +
	    "            </h1>\r" +
	    "\n" +
	    "            <action-bar-item position=\"right\" co-multi-transclusion>\r" +
	    "\n" +
	    "                <div transclude-to=\"title\" ng-click=\"ctrl.printProspect()\">{{::\"service.ACTIONS.PRINT_PROSPECT\" | translate}}</div>\r" +
	    "\n" +
	    "            </action-bar-item>\r" +
	    "\n" +
	    "            <action-bar-item position=\"right\" co-multi-transclusion>\r" +
	    "\n" +
	    "                <div transclude-to=\"title\"><i class=\"fa fa-ellipsis-h\" name=\"serviceActionsMenu\"></i></div>\r" +
	    "\n" +
	    "                <div transclude-to=\"menu\" ng-click=\"ctrl.actionConvert()\" name=\"serviceConvert\"\r" +
	    "\n" +
	    "                     ng-show=\"ctrl.eventConversionPermission.view && ctrl.eventConversionPermission.edit\">\r" +
	    "\n" +
	    "                    {{::'service.ACTIONS.CONVERT' | translate}}\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div transclude-to=\"menu\" ng-click=\"ctrl.openDocumentForAction(false)\" name=\"servicePrint\">{{::'crm.contact.actions.PRINT_DOCUMENT' | translate}}</div>\r" +
	    "\n" +
	    "                <div transclude-to=\"menu\" ng-click=\"ctrl.openDocumentForAction(true)\" name=\"serviceEmail\">{{::'crm.contact.actions.EMAIL_DOCUMENT' | translate}}</div>\r" +
	    "\n" +
	    "                <div transclude-to=\"menu\" ng-click=\"ctrl.actionSurvey()\" name=\"serviceSurvey\">{{::'service.ACTIONS.SURVEY' | translate}}</div>\r" +
	    "\n" +
	    "                <div transclude-to=\"menu\" ng-click=\"ctrl.actionView()\" name=\"serviceView\">{{::'service.ACTIONS.VIEW' | translate}}</div>\r" +
	    "\n" +
	    "            </action-bar-item>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"detail-view-content\">\r" +
	    "\n" +
	    "        <div class=\"row ws-layout-row\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-12 col-lg-5\">\r" +
	    "\n" +
	    "                <div class=\"row ws-layout-row\">\r" +
	    "\n" +
	    "                    <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                        <div class=\"ws-detail-view-content-group\">\r" +
	    "\n" +
	    "                            <crm-contact-card ng-show=\"ctrl.contact\" contact=\"ctrl.contact\"></crm-contact-card>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"col-xs-12 col-lg-7\">\r" +
	    "\n" +
	    "                <div class=\"ws-detail-view-content-group\">\r" +
	    "\n" +
	    "                    <uib-tabset class=\"icon-headings\" justified=\"true\">\r" +
	    "\n" +
	    "                        <uib-tab>\r" +
	    "\n" +
	    "                            <uib-tab-heading name=\"serviceActivityTab\">\r" +
	    "\n" +
	    "                                <div class=\"tab-title\">\r" +
	    "\n" +
	    "                                    {{::'service.HEADERS.OPPORTUNITY_TIMELINE' | translate}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"tab-info\">\r" +
	    "\n" +
	    "                                    {{ctrl.getServiceTimeLineTitle()}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </uib-tab-heading>\r" +
	    "\n" +
	    "                            <section class=\"ws-panel\">\r" +
	    "\n" +
	    "                                <div ng-if=\"ctrl.contact && ctrl.serviceModel\">\r" +
	    "\n" +
	    "                                    <crm-activities-list contact=\"ctrl.contact\" event=\"ctrl.serviceModel\" event-type=\"ctrl.OpportunityEventType.service\">\r" +
	    "\n" +
	    "                                        <div class=\"pull-right ws-not-in-market\">\r" +
	    "\n" +
	    "                                            <div class=\"pull-left ws-status\">\r" +
	    "\n" +
	    "                                                 <!-- TODO: Make this service: ng-class=\"{'ws-active':ctrl.csiEventActive}\" ng-click=\"ctrl.toggleActive(true)\">-->\r" +
	    "\n" +
	    "                                                {{::'crm.salesOpportunity.status.ACTIVE' | translate}}\r" +
	    "\n" +
	    "                                            </div>\r" +
	    "\n" +
	    "                                            <switch name=\"activation-switch\">\r" +
	    "\n" +
	    "                                                    <!-- TODO: Make this service: ng-model=\"ctrl.csiEventActive\" -->\r" +
	    "\n" +
	    "                                                    <!-- TODO: Make this service: ng-change=\"ctrl.toggleActive(ctrl.csiEventActive)\">-->\r" +
	    "\n" +
	    "                                            </switch>\r" +
	    "\n" +
	    "                                            <div class=\"pull-right ws-right-status\" ng-class=\"{'ws-active':true}\">\r" +
	    "\n" +
	    "                                                 <!-- TODO: Make this service: ng-class=\"{'ws-active':!ctrl.csiEventActive}\" ng-click=\"ctrl.toggleActive(false)\">-->\r" +
	    "\n" +
	    "                                                {{::'crm.salesOpportunity.status.SERVICE_NOT_NEEDED' | translate}}\r" +
	    "\n" +
	    "                                            </div>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </crm-activities-list>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </section>\r" +
	    "\n" +
	    "                        </uib-tab>\r" +
	    "\n" +
	    "                        <uib-tab>\r" +
	    "\n" +
	    "                            <uib-tab-heading name=\"vehicleTab\">\r" +
	    "\n" +
	    "                                <div class=\"tab-title\">\r" +
	    "\n" +
	    "                                    {{::'service.HEADERS.REPAIR_ORDER' | translate}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div ng-if=\"true\" class=\"tab-info\">\r" +
	    "\n" +
	    "                                    {{ctrl.getServiceVehicleTitle()}}\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </uib-tab-heading>\r" +
	    "\n" +
	    "                            <vehicle-info contact=\"ctrl.contact\" contact-vehicles=\"ctrl.contact.vehicles\" vehicle=\"ctrl.serviceModel.vehicle\"\r" +
	    "\n" +
	    "                                          vehicle-changed=\"ctrl.vehicleChanged(vehicle)\"></vehicle-info>\r" +
	    "\n" +
	    "                        </uib-tab>\r" +
	    "\n" +
	    "                    </uib-tabset>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/surveys/surveysModalTemplate.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-primary panel-modal\" name=\"modalPanel\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "            <h3 ng-cloak class=\"panel-title ws-flex-fill-even\" name=\"surveysTitle\">\r" +
	    "\n" +
	    "                {{::'crm.salesOpportunity.surveys.FILL_OUT_SURVEY' | translate}}\r" +
	    "\n" +
	    "            </h3>\r" +
	    "\n" +
	    "            <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.closeModal()\" name=\"closeModal\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-card-panel\">\r" +
	    "\n" +
	    "            <md-virtual-repeat-container class=\"ws-modal-virtual-repeat-sm\">\r" +
	    "\n" +
	    "                <div md-virtual-repeat=\"survey in ctrl.surveyLinks\" md-item-size=\"1\">\r" +
	    "\n" +
	    "                    <crm-surveys survey=\"survey\"></crm-surveys>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </md-virtual-repeat-container>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/surveys/surveysTemplate.html',
	    "<a class=\"ws-card-panel-text\" ng-click=\"ctrl.openSurvey()\">\r" +
	    "\n" +
	    "    <span name=\"surveyName\">{{ctrl.survey.name}}</span>\r" +
	    "\n" +
	    "</a>"
	  );


	  $templateCache.put('app/ui/address/addressTemplate.html',
	    "<div ng-cloak\r" +
	    "\n" +
	    "     ng-if=\"ctrl.contact && ctrl.expanded\"\r" +
	    "\n" +
	    "     class=\"panel panel-primary panel-no-padding-bottom\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading panel-no-padding-top\" ng-if=\"ctrl.title\">\r" +
	    "\n" +
	    "        <div class=\"panel-title\" name=\"panelTitle\">\r" +
	    "\n" +
	    "            {{ctrl.title}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-body panel-no-padding-bottom panel-no-padding-top\">\r" +
	    "\n" +
	    "        <div ng-transclude></div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "            <div class=\"col-lg-6 col-md-6 form-group\" ng-if=\"ctrl.fields.address1.show\">\r" +
	    "\n" +
	    "                <label name=\"address1Label\">{{::'crm.address.fields.ADDRESS1' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\" ng-model=\"ctrl.contact.address.address1\" name=\"address1\" autocomplete=\"off\" ng-disabled=\"ctrl.disabled\"\r" +
	    "\n" +
	    "                       ng-blur=\"ctrl.checkIfAddressIsComplete()\" ng-class=\"(ctrl.isFieldValid('address1')) ? 'ng-valid' : 'ng-invalid'\">\r" +
	    "\n" +
	    "                <span ng-if=\"!ctrl.isFieldValid('address1')\"\r" +
	    "\n" +
	    "                      class=\"form-invalid-message\">\r" +
	    "\n" +
	    "                    {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <div class=\"col-lg-6 col-md-3 form-group\" ng-if=\"ctrl.fields.address2.show\">\r" +
	    "\n" +
	    "                <label name=\"address2Label\">{{::'crm.address.fields.ADDRESS2' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\" ng-model=\"ctrl.contact.address.address2\" name=\"address2\" autocomplete=\"off\" ng-disabled=\"ctrl.disabled\"\r" +
	    "\n" +
	    "                       ng-blur=\"ctrl.checkIfAddressIsComplete()\" ng-class=\"(ctrl.isFieldValid('address2')) ? 'ng-valid' : 'ng-invalid'\">\r" +
	    "\n" +
	    "                <span ng-if=\"!ctrl.isFieldValid('address2')\"\r" +
	    "\n" +
	    "                      class=\"form-invalid-message\">\r" +
	    "\n" +
	    "                    {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <div class=\"col-lg-2 col-md-3 form-group\">\r" +
	    "\n" +
	    "                <label name=\"postalCodeLabel\">{{::'crm.address.fields.POSTAL' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\" ng-model=\"ctrl.contact.address.postal\" name=\"postal\" autocomplete=\"off\" ng-disabled=\"ctrl.disabled\"\r" +
	    "\n" +
	    "                       ng-blur=\"ctrl.onBlur()\" ng-class=\"(ctrl.isFieldValid('postal')) ? 'ng-valid' : 'ng-invalid'\">\r" +
	    "\n" +
	    "                <span ng-if=\"!ctrl.isFieldValid('postal')\"\r" +
	    "\n" +
	    "                      class=\"form-invalid-message\">\r" +
	    "\n" +
	    "                    {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <div class=\"col-md-4 form-group\" ng-if=\"ctrl.fields.city.show\">\r" +
	    "\n" +
	    "                <label name=\"cityLabel\">{{::'crm.address.fields.CITY' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\"\r" +
	    "\n" +
	    "                       ng-disabled=\"ctrl.disabled\"\r" +
	    "\n" +
	    "                       class=\"form-control\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.contact.address.city\"\r" +
	    "\n" +
	    "                       name=\"city\"\r" +
	    "\n" +
	    "                       autocomplete=\"off\"\r" +
	    "\n" +
	    "                       ng-blur=\"ctrl.checkIfAddressIsComplete()\"\r" +
	    "\n" +
	    "                       ng-class=\"(ctrl.isFieldValid('city')) ? 'ng-valid' : 'ng-invalid'\"\r" +
	    "\n" +
	    "                       ng-show=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                <select ng-model=\"ctrl.contact.address.city\"\r" +
	    "\n" +
	    "                        class=\"form-control\"\r" +
	    "\n" +
	    "                        ng-disabled=\"ctrl.disabled\"\r" +
	    "\n" +
	    "                        ng-class=\"(ctrl.isFieldValid('county')) ? 'ng-valid' : 'ng-invalid'\"\r" +
	    "\n" +
	    "                        ng-options=\"city for city in ctrl.cities\"\r" +
	    "\n" +
	    "                        ng-hide=\"ctrl.isFreeText\"></select>\r" +
	    "\n" +
	    "                <span ng-if=\"!ctrl.isFieldValid('city')\"\r" +
	    "\n" +
	    "                      class=\"form-invalid-message\">\r" +
	    "\n" +
	    "                    {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <div class=\"col-md-2 form-group\" ng-if=\"ctrl.fields.state.show\">\r" +
	    "\n" +
	    "                <label name=\"stateLabel\">{{::'crm.address.fields.STATE' | translate}}</label>\r" +
	    "\n" +
	    "                <!--The State cannot be one-way bound because it is dynamic-->\r" +
	    "\n" +
	    "                <select ng-model=\"ctrl.contact.address.state\"\r" +
	    "\n" +
	    "                        ng-options=\"stateProvince.abbr as stateProvince.abbr for stateProvince in ctrl.availableStatesProvinces\"\r" +
	    "\n" +
	    "                        class=\"form-control\"\r" +
	    "\n" +
	    "                        name=\"state\"\r" +
	    "\n" +
	    "                        ng-disabled=\"ctrl.disabled\"\r" +
	    "\n" +
	    "                        ng-blur=\"ctrl.checkIfAddressIsComplete()\"\r" +
	    "\n" +
	    "                        ng-class=\"(ctrl.isFieldValid('state')) ? 'ng-valid' : 'ng-invalid'\">\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "                <span ng-if=\"!ctrl.isFieldValid('state')\"\r" +
	    "\n" +
	    "                      class=\"form-invalid-message\">\r" +
	    "\n" +
	    "                    {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <div class=\"col-lg-2 col-md-3 form-group\" ng-if=\"ctrl.fields.county.show\">\r" +
	    "\n" +
	    "                <label name=\"countyLabel\">{{::'crm.address.fields.COUNTY' | translate}}</label>\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.contact.address.county\"\r" +
	    "\n" +
	    "                       name=\"county\"\r" +
	    "\n" +
	    "                       ng-disabled=\"ctrl.disabled\"\r" +
	    "\n" +
	    "                       autocomplete=\"off\"\r" +
	    "\n" +
	    "                       ng-blur=\"ctrl.checkIfAddressIsComplete()\"\r" +
	    "\n" +
	    "                       ng-class=\"(ctrl.isFieldValid('county')) ? 'ng-valid' : 'ng-invalid'\"\r" +
	    "\n" +
	    "                       ng-show=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                <select ng-model=\"ctrl.contact.address.county\"\r" +
	    "\n" +
	    "                        class=\"form-control\"\r" +
	    "\n" +
	    "                        ng-disabled=\"ctrl.disabled\"\r" +
	    "\n" +
	    "                        ng-class=\"(ctrl.isFieldValid('county')) ? 'ng-valid' : 'ng-invalid'\"\r" +
	    "\n" +
	    "                        ng-options=\"county for county in ctrl.counties\"\r" +
	    "\n" +
	    "                        ng-change=\"ctrl.lookupCounty()\"\r" +
	    "\n" +
	    "                        ng-hide=\"ctrl.isFreeText\"></select>\r" +
	    "\n" +
	    "                <span ng-if=\"!ctrl.isFieldValid('county')\"\r" +
	    "\n" +
	    "                      class=\"form-invalid-message\">\r" +
	    "\n" +
	    "                    {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "            <div class=\"col-md-3 form-group\" ng-class=\"ctrl.fields.county.show ? 'col-lg-2' : 'col-lg-4'\">\r" +
	    "\n" +
	    "                <label name=\"countryLabel\">{{::'crm.address.fields.COUNTRY' | translate}}</label>\r" +
	    "\n" +
	    "                <select ng-disabled=\"ctrl.disabled\" type=\"text\" class=\"form-control\" ng-model=\"ctrl.contact.address.country\" ng-change=\"ctrl.updateFieldsForSelectedCountry()\" name=\"countryDropdown\" autocomplete=\"off\">\r" +
	    "\n" +
	    "                    <option ng-repeat=\"country in ctrl.availableCountries\">{{ country }}</option>\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"row\" ng-show=\"ctrl.counties.length\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-12 form-group\">\r" +
	    "\n" +
	    "                <a href=\"\" ng-click=\"ctrl.toggleFreeText()\">\r" +
	    "\n" +
	    "                    {{ctrl.toggleText}}\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/ui/alert/alertTemplate.html',
	    "<div class=\"alert-bar-section\" name=\"alertNotification\">\r" +
	    "\n" +
	    "    <div class=\"alert-bar\" ng-repeat=\"alert in ctrl.subscriptions\" ng-class=\"[alert.alertType, alert.stateClass]\">\r" +
	    "\n" +
	    "        <input type=\"hidden\" disabled ng-model=\"alert.message\" ng-change=\"alert.animateText()\"/>\r" +
	    "\n" +
	    "        <div class=\"alert-bar-content\"><crm-alert-message message=\"alert.message\" alert-callback=\"alert.alertCallback()\"/></div>\r" +
	    "\n" +
	    "        <i class=\"alert-bar-close-button fa fa-close\" ng-click=\"ctrl.closeAlert(alert)\"></i>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/ui/card/badgeCard/badgeCardTemplate.html',
	    "<co-panel co-multi-transclusion class=\"ds-card\" ng-class=\"ctrl.getCardCssClasses()\" ng-click=\"ctrl.cardClickAction()\">\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-icon-badge size=\"md\" icon=\"{{ctrl.facade.getBadgeIcon()}}\" status=\"{{ctrl.getIconBadgeStatus()}}\"></co-icon-badge>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <div class=\"text-{{ctrl.getIconBadgeStatus()}}\">\r" +
	    "\n" +
	    "            <span name=\"badgeSubscript\">{{ctrl.facade.getBadgeText()}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\" ng-attr-name=\"{{ctrl.facade.title.getHtmlName()}}\">\r" +
	    "\n" +
	    "        <div ng-attr-name=\"{{ctrl.facade.title.getHtmlName()}}\">\r" +
	    "\n" +
	    "            {{ctrl.facade.title.getText()}}\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <div ng-repeat=\"block in ctrl.facade.leftSideContent\">\r" +
	    "\n" +
	    "            <div ng-repeat=\"row in block.rows\">\r" +
	    "\n" +
	    "                <crm-card-item ng-repeat=\"item in row.items\"></crm-card-item>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <div ng-repeat=\"row in ctrl.facade.rightSideContent.rows\">\r" +
	    "\n" +
	    "            <crm-card-item ng-repeat=\"item in row.items\"></crm-card-item>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <a ng-repeat=\"actionItem in ctrl.facade.actionItems\"\r" +
	    "\n" +
	    "           ng-click=\"ctrl.actionItemCallback($index)\">\r" +
	    "\n" +
	    "            <span ng-if=\"actionItem.actions\" ns-popover\r" +
	    "\n" +
	    "                  ns-popover-placement=\"bottom|right\"\r" +
	    "\n" +
	    "                  ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "                  ns-popover-template=\"app/ui/card/cardSecondaryContent/cardSecondaryContentActionPopoverTemplate.html\"\r" +
	    "\n" +
	    "                  ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "                  ns-popover-timeout=\"100000\">\r" +
	    "\n" +
	    "                <i class=\"fa\" ng-class=\"actionItem.getIcon()\" ng-attr-name=\"{{actionItem.getHtmlName()}}\"></i>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "            <span ng-if=\"!actionItem.actions\">\r" +
	    "\n" +
	    "                <i class=\"fa\" ng-class=\"actionItem.getIcon()\" ng-attr-name=\"{{actionItem.getHtmlName()}}\"></i>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/card/card/cardTemplate.html',
	    "<section class=\"ws-panel ws-small-margin\"\r" +
	    "\n" +
	    "    ng-class=\"ctrl.getCardCssClasses()\"\r" +
	    "\n" +
	    "    ng-click=\"ctrl.cardClickAction()\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <crm-card-main-content class=\"ws-panel-content-main\"></crm-card-main-content>\r" +
	    "\n" +
	    "        <crm-card-secondary-content class=\"ws-panel-content-secondary\"></crm-card-secondary-content>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/card/cardItem/cardItemTemplate.html',
	    "<span ng-if=\"!$first && item.hasSeparator() && item.getText()\"> / </span>\r" +
	    "\n" +
	    "<span ng-if=\"!item.onClick && !item.getSync\"\r" +
	    "\n" +
	    "      ng-class=\"{\r" +
	    "\n" +
	    "      'ws-status-text': item.isAccented(),\r" +
	    "\n" +
	    "      'ws-deaccent-text': item.isLowlight(),\r" +
	    "\n" +
	    "      'ws-panel-item-heading': (item.isEmphasized && item.isEmphasized()) }\"\r" +
	    "\n" +
	    "      ng-attr-name=\"{{item.getHtmlName()}}\">\r" +
	    "\n" +
	    "    <span ng-if=\"item.inlineData\">\r" +
	    "\n" +
	    "        <crm-inline-edit facade=\"item.inlineData.facade\" inline=\"true\" has-value=\"item.inlineData.getModel() && item.inlineData.isValid()\">\r" +
	    "\n" +
	    "            <span ng-show=\"item.inlineData.getModel() && item.inlineData.isValid()\">\r" +
	    "\n" +
	    "                {{item.getText()}}\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "            <crm-inline-editing-edit-empty ng-show=\"!item.inlineData.isValid()\">\r" +
	    "\n" +
	    "                {{item.inlineData.getNullText()}}\r" +
	    "\n" +
	    "            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "        </crm-inline-edit>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "    <span ng-if=\"!item.inlineData\">\r" +
	    "\n" +
	    "        {{item.getText()}}\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</span>\r" +
	    "\n" +
	    "<a ng-if=\"item.onClick\"\r" +
	    "\n" +
	    "   ng-click=\"item.onClick()\"\r" +
	    "\n" +
	    "   ng-attr-name=\"{{item.getHtmlName()}}\">\r" +
	    "\n" +
	    "    <i ng-if=\"item.startsWithFontAwesome\" class=\"fa {{item.faClass}}\"></i>\r" +
	    "\n" +
	    "    {{item.getText()}}\r" +
	    "\n" +
	    "</a>\r" +
	    "\n" +
	    "<crm-date ng-if=\"item.getSync\"\r" +
	    "\n" +
	    "          date-time=\"item.getText()\"\r" +
	    "\n" +
	    "          unlocked=\"{{item.getUnlocked()}}\"\r" +
	    "\n" +
	    "          extend=\"{{item.getExtended()}}\"\r" +
	    "\n" +
	    "          mode=\"{{item.getMode()}}\"\r" +
	    "\n" +
	    "          sync=\"{{item.getSync()}}\"\r" +
	    "\n" +
	    "          ng-attr-name=\"{{item.getHtmlName()}}\"></crm-date>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/card/cardMainContent/cardMainContentTemplate.html',
	    "<div class=\"ws-content-group\" ng-repeat=\"block in ctrl.facade.leftSideContent\">\r" +
	    "\n" +
	    "    <header ng-if=\"$first\">\r" +
	    "\n" +
	    "        <h3 class=\"ws-panel-title\"\r" +
	    "\n" +
	    "            ng-class=\"{'ws-panel-title-emphasis': ctrl.facade.title.isAccented()}\"\r" +
	    "\n" +
	    "            ng-attr-name=\"{{ctrl.facade.title.getHtmlName()}}\"\r" +
	    "\n" +
	    "            >\r" +
	    "\n" +
	    "            {{ctrl.facade.title.getText()}}\r" +
	    "\n" +
	    "        </h3>\r" +
	    "\n" +
	    "    </header>\r" +
	    "\n" +
	    "    <div ng-repeat=\"row in block.rows\">\r" +
	    "\n" +
	    "        <crm-card-item ng-repeat=\"item in row.items\"></crm-card-item>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "<div ng-show=\"ctrl.facade.isExpanded\" ng-repeat=\"block in ctrl.facade.collapsibleContent\" class=\"ws-panel-content-main ws-content-group\">\r" +
	    "\n" +
	    "    <div ng-repeat=\"row in block.rows\">\r" +
	    "\n" +
	    "        <crm-card-item ng-repeat=\"item in row.items\"></crm-card-item>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/ui/card/cardSecondaryContent/cardSecondaryContentActionPopoverTemplate.html',
	    "<div class=\"triangle\"></div>\r" +
	    "\n" +
	    "<div class=\"ns-popover-tooltip\">\r" +
	    "\n" +
	    "    <div ng-repeat=\"action in actionItem.actions\" ng-show=\"action.isVisible()\"\r" +
	    "\n" +
	    "         class=\"ws-popover-item\" name=\"change-status\"\r" +
	    "\n" +
	    "         ng-click=\"action.callback()\"\r" +
	    "\n" +
	    "         ng-class=\"{'disabled':action.isDisabled()}\"\r" +
	    "\n" +
	    "         ng-disabled=\"action.isDisabled()\">\r" +
	    "\n" +
	    "        {{ action.getName() }}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/ui/card/cardSecondaryContent/cardSecondaryContentTemplate.html',
	    "<div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "    <div ng-repeat=\"row in ctrl.facade.rightSideContent.rows\">\r" +
	    "\n" +
	    "        <crm-card-item ng-repeat=\"item in row.items\"></crm-card-item>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "<div class=\"ws-panel-actions\">\r" +
	    "\n" +
	    "    <a ng-repeat=\"actionItem in ctrl.facade.actionItems\"\r" +
	    "\n" +
	    "       ng-click=\"ctrl.actionItemCallback($index)\">\r" +
	    "\n" +
	    "        <span ng-if=\"actionItem.actions\" ns-popover\r" +
	    "\n" +
	    "              ns-popover-theme=\"ns-popover-tooltip-theme\"\r" +
	    "\n" +
	    "              ns-popover-template=\"app/ui/card/cardSecondaryContent/cardSecondaryContentActionPopoverTemplate.html\"\r" +
	    "\n" +
	    "              ns-popover-trigger=\"click\"\r" +
	    "\n" +
	    "              ns-popover-timeout=\"100000\">\r" +
	    "\n" +
	    "            <i class=\"fa\" ng-class=\"actionItem.getIcon()\" ng-attr-name=\"{{actionItem.getHtmlName()}}\"></i>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <span ng-if=\"!actionItem.actions\">\r" +
	    "\n" +
	    "            <i class=\"fa\" ng-class=\"actionItem.getIcon()\" ng-attr-name=\"{{actionItem.getHtmlName()}}\"></i>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "    </a>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/ui/card/csiCard/csiCardTemplate.html',
	    "<section class=\"ws-panel\"\r" +
	    "\n" +
	    "         ng-class=\"ctrl.getCardClass()\">\r" +
	    "\n" +
	    "    <div class=\"ws-not-in-market-details\" ng-show=\"ctrl.facade.isIrresolvable()\">\r" +
	    "\n" +
	    "        {{ctrl.facade.getInactiveText() | translate}} <b>{{ctrl.facade.csiEvent.resolutionCode1.text}}</b> / <b>{{ctrl.facade.csiEvent.resolutionCode2.text}}</b>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-not-in-market-details\" style=\"background-color: #409C61\" ng-show=\"ctrl.facade.isResolved()\">\r" +
	    "\n" +
	    "        {{ctrl.facade.getResolvedText() | translate}} <b>{{ctrl.facade.csiEvent.resolutionCode1.text}}</b> / <b>{{ctrl.facade.csiEvent.resolutionCode2.text}}</b>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-media\">\r" +
	    "\n" +
	    "            <div class=\"ws-content-group  ws-progress-bar-padding\" ng-click=\"ctrl.showStatusModal()\" name=\"open-sales-opportunity-status-list\" style=\"padding-left: 4rem\">\r" +
	    "\n" +
	    "                <div style=\"padding-left: 3.2rem\">\r" +
	    "\n" +
	    "                    <co-thermometer fill=\"ctrl.facade.getBadgePercentage()\" color-class=\"ctrl.facade.getFillColor()\" show-alert=\"ctrl.facade.csiEvent.status.value == '100025'\" name=\"salesOpportunityProgressBar\"></co-thermometer>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div id=\"csi-status-text\" class=\"text-{{ctrl.getCardClass()}}\" style=\"text-align: center;width: 90px;\" name=\"salesOpportunityStatus\">\r" +
	    "\n" +
	    "                    {{ctrl.facade.getBadgeText() | translate}}\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "        <div style=\"padding-left: 4rem\">\r" +
	    "\n" +
	    "            <crm-card-main-content class=\"ws-panel-content-main\"></crm-card-main-content>\r" +
	    "\n" +
	    "            <crm-card-secondary-content class=\"ws-panel-content-secondary\"></crm-card-secondary-content>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <footer>\r" +
	    "\n" +
	    "        <button class=\"ws-expander-button\" ng-class=\"{'ws-expanded': ctrl.facade.isExpanded}\"\r" +
	    "\n" +
	    "                ng-click=\"ctrl.facade.isExpanded = !ctrl.facade.isExpanded\">\r" +
	    "\n" +
	    "                <span class=\"ws-expander-button-content\" name=\"salesOpportunityCardExpander\">\r" +
	    "\n" +
	    "                    <span ng-if=\"!ctrl.facade.isExpanded\">{{ ::\"crm.contact.MORE_DETAILS\" | translate }}</span>\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.facade.isExpanded\">{{ ::\"crm.contact.FEWER_DETAILS\" | translate }}</span>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "        </button>\r" +
	    "\n" +
	    "    </footer>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/ui/card/vehicleCard/vehicleCardTemplate.html',
	    "<section class=\"ws-panel ws-small-margin\"\r" +
	    "\n" +
	    "         ng-class=\"ctrl.getCardCssClasses()\"\r" +
	    "\n" +
	    "         ng-click=\"ctrl.cardClickAction()\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-media\">\r" +
	    "\n" +
	    "            <div class=\"ws-center-content-h\">\r" +
	    "\n" +
	    "                <img class=\"ws-media\" ng-src=\"{{ctrl.facade.getVehicleImageUrl()}}\" />\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "        <crm-card-main-content class=\"ws-panel-content-main\"></crm-card-main-content>\r" +
	    "\n" +
	    "        <crm-card-secondary-content class=\"ws-panel-content-secondary\"></crm-card-secondary-content>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/card/vehicleServiceCard/vehicleServiceCardTemplate.html',
	    "<section class=\"ws-panel\"\r" +
	    "\n" +
	    "         ng-class=\"ctrl.getCardCssClasses()\"\r" +
	    "\n" +
	    "         ng-click=\"ctrl.cardClickAction()\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <crm-card-main-content class=\"ws-panel-content-main\"></crm-card-main-content>\r" +
	    "\n" +
	    "        <crm-card-secondary-content class=\"ws-panel-content-secondary\"></crm-card-secondary-content>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\" ng-if=\"ctrl.facade.servicePermission.view\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "            <crm-badge-card ng-repeat=\"facade in ctrl.facade.openServiceEventFacades\" facade=\"facade\" class=\"ws-flex-fill-even\"></crm-badge-card>\r" +
	    "\n" +
	    "            <div ng-show=\"ctrl.facade.isExpanded\">\r" +
	    "\n" +
	    "                <crm-badge-card ng-repeat=\"facade in ctrl.facade.closedServiceEventFacades\" facade=\"facade\" class=\"ws-flex-fill-even\"></crm-badge-card>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <footer ng-if=\"ctrl.facade.closedServiceEventFacades.length > 0\"  ng-if=\"ctrl.servicePermission.view\">\r" +
	    "\n" +
	    "        <button class=\"ws-expander-butt on\" ng-class=\"{'ws-expanded': ctrl.facade.isExpanded}\"\r" +
	    "\n" +
	    "                ng-click=\"ctrl.facade.isExpanded = !ctrl.facade.isExpanded\">\r" +
	    "\n" +
	    "                <span class=\"ws-expander-button-content\" name=\"vehicleServiceExpander\">\r" +
	    "\n" +
	    "                    <span ng-if=\"!ctrl.facade.isExpanded\">{{ ::\"crm.vehicle.SEE\" | translate }}</span>\r" +
	    "\n" +
	    "                    <span ng-if=\"ctrl.facade.isExpanded\">{{ ::\"crm.vehicle.HIDE\" | translate }}</span>\r" +
	    "\n" +
	    "                    {{ctrl.facade.vehicle.closedServiceEventFacades.length}} {{ ::\"crm.vehicle.CLOSED_ROS\" | translate }}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "        </button>\r" +
	    "\n" +
	    "    </footer>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/ui/checklistItem/template.html',
	    "<div ng-class=\"{'ws-checklist-item-inline': ctrl.inline, 'ws-checklist-item': !ctrl.inline}\"\r" +
	    "\n" +
	    "     ng-checked=\"ctrl.checked\" ng-transclude></div>"
	  );


	  $templateCache.put('app/ui/date/date.component.html',
	    "<span ng-if=\"ctrl.text\">{{ctrl.text}}</span>\r" +
	    "\n" +
	    "<span ng-if=\"!ctrl.text\">{{::\"crm.dateStyles.NA\" | translate}}</span>"
	  );


	  $templateCache.put('app/ui/datepicker/daypickerTemplate.html',
	    "<table class=\"uib-daypicker\" role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\r" +
	    "\n" +
	    "    <thead>\r" +
	    "\n" +
	    "        <tr>\r" +
	    "\n" +
	    "            <th>\r" +
	    "\n" +
	    "                <!--<button class=\"btn btn-default btn-sm pull-left uib-left\"-->\r" +
	    "\n" +
	    "                        <!--type=\"button\"-->\r" +
	    "\n" +
	    "                        <!--ng-click=\"move(-1)\"-->\r" +
	    "\n" +
	    "                        <!--tabindex=\"-1\">-->\r" +
	    "\n" +
	    "                    <!--<i class=\"fa fa-caret-left\"></i>-->\r" +
	    "\n" +
	    "                <!--</button>-->\r" +
	    "\n" +
	    "                <span class=\"btn btn-sm pull-left uib-left\"\r" +
	    "\n" +
	    "                    ng-click=\"move(-1)\"\r" +
	    "\n" +
	    "                    tabindex=\"-1\">\r" +
	    "\n" +
	    "                    <i class=\"fa fa-caret-left fa-lg\"></i>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </th>\r" +
	    "\n" +
	    "            <th colspan=\"{{::5 + showWeeks}}\">\r" +
	    "\n" +
	    "                <!--<button id=\"{{::uniqueId}}-title\"-->\r" +
	    "\n" +
	    "                        <!--class=\"btn btn-default btn-sm uib-title\"-->\r" +
	    "\n" +
	    "                        <!--type=\"button\"-->\r" +
	    "\n" +
	    "                        <!--role=\"heading\"-->\r" +
	    "\n" +
	    "                        <!--aria-live=\"assertive\"-->\r" +
	    "\n" +
	    "                        <!--aria-atomic=\"true\"-->\r" +
	    "\n" +
	    "                        <!--ng-click=\"toggleMode()\"-->\r" +
	    "\n" +
	    "                        <!--ng-disabled=\"datepickerMode === maxMode\"-->\r" +
	    "\n" +
	    "                        <!--tabindex=\"-1\">-->\r" +
	    "\n" +
	    "                    <!--<strong>{{title}}</strong>-->\r" +
	    "\n" +
	    "                <!--</button>-->\r" +
	    "\n" +
	    "                <span id=\"{{::uniqueId}}-title\"\r" +
	    "\n" +
	    "                      class=\"btn btn-default btn-sm uib-title\"\r" +
	    "\n" +
	    "                    role=\"heading\"\r" +
	    "\n" +
	    "                    aria-live=\"assertive\"\r" +
	    "\n" +
	    "                    aria-atomic=\"true\"\r" +
	    "\n" +
	    "                    ng-click=\"(datepickerMode !== maxMode) && toggleMode()\"\r" +
	    "\n" +
	    "                    tabindex=\"-1\">\r" +
	    "\n" +
	    "                    <strong>{{title}}</strong>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </th>\r" +
	    "\n" +
	    "            <th>\r" +
	    "\n" +
	    "                <span class=\"btn btn-sm pull-right uib-right\"\r" +
	    "\n" +
	    "                    ng-click=\"move(1)\"\r" +
	    "\n" +
	    "                    tabindex=\"-1\">\r" +
	    "\n" +
	    "                    <i class=\"fa fa-caret-right fa-lg\"></i>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </th>\r" +
	    "\n" +
	    "        </tr>\r" +
	    "\n" +
	    "        <tr>\r" +
	    "\n" +
	    "            <th ng-if=\"showWeeks\" class=\"text-center\"></th>\r" +
	    "\n" +
	    "            <th ng-repeat=\"label in ::labels track by $index\" class=\"text-center\">\r" +
	    "\n" +
	    "                <small aria-label=\"{{::label.full}}\">{{::label.abbr.substring(0,2)}}</small>\r" +
	    "\n" +
	    "            </th>\r" +
	    "\n" +
	    "        </tr>\r" +
	    "\n" +
	    "    </thead>\r" +
	    "\n" +
	    "    <tbody>\r" +
	    "\n" +
	    "        <tr class=\"uib-weeks\" ng-repeat=\"row in rows track by $index\">\r" +
	    "\n" +
	    "            <td ng-if=\"showWeeks\" class=\"text-center h6\">\r" +
	    "\n" +
	    "                <em>{{ weekNumbers[$index] }}</em>\r" +
	    "\n" +
	    "            </td>\r" +
	    "\n" +
	    "            <td ng-repeat=\"dt in row\"\r" +
	    "\n" +
	    "                class=\"uib-day text-center\"\r" +
	    "\n" +
	    "                role=\"gridcell\"\r" +
	    "\n" +
	    "                id=\"{{::dt.uid}}\"\r" +
	    "\n" +
	    "                ng-class=\"::dt.customClass\">\r" +
	    "\n" +
	    "                <span type=\"button\"\r" +
	    "\n" +
	    "                        class=\"btn btn-default btn-sm\"\r" +
	    "\n" +
	    "                        uib-is-class=\"\r" +
	    "\n" +
	    "                'btn-info' for selectedDt,\r" +
	    "\n" +
	    "                'active' for activeDt\r" +
	    "\n" +
	    "                on dt\"\r" +
	    "\n" +
	    "                        ng-click=\"select(dt.date)\"\r" +
	    "\n" +
	    "                        ng-disabled=\"::dt.disabled\"\r" +
	    "\n" +
	    "                        tabindex=\"-1\">\r" +
	    "\n" +
	    "                    <span ng-class=\"::{'text-muted': dt.secondary, 'text-info': dt.current}\">{{::dt.label}}</span>\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </td>\r" +
	    "\n" +
	    "        </tr>\r" +
	    "\n" +
	    "    </tbody>\r" +
	    "\n" +
	    "</table>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/datepicker/template.html',
	    "<div class=\"uib-datepicker\" ng-switch=\"datepickerMode\" role=\"application\" ng-keydown=\"keydown($event)\">\r" +
	    "\n" +
	    "    <uib-daypicker ng-switch-when=\"day\" template-url=\"app/ui/datepicker/daypickerTemplate.html\" tabindex=\"0\"></uib-daypicker>\r" +
	    "\n" +
	    "    <uib-monthpicker ng-switch-when=\"month\" tabindex=\"0\"></uib-monthpicker>\r" +
	    "\n" +
	    "    <uib-yearpicker ng-switch-when=\"year\" tabindex=\"0\"></uib-yearpicker>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/ui/duplicateBanner/duplicateContactWarningBannerTemplate.html',
	    "<div class=\"ds-duplicate-contact-warning\" name=\"duplicateContactWarning\" ng-show=\"ctrl.duplicatesCount && ctrl.duplicatesCount > 0\">\r" +
	    "\n" +
	    "    <span class=\"ds-notification-primary-content\" name=\"duplicateMatchBannerTitle\">{{::'crm.contact.duplicates.banner.DUPLICATE_WARNING1'|translate}} <span name=\"duplicateResultsCount\">{{ctrl.duplicatesCount}}</span> {{::\"crm.contact.duplicates.banner.DUPLICATE_WARNING2\"|translate}}</span>\r" +
	    "\n" +
	    "    <button type=\"button\" class=\"btn btn-primary pull-right\" name=\"viewDuplicateMatchesButton\" ng-click=\"ctrl.showModal()\">{{::'crm.contact.duplicates.banner.VIEW_MATCHES'|translate}}</button>\r" +
	    "\n" +
	    "    <div class=\"clear\"></div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/ui/duplicateBanner/templates/duplicateContactModal.html',
	    "<section class=\"ws-panel\" name=\"duplicateContactModal\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row ws-flex-row\">\r" +
	    "\n" +
	    "        <header class=\"ws-flex-fill-even ws-panel-title\" name=\"duplicateModalTitle\">{{ ::'crm.contact.duplicates.connection.MODAL_TITLE'| translate }} ({{ctrl.duplicatesCount}})</header>\r" +
	    "\n" +
	    "        <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.closeModal()\" role=\"button\" tabindex=\"0\" name=\"duplicateClose\"></i>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <span class=\"ws-flex-fill-even\" name=\"duplicateModalSelectCustomer\">{{ ::'crm.contact.duplicates.searchModal.INSTRUCTIONS' | translate }}</span>\r" +
	    "\n" +
	    "        <strong><a ng-click=\"ctrl.closeModal()\" ng-show=\"ctrl.canAddDuplicate\" name=\"notADuplicateLink\">{{ ::'crm.contact.duplicates.searchModal.NOT_A_DUPLICATE' | translate }}</a></strong>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\" name=\"duplicateModalContactCard\" ng-repeat=\"duplicate in ctrl.duplicates\">\r" +
	    "\n" +
	    "        <crm-contact-summary-card contact=\"duplicate\" class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "            <button ng-click=\"ctrl.onDuplicateCustomerSelect(duplicate)\" name=\"selectCustomer\"\r" +
	    "\n" +
	    "                    class=\"btn ws-secondary-action\">{{ ::'crm.contact.duplicates.searchModal.ADD_BUTTON_LABEL' | translate}}</button>\r" +
	    "\n" +
	    "        </crm-contact-summary-card>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/gender/genderTemplate.html',
	    "<select type=\"text\" class=\"form-control\" ng-model=\"contact.gender\" name=\"gender\">\r" +
	    "\n" +
	    "    <option selected value=\"\" disabled>{{::'crm.contact.gender.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "    <option value=\"Female\">{{::'crm.contact.gender.FEMALE' | translate}}</option>\r" +
	    "\n" +
	    "    <option value=\"Male\">{{::'crm.contact.gender.MALE' | translate}}</option>\r" +
	    "\n" +
	    "</select>"
	  );


	  $templateCache.put('app/ui/inlineEditing/components/editBlock/inlineEditingEditBlockTemplate.html',
	    "<div ng-click=\"editIfYouCan()\" class=\"view-mode inline-edit-area\">\r" +
	    "\n" +
	    "    <ul class=\"list-group\">\r" +
	    "\n" +
	    "        <li class=\"list-group-item\">\r" +
	    "\n" +
	    "            <div ng-transclude=\"\"></div>\r" +
	    "\n" +
	    "        </li>\r" +
	    "\n" +
	    "    </ul>\r" +
	    "\n" +
	    "    <div class=\"edit-action\"><i class=\"fa fa-pencil\"></i></div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/inlineEditing/components/editEmpty/inlineEditingEditEmptyTemplate.html',
	    "<span ng-click=\"editIfYouCan()\" class=\"view-mode\">\r" +
	    "\n" +
	    "    <a href=\"\">\r" +
	    "\n" +
	    "        <i class=\"fa fa-plus-circle\"></i>\r" +
	    "\n" +
	    "        <span ng-transclude=\"\"></span>\r" +
	    "\n" +
	    "    </a>\r" +
	    "\n" +
	    "</span>"
	  );


	  $templateCache.put('app/ui/inlineEditing/components/editHover/inlineEditingEditHoverTemplate.html',
	    "<span ng-click=\"editIfYouCan()\" class=\"view-mode inline-edit-area\">\r" +
	    "\n" +
	    "    <span ng-transclude=\"\"></span>\r" +
	    "\n" +
	    "    <div class=\"edit-action\"><i class=\"fa fa-pencil\"></i></div>\r" +
	    "\n" +
	    "</span>"
	  );


	  $templateCache.put('app/ui/inlineEditing/components/editOverlay/inlineEditingEditOverlayTemplate.html',
	    "<form name=\"editOverlayForm\" ng-submit=\"submit(editOverlayForm);\" novalidate\r" +
	    "\n" +
	    "      ng-show=\"openEdit\"\r" +
	    "\n" +
	    "      co-focus-on-show=\"\">\r" +
	    "\n" +
	    "    <div class=\"panel panel-inline-editing\">\r" +
	    "\n" +
	    "        <div class=\"panel-heading\">\r" +
	    "\n" +
	    "            <h3 class=\"panel-title\">{{ctrl.heading}}</h3>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-body\">\r" +
	    "\n" +
	    "            <div class=\"panel-content\">\r" +
	    "\n" +
	    "                <div ng-transclude=\"\" class=\"form-group\"></div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"panel-footer\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                    <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                        <button type=\"button\" class=\"btn btn-quaternary\" ng-click=\"cancelEdit()\" name=\"cancelEdit\">{{ ::'crm.actions.CANCEL' | translate}}</button>\r" +
	    "\n" +
	    "                        <button class=\"btn btn-save\" ng-disabled=\"editOverlayForm.$error.maxlength[0].$invalid ||\r" +
	    "\n" +
	    "                        editOverlayForm.$error.minlength[0].$invalid ||\r" +
	    "\n" +
	    "                        (invalidMessage && !validation)\" type=\"submit\" name=\"saveEdit\">{{ ::'crm.actions.SAVE' | translate}}</button>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</form>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/address/inlineEditingAddressTemplate.html',
	    "<span class=\"list-group\">\r" +
	    "\n" +
	    "\t<span class=\"list-group-item\" ng-class=\"{ 'inline-edit-display-inline' : ctrl.inline }\">\r" +
	    "\n" +
	    "        <span ng-transclude=\"\" ng-if=\"ctrl.facade.disableEdit\"></span>\r" +
	    "\n" +
	    "    \t<span class=\"view-mode\"\r" +
	    "\n" +
	    "              ng-click=\"ctrl.openInlineEdit()\"\r" +
	    "\n" +
	    "              ng-if=\"!ctrl.facade.disableEdit\"\r" +
	    "\n" +
	    "              ng-hide=\"ctrl.isVisible && !ctrl.inline\"\r" +
	    "\n" +
	    "              ng-class=\"{'inline-edit-area': ctrl.hasValue}\">\r" +
	    "\n" +
	    "            <ng-transclude></ng-transclude>\r" +
	    "\n" +
	    "            <span ng-hide=\"!ctrl.hasValue\" class=\"edit-action\"><i class=\"fa fa-pencil\"></i></span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <div class=\"list-group inline-edit-area-container edit-active\" ng-if=\"!ctrl.facade.disableEdit\" ng-show=\"ctrl.isVisible\" ng-class=\"{ 'inline-edit-inline-editor' : ctrl.inline }\">\r" +
	    "\n" +
	    "            <form name=\"ctrl.inlineEditForm\" ng-submit=\"ctrl.submit(ctrl.inlineEditForm)\" novalidate>\r" +
	    "\n" +
	    "                <div class=\"panel panel-inline-editing\" name=\"inlineEditPanel\">\r" +
	    "\n" +
	    "                    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "                        <h3 class=\"panel-title\">{{ctrl.facade.title}}</h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-body\">\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12 form-group\">\r" +
	    "\n" +
	    "                                <select type=\"text\" class=\"form-control\" ng-model=\"ctrl.facade.model.country\" ng-change=\"ctrl.updateFieldsForSelectedCountry()\" name=\"country\" autocomplete=\"off\" about=\"\" placeholder=\"{{::'crm.address.fields.COUNTRY' | translate}}\">                               \">\r" +
	    "\n" +
	    "                                    <option ng-repeat=\"country in ctrl.availableCountries\">{{ country }}</option>\r" +
	    "\n" +
	    "                                </select>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12 form-group\">\r" +
	    "\n" +
	    "                                <input type=\"text\" class=\"form-control\" ng-model=\"ctrl.facade.model.postal\" name=\"postal\" autocomplete=\"off\"\r" +
	    "\n" +
	    "                                       ng-blur=\"ctrl.onBlur()\" ng-class=\"(ctrl.isFieldValid['postal']) ? 'ng-valid' : 'ng-invalid'\"\r" +
	    "\n" +
	    "                                       placeholder=\"{{::'crm.address.fields.POSTAL' | translate}}\">\r" +
	    "\n" +
	    "                                        <!--This placeholder has to be two-way bound for dynamic translations-->\r" +
	    "\n" +
	    "                                <span ng-if=\"!ctrl.isFieldValid['postal']\"\r" +
	    "\n" +
	    "                                      class=\"form-invalid-message\">\r" +
	    "\n" +
	    "                                    {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12 form-group\" ng-if=\"ctrl.fields.address1.show\">\r" +
	    "\n" +
	    "                                <input type=\"text\" class=\"form-control\" ng-model=\"ctrl.facade.model.address1\" name=\"address1\" autocomplete=\"off\"\r" +
	    "\n" +
	    "                                       ng-class=\"(ctrl.isFieldValid['address1']) ? 'ng-valid' : 'ng-invalid'\"\r" +
	    "\n" +
	    "                                       placeholder=\"{{::'crm.address.fields.ADDRESS1' | translate}}\">\r" +
	    "\n" +
	    "                                <span ng-if=\"!ctrl.isFieldValid['address1']\"\r" +
	    "\n" +
	    "                                      class=\"form-invalid-message\">\r" +
	    "\n" +
	    "                                    {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12 form-group\" ng-if=\"ctrl.fields.address2.show\">\r" +
	    "\n" +
	    "                                <input type=\"text\" class=\"form-control\" ng-model=\"ctrl.facade.model.address2\" name=\"address2\" autocomplete=\"off\"\r" +
	    "\n" +
	    "                                       ng-class=\"(ctrl.isFieldValid['address2']) ? 'ng-valid' : 'ng-invalid'\"\r" +
	    "\n" +
	    "                                       placeholder=\"{{::'crm.address.fields.ADDRESS2' | translate}}\">\r" +
	    "\n" +
	    "                                <span ng-if=\"!ctrl.isFieldValid['address2']\"\r" +
	    "\n" +
	    "                                      class=\"form-invalid-message\">\r" +
	    "\n" +
	    "                                    {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12 form-group\" ng-if=\"ctrl.fields.city.show\">\r" +
	    "\n" +
	    "                                <input ng-show=\"ctrl.isFreeText\"\r" +
	    "\n" +
	    "                                       type=\"text\"\r" +
	    "\n" +
	    "                                       class=\"form-control\"\r" +
	    "\n" +
	    "                                       ng-model=\"ctrl.facade.model.city\"\r" +
	    "\n" +
	    "                                       name=\"city\"\r" +
	    "\n" +
	    "                                       autocomplete=\"off\"\r" +
	    "\n" +
	    "                                       ng-class=\"(ctrl.isFieldValid['city']) ? 'ng-valid' : 'ng-invalid'\"\r" +
	    "\n" +
	    "                                       placeholder=\"{{::'crm.address.fields.CITY' | translate}}\">\r" +
	    "\n" +
	    "                                <select ng-hide=\"ctrl.isFreeText\"\r" +
	    "\n" +
	    "                                        ng-model=\"ctrl.facade.model.city\"\r" +
	    "\n" +
	    "                                        class=\"form-control\"\r" +
	    "\n" +
	    "                                        ng-class=\"(ctrl.isFieldValid['city']) ? 'ng-valid' : 'ng-invalid'\"\r" +
	    "\n" +
	    "                                        ng-options=\"city for city in ctrl.cities\"></select>\r" +
	    "\n" +
	    "                                <span ng-if=\"!ctrl.isFieldValid['city']\"\r" +
	    "\n" +
	    "                                      class=\"form-invalid-message\">\r" +
	    "\n" +
	    "                                    {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12 form-group\" ng-if=\"ctrl.fields.state.show\">\r" +
	    "\n" +
	    "                                <select ng-model=\"ctrl.facade.model.state\"\r" +
	    "\n" +
	    "                                        ng-options=\"stateProvince.abbr as stateProvince.abbr for stateProvince in ctrl.availableStatesProvinces\"\r" +
	    "\n" +
	    "                                        class=\"form-control\"\r" +
	    "\n" +
	    "                                        name=\"state\"\r" +
	    "\n" +
	    "                                        ng-class=\"(ctrl.isFieldValid['state']) ? 'ng-valid' : 'ng-invalid'\"></select>\r" +
	    "\n" +
	    "                                <span ng-if=\"!ctrl.isFieldValid['state']\"\r" +
	    "\n" +
	    "                                      class=\"form-invalid-message\">\r" +
	    "\n" +
	    "                                    {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12 form-group\" ng-if=\"ctrl.fields.county.show\">\r" +
	    "\n" +
	    "                                <input type=\"text\" class=\"form-control\"\r" +
	    "\n" +
	    "                                       ng-model=\"ctrl.facade.model.county\"\r" +
	    "\n" +
	    "                                       name=\"county\"\r" +
	    "\n" +
	    "                                       autocomplete=\"off\"\r" +
	    "\n" +
	    "                                       ng-class=\"(ctrl.isFieldValid['county']) ? 'ng-valid' : 'ng-invalid'\"\r" +
	    "\n" +
	    "                                       ng-show=\"ctrl.isFreeText\"\r" +
	    "\n" +
	    "                                       placeholder=\"{{::'crm.address.fields.COUNTY' | translate}}\">\r" +
	    "\n" +
	    "                                <select ng-model=\"ctrl.facade.model.county\"\r" +
	    "\n" +
	    "                                        class=\"form-control\"\r" +
	    "\n" +
	    "                                        ng-class=\"(ctrl.isFieldValid['county']) ? 'ng-valid' : 'ng-invalid'\"\r" +
	    "\n" +
	    "                                        ng-options=\"county for county in ctrl.counties\"\r" +
	    "\n" +
	    "                                        ng-change=\"ctrl.lookupCounty()\"\r" +
	    "\n" +
	    "                                        ng-hide=\"ctrl.isFreeText\"></select>\r" +
	    "\n" +
	    "                                <span ng-if=\"!ctrl.isFieldValid['county']\"\r" +
	    "\n" +
	    "                                      class=\"form-invalid-message\">\r" +
	    "\n" +
	    "                                    {{ ::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-footer\">\r" +
	    "\n" +
	    "                        <div class=\"row ws-inline-container\">\r" +
	    "\n" +
	    "                            <div class=\"form-group ws-dropdown-edit\">\r" +
	    "\n" +
	    "                                <a href=\"\" ng-click=\"ctrl.toggleFreeText()\">\r" +
	    "\n" +
	    "                                    {{ctrl.toggleText}}\r" +
	    "\n" +
	    "                                </a>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                            <div class=\"ws-inline-actions\">\r" +
	    "\n" +
	    "                                <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                                    <a class=\"btn btn-quaternary\" type=\"button\" ng-click=\"ctrl.cancel()\"\r" +
	    "\n" +
	    "                                       name=\"cancelEdit\">{{::'crm.actions.CANCEL' | translate}}</a>\r" +
	    "\n" +
	    "                                    <button type=\"button\" class=\"btn btn-save ng-binding\" name=\"saveEdit\" aria-disabled=\"false\" ng-click=\"ctrl.saveAddress(ctrl.inlineEditForm)\" ng-disabled=\"inlineEditForm.$invalid || ctrl.facade.disableEdit || ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                                        {{::'crm.actions.SAVE' | translate}}\r" +
	    "\n" +
	    "                                    </button>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </form>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <a ng-if=\"ctrl.facade.tooltip\" tooltip-placement=\"top\" uib-tooltip=\"{{ctrl.facade.tooltip}}\">\r" +
	    "\n" +
	    "            <i class=\"fa fa-exclamation-circle\"></i>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</span>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/birthdate/inlineEditingBirthdateTemplate.html',
	    "<ul class=\"list-group\">\r" +
	    "\n" +
	    "    <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "    <li class=\"list-group-item inline-edit-area-container\" ng-class=\"{'edit-active':openEdit && !disableEditCrossSite}\">\r" +
	    "\n" +
	    "            <span ng-show=\"binded\">\r" +
	    "\n" +
	    "                <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                    <span class=\"item-heading\" ng-hide=\"omitHeading\">{{fieldHeading}}: </span>\r" +
	    "\n" +
	    "                    <crm-date date-time=\"contact.dateOfBirth\" mode=\"dateNumeric\"></crm-date> ({{contact.getAge()}} {{ ::'crm.contact.YEARS_OLD' | translate}})\r" +
	    "\n" +
	    "                </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "            <span ng-hide=\"binded\">\r" +
	    "\n" +
	    "                <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                    {{fieldHeading}}\r" +
	    "\n" +
	    "                </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-overlay heading=\"{{fieldHeading}}\">\r" +
	    "\n" +
	    "            <crm-date-input full-date=\"contact.dateOfBirth\"></crm-date-input>\r" +
	    "\n" +
	    "            <br/>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-overlay>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/connectionRelationship/inlineEditingConnectionRelationshipTemplate.html',
	    "<span class=\"list-group\">\r" +
	    "\n" +
	    "\t<span class=\"list-group-item\" ng-class=\"{ 'inline-edit-display-inline' : ctrl.inline }\">\r" +
	    "\n" +
	    "        <span ng-transclude=\"\" ng-if=\"ctrl.facade.disableEdit\"></span>\r" +
	    "\n" +
	    "    \t<span class=\"view-mode\"\r" +
	    "\n" +
	    "              ng-click=\"ctrl.openInlineEdit()\"\r" +
	    "\n" +
	    "              ng-if=\"!ctrl.facade.disableEdit\"\r" +
	    "\n" +
	    "              ng-hide=\"ctrl.isVisible && !ctrl.inline\"\r" +
	    "\n" +
	    "              ng-class=\"{'inline-edit-area': ctrl.hasValue}\">\r" +
	    "\n" +
	    "            <ng-transclude></ng-transclude>\r" +
	    "\n" +
	    "            <span ng-hide=\"!ctrl.hasValue\" class=\"edit-action\"><i class=\"fa fa-pencil\"></i></span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <div class=\"list-group inline-edit-area-container edit-active\" ng-if=\"!ctrl.facade.disableEdit\" ng-show=\"ctrl.isVisible\" ng-class=\"{ 'inline-edit-inline-editor' : ctrl.inline }\">\r" +
	    "\n" +
	    "            <form name=\"ctrl.inlineEditForm\" ng-submit=\"ctrl.submit(ctrl.inlineEditForm)\" novalidate>\r" +
	    "\n" +
	    "                <div class=\"panel panel-inline-editing\" name=\"inlineEditPanel\">\r" +
	    "\n" +
	    "                    <div class= \"panel-overlay\" ng-show=\"ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                        <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                              md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "                        <h3 class=\"panel-title\">{{ctrl.facade.title}}</h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-body form-short-horizontal\">\r" +
	    "\n" +
	    "                        <div class=\"form-group\" name=\"{{ctrl.facade.fields[0].htmlAttributeName}}\">\r" +
	    "\n" +
	    "                            <select class=\"form-control\"\r" +
	    "\n" +
	    "                                    ng-model=\"ctrl.facade.model.primary\"\r" +
	    "\n" +
	    "                                    ng-change=\"ctrl.updateRefDefs()\"\r" +
	    "\n" +
	    "                                    ng-options=\"fieldValue.text for fieldValue in ctrl.facade.fields[0].fieldValues track by fieldValue.text\"></select>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"form-group\" name=\"{{ctrl.facade.fields[1].htmlAttributeName}}\">\r" +
	    "\n" +
	    "                            <select class=\"form-control\"\r" +
	    "\n" +
	    "                                    ng-model=\"ctrl.facade.model.secondary\"\r" +
	    "\n" +
	    "                                    ng-options=\"fieldValue.text for fieldValue in ctrl.facade.fields[1].fieldValues track by fieldValue.text\"></select>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-footer\">\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                                <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                                    <button type=\"button\" class=\"btn btn-quaternary\" ng-click=\"ctrl.cancel()\" name=\"cancelEdit\">{{ ::'crm.actions.CANCEL' | translate}}</button>\r" +
	    "\n" +
	    "                                    <button type=\"submit\" class=\"btn btn-save ng-binding\" name=\"saveEdit\" aria-disabled=\"false\" ng-disabled=\"inlineEditForm.$invalid || ctrl.facade.disableEdit || ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                                        {{::'crm.actions.SAVE' | translate}}\r" +
	    "\n" +
	    "                                    </button>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </form>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <a ng-if=\"ctrl.facade.tooltip\" tooltip-placement=\"top\" uib-tooltip=\"{{ctrl.facade.tooltip}}\">\r" +
	    "\n" +
	    "            <i class=\"fa fa-exclamation-circle\"></i>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</span>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/driversLicense/inlineEditingDriversLicenseTemplate.html',
	    "<ul class=\"list-group\">\r" +
	    "\n" +
	    "    <li class=\"list-group-item inline-edit-area-container\" ng-class=\"{'edit-active':openEdit}\">\r" +
	    "\n" +
	    "         <span ng-hide=\"!binded\">\r" +
	    "\n" +
	    "             <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                 <span class=\"item-heading\">{{fieldHeading}}: </span>{{binded}}\r" +
	    "\n" +
	    "             </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "         </span>\r" +
	    "\n" +
	    "         <span ng-hide=\"binded\">\r" +
	    "\n" +
	    "             <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                 <span ng-if=\"!addHeading\">{{fieldHeading}}</span>\r" +
	    "\n" +
	    "                 <span ng-if=\"addHeading\">{{addHeading}}</span>\r" +
	    "\n" +
	    "             </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "         </span>\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-overlay heading=\"{{ fieldHeading }}\">\r" +
	    "\n" +
	    "            <div class=\"form-group\">\r" +
	    "\n" +
	    "                <input type=\"text\"\r" +
	    "\n" +
	    "                       name=\"inlineEditInput\"\r" +
	    "\n" +
	    "                       class=\"form-control\"\r" +
	    "\n" +
	    "                       ng-model=\"field.$viewValue\"\r" +
	    "\n" +
	    "                       crm-is-valid=\"validation\"\r" +
	    "\n" +
	    "                       ng-maxlength=\"maxlength\"\r" +
	    "\n" +
	    "                       ng-minlength=\"minlength\">\r" +
	    "\n" +
	    "                <span ng-show=\"invalidMessage\" class=\"form-invalid-message\">{{invalidMessage}}</span>\r" +
	    "\n" +
	    "                <span ng-show=\"editOverlayForm.$error.maxlength[0].$invalid\" class=\"invalid-message-static\">{{::'crm.errors.MAX_LENGTH' | translate}} {{$parent.maxlength}}!</span>\r" +
	    "\n" +
	    "                <span ng-show=\"editOverlayForm.$error.minlength[0].$invalid\" class=\"invalid-message-static\">{{::'crm.errors.MIN_LENGTH' | translate}} {{$parent.minlength}}!</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-overlay>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/externalReference/inlineExternalReferenceTemplate.html',
	    "<ul class=\"list-group ws-large-inline\">\r" +
	    "\n" +
	    "    <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "    <li class=\"list-group-item inline-edit-area-container\" ng-class=\"{'edit-active':openEdit && !disableEditCrossSite}\">\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-block>\r" +
	    "\n" +
	    "            <a ng-if=\"externalReferences.length==0\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-plus-circle\"></i>\r" +
	    "\n" +
	    "                <span class=\"item-heading\">{{fieldHeading}}</span>\r" +
	    "\n" +
	    "            </a>\r" +
	    "\n" +
	    "            <span ng-if=\"externalReferences.length>0\"><span class=\"item-heading\">{{fieldHeading}}:</span> {{getExternalReferenceIds()}}</span>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-block>\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-overlay obsolete=\"true\">\r" +
	    "\n" +
	    "            <div class=\"row form-group ws-inline-form-row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-6\">\r" +
	    "\n" +
	    "                    <h3 class=\"panel-title\">\r" +
	    "\n" +
	    "                        {{::'crm.external_references.EXTERNAL_REFERENCE_ID' | translate}}\r" +
	    "\n" +
	    "                    </h3>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-5\">\r" +
	    "\n" +
	    "                    <h3 class=\"panel-title\">\r" +
	    "\n" +
	    "                        {{::'crm.external_references.DEALERSHIP' | translate}}\r" +
	    "\n" +
	    "                    </h3>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row ws-inline-form-row\" ng-repeat=\"reference in externalReferences\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-6\">\r" +
	    "\n" +
	    "                    <div class=\"form-group\">\r" +
	    "\n" +
	    "                        <input class=\"form-control\" type=\"text\" ng-model=\"reference.externalReferenceId\">\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-5\">\r" +
	    "\n" +
	    "                    <div class=\"form-group\">\r" +
	    "\n" +
	    "                        <select class=\"form-control\" ng-model=\"reference.selectedFranchise\"\r" +
	    "\n" +
	    "                                ng-options=\"franchise as franchise.text for franchise in availableFranchises\"></select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-1\">\r" +
	    "\n" +
	    "                    <div class=\"btn btn-default ws-external-reference-remove-button\" ng-click=\"removeExternalReference(reference, $event)\">\r" +
	    "\n" +
	    "                        <i class=\"fa fa-trash\"></i>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"form-group\" ng-if=\"externalReferences.length==0\">\r" +
	    "\n" +
	    "                <div class=\"form-control-static\">\r" +
	    "\n" +
	    "                    {{::'crm.external_references.NO_REFERENCES_EXIST' | translate}}\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                    <a class=\"toggle-inner-panel-link\" ng-click=\"showAdditionalRow()\"><i class=\"fa fa-plus\"></i>\r" +
	    "\n" +
	    "                        {{::'crm.external_references.ADD_ANOTHER_ID' | translate}}\r" +
	    "\n" +
	    "                    </a>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-overlay>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/field/inlineEditingFieldTemplate.html',
	    "<ul class=\"list-group\">\r" +
	    "\n" +
	    "    <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "    <li class=\"list-group-item inline-edit-area-container\" ng-class=\"{'edit-active':openEdit && !disableEditCrossSite}\">\r" +
	    "\n" +
	    "        <span ng-show=\"binded\">\r" +
	    "\n" +
	    "            <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                <span name=\"email\">{{binded}}</span>\r" +
	    "\n" +
	    "            </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <span ng-hide=\"binded\">\r" +
	    "\n" +
	    "            <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                <span ng-if=\"!addHeading\">{{fieldHeading}}</span>\r" +
	    "\n" +
	    "                <span ng-if=\"addHeading\">{{addHeading}}</span>\r" +
	    "\n" +
	    "            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-overlay heading=\"{{fieldHeading}}\">\r" +
	    "\n" +
	    "            <div class=\"form-group\">\r" +
	    "\n" +
	    "                <div ng-if=\"type == null ||  type != 'textarea'\">\r" +
	    "\n" +
	    "                    <input\r" +
	    "\n" +
	    "                            type=\"text\"\r" +
	    "\n" +
	    "                            name=\"inlineEditInput\"\r" +
	    "\n" +
	    "                            class=\"form-control\"\r" +
	    "\n" +
	    "                            ng-model=\"field.$viewValue\"\r" +
	    "\n" +
	    "                            co-is-valid=\"validation\"\r" +
	    "\n" +
	    "                            ng-maxlength=\"maxlength\"\r" +
	    "\n" +
	    "                            ng-minlength=\"minlength\">\r" +
	    "\n" +
	    "                    <span ng-show=\"invalidMessage && !validation\" class=\"form-invalid-message\">{{invalidMessage}}</span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div ng-if=\"type && type == 'textarea'\">\r" +
	    "\n" +
	    "                    <textarea\r" +
	    "\n" +
	    "                          type=\"text\"\r" +
	    "\n" +
	    "                          name=\"inlineEditInput\"\r" +
	    "\n" +
	    "                          class=\"form-control\"\r" +
	    "\n" +
	    "                          ng-model=\"field.$viewValue\"\r" +
	    "\n" +
	    "                          co-is-valid=\"validation\"\r" +
	    "\n" +
	    "                          ng-maxlength=\"maxlength\"\r" +
	    "\n" +
	    "                          ng-minlength=\"minlength\">\r" +
	    "\n" +
	    "                    </textarea>\r" +
	    "\n" +
	    "                    <span ng-show=\"invalidMessage && !validation\" class=\"form-invalid-message\">{{invalidMessage}}</span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <span ng-show=\"editOverlayForm.$error.maxlength[0].$invalid && validation\" class=\"invalid-message-static\">{{::'crm.errors.MAX_LENGTH' | translate}} {{$parent.maxlength}}!</span>\r" +
	    "\n" +
	    "                <span ng-show=\"editOverlayForm.$error.minlength[0].$invalid && validation\" class=\"invalid-message-static\">{{::'crm.errors.MIN_LENGTH' | translate}} {{$parent.minlength}}!</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-overlay>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/individualCompany/inlineEditingIndividualCompanyTemplate.html',
	    "<span class=\"list-group\">\r" +
	    "\n" +
	    "\t<span class=\"list-group-item\" ng-class=\"{ 'inline-edit-display-inline' : ctrl.inline }\">\r" +
	    "\n" +
	    "        <span ng-transclude=\"\" ng-if=\"ctrl.facade.disableEdit\"></span>\r" +
	    "\n" +
	    "    \t<span class=\"view-mode\"\r" +
	    "\n" +
	    "              ng-click=\"ctrl.openInlineEdit()\"\r" +
	    "\n" +
	    "              ng-if=\"!ctrl.facade.disableEdit\"\r" +
	    "\n" +
	    "              ng-class=\"{'inline-edit-area': ctrl.hasValue}\">\r" +
	    "\n" +
	    "            <ng-transclude></ng-transclude>\r" +
	    "\n" +
	    "            <span ng-hide=\"!ctrl.hasValue\" class=\"edit-action\"><i class=\"fa fa-pencil\"></i></span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <div class=\"list-group inline-edit-area-container edit-active\" ng-if=\"!ctrl.facade.disableEdit && ctrl.isVisible\" ng-class=\"{ 'inline-edit-inline-editor' : ctrl.inline }\">\r" +
	    "\n" +
	    "            <form name=\"ctrl.inlineEditForm\" ng-submit=\"ctrl.submit(ctrl.inlineEditForm)\" novalidate>\r" +
	    "\n" +
	    "                <div class=\"panel panel-inline-editing\" name=\"inlineEditPanel\">\r" +
	    "\n" +
	    "                    <div class= \"panel-overlay\" ng-show=\"ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                        <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                              md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "                        <h3 class=\"panel-title\">{{ctrl.facade.title}}</h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-body\">\r" +
	    "\n" +
	    "                        <div class=\"row form-group ws-inline-form-row\">\r" +
	    "\n" +
	    "                            <input type=\"text\" class=\"form-control\" placeholder=\"{{ctrl.facade.field[0].placeholder}}\" ng-disabled=\"ctrl.isCompanyLinked()\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.facade.model.employer\" ng-pattern=\"field.validation.pattern\" >\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"row form-group ws-inline-form-row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12\" ng-if=\"ctrl.facade\">\r" +
	    "\n" +
	    "                                <a href=\"\" class=\"link-primary\" ng-click=\"ctrl.openSearchModal()\" ng-show=\"!ctrl.isCompanyLinked()\">\r" +
	    "\n" +
	    "                                    {{::\"crm.links.LINK_A_COMPANY\" | translate}}\r" +
	    "\n" +
	    "                                </a>\r" +
	    "\n" +
	    "                                <a href=\"\" class=\"link-primary\" ng-click=\"ctrl.unlinkCompany()\" ng-show=\"ctrl.isCompanyLinked()\">\r" +
	    "\n" +
	    "                                    {{::\"crm.links.UNLINK_COMPANY\" | translate}}\r" +
	    "\n" +
	    "                                </a>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-footer\">\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                                <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                                    <button type=\"button\" class=\"btn btn-quaternary\" ng-click=\"ctrl.cancel()\" name=\"cancelEdit\">{{ ::'crm.actions.CANCEL' | translate}}</button>\r" +
	    "\n" +
	    "                                    <button type=\"submit\" class=\"btn btn-save ng-binding\" name=\"saveEdit\" aria-disabled=\"false\" ng-disabled=\"inlineEditForm.$invalid || ctrl.facade.disableEdit || ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                                        {{::'crm.actions.SAVE' | translate}}\r" +
	    "\n" +
	    "                                    </button>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </form>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <a ng-if=\"ctrl.facade.tooltip\" tooltip-placement=\"top\" uib-tooltip=\"{{ctrl.facade.tooltip}}\">\r" +
	    "\n" +
	    "            <i class=\"fa fa-exclamation-circle\"></i>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</span>\r" +
	    "\n" +
	    "\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/individualEmail/inlineEditingIndividualEmailTemplate.html',
	    "<span class=\"list-group ws-medium-inline\">\r" +
	    "\n" +
	    "\t<span class=\"list-group-item\" ng-class=\"{ 'inline-edit-display-inline' : ctrl.inline }\">\r" +
	    "\n" +
	    "        <span ng-transclude=\"\" ng-if=\"ctrl.facade.disableEdit\"></span>\r" +
	    "\n" +
	    "    \t<span class=\"view-mode inline-edit-area\"\r" +
	    "\n" +
	    "              ng-click=\"ctrl.openInlineEdit()\"\r" +
	    "\n" +
	    "              ng-if=\"!ctrl.facade.disableEdit\">\r" +
	    "\n" +
	    "            <div class=\"ws-overflow-text\">\r" +
	    "\n" +
	    "                <ng-transclude></ng-transclude>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <span ng-hide=\"!ctrl.hasValue\" class=\"edit-action\"><i class=\"fa fa-pencil\"></i></span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <div class=\"list-group inline-edit-area-container edit-active\"\r" +
	    "\n" +
	    "             ng-if=\"!ctrl.facade.disableEdit && ctrl.isVisible\"\r" +
	    "\n" +
	    "             ng-class=\"{ 'inline-edit-inline-editor' : ctrl.inline }\">\r" +
	    "\n" +
	    "            <form name=\"ctrl.inlineEditForm\" ng-submit=\"ctrl.submit(ctrl.inlineEditForm)\" novalidate>\r" +
	    "\n" +
	    "                <div class=\"panel panel-inline-editing\">\r" +
	    "\n" +
	    "                    <div class=\"panel-overlay\" ng-show=\"ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                        <md-progress-circular\r" +
	    "\n" +
	    "                                class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "                        <h3 class=\"panel-title\">{{ctrl.facade.title}}</h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-body form-short-horizontal\">\r" +
	    "\n" +
	    "                        <label class=\"control-label single-letter-label\" ng-if=\"field.label\">{{ field.label }}: </label>\r" +
	    "\n" +
	    "                        <div class=\"transparent-input-group transparent-input-form-group\">\r" +
	    "\n" +
	    "                            <input type=\"text\" name=\"emailInlineEdit\" class=\"form-control\" placeholder=\"{{field.placeholder}}\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.facade.model.value\" ng-pattern=\"ctrl.facade.fields[0].validation.pattern\"/>\r" +
	    "\n" +
	    "                            <span class=\"input-group-addon\">\r" +
	    "\n" +
	    "                                <input id=\"radio-inline-id-email\" type=\"radio\" class=\"check-mark-radio\" ng-model=\"ctrl.facade.model.preferred\" ng-value=\"true\"\r" +
	    "\n" +
	    "                                       name=\"radio-name\"/>\r" +
	    "\n" +
	    "                                <label for=\"radio-inline-id-email\"></label>\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div ng-if=\"ctrl.isFormFieldValid(ctrl.inlineEditForm, ctrl.facade.fields[0])\">\r" +
	    "\n" +
	    "                            ERROR\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-footer\">\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                                <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                                    <button type=\"button\" class=\"btn btn-quaternary\" ng-click=\"ctrl.cancel()\"\r" +
	    "\n" +
	    "                                            name=\"cancelEdit\">{{ ::'crm.actions.CANCEL' | translate}}\r" +
	    "\n" +
	    "                                    </button>\r" +
	    "\n" +
	    "                                    <button type=\"submit\" class=\"btn btn-save ng-binding\" name=\"saveEdit\" aria-disabled=\"false\"\r" +
	    "\n" +
	    "                                            ng-disabled=\"ctrl.inlineEditForm.$invalid || ctrl.facade.disableEdit || ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                                        {{::'crm.actions.SAVE' | translate}}\r" +
	    "\n" +
	    "                                    </button>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </form>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <a ng-if=\"ctrl.facade.tooltip\" tooltip-placement=\"top\" uib-tooltip=\"{{ctrl.facade.tooltip}}\">\r" +
	    "\n" +
	    "            <i class=\"fa fa-exclamation-circle\"></i>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</span>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/individualGender/inlineEditingIndividualGenderTemplate.html',
	    "<ul class=\"list-group\">\r" +
	    "\n" +
	    "    <li class=\"list-group-item inline-edit-area-container\" ng-class=\"{'edit-active':openEdit}\">\r" +
	    "\n" +
	    "            <span ng-hide=\"!binded\">\r" +
	    "\n" +
	    "                <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                    <span class=\"item-heading\" ng-hide=\"omitHeading\">{{fieldHeading}}: </span>{{binded}}\r" +
	    "\n" +
	    "                </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "            <span ng-hide=\"binded\">\r" +
	    "\n" +
	    "                <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                    {{fieldHeading}}\r" +
	    "\n" +
	    "                </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-overlay heading=\"{{fieldHeading}}\">\r" +
	    "\n" +
	    "            <crm-gender contact=\"contact\"></crm-gender>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-overlay>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/individualName/inlineEditingIndividualNameTemplate.html',
	    " <crm-inline-editing-individual-name-overlay contact=\"contact\" contact-type=\"{{contactType}}\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "         <div ng-hide=\"!contact.salutation\">\r" +
	    "\n" +
	    "             <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                 <span class=\"item-heading\">{{ ::'crm.contact.headers.SALUTATION' | translate}}: </span>{{contact.salutation}}\r" +
	    "\n" +
	    "             </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "         </div>\r" +
	    "\n" +
	    "         <div ng-hide=\"contact.salutation\">\r" +
	    "\n" +
	    "             <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                 {{ ::'crm.contact.headers.SALUTATION' | translate}}\r" +
	    "\n" +
	    "             </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "         </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "        <div ng-hide=\"!contact.firstName\">\r" +
	    "\n" +
	    "            <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                <span class=\"item-heading\">{{ ::'crm.contact.FIRST_NAME' | translate}}: </span>{{contact.firstName}}\r" +
	    "\n" +
	    "            </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div ng-hide=\"contact.firstName\">\r" +
	    "\n" +
	    "            <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                {{ ::'crm.contact.FIRST_NAME' | translate}}\r" +
	    "\n" +
	    "            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "         <div ng-hide=\"!contact.middleName\">\r" +
	    "\n" +
	    "             <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                 <span class=\"item-heading\">{{ ::'crm.contact.MIDDLE_NAME' | translate}}: </span>{{contact.middleName}}\r" +
	    "\n" +
	    "             </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "         </div>\r" +
	    "\n" +
	    "         <div ng-hide=\"contact.middleName\">\r" +
	    "\n" +
	    "             <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                 {{ ::'crm.contact.MIDDLE_NAME' | translate}}\r" +
	    "\n" +
	    "             </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "         </div>\r" +
	    "\n" +
	    "    \r" +
	    "\n" +
	    "         <div ng-hide=\"!contact.lastName\">\r" +
	    "\n" +
	    "             <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                 <span class=\"item-heading\">{{ ::'crm.contact.LAST_NAME' | translate}}: </span>{{contact.lastName}}\r" +
	    "\n" +
	    "             </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "         </div>\r" +
	    "\n" +
	    "         <div ng-hide=\"contact.lastName\">\r" +
	    "\n" +
	    "             <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                 {{ ::'crm.contact.LAST_NAME' | translate}}\r" +
	    "\n" +
	    "             </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "         </div>\r" +
	    "\n" +
	    "    \r" +
	    "\n" +
	    "         <div ng-hide=\"!contact.friendlyName\">\r" +
	    "\n" +
	    "             <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                 <span class=\"item-heading\">{{ ::'crm.contact.NICKNAME' | translate}}: </span>{{contact.friendlyName}}\r" +
	    "\n" +
	    "             </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "         </div>\r" +
	    "\n" +
	    "         <div ng-hide=\"contact.friendlyName\">\r" +
	    "\n" +
	    "             <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                 {{ ::'crm.contact.NICKNAME' | translate}}\r" +
	    "\n" +
	    "             </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "         </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    " </crm-inline-editing-individual-name-overlay>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/individualNameOverlay/inlineEditingIndividualNameOverlayTemplate.html',
	    "<ul class=\"list-group\">\r" +
	    "\n" +
	    "    <li class=\"list-group-item inline-edit-area-container\" ng-class=\"{'edit-active':openEdit}\">\r" +
	    "\n" +
	    "        <div ng-transclude=\"\"></div>\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-overlay heading=\"{{ ::'crm.contact.CUSTOMER_NAME' | translate }}\">\r" +
	    "\n" +
	    "            <div class=\"form-group\">\r" +
	    "\n" +
	    "                <select class=\"form-control\" ng-model=\"contact.salutation\" name=\"prefix\" id=\"{{prefixId}}\"\r" +
	    "\n" +
	    "                        ng-options=\"refDef.text for refDef in prefixes track by refDef.value\">\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"form-group\">\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control crm-required\" name=\"firstName\" ng-model=\"contact.firstName\" maxlength=\"50\" ng-required=\"true\" placeholder=\"{{::'crm.contact.FIRST_NAME' | translate}}\">\r" +
	    "\n" +
	    "                <span class=\"form-invalid-message\">{{ ::'crm.contact.headers.REQUIRED' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"form-group\">\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\" name=\"middleName\" ng-model=\"contact.middleName\" maxlength=\"50\" placeholder=\"{{::'crm.contact.MIDDLE_NAME' | translate}}\">\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"form-group\">\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control crm-required\" name=\"lastName\" ng-model=\"contact.lastName\" maxlength=\"50\" ng-required=\"true\" placeholder=\"{{::'crm.contact.LAST_NAME' | translate}}\">\r" +
	    "\n" +
	    "                <span class=\"form-invalid-message\">{{ ::'crm.contact.headers.REQUIRED' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"form-group\">\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\" name=\"nickname\" ng-model=\"contact.friendlyName\" maxlength=\"50\" placeholder=\"{{::'crm.contact.NICKNAME' | translate}}\">\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-overlay>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/individualNameTitle/inlineEditingIndividualNameTitleTemplate.html',
	    "<crm-inline-editing-individual-name-overlay contact=\"contact\" contact-type=\"{{contactType}}\">\r" +
	    "\n" +
	    "    <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "        <span class=\"panel-title\" name=\"fullName\">\r" +
	    "\n" +
	    "            {{ contact.salutation ? contact.salutation.text + \" \" : \"\" }}{{ contact.firstName }}{{ contact.friendlyName ? \" \\\"\" +  contact.friendlyName + \"\\\"\" : \"\"}}{{ contact.middleName ? \" \" +  contact.middleName : \"\"}}{{ \" \" + contact.lastName}}\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "    </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "</crm-inline-editing-individual-name-overlay>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/individualPhone/inlineEditingIndividualPhoneTemplate.html',
	    "<span class=\"list-group\">\r" +
	    "\n" +
	    "\t<span class=\"list-group-item\" ng-class=\"{ 'inline-edit-display-inline' : ctrl.inline }\">\r" +
	    "\n" +
	    "    \t<span class=\"view-mode\"\r" +
	    "\n" +
	    "              ng-click=\"ctrl.openInlineEdit()\"\r" +
	    "\n" +
	    "              ng-class=\"{'inline-edit-area': ctrl.hasValue}\">\r" +
	    "\n" +
	    "            <ng-transclude></ng-transclude>\r" +
	    "\n" +
	    "            <span ng-hide=\"!ctrl.hasValue\" class=\"edit-action\"><i class=\"fa fa-pencil\"></i></span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <div class=\"list-group inline-edit-area-container edit-active\"\r" +
	    "\n" +
	    "             ng-if=\"!ctrl.facade.disableEdit && ctrl.isVisible\"\r" +
	    "\n" +
	    "             ng-class=\"{ 'inline-edit-inline-editor' : ctrl.inline }\">\r" +
	    "\n" +
	    "            <form name=\"ctrl.inlineEditForm\" ng-submit=\"ctrl.submit(ctrl.inlineEditForm)\" novalidate>\r" +
	    "\n" +
	    "                <div class=\"panel panel-inline-editing\" name=\"inlineEditPanel\">\r" +
	    "\n" +
	    "                    <div class=\"panel-overlay\" ng-show=\"ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                        <md-progress-circular\r" +
	    "\n" +
	    "                                class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "                        <h3 class=\"panel-title\">{{ctrl.facade.title}}</h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-body\">\r" +
	    "\n" +
	    "                        <div ng-repeat=\"field in ctrl.facade.fields\" class=\"form-group form-short-horizontal\"\r" +
	    "\n" +
	    "                             name=\"{{field.htmlAttributeName}}\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                            <div class=\"row\">\r" +
	    "\n" +
	    "                                <div class=\"col-xs-2\">\r" +
	    "\n" +
	    "                                    <label class=\"control-label single-letter-label\" ng-if=\"field.label\">\r" +
	    "\n" +
	    "                                        {{ field.label }}:\r" +
	    "\n" +
	    "                                    </label>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div class=\"col-xs-10\">\r" +
	    "\n" +
	    "                                    <div class=\"transparent-input-group no-float no-z-index\">\r" +
	    "\n" +
	    "                                        <crm-inline-edit-international-phone\r" +
	    "\n" +
	    "                                                model=\"ctrl.facade.model[field.fieldName].value\"\r" +
	    "\n" +
	    "                                                ng-if=\"field.type==='phone'\"></crm-inline-edit-international-phone>\r" +
	    "\n" +
	    "                                        <span class=\"input-group-addon input-group-addon-inline\">\r" +
	    "\n" +
	    "                                            <input id=\"radio-inline-id-phone-{{$index}}\" type=\"radio\"\r" +
	    "\n" +
	    "                                                   class=\"check-mark-radio\"\r" +
	    "\n" +
	    "                                                   name=\"preferredContactVia\"\r" +
	    "\n" +
	    "                                                   ng-model=\"ctrl.facade.model.selectedPreferred\"\r" +
	    "\n" +
	    "                                                   ng-value=\"field.fieldName\"/>\r" +
	    "\n" +
	    "                                            <label for=\"radio-inline-id-phone-{{$index}}\"></label>\r" +
	    "\n" +
	    "                                        </span>\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div ng-if=\"ctrl.isFormFieldValid(ctrl.inlineEditForm, field)\">\r" +
	    "\n" +
	    "                                    ERROR\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-footer\">\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                                <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                                    <button type=\"button\" class=\"btn btn-quaternary\" ng-click=\"ctrl.cancel()\"\r" +
	    "\n" +
	    "                                            name=\"cancelEdit\">{{ ::'crm.actions.CANCEL' | translate}}\r" +
	    "\n" +
	    "                                    </button>\r" +
	    "\n" +
	    "                                    <button type=\"submit\" class=\"btn btn-save ng-binding\" name=\"saveEdit\"\r" +
	    "\n" +
	    "                                            aria-disabled=\"false\"\r" +
	    "\n" +
	    "                                            ng-disabled=\"inlineEditForm.$invalid || ctrl.facade.disableEdit || ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                                        {{::'crm.actions.SAVE' | translate}}\r" +
	    "\n" +
	    "                                    </button>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </form>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <a ng-if=\"ctrl.facade.tooltip\" tooltip-placement=\"top\" uib-tooltip=\"{{ctrl.facade.tooltip}}\" tooltip-append-to-body=\"true\">\r" +
	    "\n" +
	    "            <i class=\"fa fa-exclamation-circle\"></i>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</span>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/individualSSN/inlineEditingIndividualSSNTemplate.html',
	    "<ul class=\"list-group\">\r" +
	    "\n" +
	    "    <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "    <li class=\"list-group-item inline-edit-area-container\" ng-class=\"{'edit-active':openEdit && !disableEditCrossSite}\">\r" +
	    "\n" +
	    "         <span ng-hide=\"!entity.hasSSN\">\r" +
	    "\n" +
	    "             <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                 <span class=\"item-heading\">{{fieldHeading}}: </span>{{entity.hasSSN ? '***-**-****' : ''}}\r" +
	    "\n" +
	    "             </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "         </span>\r" +
	    "\n" +
	    "         <span ng-hide=\"entity.hasSSN\">\r" +
	    "\n" +
	    "             <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                <span ng-if=\"!addHeading\">{{fieldHeading}}</span>\r" +
	    "\n" +
	    "                <span ng-if=\"addHeading\">{{addHeading}}</span>\r" +
	    "\n" +
	    "             </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "         </span>\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-overlay heading=\"{{ ::'crm.contact.SSN' | translate}}\">\r" +
	    "\n" +
	    "            <div class=\"form-group\" ng-show=\"!entity.hasSSN\">\r" +
	    "\n" +
	    "                <crm-ssn-input model=\"newSSN\"></crm-ssn-input>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-flex-rows\" ng-show=\"entity.hasSSN\">\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\" value=\"***-**-****\" disabled>\r" +
	    "\n" +
	    "                <button type=button class=\"btn btn-warning ssn-clear-button\" ng-click=\"clearSsn()\">{{ ::'crm.actions.CLEAR' | translate }}</button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-overlay>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/internationalPhone/inlineEditInternationalPhoneTemplate.html',
	    "<!--<div class=\"form-control-container\">-->\r" +
	    "\n" +
	    "<!--</div>-->\r" +
	    "\n" +
	    "<input type=\"tel\" name=\"phoneNumber\" id=\"{{id}}\" class=\"form-control\" ng-model=\"model\" style=\"padding-right: 25px\">\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/organizationNameTitle/inlineEditingOrganizationNameTitleTemplate.html',
	    "<ul class=\"list-group\">\r" +
	    "\n" +
	    "    <li class=\"list-group-item inline-edit-area-container\" ng-class=\"{'edit-active':openEdit}\">\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "            <span class=\"panel-title\">\r" +
	    "\n" +
	    "                {{contact.name}}\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-overlay heading=\"{{ ::'crm.contact.organization.NAME' | translate}}\">\r" +
	    "\n" +
	    "            <input type=\"text\" class=\"form-control\" ng-model=\"contact.name\">\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-overlay>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/organizationPhone/inlineEditingOrganizationPhoneTemplate.html',
	    "<ul class=\"list-group\">\r" +
	    "\n" +
	    "    <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "    <li class=\"list-group-item inline-edit-area-container\" ng-class=\"{'edit-active':openEdit && !disableEditCrossSite}\">\r" +
	    "\n" +
	    "         <span ng-hide=\"!binded\">\r" +
	    "\n" +
	    "             <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                 <span class=\"item-heading\">{{fieldHeading}}: </span><span name=\"phoneNumber\">{{binded}}</span>\r" +
	    "\n" +
	    "             </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "         </span>\r" +
	    "\n" +
	    "         <span ng-hide=\"binded\">\r" +
	    "\n" +
	    "             <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                 <span ng-if=\"!addHeading\">{{fieldHeading}}</span>\r" +
	    "\n" +
	    "                 <span ng-if=\"addHeading\">{{addHeading}}</span>\r" +
	    "\n" +
	    "             </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "         </span>\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-overlay heading=\"{{ ::'crm.contact.contact_points.PHONE_NUMBERS' | translate }}\">\r" +
	    "\n" +
	    "            <div class=\"form-short-horizontal\">\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label class=\"control-label single-letter-label\">{{ ::'crm.contact.organization.MAIN_PHONE_LETTER' | translate }}:</label>\r" +
	    "\n" +
	    "                    <div class=\"form-control-container\">\r" +
	    "\n" +
	    "                        <crm-intl-phone contact=\"contact\" model=\"mainNumber\"></crm-intl-phone>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label class=\"control-label single-letter-label\">{{ ::'crm.contact.organization.TOLL_FREE_LETTER' | translate }}:</label>\r" +
	    "\n" +
	    "                    <div class=\"form-control-container\">\r" +
	    "\n" +
	    "                        <crm-intl-phone contact=\"contact\" model=\"tollFree\"></crm-intl-phone>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                <div class=\"form-group\">\r" +
	    "\n" +
	    "                    <label class=\"control-label single-letter-label\">{{ ::'crm.contact.organization.FAX_LETTER' | translate }}:</label>\r" +
	    "\n" +
	    "                    <div class=\"form-control-container\">\r" +
	    "\n" +
	    "                        <crm-intl-phone contact=\"contact\" model=\"fax\"></crm-intl-phone>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-overlay>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/organizationPrimaryContact/template.html',
	    "<span class=\"list-group\">\r" +
	    "\n" +
	    "\t<span class=\"list-group-item\" ng-class=\"{ 'inline-edit-display-inline' : ctrl.inline}\">\r" +
	    "\n" +
	    "        <span ng-transclude=\"\" ng-if=\"ctrl.facade.disableEdit\"></span>\r" +
	    "\n" +
	    "    \t<span class=\"view-mode\"\r" +
	    "\n" +
	    "              ng-click=\"ctrl.openInlineEdit()\"\r" +
	    "\n" +
	    "              ng-if=\"!ctrl.facade.disableEdit\"\r" +
	    "\n" +
	    "              ng-class=\"{'inline-edit-area': ctrl.hasValue}\">\r" +
	    "\n" +
	    "            <ng-transclude></ng-transclude>\r" +
	    "\n" +
	    "            <span ng-hide=\"!ctrl.hasValue\" class=\"edit-action\"><i class=\"fa fa-pencil\"></i></span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <div class=\"list-group inline-edit-area-container edit-active\" ng-if=\"!ctrl.facade.disableEdit && ctrl.isVisible\" ng-class=\"{ 'inline-edit-inline-editor' : ctrl.inline }\">\r" +
	    "\n" +
	    "            <form name=\"ctrl.inlineEditForm\" ng-submit=\"ctrl.submit(ctrl.inlineEditForm)\" novalidate>\r" +
	    "\n" +
	    "                <div class=\"panel panel-inline-editing\" name=\"inlineEditPanel\">\r" +
	    "\n" +
	    "                    <div class= \"panel-overlay\" ng-show=\"ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                        <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                              md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "                        <h3 class=\"panel-title\">{{ctrl.facade.title}}</h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-body\">\r" +
	    "\n" +
	    "                        <div class=\"row form-group ws-inline-form-row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-6\">\r" +
	    "\n" +
	    "                                <input type=\"text\" class=\"form-control\" placeholder=\"{{ctrl.facade.fields[0].placeholder}}\"\r" +
	    "\n" +
	    "                                       ng-model=\"ctrl.facade.model.First\" ng-pattern=\"field.validation.pattern\" ng-disabled=\"ctrl.isLinked()\">\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                            <div class=\"col-xs-6\">\r" +
	    "\n" +
	    "                                <input type=\"text\" class=\"form-control\" placeholder=\"{{ctrl.facade.fields[1].placeholder}}\"\r" +
	    "\n" +
	    "                                       ng-model=\"ctrl.facade.model.Last\" ng-pattern=\"field.validation.pattern\" ng-disabled=\"ctrl.isLinked()\">\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"row form-group ws-inline-form-row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12\" ng-if=\"ctrl.facade\">\r" +
	    "\n" +
	    "                                <a href=\"\" ng-click=\"ctrl.openSearchModal()\" name=\"searchToLinkButton\" ng-show=\"!ctrl.isLinked()\">\r" +
	    "\n" +
	    "                                    {{ ::'crm.contact.organization.LINK_PRIMARY_CONTACT' | translate }}\r" +
	    "\n" +
	    "                                </a>\r" +
	    "\n" +
	    "                                <a href=\"\" ng-click=\"ctrl.unlinkContact()\" ng-show=\"ctrl.isLinked()\">\r" +
	    "\n" +
	    "                                    {{ ::'crm.contact.organization.UNLINK_PRIMARY_CONTACT' | translate }}\r" +
	    "\n" +
	    "                                </a>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-footer\">\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                                <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                                    <button type=\"button\" class=\"btn btn-quaternary\" ng-click=\"ctrl.cancel()\" name=\"cancelEdit\">{{ ::'crm.actions.CANCEL' | translate}}</button>\r" +
	    "\n" +
	    "                                    <button type=\"submit\" class=\"btn btn-save ng-binding\" name=\"saveEdit\" aria-disabled=\"false\" ng-disabled=\"inlineEditForm.$invalid || ctrl.facade.disableEdit || ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                                        {{::'crm.actions.SAVE' | translate}}\r" +
	    "\n" +
	    "                                    </button>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </form>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <a ng-if=\"ctrl.facade.tooltip\" tooltip-placement=\"top\" uib-tooltip=\"{{ctrl.facade.tooltip}}\">\r" +
	    "\n" +
	    "            <i class=\"fa fa-exclamation-circle\"></i>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</span>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/selectContactTypes/inlineEditingSelectContactTypesTemplate.html',
	    "<span name=\"companyTypeSubTypePanel\">\r" +
	    "\n" +
	    "\t<span ng-class=\"{ 'inline-edit-display-inline' : ctrl.inline }\">\r" +
	    "\n" +
	    "        <span ng-transclude=\"\" ng-if=\"ctrl.facade.disableEdit\"></span>\r" +
	    "\n" +
	    "    \t<span class=\"view-mode\"\r" +
	    "\n" +
	    "              ng-click=\"ctrl.openInlineEdit()\"\r" +
	    "\n" +
	    "              ng-if=\"!ctrl.facade.disableEdit\"\r" +
	    "\n" +
	    "              ng-class=\"{'inline-edit-area': ctrl.hasValue}\">\r" +
	    "\n" +
	    "            <ng-transclude></ng-transclude>\r" +
	    "\n" +
	    "            <span ng-hide=\"!ctrl.hasValue\" class=\"edit-action\"><i class=\"fa fa-pencil\"></i></span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <div class=\"list-group inline-edit-area-container edit-active\" ng-if=\"!ctrl.facade.disableEdit && ctrl.isVisible\" ng-class=\"{ 'inline-edit-inline-editor' : ctrl.inline }\">\r" +
	    "\n" +
	    "            <form name=\"ctrl.inlineEditForm\" ng-submit=\"ctrl.submit(ctrl.inlineEditForm)\" novalidate>\r" +
	    "\n" +
	    "                <div class=\"panel panel-inline-editing\" name=\"inlineEditPanel\">\r" +
	    "\n" +
	    "                    <div class= \"panel-overlay\" ng-show=\"ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                        <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                              md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "                        <h3 class=\"panel-title\">{{ctrl.facade.title}}</h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-body form-short-horizontal\">\r" +
	    "\n" +
	    "                        <div class=\"form-group\">\r" +
	    "\n" +
	    "                            <select class=\"form-control\"\r" +
	    "\n" +
	    "                                    name=\"{{ctrl.facade.fields[0].htmlAttributeName}}\"\r" +
	    "\n" +
	    "                                    ng-model=\"ctrl.facade.model[ctrl.facade.fields[0].fieldName]\"\r" +
	    "\n" +
	    "                                    ng-options=\"fieldValue.text for fieldValue in ctrl.facade.fields[0].fieldValues track by fieldValue.value\"\r" +
	    "\n" +
	    "                                    ng-change=\"ctrl.onTypeChanged()\"></select>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"form-group\">\r" +
	    "\n" +
	    "                            <select class=\"form-control\"\r" +
	    "\n" +
	    "                                    name=\"{{ctrl.facade.fields[1].htmlAttributeName}}\"\r" +
	    "\n" +
	    "                                    ng-model=\"ctrl.facade.model[ctrl.facade.fields[1].fieldName]\"\r" +
	    "\n" +
	    "                                    ng-options=\"fieldValue.text for fieldValue in ctrl.facade.fields[1].fieldValues track by fieldValue.value\"></select>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-footer\">\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                                <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                                    <button type=\"button\" class=\"btn btn-quaternary\" ng-click=\"ctrl.cancel()\" name=\"cancelEdit\">{{ ::'crm.actions.CANCEL' | translate}}</button>\r" +
	    "\n" +
	    "                                    <button type=\"submit\" class=\"btn btn-save ng-binding\" name=\"saveEdit\" aria-disabled=\"false\" ng-disabled=\"inlineEditForm.$invalid || ctrl.facade.disableEdit || ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                                        {{::'crm.actions.SAVE' | translate}}\r" +
	    "\n" +
	    "                                    </button>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </form>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</span>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/selectEnum/inlineEditingSelectEnumTemplate.html',
	    "<ul class=\"list-group\">\r" +
	    "\n" +
	    "    <li class=\"list-group-item inline-edit-area-container\" ng-class=\"{'edit-active':openEdit}\">\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "            <span class=\"item-heading\" ng-hide=\"omitHeading\">{{fieldHeading}}: </span>{{property}}\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-overlay heading=\"{{fieldHeading}}\">\r" +
	    "\n" +
	    "            <div class=\"form-group\">\r" +
	    "\n" +
	    "                <select ng-model=\"property\"\r" +
	    "\n" +
	    "                        ng-options=\"property for property in options track by property\"\r" +
	    "\n" +
	    "                        ng-change=\"update(property)\"\r" +
	    "\n" +
	    "                        id=\"{{id}}\" class=\"form-control\" co-is-valid=\"validation\"></select>\r" +
	    "\n" +
	    "                <span ng-if=\"invalidMessage\" class=\"form-invalid-message\">{{invalidMessage}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-overlay>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/selectOptionItem/inlineEditingSelectOptionItemTemplate.html',
	    "<ul class=\"list-group\">\r" +
	    "\n" +
	    "    <li class=\"list-group-item inline-edit-area-container\" ng-class=\"{'edit-active':openEdit}\">\r" +
	    "\n" +
	    "            <span ng-hide=\"!optionItem.itemValueId\">\r" +
	    "\n" +
	    "                <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                    <span class=\"item-heading\" ng-hide=\"omitHeading\">{{fieldHeading}}: </span>{{optionItem.customValue}}\r" +
	    "\n" +
	    "                </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "            <span ng-hide=\"optionItem.itemValueId\">\r" +
	    "\n" +
	    "                <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                    {{fieldHeading}}\r" +
	    "\n" +
	    "                </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-overlay heading=\"{{fieldHeading}}\">\r" +
	    "\n" +
	    "            <div class=\"form-group\">\r" +
	    "\n" +
	    "                <select ng-model=\"optionItem\"\r" +
	    "\n" +
	    "                        ng-options=\"optionItem.customValue for optionItem in optionItemList track by optionItem.itemValueId\"\r" +
	    "\n" +
	    "                        ng-change=\"update(optionItem)\" id=\"{{id}}\" class=\"form-control\" co-is-valid=\"validation\"></select>\r" +
	    "\n" +
	    "                <span ng-if=\"invalidMessage\" class=\"form-invalid-message\">{{invalidMessage}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-overlay>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/selectRefDef/inlineEditingSelectRefDefTemplate.html',
	    "<ul class=\"list-group\">\r" +
	    "\n" +
	    "    <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "    <li class=\"list-group-item inline-edit-area-container\" ng-class=\"{'edit-active':openEdit && !disableEditCrossSite}\">\r" +
	    "\n" +
	    "            <span ng-hide=\"!refDef.text\">\r" +
	    "\n" +
	    "                <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                    <span class=\"item-heading\" ng-hide=\"omitHeading\">{{fieldHeading}}: </span>{{refDef.text}}\r" +
	    "\n" +
	    "                </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "            <span ng-hide=\"refDef.text\">\r" +
	    "\n" +
	    "                <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                    {{fieldHeading}}\r" +
	    "\n" +
	    "                </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <!--TODO: Temp solution for disable inline edit when cross site-->\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-overlay heading=\"{{fieldHeading}}\" ng-if=\"!disableEditCrossSite\">\r" +
	    "\n" +
	    "            <div class=\"form-group\">\r" +
	    "\n" +
	    "                <select ng-model=\"refDef\"\r" +
	    "\n" +
	    "                        ng-options=\"refDef.text for refDef in refDefList track by refDef.value\"\r" +
	    "\n" +
	    "                        ng-change=\"update(refDef)\" id=\"{{id}}\" class=\"form-control\" co-is-valid=\"validation\"></select>\r" +
	    "\n" +
	    "                <span ng-if=\"invalidMessage\" class=\"form-invalid-message\">{{invalidMessage}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-overlay>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/selectUser/inlineEditingSelectUserTemplate.html',
	    "<ul class=\"list-group\">\r" +
	    "\n" +
	    "    <li class=\"list-group-item inline-edit-area-container\" ng-class=\"{'edit-active':openEdit}\">\r" +
	    "\n" +
	    "            <span ng-hide=\"!user.id\">\r" +
	    "\n" +
	    "                <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                    <span class=\"item-heading\" ng-hide=\"omitHeading\">{{fieldHeading}}: </span>{{user.getFullName()}}\r" +
	    "\n" +
	    "                </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "            <span ng-hide=\"user.id\">\r" +
	    "\n" +
	    "                <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                    {{fieldHeading}}\r" +
	    "\n" +
	    "                </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-overlay heading=\"{{fieldHeading}}\">\r" +
	    "\n" +
	    "            <div class=\"form-group\">\r" +
	    "\n" +
	    "                <select ng-model=\"user\"\r" +
	    "\n" +
	    "                        ng-options=\"user.getFullName() for user in users track by user.id\"\r" +
	    "\n" +
	    "                        ng-change=\"update(user)\" id=\"{{id}}\" class=\"form-control\" co-is-valid=\"validation\"></select>\r" +
	    "\n" +
	    "                <span ng-if=\"invalidMessage\" class=\"form-invalid-message\">{{invalidMessage}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-overlay>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/socialMedia/inlineEditingSocialMediaTemplate.html',
	    "<ul class=\"list-group\">\r" +
	    "\n" +
	    "    <li class=\"list-group-item inline-edit-area-container\" ng-class=\"{'edit-active':openEdit && !disableEditCrossSite}\">\r" +
	    "\n" +
	    "            <span ng-hide=\"!binded\">\r" +
	    "\n" +
	    "                <crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "                    <span class=\"item-heading\" ng-if=\"!omitHeading\">{{addHeading || fieldHeading}}: </span>{{binded}}\r" +
	    "\n" +
	    "                </crm-inline-editing-edit-hover>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "            <span ng-hide=\"binded\">\r" +
	    "\n" +
	    "                <crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                    <span ng-if=\"!addHeading\">{{fieldHeading}}</span>\r" +
	    "\n" +
	    "                    <span ng-if=\"addHeading\">{{addHeading}}</span>\r" +
	    "\n" +
	    "                </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <crm-inline-editing-edit-overlay heading=\"{{fieldHeading}}\">\r" +
	    "\n" +
	    "            <div ng-if=\"invalidMessage\" class=\"form-group\">\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\" ng-model=\"field.$viewValue\" co-is-valid=\"validation\" maxlength=\"{{maxlength}}\">\r" +
	    "\n" +
	    "                <span class=\"form-invalid-message\">{{invalidMessage}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-if=\"!invalidMessage\" class=\"form-group\">\r" +
	    "\n" +
	    "                <input type=\"text\" class=\"form-control\" ng-model=\"field.$viewValue\" maxlength=\"{{maxlength}}\">\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </crm-inline-editing-edit-overlay>\r" +
	    "\n" +
	    "    </li>\r" +
	    "\n" +
	    "</ul>"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/tradeInspectedBy/inlineEditTradeInspectedByTemplate.html',
	    "<span class=\"list-group\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "\t<span class=\"list-group-item\" ng-class=\"{ 'inline-edit-display-inline' : ctrl.inline }\">\r" +
	    "\n" +
	    "        <span ng-transclude=\"\" ng-if=\"ctrl.facade.disableEdit\"></span>\r" +
	    "\n" +
	    "    \t<span class=\"view-mode\"\r" +
	    "\n" +
	    "              ng-click=\"ctrl.openInlineEdit()\"\r" +
	    "\n" +
	    "              ng-if=\"!ctrl.facade.disableEdit\"\r" +
	    "\n" +
	    "              ng-hide=\"ctrl.isVisible && !ctrl.inline\"\r" +
	    "\n" +
	    "              ng-class=\"{'inline-edit-area': ctrl.hasValue}\">\r" +
	    "\n" +
	    "            <ng-transclude></ng-transclude>\r" +
	    "\n" +
	    "            <span ng-hide=\"!ctrl.hasValue\" class=\"edit-action\"><i class=\"fa fa-pencil\"></i></span>\r" +
	    "\n" +
	    "        </span>\t\t\r" +
	    "\n" +
	    "        <div class=\"list-group inline-edit-area-container edit-active\" ng-if=\"!ctrl.facade.disableEdit\" ng-show=\"ctrl.isVisible\" ng-class=\"{ 'inline-edit-inline-editor' : ctrl.inline }\">\r" +
	    "\n" +
	    "            <form name=\"ctrl.inlineEditForm\" ng-submit=\"ctrl.submit(ctrl.inlineEditForm)\" novalidate>\r" +
	    "\n" +
	    "                <div class=\"panel panel-inline-editing\" name=\"inlineEditPanel\">\r" +
	    "\n" +
	    "                    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "                        <h3 class=\"panel-title\">{{ctrl.facade.title}}</h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-body form-short-horizontal\">\r" +
	    "\n" +
	    "                        <div ng-repeat=\"field in ctrl.facade.fields\" class=\"form-group\" name=\"{{field.htmlAttributeName}}\">\r" +
	    "\n" +
	    "                            <label class=\"control-label single-letter-label\" ng-if=\"field.label\">{{ field.label }}: </label>\r" +
	    "\n" +
	    "                            <select class=\"form-control\" ng-if=\"field.type==='select'\"\r" +
	    "\n" +
	    "                                    ng-model=\"ctrl.facade.model[field.fieldName]\"\r" +
	    "\n" +
	    "                                    name=\"optionSelector\"\r" +
	    "\n" +
	    "                                    ng-options=\"fieldValue.text as fieldValue.value for fieldValue in field.fieldValues\">\r" +
	    "\n" +
	    "                                <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                            </select>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-footer\">\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                                <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                                    <button class=\"btn btn-quaternary\" ng-click=\"ctrl.cancel()\" name=\"cancelEdit\">{{ ::'crm.actions.CANCEL' | translate}}</button>\r" +
	    "\n" +
	    "                                    <button type=\"submit\" class=\"btn btn-save ng-binding\" name=\"saveEdit\" aria-disabled=\"false\" ng-disabled=\"inlineEditForm.$invalid || ctrl.facade.disableEdit || ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                                        {{::'crm.actions.SAVE' | translate}}\r" +
	    "\n" +
	    "                                    </button>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </form>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <a ng-if=\"ctrl.facade.tooltip\" tooltip-placement=\"top\" uib-tooltip=\"{{ctrl.facade.tooltip}}\">\r" +
	    "\n" +
	    "            <i class=\"fa fa-exclamation-circle\"></i>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</span>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/inlineEditing/fields/tradeYearMakeModelVin/inlineEditTradeYearMakeModelVinTemplate.html',
	    "<span class=\"list-group\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "\t<span class=\"list-group-item\" ng-class=\"{ 'inline-edit-display-inline' : ctrl.inline }\">\r" +
	    "\n" +
	    "        <span ng-transclude=\"\" ng-if=\"ctrl.facade.disableEdit\"></span>\r" +
	    "\n" +
	    "    \t<span class=\"view-mode\"\r" +
	    "\n" +
	    "              ng-click=\"ctrl.openInlineEdit()\"\r" +
	    "\n" +
	    "              ng-if=\"!ctrl.facade.disableEdit\"\r" +
	    "\n" +
	    "              ng-hide=\"ctrl.isVisible && !ctrl.inline\"\r" +
	    "\n" +
	    "              ng-class=\"{'inline-edit-area': ctrl.hasValue}\">\r" +
	    "\n" +
	    "            <ng-transclude></ng-transclude>\r" +
	    "\n" +
	    "            <span ng-hide=\"!ctrl.hasValue\" class=\"edit-action\"><i class=\"fa fa-pencil\"></i></span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <div class=\"list-group inline-edit-area-container edit-active\" ng-if=\"!ctrl.facade.disableEdit\" ng-show=\"ctrl.isVisible\" ng-class=\"{ 'inline-edit-inline-editor' : ctrl.inline }\">\r" +
	    "\n" +
	    "            <form name=\"ctrl.inlineEditForm\" ng-submit=\"ctrl.submit(ctrl.inlineEditForm)\" novalidate>\r" +
	    "\n" +
	    "                <div class=\"panel panel-inline-editing ws-sales-opportunity-trade-year-make-model-vin-inline-edit\" name=\"inlineEditPanel\">\r" +
	    "\n" +
	    "                    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "                        <h3 class=\"panel-title\">{{ctrl.facade.title}}</h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-body\">\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12 form-group\">\r" +
	    "\n" +
	    "                                <div ng-hide=\"ctrl.facade.model.isFreeText\">\r" +
	    "\n" +
	    "                                    <div class=\"input-group\">\r" +
	    "\n" +
	    "                                        <input type=\"text\"\r" +
	    "\n" +
	    "                                               class=\"form-control\"\r" +
	    "\n" +
	    "                                               ng-class=\"{'ng-invalid': ctrl.vinError}\"\r" +
	    "\n" +
	    "                                               ng-change=\"ctrl.clearVinError()\"\r" +
	    "\n" +
	    "                                               name=\"vin\"\r" +
	    "\n" +
	    "                                               maxlength=\"17\"\r" +
	    "\n" +
	    "                                               ng-attr-placeholder=\"{{::'crm.salesOpportunity.trades.ENTER_VIN' | translate}}\"\r" +
	    "\n" +
	    "                                               ng-model=\"ctrl.facade.model.vin\">\r" +
	    "\n" +
	    "                                        <div class=\"input-group-addon btn btn-primary\" ng-click=\"ctrl.doVinLookup()\" ng-disabled=\"!ctrl.facade.model.vin\">Go</div>\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                    <span class=\"invalid-message-static\" ng-show=\"ctrl.vinError\">{{::'crm.salesOpportunity.trades.INVALID_VIN_ERROR' | translate}}</span>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div ng-show=\"ctrl.facade.model.isFreeText\">\r" +
	    "\n" +
	    "                                    <input type=\"text\"\r" +
	    "\n" +
	    "                                           class=\"form-control\"\r" +
	    "\n" +
	    "                                           name=\"vin\"\r" +
	    "\n" +
	    "                                           maxlength=\"17\"\r" +
	    "\n" +
	    "                                           ng-attr-placeholder=\"{{::'crm.salesOpportunity.trades.ENTER_VIN' | translate}}\"\r" +
	    "\n" +
	    "                                           ng-model=\"ctrl.facade.model.vin\">\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12 form-group\">\r" +
	    "\n" +
	    "                                <select class=\"form-control\"\r" +
	    "\n" +
	    "                                        name=\"year\"\r" +
	    "\n" +
	    "                                        ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.validationResult.isYearValid}\"\r" +
	    "\n" +
	    "                                        ng-model=\"ctrl.facade.model.year\"\r" +
	    "\n" +
	    "                                        ng-options=\"ctrl.stringToNumber(year) as year for year in ctrl.facade.model.yearsLookup\"\r" +
	    "\n" +
	    "                                        ng-change=\"ctrl.onYearChanged()\">\r" +
	    "\n" +
	    "                                    <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                                </select>\r" +
	    "\n" +
	    "                                <span class=\"invalid-message-static\" ng-show=\"ctrl.isSubmitted && !ctrl.validationResult.isYearValid\">\r" +
	    "\n" +
	    "                                    {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12 form-group\">\r" +
	    "\n" +
	    "                                <div ng-hide=\"ctrl.facade.model.isFreeText\">\r" +
	    "\n" +
	    "                                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                                            ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.validationResult.isMakeValid}\"\r" +
	    "\n" +
	    "                                            name=\"make\"\r" +
	    "\n" +
	    "                                            ng-model=\"ctrl.facade.model.make\"\r" +
	    "\n" +
	    "                                            ng-options=\"make.text for make in ctrl.facade.model.makesLookup\"\r" +
	    "\n" +
	    "                                            ng-change=\"ctrl.onMakeChanged()\">\r" +
	    "\n" +
	    "                                        <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                                    </select>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div ng-show=\"ctrl.facade.model.isFreeText\">\r" +
	    "\n" +
	    "                                    <input type=\"text\"\r" +
	    "\n" +
	    "                                           name=\"make\"\r" +
	    "\n" +
	    "                                           class=\"form-control\"\r" +
	    "\n" +
	    "                                           ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.validationResult.isMakeValid}\"\r" +
	    "\n" +
	    "                                           ng-model=\"ctrl.facade.model.make.text\"\r" +
	    "\n" +
	    "                                           ng-change=\"ctrl.updateFreeTextField(ctrl.facade.model.make)\">\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <span class=\"invalid-message-static\" ng-show=\"ctrl.isSubmitted && !ctrl.validationResult.isMakeValid\">\r" +
	    "\n" +
	    "                                    {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12 form-group\">\r" +
	    "\n" +
	    "                                <div ng-hide=\"ctrl.facade.model.isFreeText\">\r" +
	    "\n" +
	    "                                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                                            ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.validationResult.isModelValid}\"\r" +
	    "\n" +
	    "                                            name=\"model\"\r" +
	    "\n" +
	    "                                            ng-model=\"ctrl.facade.model.model\"\r" +
	    "\n" +
	    "                                            ng-options=\"model.text for model in ctrl.facade.model.modelsLookup\"\r" +
	    "\n" +
	    "                                            ng-change=\"ctrl.onModelChanged()\">\r" +
	    "\n" +
	    "                                        <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                                    </select>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <div ng-show=\"ctrl.facade.model.isFreeText\">\r" +
	    "\n" +
	    "                                    <input type=\"text\"\r" +
	    "\n" +
	    "                                           name=\"model\"\r" +
	    "\n" +
	    "                                           class=\"form-control\"\r" +
	    "\n" +
	    "                                           ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.validationResult.isModelValid}\"\r" +
	    "\n" +
	    "                                           ng-model=\"ctrl.facade.model.model.text\"\r" +
	    "\n" +
	    "                                           ng-change=\"ctrl.updateFreeTextField(ctrl.facade.model.model)\">\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                                <span class=\"invalid-message-static\" ng-show=\"ctrl.isSubmitted && !ctrl.validationResult.isModelValid\">\r" +
	    "\n" +
	    "                                    {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                                </span>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12 form-group\">\r" +
	    "\n" +
	    "                                <a ng-click=\"ctrl.toggleFreeText()\">{{ctrl.addVehicleText}}</a>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-footer\">\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                                <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                                    <button type=\"button\" class=\"btn btn-quaternary\" ng-click=\"ctrl.cancel()\" name=\"cancelEdit\">{{ ::'crm.actions.CANCEL' | translate}}</button>\r" +
	    "\n" +
	    "                                    <button type=\"button\" class=\"btn btn-save ng-binding\" name=\"saveEdit\" aria-disabled=\"false\" ng-disabled=\"ctrl.inlineEditForm.$invalid || ctrl.facade.disableEdit || ctrl.isWaitingForOnSave\" ng-click=\"ctrl.saveTrade(ctrl.inlineEditForm)\">\r" +
	    "\n" +
	    "                                        {{::'crm.actions.SAVE' | translate}}\r" +
	    "\n" +
	    "                                    </button>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </form>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <a ng-if=\"ctrl.facade.tooltip\" tooltip-placement=\"top\" uib-tooltip=\"{{ctrl.facade.tooltip}}\">\r" +
	    "\n" +
	    "            <i class=\"fa fa-exclamation-circle\"></i>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</span>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/inlineEditing/mainComponent/inlineEditTemplate.html',
	    "<span>\r" +
	    "\n" +
	    "\t<span ng-class=\"{ 'inline-edit-display-inline' : ctrl.inline }\">\r" +
	    "\n" +
	    "        <span ng-transclude=\"\" ng-if=\"ctrl.facade.disableEdit\"></span>\r" +
	    "\n" +
	    "    \t<span class=\"view-mode\"\r" +
	    "\n" +
	    "              ng-click=\"ctrl.openInlineEdit()\"\r" +
	    "\n" +
	    "              ng-if=\"!ctrl.facade.disableEdit\"\r" +
	    "\n" +
	    "              ng-class=\"{'inline-edit-area': ctrl.hasValue}\">\r" +
	    "\n" +
	    "            <ng-transclude></ng-transclude>\r" +
	    "\n" +
	    "            <span ng-hide=\"!ctrl.hasValue\" class=\"edit-action\"><i class=\"fa fa-pencil\"></i></span>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <div class=\"list-group inline-edit-area-container edit-active\" ng-if=\"!ctrl.facade.disableEdit && ctrl.isVisible\" ng-class=\"{ 'inline-edit-inline-editor' : ctrl.inline }\">\r" +
	    "\n" +
	    "            <form name=\"ctrl.inlineEditForm\" ng-submit=\"ctrl.submit(ctrl.inlineEditForm)\" novalidate>\r" +
	    "\n" +
	    "                <div class=\"panel panel-inline-editing\" name=\"inlineEditPanel\">\r" +
	    "\n" +
	    "                    <div class= \"panel-overlay\" ng-show=\"ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                        <md-progress-circular class=\"ws-progress-circular ws-progress-centered ws-progress-centered-vertical\"\r" +
	    "\n" +
	    "                                              md-diameter=\"25\" md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "                        <h3 class=\"panel-title\" name=\"panelTitle\">{{ctrl.facade.title}}</h3>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-body\">\r" +
	    "\n" +
	    "                        <div ng-repeat=\"field in ctrl.facade.fields\" class=\"form-group\" name=\"{{field.htmlAttributeName}}\">\r" +
	    "\n" +
	    "                            <label class=\"control-label single-letter-label\" ng-if=\"field.label\">{{ field.label }}: </label>\r" +
	    "\n" +
	    "                            <input type=\"text\" class=\"form-control\" ng-if=\"field.type==='text'\" placeholder=\"{{field.placeholder}}\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.facade.model[field.fieldName]\" ng-pattern=\"field.validation.pattern\" name=\"inlineEditField\">\r" +
	    "\n" +
	    "                            <input type=\"number\" class=\"form-control\" ng-if=\"field.type==='number'\" placeholder=\"{{field.placeholder}}\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.facade.model[field.fieldName]\" >\r" +
	    "\n" +
	    "                            <select class=\"form-control\" ng-if=\"field.type==='select' && ctrl.isSelectStrings(field)\"\r" +
	    "\n" +
	    "                                    ng-model=\"ctrl.facade.model[field.fieldName]\"\r" +
	    "\n" +
	    "                                    ng-options=\"fieldValue for fieldValue in field.fieldValues\"></select>\r" +
	    "\n" +
	    "                            <select class=\"form-control\" ng-if=\"field.type==='select' && !ctrl.isSelectStrings(field)\"\r" +
	    "\n" +
	    "                                    ng-model=\"ctrl.facade.model[field.fieldName]\"\r" +
	    "\n" +
	    "                                    name=\"optionSelector\"\r" +
	    "\n" +
	    "                                    ng-options=\"fieldValue.text for fieldValue in field.fieldValues\"></select>\r" +
	    "\n" +
	    "                            <crm-inline-edit-international-phone model=\"ctrl.facade.model[field.fieldName]\"\r" +
	    "\n" +
	    "                                                                 ng-if=\"field.type==='phone'\"></crm-inline-edit-international-phone>\r" +
	    "\n" +
	    "                            <textarea type=\"text\" class=\"form-control\" ng-model=\"ctrl.facade.model[field.fieldName]\" placeholder=\"{{field.placeholder}}\"\r" +
	    "\n" +
	    "                                      ng-if=\"field.type==='textarea'\" ng-maxlength=\"ctrl.maxlength\"></textarea>\r" +
	    "\n" +
	    "                            <div class=\"radio-inline\" ng-if=\"field.type==='radio'\" ng-repeat=\"fieldValue in field.fieldValues\">\r" +
	    "\n" +
	    "                                <input id=\"radio-inline-id-{{ctrl.facade.model.id}}-{{$index}}\" type=\"radio\" ng-model=\"ctrl.facade.model[field.fieldName]\" ng-value=\"fieldValue.value\">\r" +
	    "\n" +
	    "                                <label for=\"radio-inline-id-{{ctrl.facade.model.id}}-{{$index}}\">\r" +
	    "\n" +
	    "                                    <span class=\"fake-radio\" name=\"fakeRadio\"></span>{{fieldValue.key}}\r" +
	    "\n" +
	    "                                </label>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                            <div ng-if=\"ctrl.isFormFieldValid(ctrl.inlineEditForm, field)\">\r" +
	    "\n" +
	    "                                ERROR\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                            <div ng-show=\"ctrl.inlineEditForm.$error.maxlength[0].$invalid\" class=\"ws-text-bad\">{{::'crm.errors.MAX_LENGTH' | translate}} {{ctrl.maxlength}}!</div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"panel-footer\">\r" +
	    "\n" +
	    "                        <div class=\"row\">\r" +
	    "\n" +
	    "                            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                                <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                                    <button type=\"button\" class=\"btn btn-quaternary\" ng-click=\"ctrl.cancel()\" name=\"cancelEdit\">{{ ::'crm.actions.CANCEL' | translate}}</button>\r" +
	    "\n" +
	    "                                    <button type=\"submit\" class=\"btn btn-save ng-binding\" name=\"saveEdit\" aria-disabled=\"false\" ng-disabled=\"ctrl.inlineEditForm.$error.maxlength[0].$invalid || ctrl.inlineEditForm.$invalid || ctrl.facade.disableEdit || ctrl.isWaitingForOnSave\">\r" +
	    "\n" +
	    "                                        {{::'crm.actions.SAVE' | translate}}\r" +
	    "\n" +
	    "                                    </button>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </form>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <a ng-if=\"ctrl.facade.tooltip\" tooltip-placement=\"top\" uib-tooltip=\"{{ctrl.facade.tooltip}}\">\r" +
	    "\n" +
	    "            <i class=\"fa fa-exclamation-circle\"></i>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</span>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/inputDate/dateInputTemplate.html',
	    "<div ng-cloak>\r" +
	    "\n" +
	    "    <div class=\"row ws-row-sm-gutter\" ng-class=\"ctrl.isUSDateFormat ? 'en-US' : ''\">\r" +
	    "\n" +
	    "        <div class=\"col-md-3\" ng-if=\"!ctrl.isUSDateFormat\"> <!-- day input for DD/MM/YYYY -->\r" +
	    "\n" +
	    "            <input type=\"number\"\r" +
	    "\n" +
	    "                   class=\"form-control day-input\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.day\"\r" +
	    "\n" +
	    "                   ng-change=\"ctrl.dayChanged()\"\r" +
	    "\n" +
	    "                   placeholder=\"{{ ::'crm.dateInput.DAY_PLACEHOLDER' | translate}}\"\r" +
	    "\n" +
	    "                   name=\"day\"\r" +
	    "\n" +
	    "                   ng-disabled=\"ctrl.disabled\"/>\r" +
	    "\n" +
	    "            <span class=\"form-invalid-message\">{{ ::'crm.dateInput.DAY_ERROR_MESSAGE' | translate}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-md-6\">\r" +
	    "\n" +
	    "            <select class=\"form-control month-input\"\r" +
	    "\n" +
	    "                    ng-model=\"ctrl.month\"\r" +
	    "\n" +
	    "                    ng-options=\"month as month.name for month in ctrl.months\"\r" +
	    "\n" +
	    "                    ng-change=\"ctrl.monthChanged()\"\r" +
	    "\n" +
	    "                    name=\"month\"\r" +
	    "\n" +
	    "                    ng-disabled=\"ctrl.disabled\">\r" +
	    "\n" +
	    "                <option selected value=\"\">{{ ::'crm.dateInput.MONTH_PLACEHOLDER' | translate}}</option>\r" +
	    "\n" +
	    "            </select>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-md-3\">\r" +
	    "\n" +
	    "            <div ng-if=\"ctrl.isUSDateFormat\"> <!-- day input for MM/DD/YYYY -->\r" +
	    "\n" +
	    "                <input type=\"number\"\r" +
	    "\n" +
	    "                       class=\"form-control day-input\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.day\"\r" +
	    "\n" +
	    "                       ng-change=\"ctrl.dayChanged()\"\r" +
	    "\n" +
	    "                       placeholder=\"{{ ::'crm.dateInput.DAY_PLACEHOLDER' | translate}}\"\r" +
	    "\n" +
	    "                       name=\"day\"\r" +
	    "\n" +
	    "                       ng-disabled=\"ctrl.disabled\"/>\r" +
	    "\n" +
	    "                <span class=\"form-invalid-message\">{{ ::'crm.dateInput.DAY_ERROR_MESSAGE' | translate}}</span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-md-3\">\r" +
	    "\n" +
	    "            <input type=\"number\"\r" +
	    "\n" +
	    "                   ng-maxlength=\"4\"\r" +
	    "\n" +
	    "                   class=\"form-control year-input\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.year\"\r" +
	    "\n" +
	    "                   ng-change=\"ctrl.monthChanged()\"\r" +
	    "\n" +
	    "                   ng-blur=\"ctrl.yearChanged()\"\r" +
	    "\n" +
	    "                   placeholder=\"{{ ::'crm.dateInput.YEAR_PLACEHOLDER' | translate}}\"\r" +
	    "\n" +
	    "                   name=\"year\"\r" +
	    "\n" +
	    "                   ng-disabled=\"ctrl.disabled\"/>\r" +
	    "\n" +
	    "            <span class=\"form-invalid-message\">{{ ::'crm.dateInput.YEAR_ERROR_MESSAGE' | translate}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/intlPhone/intlPhoneTemplate.html',
	    "<div>\r" +
	    "\n" +
	    "    <input type=\"tel\"\r" +
	    "\n" +
	    "           name=\"phoneNumber\"\r" +
	    "\n" +
	    "           id=\"{{id}}\"\r" +
	    "\n" +
	    "           class=\"form-control\"\r" +
	    "\n" +
	    "           ng-if=\"!isValid\"\r" +
	    "\n" +
	    "           ng-model=\"contact['contactPoints'][model]['value']\"\r" +
	    "\n" +
	    "           ng-class=\"form.$submitted && !contact.contactPoints.isValid() && !contact.address.isValid() ? 'ng-invalid' : 'ng-valid'\"\r" +
	    "\n" +
	    "           name=\"pointOfContactEmailError\" maxlength=\"100\">\r" +
	    "\n" +
	    "    <input type=\"tel\"\r" +
	    "\n" +
	    "           name=\"phoneNumber\"\r" +
	    "\n" +
	    "           id=\"{{id}}\"\r" +
	    "\n" +
	    "           class=\"form-control\"\r" +
	    "\n" +
	    "           ng-if=\"isValid\"\r" +
	    "\n" +
	    "           ng-model=\"contact['contactPoints'][model]['value']\"\r" +
	    "\n" +
	    "           ng-class=\"isValid() ? 'ng-valid' : 'ng-invalid'\"\r" +
	    "\n" +
	    "           name=\"pointOfContactEmailError\" maxlength=\"100\">\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/ui/masterDetailExpander/masterDetailExpanderTemplate.html',
	    "<section class=\"ws-master-detail-expander ws-flex-container\"\r" +
	    "\n" +
	    "         ng-class=\"{'ws-collapsed': ctrl.collapsed, 'ws-expanded': ctrl.expanded, 'ws-single-expand': !ctrl.tristate}\">\r" +
	    "\n" +
	    "    <section class=\"ws-master-list\">\r" +
	    "\n" +
	    "        <section class=\"ws-master-list-controls\">\r" +
	    "\n" +
	    "            <header class=\"ws-master-list-header\">\r" +
	    "\n" +
	    "                <uib-tabset class=\"ws-master-list-buttons\" active=\"ctrl.getHeaderButtons().activeIndex\"\r" +
	    "\n" +
	    "                            ng-if=\"ctrl.headerButtons && !ctrl.expanded && !ctrl.collapsed\">\r" +
	    "\n" +
	    "                    <uib-tab ng-repeat=\"button in ctrl.headerButtons\" ng-click=\"button.onClick()\">\r" +
	    "\n" +
	    "                        <uib-tab-heading>\r" +
	    "\n" +
	    "                            <div name=\"tabTitle\">{{ button.text }}</div>\r" +
	    "\n" +
	    "                        </uib-tab-heading>\r" +
	    "\n" +
	    "                    </uib-tab>\r" +
	    "\n" +
	    "                </uib-tabset>\r" +
	    "\n" +
	    "                <h3 class=\"ws-master-list-title\" ng-if=\"ctrl.headerTitle\">{{ ctrl.headerTitle }}</h3>\r" +
	    "\n" +
	    "                <button class=\"ws-collapse-btn\" ng-click=\"ctrl.collapse()\" name=\"collapseButton\">\r" +
	    "\n" +
	    "                    <i class=\"fa fa-angle-left fa-2x\"></i>\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "                <button class=\"ws-expand-btn\" ng-click=\"ctrl.expand()\" name=\"expandButton\">\r" +
	    "\n" +
	    "                    <i class=\"fa fa-angle-right fa-2x\"></i>\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </header>\r" +
	    "\n" +
	    "            <div class=\"ws-master-list-actions\" transclude-id=\"master-actions\"></div>\r" +
	    "\n" +
	    "        </section>\r" +
	    "\n" +
	    "        <div class=\"ws-master-list-container\" transclude-id=\"master\"></div>\r" +
	    "\n" +
	    "    </section>\r" +
	    "\n" +
	    "    <section class=\"app-content-body ws-master-detail\" transclude-id=\"detail\"></section>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/ui/modal/modalTemplate.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "<div class=\"panel panel-primary panel-modal\" name=\"modalPanel\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading ws-panel-heading-no-separator\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "            <h3 id=\"modalTitle\" class=\"panel-title ws-flex-fill-even\" name=\"modalTemplateTitle\">{{ ::ctrl.title | translate}}</h3>\r" +
	    "\n" +
	    "            <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.cancel($event)\" name=\"closeModal\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-body\">\r" +
	    "\n" +
	    "        <div class=\"modal-prompt\" ng-bind-html=\"ctrl.prompt\" name=\"modalPrompt\"></div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-footer\">\r" +
	    "\n" +
	    "        <div class=\"row\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                    <button class=\"btn btn-quaternary\" name=\"confirm\" ng-click=\"ctrl.accept()\" ng-if=\"::ctrl.acceptText\">{{ ::ctrl.acceptText | translate}}</button>\r" +
	    "\n" +
	    "                    <button class=\"btn btn-primary\" name=\"change-mind\" ng-click=\"ctrl.cancel($event)\" ng-if=\"::ctrl.cancelText\">{{ ::ctrl.cancelText | translate}}</button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/ui/modal/selectModalTemplate.html',
	    "<div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "<div class=\"panel panel-primary panel-modal\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "        <h3 class=\"panel-title\">{{ ::ctrl.title | translate}}</h3>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-body\">\r" +
	    "\n" +
	    "        <div class=\"col-xs-6\">\r" +
	    "\n" +
	    "            <div class=\"form-group\">\r" +
	    "\n" +
	    "                <label>{{::ctrl.selectLabel | translate}}</label>\r" +
	    "\n" +
	    "                <select class=\"form-control\" name=\"choose-category\" ng-change=\"ctrl.primarySelectChangeHandler()\"\r" +
	    "\n" +
	    "                        ng-model=\"ctrl.primarySelect\">\r" +
	    "\n" +
	    "                    <option value=\"\">{{::'crm.salesOpportunity.status.modal.SELECT_EMPTY' | translate}}</option>\r" +
	    "\n" +
	    "                    <option ng-repeat=\"selection in ctrl.selections\">{{selection.itemValueId}}</option>\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-xs-6\">\r" +
	    "\n" +
	    "            <div class=\"form-group\">\r" +
	    "\n" +
	    "                <label>{{::ctrl.optionalSelectLabel | translate}}</label>\r" +
	    "\n" +
	    "                <select class=\"form-control\" name=\"choose-campaign\" ng-model=\"ctrl.optionalSelect\" ng-disabled=\"!ctrl.primarySelect\">\r" +
	    "\n" +
	    "                    <option value=\"\">{{::'crm.salesOpportunity.status.modal.SELECT_EMPTY' | translate}}</option>\r" +
	    "\n" +
	    "                    <option ng-repeat=\"selection in ctrl.optionalSelectOptions\">{{selection.itemValueId}}</option>\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-footer\">\r" +
	    "\n" +
	    "        <div class=\"row\">\r" +
	    "\n" +
	    "            <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                    <button class=\"btn btn-quaternary\" ng-click=\"ctrl.cancel()\">{{ ::ctrl.cancelText | translate}}</button>\r" +
	    "\n" +
	    "                    <button class=\"btn btn-primary\" name=\"enroll-customer\" ng-click=\"ctrl.accept()\" ng-disabled=\"!ctrl.primarySelect || !ctrl.optionalSelect\">{{ ::ctrl.acceptText | translate}}</button>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/modal/selectSaveModalTemplate.html',
	    "<co-loading-container loading-key=\"{{::ctrl.loadingKey}}\">\r" +
	    "\n" +
	    "    <div class=\"modal-content ws-modal-contrast\">\r" +
	    "\n" +
	    "        <div class=\"panel panel-primary panel-modal\" name=\"modalPanel\">\r" +
	    "\n" +
	    "            <div class=\"panel-heading\">\r" +
	    "\n" +
	    "                <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "                    <h3 class=\"panel-title ws-flex-fill-even\" name=\"modalTitle\">{{ ::ctrl.title | translate}}</h3>\r" +
	    "\n" +
	    "                    <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.cancel()\" name=\"modalClose\"></i>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"panel-body\">\r" +
	    "\n" +
	    "                <div class=\"col-xs-6\">\r" +
	    "\n" +
	    "                    <div class=\"form-group\">\r" +
	    "\n" +
	    "                        <label name=\"primaryReasonLabel\">{{::ctrl.selectLabel | translate}}</label>\r" +
	    "\n" +
	    "                        <select class=\"form-control\" name=\"choose-category\"\r" +
	    "\n" +
	    "                                ng-change=\"ctrl.primarySelectChangeHandler()\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.primarySelect\"\r" +
	    "\n" +
	    "                                ng-options=\"selection.itemValueId as selection.itemValueId for selection in ctrl.selections track by selection.itemValueId\">\r" +
	    "\n" +
	    "                            <option value=\"\" disabled selected hidden>\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.status.modal.SELECT_EMPTY' | translate}}\r" +
	    "\n" +
	    "                            </option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-xs-6\">\r" +
	    "\n" +
	    "                    <div class=\"form-group\">\r" +
	    "\n" +
	    "                        <label name=\"additionalDetailsLabel\">{{::ctrl.optionalSelectLabel | translate}}</label>\r" +
	    "\n" +
	    "                        <select class=\"form-control\" name=\"choose-campaign\" ng-model=\"ctrl.optionalSelect\"\r" +
	    "\n" +
	    "                                ng-disabled=\"!ctrl.primarySelect\"\r" +
	    "\n" +
	    "                                ng-options=\"selection.itemValueId as selection.itemValueId for selection in ctrl.optionalSelectOptions track by selection.itemValueId\">\r" +
	    "\n" +
	    "                            <option value=\"\" disabled selected hidden>\r" +
	    "\n" +
	    "                                {{::'crm.salesOpportunity.status.modal.SELECT_EMPTY' | translate}}\r" +
	    "\n" +
	    "                            </option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"panel-footer\">\r" +
	    "\n" +
	    "                <div class=\"row\">\r" +
	    "\n" +
	    "                    <div class=\"col-xs-12\">\r" +
	    "\n" +
	    "                        <div class=\"panel-footer-options pull-right\">\r" +
	    "\n" +
	    "                            <button class=\"btn btn-success\" name=\"enroll-customer\" ng-click=\"ctrl.accept()\"\r" +
	    "\n" +
	    "                                    ng-disabled=\"!ctrl.primarySelect || (ctrl.optionalSelectOptions != null && !ctrl.optionalSelect)\">\r" +
	    "\n" +
	    "                                {{ ::ctrl.saveText | translate}}\r" +
	    "\n" +
	    "                            </button>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-loading-container>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/phoneNumberView/phoneNumberViewTemplate.html',
	    "<span ng-if=\"!ctrl.doNotCallCheck()\">\r" +
	    "\n" +
	    "    <strong>{{ctrl.label}}: </strong>{{ctrl.phoneNumber.value | crmPhone:ctrl.type}}\r" +
	    "\n" +
	    "</span>\r" +
	    "\n" +
	    "<span ng-if=\"ctrl.doNotCallCheck()\">\r" +
	    "\n" +
	    "    <strong>{{ctrl.label}}: </strong>{{ ::\"crm.contact.contact_points.DO_NOT_CALL\"| translate }}\r" +
	    "\n" +
	    "</span>"
	  );


	  $templateCache.put('app/ui/pingCollectionModal/pingCollectionModalTemplate.html',
	    "<div class=\"panel panel-primary panel-modal ng-scope ws-revenue-radar-pings\" ng-if=\"ctrl.isPingLoaded\">\r" +
	    "\n" +
	    "    <div class=\"panel-heading\">\r" +
	    "\n" +
	    "        <div class=\"ws-flex-container\">\r" +
	    "\n" +
	    "            <h3 class=\"panel-title ws-flex-fill-even\" name=\"pingsCount\"><i class=\"icon-radar\"></i>{{ ::'crm.pings.REVENUE_RADAR_PINGS' | translate }} ({{ ::ctrl.pingAmount }})</h3>\r" +
	    "\n" +
	    "            <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.onClose()\"></i>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"panel-body\">\r" +
	    "\n" +
	    "        <div class=\"modal-prompt\">\r" +
	    "\n" +
	    "            <uib-tabset class=\"thin-tabset\">\r" +
	    "\n" +
	    "                <uib-tab>\r" +
	    "\n" +
	    "                    <uib-tab-heading>\r" +
	    "\n" +
	    "                        <div name=\"pingSummary\">{{ ::'crm.pings.PING_SUMMARY' | translate }}</div>\r" +
	    "\n" +
	    "                    </uib-tab-heading>\r" +
	    "\n" +
	    "                    <div class=\"panel ws-ping-summary\">\r" +
	    "\n" +
	    "                        <div class=\"panel-body\">\r" +
	    "\n" +
	    "                            <h6>{{ ::ctrl.fullName }} {{ ::'crm.pings.QUALIFIES_FOR_PINGS' | translate }}:</h6>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                            <div ng-repeat=\"pingVehicle in ::ctrl.pingCollection.pingVehicles\">\r" +
	    "\n" +
	    "                                <h6 name=\"vehicleName\" class=\"ws-greyback-header\">{{ ::pingVehicle.vehicleTitle }}</h6>\r" +
	    "\n" +
	    "                                <div class=\"ws-panel-plain\" ng-repeat=\"customerPing in ::pingVehicle.customerPings\">\r" +
	    "\n" +
	    "                                    <div class=\"ws-panel-content\">\r" +
	    "\n" +
	    "                                        <h6>{{ ::customerPing.title }}</h6>\r" +
	    "\n" +
	    "                                        <p>{{ ::customerPing.text }}</p>\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                    <button name=\"viewDetailsButton\" type=\"button\" class=\"btn btn-primary\" ng-click=\"ctrl.openDetails(customerPing, $event)\"\r" +
	    "\n" +
	    "                                            ng-if=\"ctrl.revRadarPermission.view && ctrl.revRadarPermission.add && ctrl.revRadarPermission.edit && ctrl.revRadarPermission.delete\">\r" +
	    "\n" +
	    "                                        {{ ::'crm.pings.VIEW_DETAILS' | translate }}\r" +
	    "\n" +
	    "                                    </button>\r" +
	    "\n" +
	    "                                    <div class=\"clearfix\"></div>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                            <div class=\"ws-space-05\"></div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </uib-tab>\r" +
	    "\n" +
	    "                <uib-tab ng-if=\"ctrl.revRadarPermission.view && ctrl.revRadarPermission.add && ctrl.revRadarPermission.edit && ctrl.revRadarPermission.delete\">\r" +
	    "\n" +
	    "                    <uib-tab-heading>\r" +
	    "\n" +
	    "                        <div name=\"pingPreferences\">{{ ::'crm.pings.PING_PREFERENCES' | translate }}</div>\r" +
	    "\n" +
	    "                    </uib-tab-heading>\r" +
	    "\n" +
	    "                    <div class=\"panel ws-ping-preferences\">\r" +
	    "\n" +
	    "                        <div class=\"panel-body\">\r" +
	    "\n" +
	    "                            <button type=\"button\" class=\"btn btn-save\" ng-click=\"ctrl.savePreferences()\">{{ ::'crm.pings.SAVE' | translate }}</button>\r" +
	    "\n" +
	    "                            <h6>{{ ::'crm.pings.WHICH_PING_TYPES_DOES' | translate }} {{ ::ctrl.fullName }} {{ ::'crm.pings.WANT_TO_RECEIVE' | translate }}?</h6>\r" +
	    "\n" +
	    "                            <ul class=\"list-inline list-unstyled\">\r" +
	    "\n" +
	    "                                <li>\r" +
	    "\n" +
	    "                                    <crm-multi-select options=\"ctrl.pingCollection.pingPreferenceOptions\"\r" +
	    "\n" +
	    "                                                      ng-model=\"ctrl.pingCollection.selectedPingPreferences\"></crm-multi-select>\r" +
	    "\n" +
	    "                                </li>\r" +
	    "\n" +
	    "                                <li><button name=\"enableAllPings\" type=\"button\" class=\"btn btn-primary\" ng-click=\"ctrl.enableAllPings()\">{{ ::'crm.pings.ENABLE_ALL_PINGS' | translate }}</button></li>\r" +
	    "\n" +
	    "                                <li><button name=\"disableAllPings\" type=\"button\" class=\"btn btn-primary\" ng-click=\"ctrl.disableAllPings()\">{{ ::'crm.pings.DISABLE_ALL_PINGS' | translate }}</button></li>\r" +
	    "\n" +
	    "                            </ul>\r" +
	    "\n" +
	    "                            <md-progress-circular\r" +
	    "\n" +
	    "                                    class=\"ws-progress-circular ws-progress-centered\"\r" +
	    "\n" +
	    "                                    md-diameter=\"25\" md-mode=\"indeterminate\" ng-show=\"!ctrl.isVehicleLoaded\"></md-progress-circular>\r" +
	    "\n" +
	    "                            <div class=\"ws-panel-plain\" ng-repeat=\"vehicle in ctrl.vehicles\" ng-if=\"ctrl.isVehicleLoaded\">\r" +
	    "\n" +
	    "                                <div class=\"container-fluid\">\r" +
	    "\n" +
	    "                                    <div class=\"row\">\r" +
	    "\n" +
	    "                                        <div class=\"col-xs-8 ws-vehicle-info\" ng-class=\"{ 'ws-status-good': vehicle.isCustomerOwned, 'ws-status-bad': !vehicle.isCustomerOwned  }\">\r" +
	    "\n" +
	    "                                            <h6>{{ ::vehicle.year }} {{ ::vehicle.make }} {{ ::vehicle.model }}</h6>\r" +
	    "\n" +
	    "                                            <p class=\"ws-status\" ng-show=\"vehicle.isCustomerOwned\">{{ ::'crm.pings.OWNED' | translate }}</p>\r" +
	    "\n" +
	    "                                            <p class=\"ws-status\" ng-show=\"!vehicle.isCustomerOwned\">{{ ::'crm.pings.NOT_OWNED' | translate }}</p>\r" +
	    "\n" +
	    "                                            <p>{{ ::vehicle.odometer }} {{ ::'crm.pings.MI' | translate }} / {{ ::vehicle.vin }}</p>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                        <div class=\"col-xs-4 text-right ws-vehicle-stats\">\r" +
	    "\n" +
	    "                                            <p ng-show=\"vehicle.lastServiced\">{{ ::'crm.pings.LAST_SERVICED' | translate }} {{ ::vehicle.lastServiced }}</p>\r" +
	    "\n" +
	    "                                            <p ng-show=\"!vehicle.lastServiced\">{{ ::'crm.pings.NEVER_SERVICED' | translate }}</p>\r" +
	    "\n" +
	    "                                            <p ng-show=\"::vehicle.purchasedDate\">{{ ::'crm.pings.PURCHASED' | translate }} {{ ::vehicle.purchasedDate }}</p>\r" +
	    "\n" +
	    "                                            <p class=\"ws-delivered\">Delivered</p>\r" +
	    "\n" +
	    "                                        </div>\r" +
	    "\n" +
	    "                                    </div>\r" +
	    "\n" +
	    "                                </div>\r" +
	    "\n" +
	    "                            </div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </uib-tab>\r" +
	    "\n" +
	    "            </uib-tabset>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/ui/radioButton/template.html',
	    "<div ng-class=\"ctrl.inline ? 'radio-inline' : 'radio'\">\r" +
	    "\n" +
	    "    <input id=\"{{::ctrl.id}}\" type=\"radio\" name=\"{{::ctrl.group}}\">\r" +
	    "\n" +
	    "    <label for=\"{{::ctrl.id}}\" name=\"{{::ctrl.id}}\">\r" +
	    "\n" +
	    "        <span class=\"fake-radio\"></span>{{::ctrl.label | translate}}\r" +
	    "\n" +
	    "    </label>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/ui/runningMan/runningManTemplate.html',
	    "<div class=\"ws-progress-box\">\r" +
	    "\n" +
	    "    <div class=\"progress\">\r" +
	    "\n" +
	    "        <div class=\"progress-bar\"\r" +
	    "\n" +
	    "             role=\"progressbar\"\r" +
	    "\n" +
	    "             aria-valuenow=\"{{ctrl.percentage}}\"\r" +
	    "\n" +
	    "             aria-valuemin=\"0\"\r" +
	    "\n" +
	    "             aria-valuemax=\"100\"\r" +
	    "\n" +
	    "             ng-class=\"{'ws-complete': ctrl.isComplete()}\"\r" +
	    "\n" +
	    "             ng-style=\"ctrl.style\">\r" +
	    "\n" +
	    "            <img src=\"http://i.imgur.com/WQFL64t.png\" ng-if=\"ctrl.isInProgress()\" name=\"runningMan\"/>\r" +
	    "\n" +
	    "            <span class=\"sr-only\">{{ctrl.percentage}}{{::'common.progressBar.PERCENT_COMPLETE' | translate}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <i class=\"fa fa-car media-left\"></i>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/socialMediaContact/socialMediaTemplate.html',
	    "<div class=\"contact-icons\">\r" +
	    "\n" +
	    "    <button ng-show=\"ctrl.contact.isOrganization()\" ng-click=\"ctrl.openWebsite(ctrl.contact.websiteUrl)\"\r" +
	    "\n" +
	    "            ng-disabled=\"!ctrl.contact.websiteUrl\" class=\"btn btn-url btn-md btn-icon\">\r" +
	    "\n" +
	    "        <i class=\"fa fa-link\"></i>\r" +
	    "\n" +
	    "    </button>\r" +
	    "\n" +
	    "    <button ng-click=\"ctrl.openFacebook(ctrl.contact.contactPoints.facebookHandle.value)\"\r" +
	    "\n" +
	    "            ng-disabled=\"!ctrl.contact.contactPoints.facebookHandle.value\"\r" +
	    "\n" +
	    "            class=\"btn btn-facebook btn-md btn-icon\">\r" +
	    "\n" +
	    "        <i class=\"fa fa-facebook\" name=\"facebook-icon\"></i>\r" +
	    "\n" +
	    "    </button>\r" +
	    "\n" +
	    "    <button ng-click=\"ctrl.openTwitter(ctrl.contact.contactPoints.twitterHandle.value)\"\r" +
	    "\n" +
	    "            ng-disabled=\"!ctrl.contact.contactPoints.twitterHandle.value\"\r" +
	    "\n" +
	    "            class=\"btn btn-twitter btn-md btn-icon\">\r" +
	    "\n" +
	    "        <i class=\"fa fa-twitter\" name=\"twitter-icon\"></i>\r" +
	    "\n" +
	    "    </button>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/ui/ssnInput/ssnInputTemplate.html',
	    "<div ng-cloak>\r" +
	    "\n" +
	    "    <div class=\"hidden-sm hidden-xs\">\r" +
	    "\n" +
	    "        <input type=\"text\" class=\"form-control\" ng-model=\"model.value\" ui-mask=\"999-99-9999\" co-is-valid=\"validation\" ui-options=\"{clearOnBlur: false}\" name=\"socialSecurityNumberField\">\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );


	  $templateCache.put('app/ui/twoButton/template.html',
	    "<button ng-if=\"ctrl.primaryButtonText\" class=\"btn btn-primary\" ng-click=\"ctrl.primaryButtonCallback()\" name=\"primaryActivityAction\">\r" +
	    "\n" +
	    "    {{ctrl.primaryButtonText}}\r" +
	    "\n" +
	    "</button>\r" +
	    "\n" +
	    "<button ng-if=\"ctrl.secondaryButtonText\" class=\"btn btn-default\" ng-click=\"ctrl.secondaryButtonCallback()\" name=\"secondaryActivityAction\">\r" +
	    "\n" +
	    "    {{ctrl.secondaryButtonText}}\r" +
	    "\n" +
	    "</button>"
	  );


	  $templateCache.put('app/ui/verticalExpander/template.html',
	    "<section class=\"ws-vertical-expander\"\r" +
	    "\n" +
	    "         ng-class=\"{'ws-expanded': ctrl.coExpanded}\">\r" +
	    "\n" +
	    "    <div ng-transclude></div>\r" +
	    "\n" +
	    "    <button class=\"ws-expander-button\"\r" +
	    "\n" +
	    "            ng-if=\"ctrl.coCanExpand\"\r" +
	    "\n" +
	    "            ng-click=\"ctrl.toggleExpand()\"\r" +
	    "\n" +
	    "            ng-class=\"{'ws-compact': ctrl.coCompact, 'ws-expanded': ctrl.coExpanded}\">\r" +
	    "\n" +
	    "        <span class=\"ws-expander-button-content\">{{ctrl.buttonText}}</span>\r" +
	    "\n" +
	    "    </button>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/utils/fileUpload/fileUploadTemplate.html',
	    "<div ng-transclude></div>\r" +
	    "\n" +
	    "<input type=\"file\"\r" +
	    "\n" +
	    "       accept=\"{{acceptedFileTypes}}\"\r" +
	    "\n" +
	    "       style=\"display:none\" >"
	  );


	  $templateCache.put('app/vehicle/chrome/chromeVehicleSelectorTemplate.html',
	    "<div class=\"ws-sales-opportunity-add-trade\" co-loading=\"ctrl.isLoading\" loading-show-children=\"true\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main ws-content-group\">\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-6 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.VIN' | translate}}</label>\r" +
	    "\n" +
	    "                    <div ng-if=\"!ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <div class=\"col-md-12 input-group\">\r" +
	    "\n" +
	    "                            <input type=\"text\"\r" +
	    "\n" +
	    "                                   class=\"form-control\"\r" +
	    "\n" +
	    "                                   ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.vehicle.vin}\"\r" +
	    "\n" +
	    "                                   ng-change=\"ctrl.clearVinError()\"\r" +
	    "\n" +
	    "                                   name=\"vin\"\r" +
	    "\n" +
	    "                                   maxlength=\"17\"\r" +
	    "\n" +
	    "                                   ng-attr-placeholder=\"{{::'crm.salesOpportunity.trades.ENTER_VIN' | translate}}\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.vehicle.vin\">\r" +
	    "\n" +
	    "                            <div class=\"input-group-addon btn btn-primary\" ng-click=\"ctrl.doVinLookup()\" ng-disabled=\"!ctrl.vehicle.vin\">Go</div>\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <span class=\"invalid-message-static\" ng-if=\"ctrl.isSubmitted && !ctrl.vehicle.vin\" name=\"vinRequiredFieldError\">\r" +
	    "\n" +
	    "                            {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-if=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <input type=\"text\"\r" +
	    "\n" +
	    "                               class=\"form-control\"\r" +
	    "\n" +
	    "                               name=\"vin\"\r" +
	    "\n" +
	    "                               ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.vehicle.vin}\"\r" +
	    "\n" +
	    "                               maxlength=\"17\"\r" +
	    "\n" +
	    "                               ng-attr-placeholder=\"{{::'crm.salesOpportunity.trades.ENTER_VIN' | translate}}\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.vehicle.vin\">\r" +
	    "\n" +
	    "                         <span class=\"invalid-message-static\" ng-if=\"ctrl.isSubmitted && !ctrl.vehicle.vin\" name=\"vinRequiredFieldError\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.ODOMETER' | translate}} ({{::'crm.vehicle.ODOMETER_UNIT' | translate}})</label>\r" +
	    "\n" +
	    "                    <input type=\"text\"\r" +
	    "\n" +
	    "                           class=\"form-control\"\r" +
	    "\n" +
	    "                           ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.vehicle.odometer}\"\r" +
	    "\n" +
	    "                           name=\"odometer\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.vehicle.odometer\"\r" +
	    "\n" +
	    "                           placeholder=\"0\">\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-if=\"ctrl.isSubmitted && !ctrl.vehicle.odometer\" name=\"odometerRequiredFieldError\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.UNIT_NUMBER' | translate}}</label>\r" +
	    "\n" +
	    "                    <input type=\"text\"\r" +
	    "\n" +
	    "                           class=\"form-control\"\r" +
	    "\n" +
	    "                           name=\"unitNumber\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.vehicle.stockNumber\"\r" +
	    "\n" +
	    "                           placeholder=\"0\"\r" +
	    "\n" +
	    "                           co-formatted-number-field decimal-places=\"0\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.YEAR' | translate}}</label>\r" +
	    "\n" +
	    "                    <select class=\"form-control\"\r" +
	    "\n" +
	    "                            name=\"year\"\r" +
	    "\n" +
	    "                            ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.vehicle.year}\"\r" +
	    "\n" +
	    "                            ng-model=\"ctrl.vehicle.year\"\r" +
	    "\n" +
	    "                            ng-options=\"year for year in ctrl.years\"\r" +
	    "\n" +
	    "                            ng-change=\"ctrl.onYearChanged()\">\r" +
	    "\n" +
	    "                        <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                    </select>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-if=\"ctrl.isSubmitted && !ctrl.vehicle.year\" name=\"yearRequiredFieldError\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.MAKE' | translate}}</label>\r" +
	    "\n" +
	    "                    <div ng-if=\"!ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.vehicle.make}\"\r" +
	    "\n" +
	    "                                name=\"make\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.vehicle.make\"\r" +
	    "\n" +
	    "                                ng-options=\"make for make in ctrl.makes\"\r" +
	    "\n" +
	    "                                ng-change=\"ctrl.onMakeChanged()\">\r" +
	    "\n" +
	    "                            <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                         <span class=\"invalid-message-static\" ng-if=\"ctrl.isSubmitted && !ctrl.vehicle.make\" name=\"makeRequiredFieldError\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-if=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <input type=\"text\"\r" +
	    "\n" +
	    "                               name=\"make\"\r" +
	    "\n" +
	    "                               class=\"form-control\"\r" +
	    "\n" +
	    "                               ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.vehicle.make}\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.vehicle.make\">\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-if=\"ctrl.isSubmitted && !ctrl.vehicle.make\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.MODEL' | translate}}</label>\r" +
	    "\n" +
	    "                    <div ng-if=\"!ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.vehicle.model}\"\r" +
	    "\n" +
	    "                                name=\"model\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.vehicle.model\"\r" +
	    "\n" +
	    "                                ng-options=\"model for model in ctrl.model\"\r" +
	    "\n" +
	    "                                ng-change=\"ctrl.onModelChanged()\">\r" +
	    "\n" +
	    "                            <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                        <span class=\"invalid-message-static\" ng-if=\"ctrl.isSubmitted && !ctrl.vehicle.model\" name=\"modelRequiredFieldError\">\r" +
	    "\n" +
	    "                            {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                        </span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-if=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <input type=\"text\"\r" +
	    "\n" +
	    "                               name=\"model\"\r" +
	    "\n" +
	    "                               class=\"form-control\"\r" +
	    "\n" +
	    "                               ng-class=\"{'ng-invalid': ctrl.isSubmitted && !ctrl.vehicle.model}\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.vehicle.model\">\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <span class=\"invalid-message-static\" ng-if=\"ctrl.isSubmitted && !ctrl.vehicle.model\">\r" +
	    "\n" +
	    "                        {{::'crm.contact.headers.REQUIRED' | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'crm.salesOpportunity.trades.TRIM' | translate}}</label>\r" +
	    "\n" +
	    "                    <div ng-hide=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                name=\"trim\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.vehicle.trim\"\r" +
	    "\n" +
	    "                                ng-options=\"trim for trim in ctrl.trims\">\r" +
	    "\n" +
	    "                            <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-show=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <input type=\"text\"\r" +
	    "\n" +
	    "                               name=\"trim\"\r" +
	    "\n" +
	    "                               class=\"form-control\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.vehicle.trim\">\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-if=\"ctrl.expanded\" class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'vehicle.labels.BODY_STYLE' | translate}}</label>\r" +
	    "\n" +
	    "                    <div ng-hide=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                name=\"bodyStyle\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.vehicle.bodyStyle\"\r" +
	    "\n" +
	    "                                ng-options=\"year for year in ctrl.bodyStyles\">\r" +
	    "\n" +
	    "                            <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-show=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <input type=\"text\"\r" +
	    "\n" +
	    "                               name=\"bodyStyle\"\r" +
	    "\n" +
	    "                               class=\"form-control\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.vehicle.bodyStyle\">\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'vehicle.labels.SERIES' | translate}}</label>\r" +
	    "\n" +
	    "                    <div ng-hide=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                name=\"series\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.vehicle.series\"\r" +
	    "\n" +
	    "                                ng-options=\"year for year in ctrl.series\">\r" +
	    "\n" +
	    "                            <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-show=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <input type=\"text\"\r" +
	    "\n" +
	    "                               name=\"series\"\r" +
	    "\n" +
	    "                               class=\"form-control\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.vehicle.series\">\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'vehicle.labels.INTERIOR_COLOR' | translate}}</label>\r" +
	    "\n" +
	    "                    <div ng-hide=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                name=\"interiorColor\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.vehicle.interiorColor\"\r" +
	    "\n" +
	    "                                ng-options=\"year for year in ctrl.interiorColors\">\r" +
	    "\n" +
	    "                            <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-show=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <input type=\"text\"\r" +
	    "\n" +
	    "                               name=\"interiorColor\"\r" +
	    "\n" +
	    "                               class=\"form-control\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.vehicle.interiorColor\">\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'vehicle.labels.EXTERIOR_COLOR' | translate}}</label>\r" +
	    "\n" +
	    "                    <div ng-hide=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <select class=\"form-control\"\r" +
	    "\n" +
	    "                                name=\"exterior\"\r" +
	    "\n" +
	    "                                ng-model=\"ctrl.vehicle.exteriorColor\"\r" +
	    "\n" +
	    "                                ng-options=\"year for year in ctrl.exteriorColors\">\r" +
	    "\n" +
	    "                            <option value=\"\">{{::'crm.salesOpportunity.trades.SELECT' | translate}}</option>\r" +
	    "\n" +
	    "                        </select>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div ng-show=\"ctrl.isFreeText\">\r" +
	    "\n" +
	    "                        <input type=\"text\"\r" +
	    "\n" +
	    "                               name=\"exterior\"\r" +
	    "\n" +
	    "                               class=\"form-control\"\r" +
	    "\n" +
	    "                               ng-model=\"ctrl.vehicle.exteriorColor\">\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-if=\"ctrl.expanded\" class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group ws-vehicle-form-group-no-bottom-padding\">\r" +
	    "\n" +
	    "                    <div class=\"row\">\r" +
	    "\n" +
	    "                        <div class=\"col-md-12\">\r" +
	    "\n" +
	    "                            <label>{{::'vehicle.labels.FACTORY_WARRANTY' | translate}}</label> (<span class=\"ws-vehicle-form-group-service-label\">{{::'vehicle.labels.MONTHS_MILES' | translate}}</span>)\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"row\">\r" +
	    "\n" +
	    "                        <div class=\"col-md-5 form-group ws-vehicle-form-group-no-right-padding\">\r" +
	    "\n" +
	    "                            <input type=\"text\"\r" +
	    "\n" +
	    "                                   name=\"factoryWarrantyMonths\"\r" +
	    "\n" +
	    "                                   class=\"form-control\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.vehicle.factoryWarrantyMonths\"\r" +
	    "\n" +
	    "                                   placeholder=\"0\">\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"col-md-2 form-group ws-vehicle-form-group-warranty-padding\">/</div>\r" +
	    "\n" +
	    "                        <div class=\"col-md-5 form-group ws-vehicle-form-group-no-left-padding\">\r" +
	    "\n" +
	    "                            <input type=\"text\"\r" +
	    "\n" +
	    "                                   name=\"factoryWarrantyMiles\"\r" +
	    "\n" +
	    "                                   class=\"form-control\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.vehicle.factoryWarrantyMiles\"\r" +
	    "\n" +
	    "                                   placeholder=\"0\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group ws-vehicle-form-group-no-bottom-padding\">\r" +
	    "\n" +
	    "                    <div class=\"row\">\r" +
	    "\n" +
	    "                        <div class=\"col-md-12\">\r" +
	    "\n" +
	    "                            <label>{{::'vehicle.labels.EXTENDED_SERVICE' | translate}}</label> (<span class=\"ws-vehicle-form-group-service-label\">{{::'vehicle.labels.MONTHS_MILES' | translate}}</span>)\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div class=\"row\">\r" +
	    "\n" +
	    "                        <div class=\"col-md-5 form-group ws-vehicle-form-group-no-right-padding\">\r" +
	    "\n" +
	    "                            <input type=\"text\"\r" +
	    "\n" +
	    "                                   name=\"extendedWarrantyMonths\"\r" +
	    "\n" +
	    "                                   class=\"form-control\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.vehicle.extendedWarrantyMonths\"\r" +
	    "\n" +
	    "                                   placeholder=\"0\">\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                        <div class=\"col-md-2 form-group ws-vehicle-form-group-warranty-padding\">/</div>\r" +
	    "\n" +
	    "                        <div class=\"col-md-5 form-group ws-vehicle-form-group-no-left-padding\">\r" +
	    "\n" +
	    "                            <input type=\"text\"\r" +
	    "\n" +
	    "                                   name=\"extendedWarrantyMiles\"\r" +
	    "\n" +
	    "                                   class=\"form-control\"\r" +
	    "\n" +
	    "                                   ng-model=\"ctrl.vehicle.extendedWarrantyMiles\"\r" +
	    "\n" +
	    "                                   placeholder=\"0\">\r" +
	    "\n" +
	    "\r" +
	    "\n" +
	    "                        </div>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group ws-vehicle-form-group-no-bottom-padding\">\r" +
	    "\n" +
	    "                    <label>{{::'vehicle.labels.PLATE' | translate}}</label>\r" +
	    "\n" +
	    "                    <input type=\"text\"\r" +
	    "\n" +
	    "                           class=\"form-control\"\r" +
	    "\n" +
	    "                           name=\"plate\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.vehicle.plate\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group ws-vehicle-form-group-no-bottom-padding\">\r" +
	    "\n" +
	    "                    <label>{{::'vehicle.labels.DRIVETRAIN' | translate}}</label>\r" +
	    "\n" +
	    "                    <input type=\"text\"\r" +
	    "\n" +
	    "                           class=\"form-control\"\r" +
	    "\n" +
	    "                           name=\"drivetrain\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.vehicle.driveTrain\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-if=\"ctrl.expanded\" class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-3 form-group\">\r" +
	    "\n" +
	    "                    <label>{{::'vehicle.labels.ENGINE' | translate}}</label>\r" +
	    "\n" +
	    "                    <input type=\"text\"\r" +
	    "\n" +
	    "                           name=\"engine\"\r" +
	    "\n" +
	    "                           class=\"form-control\"\r" +
	    "\n" +
	    "                           ng-model=\"ctrl.vehicle.engine\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"row\">\r" +
	    "\n" +
	    "                <div class=\"col-md-12 form-group\">\r" +
	    "\n" +
	    "                    <a ng-click=\"ctrl.toggleFreeText()\">{{ctrl.addVehicleText}}</a>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-expander-button panel-footer\"\r" +
	    "\n" +
	    "         ng-class=\"{'ws-expanded': ctrl.expanded}\"\r" +
	    "\n" +
	    "         ng-click=\"ctrl.expanded = !ctrl.expanded\">\r" +
	    "\n" +
	    "        <a class=\"ws-expander-button-content\"\r" +
	    "\n" +
	    "           name=\"viewToggle\">\r" +
	    "\n" +
	    "            <span ng-show=\"ctrl.expanded\">{{::'crm.salesOpportunity.headers.HIDE_ADDITIONAL_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "            <span ng-hide=\"ctrl.expanded\">{{::'crm.salesOpportunity.headers.SHOW_ALL_FIELDS' | translate}}</span>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/vehicle/info/vehicleInfoTemplate.html',
	    "<section class=\"ws-panel\">\r" +
	    "\n" +
	    "    <div co-loading=\"ctrl.isLoading\" loading-show-children=\"true\">\r" +
	    "\n" +
	    "        <div ng-if=\"!ctrl.vehicle.id\">\r" +
	    "\n" +
	    "            <div class=\"ws-panel-row ws-sales-opportunity-trade-add-existing-vehicle\"\r" +
	    "\n" +
	    "                 ng-if=\"ctrl.contactVehicles.length\">\r" +
	    "\n" +
	    "                <crm-dynamic-translation\r" +
	    "\n" +
	    "                        model=\"ctrl.existingVehicleTextModel\"\r" +
	    "\n" +
	    "                        translationkey=\"crm.salesOpportunity.trades.ADD_EXISTING_VEHICLE_PROMPT\">\r" +
	    "\n" +
	    "                </crm-dynamic-translation>&nbsp;\r" +
	    "\n" +
	    "                <a ng-click=\"ctrl.showAddExistingVehicleModal()\">\r" +
	    "\n" +
	    "                    {{::\"vehicle.USE_EXISTING_VEHICLE_LINK\" | translate}}\r" +
	    "\n" +
	    "                </a>{{::\"crm.salesOpportunity.trades.ADD_EXISTING_VEHICLE_PUNCTUATION\" | translate}}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"ws-panel-row\" ng-if=\"ctrl.contactVehicles.length\"></div>\r" +
	    "\n" +
	    "            <chrome-vehicle-selector vehicle=\"ctrl.vehicle\" is-submitted=\"ctrl.isSubmitted\"></chrome-vehicle-selector>\r" +
	    "\n" +
	    "            <div class=\"ws-panel-row ws-footer-row\">\r" +
	    "\n" +
	    "                <div class=\"ws-content-group\" style=\"width: 100%\">\r" +
	    "\n" +
	    "                    <span class=\"ws-button-group pull-right\" ng-hide=\"ctrl.isSaving\" ng-if=\"!ctrl.isAdd\">\r" +
	    "\n" +
	    "                        <button class=\"btn btn-secondary\" ng-click=\"ctrl.saveVehicle()\" name=\"saveVehicleButton\">{{::'crm.vehicle.SAVE_VEHICLE_RECORD' | translate}}</button>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                    <span class=\"ws-button-group pull-right\" ng-show=\"ctrl.isSaving\">\r" +
	    "\n" +
	    "                        <md-progress-circular class=\"ws-progress-circular\"\r" +
	    "\n" +
	    "                                              md-diameter=\"24\"\r" +
	    "\n" +
	    "                                              md-mode=\"indeterminate\"></md-progress-circular>\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div ng-if=\"ctrl.vehicle.id\">\r" +
	    "\n" +
	    "            <crm-contact-vehicle-card vehicle=\"ctrl.vehicle\" contact-id=\"ctrl.contact.id\" action-items=\"ctrl.actionItems\"></crm-contact-vehicle-card>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/vehicleOfInterest/card/container/vehicleOfInterestCardContainerTemplate.html',
	    "<crm-in-stock-vehicle-of-interest-card ng-if=\"ctrl.vehicleOfInterest.stockNumber\"\r" +
	    "\n" +
	    "                                       vehicle-of-interest=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                                       top-choice=\"ctrl.topChoice\"\r" +
	    "\n" +
	    "                                       options=\"ctrl.options\"></crm-in-stock-vehicle-of-interest-card>\r" +
	    "\n" +
	    "<crm-not-in-stock-vehicle-of-interest-card ng-if=\"!ctrl.vehicleOfInterest.stockNumber\"\r" +
	    "\n" +
	    "                                           vehicle-of-interest=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                                           options=\"ctrl.options\"></crm-not-in-stock-vehicle-of-interest-card>\r" +
	    "\n"
	  );


	  $templateCache.put('app/vehicleOfInterest/card/inStock/inStockVehicleOfInterestCardTemplate.html',
	    "<div ng-if=\"ctrl.vehicleOfInterest.year || ctrl.vehicleOfInterest.make || ctrl.vehicleOfInterest.model\">\r" +
	    "\n" +
	    "    <co-panel co-multi-transclusion class=\"ds-card-vehicle ds-vehicle-of-interest-card\">\r" +
	    "\n" +
	    "        <div transclude-to=\"banner\" name=\"topChoiceTag\">\r" +
	    "\n" +
	    "            <div ng-show=\"!ctrl.topChoice\"\r" +
	    "\n" +
	    "                 class=\"ds-card-banner vehicle-of-interest-tooltip\"\r" +
	    "\n" +
	    "                 uib-tooltip=\"{{::'crm.salesOpportunity.popover.SET_PRIMARY_VEHICLE_OF_INTEREST' | translate}}\"\r" +
	    "\n" +
	    "                 tooltip-placement=\"top\">\r" +
	    "\n" +
	    "                    <span class=\"ds-banner-text\" ng-click=\"ctrl.selectVehicleOfInterest()\">\r" +
	    "\n" +
	    "                        {{::\"crm.salesOpportunity.vehicleOfInterest.TOP\" | translate}}<br/>\r" +
	    "\n" +
	    "                        {{::\"crm.salesOpportunity.vehicleOfInterest.CHOICE\" | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div ng-show=\"ctrl.topChoice\">\r" +
	    "\n" +
	    "                <div class=\"ds-card-banner-top-choice\">\r" +
	    "\n" +
	    "                    <span class=\"ds-banner-text\">\r" +
	    "\n" +
	    "                        {{::\"crm.salesOpportunity.vehicleOfInterest.TOP\" | translate}}<br/>\r" +
	    "\n" +
	    "                        {{::\"crm.salesOpportunity.vehicleOfInterest.CHOICE\" | translate}}\r" +
	    "\n" +
	    "                    </span>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"title\">\r" +
	    "\n" +
	    "            <span class=\"ws-panel-title-accent\" name=\"carTitle\" ng-click=\"ctrl.openEBrochure()\">\r" +
	    "\n" +
	    "                {{ctrl.getVehicleTitle()}}\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"media\">\r" +
	    "\n" +
	    "            <span class=\"ds-label-condition\" ng-if=\"ctrl.vehicleOfInterest.condition\">{{ctrl.vehicleOfInterest.condition}}</span>\r" +
	    "\n" +
	    "            <div class=\"ds-card-thumbnail\" ng-class=\"{'ws-no-vehicle-image': !ctrl.hasVehicleImage()}\">\r" +
	    "\n" +
	    "                <img ng-src=\"{{ctrl.getVehicleImage()}}\" class=\"ws-media\">\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <span class=\"ds-label-in-stock\">{{::\"crm.salesOpportunity.vehicleOfInterest.IN_STOCK\" | translate}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "            <span class=\"item-heading\" name=\"ourPrice\">{{ctrl.vehicleOfInterest.offeredPrice | currency}}</span>\r" +
	    "\n" +
	    "            <span ng-if=\"ctrl.vehicleOfInterest.chromeStyleId && ctrl.incentivePermission.view\">\r" +
	    "\n" +
	    "                <span class=\"ws-deaccent-text\">/</span>\r" +
	    "\n" +
	    "                <a name=\"viewIncentivesButton\" ng-click=\"ctrl.openIncentives($event)\">\r" +
	    "\n" +
	    "                    <span class=\"fa fa-info-circle\"></span>\r" +
	    "\n" +
	    "                    <span>{{::\"crm.salesOpportunity.vehicleOfInterest.VIEW_INCENTIVES\" | translate}}</span>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"main\">\r" +
	    "\n" +
	    "            <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "                <div class=\"ws-content-group col-sm-6\">\r" +
	    "\n" +
	    "                    <div name=\"stockNumber\"><span class=\"item-heading\">{{::\"crm.salesOpportunity.vehicleOfInterest.STOCK_NUMBER\" | translate}}: </span> {{ctrl.vehicleOfInterest.stockNumber}}</div>\r" +
	    "\n" +
	    "                    <div name=\"vin\"><span class=\"item-heading\">{{::\"crm.salesOpportunity.vehicleOfInterest.VIN\" | translate}}: </span> {{ctrl.vehicleOfInterest.vin}}</div>\r" +
	    "\n" +
	    "                    <div name=\"daysOnLot\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{::\"crm.salesOpportunity.vehicleOfInterest.DAYS_ON_LOT\" | translate}}: </span>\r" +
	    "\n" +
	    "                        <span ng-show=\"ctrl.vehicleOfInterest.daysOnLot >= 0\">{{ctrl.vehicleOfInterest.daysOnLot}} <span>days</span></span>\r" +
	    "\n" +
	    "                        <span ng-hide=\"ctrl.vehicleOfInterest.daysOnLot >= 0\">{{::\"crm.salesOpportunity.vehicleOfInterest.NOT_ON_LOT\" | translate}} </span>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div name=\"odometer\"><span class=\"item-heading\">{{::\"crm.salesOpportunity.vehicleOfInterest.ODOMETER\" | translate}}: </span> {{ctrl.vehicleOfInterest.odometer | number}} <span>mi</span></div>\r" +
	    "\n" +
	    "                    <div name=\"exteriorColor\"><span class=\"item-heading\">{{::\"crm.salesOpportunity.vehicleOfInterest.EXTERIOR_COLOR\" | translate}}: </span>{{ctrl.vehicleOfInterest.exteriorColor}}</div>\r" +
	    "\n" +
	    "                    <div name=\"interiorColor\"><span class=\"item-heading\">{{::\"crm.salesOpportunity.vehicleOfInterest.INTERIOR_COLOR\" | translate}}: </span>{{ctrl.vehicleOfInterest.interiorColor}}</div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-content-group col-sm-6\">\r" +
	    "\n" +
	    "                    <div name=\"fuelType\"><span class=\"item-heading\">{{::\"crm.salesOpportunity.vehicleOfInterest.FUEL_TYPE\" | translate}}: </span> {{ctrl.vehicleOfInterest.fuelType}}</div>\r" +
	    "\n" +
	    "                    <div name=\"fuelConsumption\">\r" +
	    "\n" +
	    "                        <span class=\"item-heading\">{{::\"crm.salesOpportunity.vehicleOfInterest.FUEL_CONSUMPTION\" | translate}}: </span>\r" +
	    "\n" +
	    "                        {{ctrl.vehicleOfInterest.cityFuelEfficiency.value}} {{::\"crm.salesOpportunity.vehicleOfInterest.PLACEHOLDER_CITY_LOWER\" | translate}}\r" +
	    "\n" +
	    "                        / {{ctrl.vehicleOfInterest.hwyFuelEfficiency.value}} {{::\"crm.salesOpportunity.vehicleOfInterest.PLACEHOLDER_HIGHWAY_LOWER\" | translate}}\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                    <div name=\"transmissionType\"><span class=\"item-heading\">{{::\"crm.salesOpportunity.vehicleOfInterest.TRANSMISSION_TYPE\" | translate}}: </span>{{ctrl.vehicleOfInterest.transmission}}</div>\r" +
	    "\n" +
	    "                    <div name=\"engineSize\"><span class=\"item-heading\">{{::\"crm.salesOpportunity.vehicleOfInterest.ENGINE_SIZE\" | translate}}: </span>{{ctrl.vehicleOfInterest.engineSize}}</div>\r" +
	    "\n" +
	    "                    <div name=\"voiFranchise\"><span class=\"item-heading\">{{::\"crm.salesOpportunity.vehicleOfInterest.FRANCHISE\" | translate}}: </span>{{ctrl.vehicleOfInterest.franchise}}</div>\r" +
	    "\n" +
	    "                    <div name=\"lotLocation\"><span class=\"item-heading\">{{::\"crm.salesOpportunity.vehicleOfInterest.LOT_LOCATION\" | translate}}: </span>{{ctrl.vehicleOfInterest.lotLocation}}</div>\r" +
	    "\n" +
	    "                    <div ng-if=\"ctrl.localizationSouthwestPacificPermission.view && ctrl.topChoice\">\r" +
	    "\n" +
	    "                        <crm-inline-edit facade=\"ctrl.deliveryDateFacade\" has-value=\"ctrl.vehicleOfInterest.deliveryDate\">\r" +
	    "\n" +
	    "                            <span ng-if=\"ctrl.vehicleOfInterest.deliveryDate\" name=\"tradesExteriorColor\">\r" +
	    "\n" +
	    "                                <span class=\"item-heading\">{{::\"crm.salesOpportunity.vehicleOfInterest.DELIVERY_DATE\" | translate}}: </span>\r" +
	    "\n" +
	    "                                {{ctrl.vehicleOfInterest.deliveryDate}}\r" +
	    "\n" +
	    "                            </span>\r" +
	    "\n" +
	    "                            <crm-inline-editing-edit-empty ng-if=\"!ctrl.vehicleOfInterest.deliveryDate\">\r" +
	    "\n" +
	    "                                {{::\"crm.salesOpportunity.vehicleOfInterest.DELIVERY_DATE\" | translate}}\r" +
	    "\n" +
	    "                            </crm-inline-editing-edit-empty>\r" +
	    "\n" +
	    "                        </crm-inline-edit>\r" +
	    "\n" +
	    "                    </div>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </co-panel>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/vehicleOfInterest/card/notInStock/inlineEdit/notInStockVehicleOfInterestInlineEditTemplate.html',
	    "<div>\r" +
	    "\n" +
	    "    <div ng-class=\"{'inline-edit-area': ctrl.isFieldShown()}\" ng-click=\"ctrl.showModal()\" name=\"editLink\">\r" +
	    "\n" +
	    "        <span ng-if=\"ctrl.isFieldShown()\">\r" +
	    "\n" +
	    "            <span class=\"item-heading\">{{::ctrl.key | translate}}: </span>\r" +
	    "\n" +
	    "            <ng-transclude></ng-transclude>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <span ng-if=\"!ctrl.isFieldShown()\">\r" +
	    "\n" +
	    "            <a href><i class=\"fa fa-plus-circle\"></i> {{::ctrl.key | translate}}</a>\r" +
	    "\n" +
	    "        </span>\r" +
	    "\n" +
	    "        <span class=\"edit-action\" ng-if=\"ctrl.isFieldShown()\"><i class=\"fa fa-pencil\"></i></span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/vehicleOfInterest/card/notInStock/notInStockVehicleOfInterestCardTemplate.html',
	    "<div ng-if=\"ctrl.vehicleOfInterest.year || ctrl.vehicleOfInterest.make || ctrl.vehicleOfInterest.model\">\r" +
	    "\n" +
	    "    <co-panel co-multi-transclusion class=\"ds-card-vehicle ds-vehicle-of-interest-card\">\r" +
	    "\n" +
	    "        <div transclude-to=\"banner\" name=\"topChoiceTag\">\r" +
	    "\n" +
	    "            <div class=\"ds-card-banner-top-choice\">\r" +
	    "\n" +
	    "                <span class=\"ds-banner-text\">\r" +
	    "\n" +
	    "                    {{::\"crm.salesOpportunity.vehicleOfInterest.TOP\" | translate}}<br/>\r" +
	    "\n" +
	    "                    {{::\"crm.salesOpportunity.vehicleOfInterest.CHOICE\" | translate}}\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"title\">\r" +
	    "\n" +
	    "            <span class=\"ws-panel-title-accent\" name=\"carTitle\">\r" +
	    "\n" +
	    "                {{ctrl.getVehicleTitle()}}\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "            <span class=\"item-heading\" name=\"ourPrice\">{{ctrl.vehicleOfInterest.offeredPrice | currency}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"media\">\r" +
	    "\n" +
	    "            <span class=\"ds-label-condition\" ng-if=\"ctrl.getVehicleCondition()\">{{ctrl.getVehicleCondition()}}</span>\r" +
	    "\n" +
	    "            <div class=\"ds-card-thumbnail ws-no-vehicle-image\">\r" +
	    "\n" +
	    "                <img ng-src=\"{{ctrl.getVehicleImage()}}\" class=\"ws-media\">\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <span class=\"ds-label-out-of-stock\">{{::\"crm.salesOpportunity.vehicleOfInterest.NOT_IN_STOCK\" | translate}}</span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div transclude-to=\"main\">\r" +
	    "\n" +
	    "            <div class=\"row ws-row-md-gutter\">\r" +
	    "\n" +
	    "                <div class=\"ws-content-group col-sm-6\">\r" +
	    "\n" +
	    "                    <crm-not-in-stock-vehicle-of-interest-inline-edit\r" +
	    "\n" +
	    "                        key=\"crm.salesOpportunity.vehicleOfInterest.MAX_PRICE\"\r" +
	    "\n" +
	    "                        vehicle-of-interest=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                        field=\"offeredPrice\"\r" +
	    "\n" +
	    "                        name=\"maxPrice\">\r" +
	    "\n" +
	    "                        {{ctrl.vehicleOfInterest.offeredPrice | currency}}\r" +
	    "\n" +
	    "                    </crm-not-in-stock-vehicle-of-interest-inline-edit>\r" +
	    "\n" +
	    "                    <crm-not-in-stock-vehicle-of-interest-inline-edit\r" +
	    "\n" +
	    "                            key=\"crm.salesOpportunity.vehicleOfInterest.MAX_ODOMETER\"\r" +
	    "\n" +
	    "                            vehicle-of-interest=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                            field=\"odometer\"\r" +
	    "\n" +
	    "                            name=\"maxOdometer\">\r" +
	    "\n" +
	    "                        {{ctrl.vehicleOfInterest.odometer | number}} {{::\"crm.salesOpportunity.vehicleOfInterest.DISTANCE_UNIT\" | translate}}\r" +
	    "\n" +
	    "                    </crm-not-in-stock-vehicle-of-interest-inline-edit>\r" +
	    "\n" +
	    "                    <crm-not-in-stock-vehicle-of-interest-inline-edit\r" +
	    "\n" +
	    "                            key=\"crm.salesOpportunity.vehicleOfInterest.MAX_DOWN_PAYMENT\"\r" +
	    "\n" +
	    "                            vehicle-of-interest=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                            field=\"deposit\"\r" +
	    "\n" +
	    "                            name=\"maxDownPayment\">\r" +
	    "\n" +
	    "                        {{ctrl.vehicleOfInterest.deposit | currency}}\r" +
	    "\n" +
	    "                    </crm-not-in-stock-vehicle-of-interest-inline-edit>\r" +
	    "\n" +
	    "                    <crm-not-in-stock-vehicle-of-interest-inline-edit\r" +
	    "\n" +
	    "                            key=\"crm.salesOpportunity.vehicleOfInterest.EXTERIOR_COLOR\"\r" +
	    "\n" +
	    "                            vehicle-of-interest=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                            field=\"exteriorColor\"\r" +
	    "\n" +
	    "                            name=\"exteriorColor\">\r" +
	    "\n" +
	    "                        {{ctrl.vehicleOfInterest.exteriorColor}}\r" +
	    "\n" +
	    "                    </crm-not-in-stock-vehicle-of-interest-inline-edit>\r" +
	    "\n" +
	    "                    <crm-not-in-stock-vehicle-of-interest-inline-edit\r" +
	    "\n" +
	    "                            key=\"crm.salesOpportunity.vehicleOfInterest.INTERIOR_COLOR\"\r" +
	    "\n" +
	    "                            vehicle-of-interest=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                            field=\"interiorColor\"\r" +
	    "\n" +
	    "                            name=\"interiorColor\">\r" +
	    "\n" +
	    "                        {{ctrl.vehicleOfInterest.interiorColor}}\r" +
	    "\n" +
	    "                    </crm-not-in-stock-vehicle-of-interest-inline-edit>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <div class=\"ws-content-group col-sm-6\">\r" +
	    "\n" +
	    "                    <crm-not-in-stock-vehicle-of-interest-inline-edit\r" +
	    "\n" +
	    "                            key=\"crm.salesOpportunity.vehicleOfInterest.BODY_STYLE\"\r" +
	    "\n" +
	    "                            vehicle-of-interest=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                            field=\"body\"\r" +
	    "\n" +
	    "                            name=\"bodyStyle\">\r" +
	    "\n" +
	    "                        {{ctrl.vehicleOfInterest.body.text}}\r" +
	    "\n" +
	    "                    </crm-not-in-stock-vehicle-of-interest-inline-edit>\r" +
	    "\n" +
	    "                    <crm-not-in-stock-vehicle-of-interest-inline-edit\r" +
	    "\n" +
	    "                            key=\"crm.salesOpportunity.vehicleOfInterest.FUEL_TYPE\"\r" +
	    "\n" +
	    "                            vehicle-of-interest=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                            field=\"body\"\r" +
	    "\n" +
	    "                            name=\"fuelType\">\r" +
	    "\n" +
	    "                        {{ctrl.vehicleOfInterest.fuelType}}\r" +
	    "\n" +
	    "                    </crm-not-in-stock-vehicle-of-interest-inline-edit>\r" +
	    "\n" +
	    "                    <crm-not-in-stock-vehicle-of-interest-inline-edit\r" +
	    "\n" +
	    "                            key=\"crm.salesOpportunity.vehicleOfInterest.FUEL_CONSUMPTION\"\r" +
	    "\n" +
	    "                            vehicle-of-interest=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                            has-value=\"!ctrl.isFuelEconomyEmpty()\"\r" +
	    "\n" +
	    "                            name=\"fuelConsumption\">\r" +
	    "\n" +
	    "                        <span ng-if=\"ctrl.vehicleOfInterest.cityFuelEfficiency.value\">{{ctrl.vehicleOfInterest.cityFuelEfficiency.value}}</span>\r" +
	    "\n" +
	    "                        <span ng-if=\"!ctrl.vehicleOfInterest.cityFuelEfficiency.value\">&mdash;</span>\r" +
	    "\n" +
	    "                        {{::\"crm.salesOpportunity.vehicleOfInterest.PLACEHOLDER_CITY_LOWER\" | translate}}\r" +
	    "\n" +
	    "                        /\r" +
	    "\n" +
	    "                        <span ng-if=\"ctrl.vehicleOfInterest.hwyFuelEfficiency.value\">{{ctrl.vehicleOfInterest.hwyFuelEfficiency.value}}</span>\r" +
	    "\n" +
	    "                        <span ng-if=\"!ctrl.vehicleOfInterest.hwyFuelEfficiency.value\">&mdash;</span>\r" +
	    "\n" +
	    "                        {{::\"crm.salesOpportunity.vehicleOfInterest.PLACEHOLDER_HIGHWAY_LOWER\" | translate}}\r" +
	    "\n" +
	    "                    </crm-not-in-stock-vehicle-of-interest-inline-edit>\r" +
	    "\n" +
	    "                    <crm-not-in-stock-vehicle-of-interest-inline-edit\r" +
	    "\n" +
	    "                            key=\"crm.salesOpportunity.vehicleOfInterest.TRANSMISSION_TYPE\"\r" +
	    "\n" +
	    "                            vehicle-of-interest=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                            field=\"transmission\"\r" +
	    "\n" +
	    "                            name=\"transmission\">\r" +
	    "\n" +
	    "                        {{ctrl.vehicleOfInterest.transmission}}\r" +
	    "\n" +
	    "                    </crm-not-in-stock-vehicle-of-interest-inline-edit>\r" +
	    "\n" +
	    "                    <crm-not-in-stock-vehicle-of-interest-inline-edit\r" +
	    "\n" +
	    "                            ng-if=\"ctrl.localizationSouthwestPacificPermission.view\"\r" +
	    "\n" +
	    "                            key=\"crm.salesOpportunity.vehicleOfInterest.DELIVERY_DATE\"\r" +
	    "\n" +
	    "                            vehicle-of-interest=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                            field=\"deliveryDate\"\r" +
	    "\n" +
	    "                            name=\"deliveryDate\">\r" +
	    "\n" +
	    "                        {{ctrl.vehicleOfInterest.deliveryDate}}\r" +
	    "\n" +
	    "                    </crm-not-in-stock-vehicle-of-interest-inline-edit>\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </co-panel>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/vehicleOfInterest/manualEntry/dropdown/manualEntryVehicleOfInterestDropdownTemplate.html',
	    "<div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "    <label>{{::ctrl.labelKey | translate}}</label>\r" +
	    "\n" +
	    "    <select class=\"form-control\"\r" +
	    "\n" +
	    "            ng-class=\"{'ng-invalid': ctrl.isFieldValid() === false}\"\r" +
	    "\n" +
	    "            ng-if=\"!ctrl.isSingleValue()\"\r" +
	    "\n" +
	    "            ng-model=\"ctrl.model[ctrl.field]\"\r" +
	    "\n" +
	    "            ng-options=\"value for value in ctrl.values track by value\"\r" +
	    "\n" +
	    "            ng-change=\"ctrl.change()\">\r" +
	    "\n" +
	    "        <option value=\"\">{{::\"crm.salesOpportunity.vehicleOfInterest.SELECT\" | translate}}</option>\r" +
	    "\n" +
	    "    </select>\r" +
	    "\n" +
	    "    <div class=\"form-control-label\"\r" +
	    "\n" +
	    "         ng-if=\"ctrl.isSingleValue()\">\r" +
	    "\n" +
	    "        {{ctrl.values[0]}}\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <span class=\"invalid-message-static\" ng-show=\"ctrl.isFieldValid() === false\">\r" +
	    "\n" +
	    "        {{::\"crm.salesOpportunity.vehicleOfInterest.YEAR_OR_MAKE_REQUIRED\" | translate}}\r" +
	    "\n" +
	    "    </span>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/vehicleOfInterest/manualEntry/manualEntryVehicleOfInterestModalTemplate.html',
	    "<crm-manual-entry-vehicle-of-interest vehicle-of-interest=\"ctrl.manualVehicleOfInterest\"\r" +
	    "\n" +
	    "                                      on-save=\"ctrl.saveManualVehicleOfInterest()\"\r" +
	    "\n" +
	    "                                      on-cancel=\"ctrl.cancel()\"></crm-manual-entry-vehicle-of-interest>"
	  );


	  $templateCache.put('app/vehicleOfInterest/manualEntry/manualEntryVehicleOfInterestTemplate.html',
	    "<section class=\"ws-panel\" co-loading=\"ctrl.isLoading\" loading-show-children=\"true\" ng-cloak name=\"manualVOIModal\">\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <header class=\"ws-panel-title\" name=\"manualVOITitle\">{{::\"crm.salesOpportunity.vehicleOfInterest.KIND_OF_VEHICLE_CUSTOMER_WANTS\" | translate}}</header>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-flex-fill-even\">\r" +
	    "\n" +
	    "                <i class=\"fa fa-close ws-flex-auto-size\" ng-click=\"ctrl.closeModal()\" name=\"closeModalButton\"></i>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <crm-alert alert-names=\"[ctrl.CrmConstants.SALES_OPPORTUNITY.TRADES.VALUATION_MODAL.ALERT]\"></crm-alert>\r" +
	    "\n" +
	    "    <div class=\"row\">\r" +
	    "\n" +
	    "        <!--<div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label>{{::\"crm.salesOpportunity.vehicleOfInterest.CONDITION\" | translate}}</label>\r" +
	    "\n" +
	    "            <select class=\"form-control\"\r" +
	    "\n" +
	    "                    ng-model=\"ctrl.vehicleOfInterest.condition\"\r" +
	    "\n" +
	    "                    name=\"addEditVOIType\"\r" +
	    "\n" +
	    "                    ng-options=\"condition.value as condition.text for condition in ctrl.conditions\">\r" +
	    "\n" +
	    "                <option value=\"\">{{::\"crm.salesOpportunity.vehicleOfInterest.SELECT\" | translate}}</option>\r" +
	    "\n" +
	    "            </select>\r" +
	    "\n" +
	    "        </div>-->\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label name=\"conditionFieldLabel\">{{::\"crm.salesOpportunity.vehicleOfInterest.CONDITION\" | translate}}</label>\r" +
	    "\n" +
	    "            <input type=\"text\"\r" +
	    "\n" +
	    "                   class=\"form-control\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.vehicleOfInterest.condition\"\r" +
	    "\n" +
	    "                   placeholder=\"{{::'crm.salesOpportunity.vehicleOfInterest.CONDITION' | translate}}\" name=\"conditionField\">\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <!--<crm-manual-entry-vehicle-of-interest-dropdown\r" +
	    "\n" +
	    "                label-key=\"crm.salesOpportunity.vehicleOfInterest.YEAR\"\r" +
	    "\n" +
	    "                model=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                field=\"year\"\r" +
	    "\n" +
	    "                values=\"ctrl.filterSet.years\"\r" +
	    "\n" +
	    "                name=\"addEditVOIYear\"\r" +
	    "\n" +
	    "                on-change=\"ctrl.yearChanged()\"\r" +
	    "\n" +
	    "                is-field-valid=\"ctrl.isFormValid()\">\r" +
	    "\n" +
	    "        </crm-manual-entry-vehicle-of-interest-dropdown>-->\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label name=\"yearLabel\">{{::\"crm.salesOpportunity.vehicleOfInterest.YEAR\" | translate}}</label>\r" +
	    "\n" +
	    "            <input type=\"text\"\r" +
	    "\n" +
	    "                   class=\"form-control\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.vehicleOfInterest.year\"\r" +
	    "\n" +
	    "                   placeholder=\"{{::'crm.salesOpportunity.vehicleOfInterest.YEAR' | translate}}\" name=\"yearField\">\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <!--<crm-manual-entry-vehicle-of-interest-dropdown\r" +
	    "\n" +
	    "                label-key=\"crm.salesOpportunity.vehicleOfInterest.MAKE\"\r" +
	    "\n" +
	    "                model=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                field=\"make\"\r" +
	    "\n" +
	    "                values=\"ctrl.filterSet.makes\"\r" +
	    "\n" +
	    "                name=\"addEditVOIMake\"\r" +
	    "\n" +
	    "                on-change=\"ctrl.primaryFieldChanged(ctrl.primaryFields.slice(2))\"\r" +
	    "\n" +
	    "                is-field-valid=\"ctrl.isFormValid()\">\r" +
	    "\n" +
	    "        </crm-manual-entry-vehicle-of-interest-dropdown>-->\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label name=\"makeFieldLabel\">{{::\"crm.salesOpportunity.vehicleOfInterest.MAKE\" | translate}}</label>\r" +
	    "\n" +
	    "            <input type=\"text\"\r" +
	    "\n" +
	    "                   class=\"form-control\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.vehicleOfInterest.make\"\r" +
	    "\n" +
	    "                   placeholder=\"{{::'crm.salesOpportunity.vehicleOfInterest.MAKE' | translate}}\" name=\"makeField\">\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <!--<crm-manual-entry-vehicle-of-interest-dropdown\r" +
	    "\n" +
	    "                label-key=\"crm.salesOpportunity.vehicleOfInterest.MODEL\"\r" +
	    "\n" +
	    "                model=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                field=\"model\"\r" +
	    "\n" +
	    "                values=\"ctrl.filterSet.models\"\r" +
	    "\n" +
	    "                name=\"addEditVOIModel\"\r" +
	    "\n" +
	    "                on-change=\"ctrl.primaryFieldChanged(ctrl.primaryFields.slice(3))\">\r" +
	    "\n" +
	    "        </crm-manual-entry-vehicle-of-interest-dropdown>-->\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label name=\"modelFieldLabel\">{{::\"crm.salesOpportunity.vehicleOfInterest.MODEL\" | translate}}</label>\r" +
	    "\n" +
	    "            <input type=\"text\"\r" +
	    "\n" +
	    "                   class=\"form-control\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.vehicleOfInterest.model\"\r" +
	    "\n" +
	    "                   placeholder=\"{{::'crm.salesOpportunity.vehicleOfInterest.MODEL' | translate}}\" name=\"modelField\">\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <!--<crm-manual-entry-vehicle-of-interest-dropdown\r" +
	    "\n" +
	    "                label-key=\"crm.salesOpportunity.vehicleOfInterest.TRIM\"\r" +
	    "\n" +
	    "                model=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                field=\"trim\"\r" +
	    "\n" +
	    "                values=\"ctrl.filterSet.trims\"\r" +
	    "\n" +
	    "                name=\"addEditVOITrim\"\r" +
	    "\n" +
	    "                on-change=\"ctrl.primaryFieldChanged(ctrl.primaryFields.slice(4))\">\r" +
	    "\n" +
	    "        </crm-manual-entry-vehicle-of-interest-dropdown>-->\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label name=\"trimFieldLabel\">{{::\"crm.salesOpportunity.vehicleOfInterest.TRIM\" | translate}}</label>\r" +
	    "\n" +
	    "            <input type=\"text\"\r" +
	    "\n" +
	    "                   class=\"form-control\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.vehicleOfInterest.trim\"\r" +
	    "\n" +
	    "                   placeholder=\"{{::'crm.salesOpportunity.vehicleOfInterest.TRIM' | translate}}\" name=\"trimField\">\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <!--<crm-manual-entry-vehicle-of-interest-dropdown\r" +
	    "\n" +
	    "                label-key=\"crm.salesOpportunity.vehicleOfInterest.EXTERIOR_COLOR\"\r" +
	    "\n" +
	    "                model=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                field=\"exteriorColor\"\r" +
	    "\n" +
	    "                name=\"addEditVOIExteriorColor\"\r" +
	    "\n" +
	    "                values=\"ctrl.exteriors\">\r" +
	    "\n" +
	    "        </crm-manual-entry-vehicle-of-interest-dropdown>-->\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label name=\"exteriorColorFieldLabel\">{{::\"crm.salesOpportunity.vehicleOfInterest.EXTERIOR_COLOR\" | translate}}</label>\r" +
	    "\n" +
	    "            <input type=\"text\"\r" +
	    "\n" +
	    "                   class=\"form-control\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.vehicleOfInterest.exteriorColor\"\r" +
	    "\n" +
	    "                   placeholder=\"{{::'crm.salesOpportunity.vehicleOfInterest.EXTERIOR_COLOR' | translate}}\" name=\"exteriorColorField\">\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <!--<crm-manual-entry-vehicle-of-interest-dropdown\r" +
	    "\n" +
	    "                label-key=\"crm.salesOpportunity.vehicleOfInterest.INTERIOR_COLOR\"\r" +
	    "\n" +
	    "                model=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                field=\"interiorColor\"\r" +
	    "\n" +
	    "                name=\"addEditVOIInteriorColor\"\r" +
	    "\n" +
	    "                values=\"ctrl.filterSet.interior\">\r" +
	    "\n" +
	    "        </crm-manual-entry-vehicle-of-interest-dropdown>-->\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label name=\"interiorColorFieldLabel\">{{::\"crm.salesOpportunity.vehicleOfInterest.INTERIOR_COLOR\" | translate}}</label>\r" +
	    "\n" +
	    "            <input type=\"text\"\r" +
	    "\n" +
	    "                   class=\"form-control\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.vehicleOfInterest.interiorColor\"\r" +
	    "\n" +
	    "                   placeholder=\"{{::'crm.salesOpportunity.vehicleOfInterest.INTERIOR_COLOR' | translate}}\" name=\"interiorColorField\">\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label name=\"bodyStyleDropdownLabel\">{{::\"crm.salesOpportunity.vehicleOfInterest.BODY_STYLE\" | translate}}</label>\r" +
	    "\n" +
	    "            <select class=\"form-control\"\r" +
	    "\n" +
	    "                    ng-model=\"ctrl.vehicleOfInterest.body\"\r" +
	    "\n" +
	    "                    name=\"addEditVOIBodyStyle\"\r" +
	    "\n" +
	    "                    ng-options=\"bodyStyle as bodyStyle.text for bodyStyle in ctrl.bodyStyles track by bodyStyle.value\" name=\"bodyStyleDropdown\">\r" +
	    "\n" +
	    "                <option value=\"\" name=\"bodyStyleDropdownOption\">{{::\"crm.salesOpportunity.vehicleOfInterest.SELECT\" | translate}}</option>\r" +
	    "\n" +
	    "            </select>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <!--<div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label>{{::\"crm.salesOpportunity.vehicleOfInterest.FUEL_CONSUMPTION\" | translate}}</label>\r" +
	    "\n" +
	    "            ({{::\"crm.salesOpportunity.vehicleOfInterest.DISTANCE_UNIT\" | translate}})\r" +
	    "\n" +
	    "            <div layout=\"row\" layout-align=\"space-around center\" ng-if=\"!ctrl.isFuelEconomyInfoComplete\">\r" +
	    "\n" +
	    "                <select class=\"form-control\"\r" +
	    "\n" +
	    "                        flex=\"45\"\r" +
	    "\n" +
	    "                        ng-model=\"ctrl.vehicleOfInterest.cityFuelEfficiency.value\"\r" +
	    "\n" +
	    "                        name=\"cityFuelEfficiency\"\r" +
	    "\n" +
	    "                        ng-options=\"fuelEconomy for fuelEconomy in ctrl.filterSet.fuelEconomyCity track by fuelEconomy\">\r" +
	    "\n" +
	    "                    <option value=\"\">{{::\"crm.salesOpportunity.vehicleOfInterest.PLACEHOLDER_CITY\" | translate}}</option>\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "                <div flex style=\"text-align: center\">/</div>\r" +
	    "\n" +
	    "                <select class=\"form-control\"\r" +
	    "\n" +
	    "                        flex=\"45\"\r" +
	    "\n" +
	    "                        ng-model=\"ctrl.vehicleOfInterest.hwyFuelEfficiency.value\"\r" +
	    "\n" +
	    "                        name=\"hwyFuelEfficiency\"\r" +
	    "\n" +
	    "                        ng-options=\"fuelEconomy for fuelEconomy in ctrl.filterSet.fuelEconomyHighway track by fuelEconomy\">\r" +
	    "\n" +
	    "                    <option value=\"\">{{::\"crm.salesOpportunity.vehicleOfInterest.PLACEHOLDER_HIGHWAY\" | translate}}</option>\r" +
	    "\n" +
	    "                </select>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "            <div class=\"form-control-label\" ng-if=\"ctrl.isFuelEconomyInfoComplete\">\r" +
	    "\n" +
	    "                {{ctrl.vehicleOfInterest.cityFuelEfficiency.value}} /\r" +
	    "\n" +
	    "                {{ctrl.vehicleOfInterest.hwyFuelEfficiency.value}}\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>-->\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label name=\"fuelConsumptionFieldLabel\">{{::\"crm.salesOpportunity.vehicleOfInterest.FUEL_CONSUMPTION\" | translate}}</label>\r" +
	    "\n" +
	    "            ({{::\"crm.salesOpportunity.vehicleOfInterest.DISTANCE_UNIT\" | translate}})\r" +
	    "\n" +
	    "            <div layout=\"row\" layout-align=\"space-around center\">\r" +
	    "\n" +
	    "                <input type=\"text\"\r" +
	    "\n" +
	    "                       class=\"form-control\"\r" +
	    "\n" +
	    "                       flex=\"45\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.vehicleOfInterest.cityFuelEfficiency.value\"\r" +
	    "\n" +
	    "                       placeholder=\"{{::'crm.salesOpportunity.vehicleOfInterest.PLACEHOLDER_CITY' | translate}}\" name=\"cityField\">\r" +
	    "\n" +
	    "                <div flex style=\"text-align: center\">/</div>\r" +
	    "\n" +
	    "                <input type=\"text\"\r" +
	    "\n" +
	    "                       class=\"form-control\"\r" +
	    "\n" +
	    "                       flex=\"45\"\r" +
	    "\n" +
	    "                       ng-model=\"ctrl.vehicleOfInterest.hwyFuelEfficiency.value\"\r" +
	    "\n" +
	    "                       placeholder=\"{{::'crm.salesOpportunity.vehicleOfInterest.PLACEHOLDER_HIGHWAY' | translate}}\" name=\"highwayField\">\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <!--<crm-manual-entry-vehicle-of-interest-dropdown\r" +
	    "\n" +
	    "                label-key=\"crm.salesOpportunity.vehicleOfInterest.FUEL_TYPE\"\r" +
	    "\n" +
	    "                model=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                field=\"fuelType\"\r" +
	    "\n" +
	    "                name=\"addEditVOIFuelType\"\r" +
	    "\n" +
	    "                values=\"ctrl.filterSet.fuelType\">\r" +
	    "\n" +
	    "        </crm-manual-entry-vehicle-of-interest-dropdown>-->\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label name=\"fuelTypeFieldLabel\">{{::\"crm.salesOpportunity.vehicleOfInterest.FUEL_TYPE\" | translate}}</label>\r" +
	    "\n" +
	    "            <input type=\"text\"\r" +
	    "\n" +
	    "                   class=\"form-control\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.vehicleOfInterest.fuelType\"\r" +
	    "\n" +
	    "                   placeholder=\"{{::'crm.salesOpportunity.vehicleOfInterest.FUEL_TYPE' | translate}}\" name=\"fuelTypeField\">\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <!--<crm-manual-entry-vehicle-of-interest-dropdown\r" +
	    "\n" +
	    "                label-key=\"crm.salesOpportunity.vehicleOfInterest.TRANSMISSION_TYPE\"\r" +
	    "\n" +
	    "                model=\"ctrl.vehicleOfInterest\"\r" +
	    "\n" +
	    "                field=\"transmission\"\r" +
	    "\n" +
	    "                name=\"addEditVOITransmission\"\r" +
	    "\n" +
	    "                values=\"ctrl.filterSet.transmission\">\r" +
	    "\n" +
	    "        </crm-manual-entry-vehicle-of-interest-dropdown>-->\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label name=\"transmissionTypeFieldLabel\">{{::\"crm.salesOpportunity.vehicleOfInterest.TRANSMISSION_TYPE\" | translate}}</label>\r" +
	    "\n" +
	    "            <input type=\"text\"\r" +
	    "\n" +
	    "                   class=\"form-control\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.vehicleOfInterest.transmission\"\r" +
	    "\n" +
	    "                   placeholder=\"{{::'crm.salesOpportunity.vehicleOfInterest.TRANSMISSION_TYPE' | translate}}\" name=\"transmissionTypeField\">\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\"></div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\">\r" +
	    "\n" +
	    "            <header class=\"ws-panel-title\" name=\"preferredLimitsTitle\">{{::\"crm.salesOpportunity.vehicleOfInterest.CUSTOMER_PREFERRED_LIMITS\" | translate}}</header>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"row\">\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label name=\"maxPriceFieldLabel\">{{::\"crm.salesOpportunity.vehicleOfInterest.MAX_PRICE\" | translate}}</label>\r" +
	    "\n" +
	    "            ({{::\"crm.salesOpportunity.vehicleOfInterest.CURRENCY_UNIT\" | translate}})\r" +
	    "\n" +
	    "            <input type=\"text\"\r" +
	    "\n" +
	    "                   class=\"form-control\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.vehicleOfInterest.offeredPrice\"\r" +
	    "\n" +
	    "                   name=\"addEditVOIMaxPrice\"\r" +
	    "\n" +
	    "                   placeholder=\"0\"\r" +
	    "\n" +
	    "                   co-formatted-number-field decimal-places=\"2\" name=\"maxPriceField\">\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label name=\"maxOdometerFieldLabel\">{{::\"crm.salesOpportunity.vehicleOfInterest.MAX_ODOMETER\" | translate}}</label>\r" +
	    "\n" +
	    "            ({{::\"crm.salesOpportunity.vehicleOfInterest.DISTANCE_UNIT\" | translate}})\r" +
	    "\n" +
	    "            <input type=\"text\"\r" +
	    "\n" +
	    "                   class=\"form-control\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.vehicleOfInterest.odometer\"\r" +
	    "\n" +
	    "                   name=\"addEditVOIMaxOdometer\"\r" +
	    "\n" +
	    "                   placeholder=\"0\"\r" +
	    "\n" +
	    "                   co-formatted-number-field decimal-places=\"0\" name=\"maxOdometerField\">\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"col-md-3 col-sm-4 col-xs-6 form-group\">\r" +
	    "\n" +
	    "            <label name=\"maxDownPaymentFieldLabel\">{{::\"crm.salesOpportunity.vehicleOfInterest.MAX_DOWN_PAYMENT\" | translate}}</label>\r" +
	    "\n" +
	    "            ({{::\"crm.salesOpportunity.vehicleOfInterest.CURRENCY_UNIT\" | translate}})\r" +
	    "\n" +
	    "            <input type=\"text\"\r" +
	    "\n" +
	    "                   class=\"form-control\"\r" +
	    "\n" +
	    "                   ng-model=\"ctrl.vehicleOfInterest.deposit\"\r" +
	    "\n" +
	    "                   name=\"addEditVOIMaxDownPayment\"\r" +
	    "\n" +
	    "                   placeholder=\"0\"\r" +
	    "\n" +
	    "                   co-formatted-number-field decimal-places=\"2\" name=\"maxDownPaymentField\">\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div class=\"ws-panel-row\">\r" +
	    "\n" +
	    "        <div class=\"ws-panel-content-main\"></div>\r" +
	    "\n" +
	    "        <aside class=\"ws-panel-content-secondary\">\r" +
	    "\n" +
	    "            <div class=\"ws-panel-actions\">\r" +
	    "\n" +
	    "                <button class=\"btn btn-quaternary\" ng-click=\"ctrl.closeModal()\" name=\"cancelButton\">\r" +
	    "\n" +
	    "                    {{ ::\"crm.salesOpportunity.vehicleOfInterest.CANCEL\" | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "                <button class=\"btn btn-secondary\" ng-click=\"ctrl.save()\" name=\"saveButton\">\r" +
	    "\n" +
	    "                    {{ ::\"crm.salesOpportunity.vehicleOfInterest.SAVE\" | translate}}\r" +
	    "\n" +
	    "                </button>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </aside>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</section>"
	  );


	  $templateCache.put('app/workNote/addWorkNote/template.html',
	    "<div class=\"row\">\r" +
	    "\n" +
	    "    <div class=\"col-md-12\">\r" +
	    "\n" +
	    "        <div class=\"form-group\">\r" +
	    "\n" +
	    "            <textarea class=\"form-control\"\r" +
	    "\n" +
	    "                      rows=\"3\"\r" +
	    "\n" +
	    "                      placeholder=\"{{ ::'crm.workNote.add.ADD_NOTE' | translate}}\"\r" +
	    "\n" +
	    "                      name=\"addWorkNote\"\r" +
	    "\n" +
	    "                      ng-model=\"ctrl.workNote\">\r" +
	    "\n" +
	    "            </textarea>\r" +
	    "\n" +
	    "            </div>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n" +
	    "<div class=\"row\" ng-show=\"ctrl.displaySubmitButton()\">\r" +
	    "\n" +
	    "    <div class=\"col-md-12\">\r" +
	    "\n" +
	    "        <div class=\"form-group\">\r" +
	    "\n" +
	    "            <button class=\"btn btn-primary pull-right\"\r" +
	    "\n" +
	    "                    name=\"saveWorkNote\"\r" +
	    "\n" +
	    "                    ng-click=\"ctrl.saveWorkNote()\">\r" +
	    "\n" +
	    "                {{ ::'crm.workNote.add.SUBMIT' | translate}}\r" +
	    "\n" +
	    "            </button>\r" +
	    "\n" +
	    "            <br/>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</div>"
	  );


	  $templateCache.put('app/workNote/emailWorkNoteCard/template.html',
	    "<co-panel co-multi-transclusion ribbon=\"true\"\r" +
	    "\n" +
	    "          class=\"ds-card ds-card-hover-accent\"\r" +
	    "\n" +
	    "          status=\"complete\">\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-icon-badge size=\"lg\"\r" +
	    "\n" +
	    "                       status=\"complete\"\r" +
	    "\n" +
	    "                       bordered=\"true\"\r" +
	    "\n" +
	    "                       icon=\"fa-envelope-o\"></co-icon-badge>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\" name=\"emailSentTitle\">\r" +
	    "\n" +
	    "        <span class=\"ws-panel-title\">{{ ::\"crm.workNote.emailWorkNote.EMAIL_SENT\" | translate }}</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"subtitle\">\r" +
	    "\n" +
	    "        <div>\r" +
	    "\n" +
	    "            <span class=\"text-complete\" name=\"emailSentStatus\">{{ ::\"crm.workNote.emailWorkNote.COMPLETE\" | translate }}</span> /\r" +
	    "\n" +
	    "            <span name=\"emailSentBy\">\r" +
	    "\n" +
	    "                {{ctrl.workNote.fullName}}\r" +
	    "\n" +
	    "            </span>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "        <div class=\"ws-content-group\">\r" +
	    "\n" +
	    "            <span>{{ ::\"crm.workNote.emailWorkNote.SENT\" | translate }}</span> /\r" +
	    "\n" +
	    "            <co-checklist-item checked=\"ctrl.attachmentResult.hasAttachment\">\r" +
	    "\n" +
	    "                <span ng-if=\"ctrl.multipleAttachment\">\r" +
	    "\n" +
	    "                        {{ ::\"crm.workNote.emailWorkNote.ATTACHMENTS\" | translate }}{{ctrl.attachmentResult.attachmentCount}})\r" +
	    "\n" +
	    "                </span>\r" +
	    "\n" +
	    "                <span ng-if=\"!ctrl.multipleAttachment\" name=\"emailSentAttachments\">{{ ::\"crm.workNote.emailWorkNote.ATTACHMENT\" | translate }}</span>\r" +
	    "\n" +
	    "            </co-checklist-item>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <a ng-click=\"ctrl.viewEmail()\">\r" +
	    "\n" +
	    "            <strong>{{ ::\"crm.workNote.emailWorkNote.SUBJECT\" | translate }}</strong>\r" +
	    "\n" +
	    "            <span name=\"emailSentSubject\">{{ctrl.subject}}</span>\r" +
	    "\n" +
	    "        </a>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <div class=\"text-muted\">\r" +
	    "\n" +
	    "            <span name=\"emailSentDate\"><strong class=\"ds-card-date-text\">{{ctrl.displayDueDate()}}</strong></span>\r" +
	    "\n" +
	    "            <crm-display-event-type-and-event-id\r" +
	    "\n" +
	    "                    event-type=\"{{ctrl.eventType}}\"\r" +
	    "\n" +
	    "                    event-id=\"{{ctrl.eventId}}\">\r" +
	    "\n" +
	    "            </crm-display-event-type-and-event-id>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>\r" +
	    "\n"
	  );


	  $templateCache.put('app/workNote/workNoteCard/template.html',
	    "<co-panel co-multi-transclusion class=\"ds-card ds-no-card\">\r" +
	    "\n" +
	    "    <div transclude-to=\"media\">\r" +
	    "\n" +
	    "        <co-icon-badge icon=\"fa-pencil\" bordered=\"true\" status=\"inactive\"></co-icon-badge>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"title\">\r" +
	    "\n" +
	    "        <span name=\"workNoteTitle\">{{ ::ctrl.workNoteTitle }}</span>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"main\">\r" +
	    "\n" +
	    "        <div class=\"relative ws-content-group\"\r" +
	    "\n" +
	    "             name=\"activityViewWorkNoteArea\"\r" +
	    "\n" +
	    "             ng-click=\"ctrl.toggleExpand()\"\r" +
	    "\n" +
	    "             ng-class=\"{'ws-normal-cursor': !ctrl.canExpand}\">\r" +
	    "\n" +
	    "            <section class=\"ws-vertical-expander\"\r" +
	    "\n" +
	    "                     ng-class=\"{'ws-expanded': ctrl.expanded}\"\r" +
	    "\n" +
	    "                     ng-if=\"!ctrl.isViewForm()\">\r" +
	    "\n" +
	    "                <div class=\"ws-expand-section\" ng-bind-html=\"ctrl.getWorkNoteText()\" name=\"workNoteText\">\r" +
	    "\n" +
	    "                </div>\r" +
	    "\n" +
	    "                <a ng-if=\"::ctrl.canExpand\">\r" +
	    "\n" +
	    "                    <span ng-show=\"ctrl.expanded\"\r" +
	    "\n" +
	    "                          name=\"activityWorkNoteToggle\">{{::'crm.expander.SHOW_LESS' | translate}}</span>\r" +
	    "\n" +
	    "                    <span ng-hide=\"ctrl.expanded\"\r" +
	    "\n" +
	    "                          name=\"activityWorkNoteToggle\">{{::'crm.expander.SHOW_MORE' | translate}}</span>\r" +
	    "\n" +
	    "                </a>\r" +
	    "\n" +
	    "            </section>\r" +
	    "\n" +
	    "            <section ng-if=\"ctrl.isViewForm()\">\r" +
	    "\n" +
	    "                <span name=\"workNoteTitle\">{{ctrl.getFormName()}} </span>\r" +
	    "\n" +
	    "                <a ng-click=\"ctrl.viewClassicForm()\">{{::'crm.workNote.VIEW_FORM' | translate}}</a>\r" +
	    "\n" +
	    "            </section>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "    <div transclude-to=\"secondary\">\r" +
	    "\n" +
	    "        <div class=\"text-muted\">\r" +
	    "\n" +
	    "            <span name=\"workNoteDate\"><strong class=\"ds-card-date-text\">{{ctrl.displayDueDate()}}</strong></span>\r" +
	    "\n" +
	    "            <crm-display-event-type-and-event-id\r" +
	    "\n" +
	    "                    event-type=\"{{ctrl.eventType}}\"\r" +
	    "\n" +
	    "                    event-id=\"{{ctrl.eventId}}\">\r" +
	    "\n" +
	    "            </crm-display-event-type-and-event-id>\r" +
	    "\n" +
	    "        </div>\r" +
	    "\n" +
	    "    </div>\r" +
	    "\n" +
	    "</co-panel>\r" +
	    "\n"
	  );

	}]);


/***/ }
]);